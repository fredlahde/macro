// Code generated by github.com/worldiety/macro. DO NOT EDIT.

package domain

import (
	xcompo "example/domain/xcompo"
)

// A Component is a sum type or tagged union.
// Actually, we can generate different flavors, so that Go makes fun for modelling business stuff.
type Component struct {
	ordinal int
	value   any
}

func (e Component) Unwrap() any {
	return e.value
}

func (e Component) Valid() bool {
	return e.ordinal > 0
}

// Switch provides an exhaustive and type safe closure callback mechanic. Nil callbacks are allowed. Unmatched branches are delegated into a default case.
func (e Component) Switch(onButton func(Button), onTextField func(TextField), onRichText func(xcompo.RichText), onIcon func(xcompo.Icon), _onDefault func(any)) {
	switch e.ordinal {
	case 1:
		if onButton != nil {
			onButton(e.value.(Button))
			return
		}
	case 2:
		if onTextField != nil {
			onTextField(e.value.(TextField))
			return
		}
	case 3:
		if onRichText != nil {
			onRichText(e.value.(xcompo.RichText))
			return
		}
	case 4:
		if onIcon != nil {
			onIcon(e.value.(xcompo.Icon))
			return
		}
	}

	if _onDefault != nil {
		_onDefault(e.value)
	}
}

func (e Component) AsButton() (Button, bool) {
	var zero Button
	if e.ordinal == 1 {
		return e.value.(Button), true
	}

	return zero, false
}

func (e Component) WithButton(v Button) Component {
	e.ordinal = 1
	e.value = v
	return e
}

func (e Component) AsTextField() (TextField, bool) {
	var zero TextField
	if e.ordinal == 2 {
		return e.value.(TextField), true
	}

	return zero, false
}

func (e Component) WithTextField(v TextField) Component {
	e.ordinal = 2
	e.value = v
	return e
}

func (e Component) AsRichText() (xcompo.RichText, bool) {
	var zero xcompo.RichText
	if e.ordinal == 3 {
		return e.value.(xcompo.RichText), true
	}

	return zero, false
}

func (e Component) WithRichText(v xcompo.RichText) Component {
	e.ordinal = 3
	e.value = v
	return e
}

func (e Component) AsIcon() (xcompo.Icon, bool) {
	var zero xcompo.Icon
	if e.ordinal == 4 {
		return e.value.(xcompo.Icon), true
	}

	return zero, false
}

func (e Component) WithIcon(v xcompo.Icon) Component {
	e.ordinal = 4
	e.value = v
	return e
}
