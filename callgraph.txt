"(*sync.Pool).Get" "internal/race.Disable"
"(*sync.Pool).pin" "sync.runtime_procPin"
"(*sync.Pool).pin" "sync.runtime_LoadAcquintptr"
"(*sync.Pool).pin" "sync.indexLocal"
"(*sync.Pool).pinSlow" "sync.runtime_procUnpin"
"(*sync.Mutex).Lock" "sync/atomic.CompareAndSwapInt32"
"(*sync.Mutex).lockSlow" "sync.runtime_canSpin"
"(*sync.Mutex).lockSlow" "sync.runtime_doSpin"
"(*sync.Mutex).lockSlow" "sync/atomic.CompareAndSwapInt32"
"(*sync.Mutex).lockSlow" "sync/atomic.CompareAndSwapInt32"
"(*sync.Mutex).lockSlow" "sync.throw"
"(*sync.Mutex).lockSlow" "sync.runtime_nanotime"
"(*sync.Mutex).lockSlow" "sync.runtime_SemacquireMutex"
"(*sync.Mutex).lockSlow" "sync.runtime_nanotime"
"(*sync.Mutex).lockSlow" "sync.throw"
"(*sync.Mutex).lockSlow" "sync/atomic.AddInt32"
"(*sync.Mutex).lockSlow" "internal/race.Acquire"
"(*sync.Mutex).Lock" "(*sync.Mutex).lockSlow"
"(*sync.Mutex).Lock" "internal/race.Acquire"
"(*sync.Pool).pinSlow" "(*sync.Mutex).Lock"
"(*sync.Mutex).Unlock" "internal/race.Release"
"(*sync.Mutex).Unlock" "sync/atomic.AddInt32"
"(*sync.Mutex).unlockSlow" "sync.fatal"
"(*sync.Mutex).unlockSlow" "sync.runtime_Semrelease"
"(*sync.Mutex).unlockSlow" "sync/atomic.CompareAndSwapInt32"
"(*sync.Mutex).unlockSlow" "sync.runtime_Semrelease"
"(*sync.Mutex).Unlock" "(*sync.Mutex).unlockSlow"
"(*sync.Pool).pinSlow" "(*sync.Mutex).Unlock"
"(*sync.Pool).pinSlow" "sync.runtime_procPin"
"(*sync.Pool).pinSlow" "sync.indexLocal"
"runtime.lock" "runtime.getLockRank"
"runtime.lock2" "runtime.getg"
"runtime.throw" "runtime.systemstack"
"runtime.fatalthrow" "runtime.getcallerpc"
"runtime.fatalthrow" "runtime.getcallersp"
"runtime.fatalthrow" "runtime.getg"
"runtime.fatalthrow" "runtime.systemstack"
"runtime.throw" "runtime.fatalthrow"
"runtime.lock2" "runtime.throw"
"runtime.lock2" "runtime/internal/atomic.Casuintptr"
"runtime.pthread_mutex_init" "internal/abi.FuncPCABI0"
"runtime.libcCall" "runtime.getg"
"runtime.libcCall" "(*runtime.guintptr).set"
"runtime.libcCall" "runtime.getcallerpc"
"runtime.libcCall" "runtime.getcallersp"
"runtime.libcCall" "runtime.asmcgocall"
"runtime.pthread_mutex_init" "runtime.libcCall"
"runtime.pthread_mutex_init" "runtime.KeepAlive"
"runtime.pthread_mutex_init" "runtime.KeepAlive"
"runtime.semacreate" "runtime.pthread_mutex_init"
"runtime.semacreate" "runtime.throw"
"runtime.pthread_cond_init" "internal/abi.FuncPCABI0"
"runtime.pthread_cond_init" "runtime.libcCall"
"runtime.pthread_cond_init" "runtime.KeepAlive"
"runtime.pthread_cond_init" "runtime.KeepAlive"
"runtime.semacreate" "runtime.pthread_cond_init"
"runtime.semacreate" "runtime.throw"
"runtime.lock2" "runtime.semacreate"
"(*runtime.lockTimer).begin" "runtime/internal/atomic.Load64"
"runtime.cheaprand" "runtime.getg"
"runtime.cheaprand" "runtime/internal/math.Mul64"
"(*runtime.lockTimer).begin" "runtime.cheaprand"
"runtime.nanotime1" "internal/abi.FuncPCABI0"
"runtime.nanotime1" "runtime.libcCall"
"runtime.nanotime" "runtime.nanotime1"
"(*runtime.lockTimer).begin" "runtime.nanotime"
"runtime.cputicks" "runtime.nanotime"
"(*runtime.lockTimer).begin" "runtime.cputicks"
"(*runtime.lockTimer).begin" "runtime.cheaprand"
"runtime.lock2" "(*runtime.lockTimer).begin"
"runtime.lock2" "runtime/internal/atomic.Loaduintptr"
"runtime.lock2" "runtime/internal/atomic.Casuintptr"
"(*runtime.lockTimer).end" "runtime.getg"
"(*runtime.lockTimer).end" "runtime.nanotime"
"(*runtime/internal/atomic.Int64).Add" "runtime/internal/atomic.Xaddint64"
"(*runtime.lockTimer).end" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.lockTimer).end" "runtime.cputicks"
"runtime.cheaprand64" "runtime.cheaprand"
"runtime.cheaprand64" "runtime.cheaprand"
"(*runtime.mLockProfile).recordLock" "runtime.cheaprand64"
"(*runtime.mLockProfile).recordLock" "runtime.cheaprand64"
"(*runtime.lockTimer).end" "(*runtime.mLockProfile).recordLock"
"runtime.lock2" "(*runtime.lockTimer).end"
"runtime.lock2" "runtime.procyield"
"runtime.usleep" "internal/abi.FuncPCABI0"
"runtime.usleep" "runtime.libcCall"
"runtime.osyield" "runtime.usleep"
"runtime.lock2" "runtime.osyield"
"runtime.lock2" "runtime/internal/atomic.Casuintptr"
"runtime.lock2" "runtime/internal/atomic.Loaduintptr"
"runtime.semasleep" "runtime.nanotime"
"runtime.semasleep" "runtime.getg"
"runtime.semasleep" "runtime.throw"
"runtime.pthread_mutex_lock" "internal/abi.FuncPCABI0"
"runtime.pthread_mutex_lock" "runtime.libcCall"
"runtime.pthread_mutex_lock" "runtime.KeepAlive"
"runtime.semasleep" "runtime.pthread_mutex_lock"
"runtime.pthread_mutex_unlock" "internal/abi.FuncPCABI0"
"runtime.pthread_mutex_unlock" "runtime.libcCall"
"runtime.pthread_mutex_unlock" "runtime.KeepAlive"
"runtime.semasleep" "runtime.pthread_mutex_unlock"
"runtime.semasleep" "runtime.nanotime"
"runtime.pthread_cond_wait" "internal/abi.FuncPCABI0"
"runtime.pthread_cond_wait" "runtime.libcCall"
"runtime.pthread_cond_wait" "runtime.KeepAlive"
"runtime.pthread_cond_wait" "runtime.KeepAlive"
"runtime.semasleep" "runtime.pthread_cond_wait"
"runtime.semasleep" "runtime.pthread_mutex_unlock"
"runtime.semasleep" "(*runtime.timespec).setNsec"
"runtime.pthread_cond_timedwait_relative_np" "internal/abi.FuncPCABI0"
"runtime.pthread_cond_timedwait_relative_np" "runtime.libcCall"
"runtime.pthread_cond_timedwait_relative_np" "runtime.KeepAlive"
"runtime.pthread_cond_timedwait_relative_np" "runtime.KeepAlive"
"runtime.pthread_cond_timedwait_relative_np" "runtime.KeepAlive"
"runtime.semasleep" "runtime.pthread_cond_timedwait_relative_np"
"runtime.semasleep" "runtime.pthread_mutex_unlock"
"runtime.lock2" "runtime.semasleep"
"runtime.lockWithRank" "runtime.lock2"
"runtime.lock" "runtime.lockWithRank"
"runtime.GOMAXPROCS" "runtime.lock"
"runtime.unlock2" "runtime.getg"
"runtime.unlock2" "runtime/internal/atomic.Loaduintptr"
"(*runtime/internal/atomic.Int32).Load" "runtime/internal/atomic.Loadint32"
"(*runtime.mLockProfile).captureStack" "(*runtime/internal/atomic.Int32).Load"
"(*runtime.mLockProfile).captureStack" "internal/abi.FuncPCABIInternal"
"(*runtime.mLockProfile).captureStack" "runtime.getg"
"(*runtime.mLockProfile).captureStack" "runtime.getcallersp"
"(*runtime.mLockProfile).captureStack" "runtime.getcallerpc"
"(*runtime.mLockProfile).captureStack" "runtime.systemstack"
"(*runtime.mLockProfile).recordUnlock" "(*runtime.mLockProfile).captureStack"
"(*runtime.mLockProfile).recordUnlock" "runtime.getg"
"runtime.acquirem" "runtime.getg"
"(*runtime.mLockProfile).store" "runtime.acquirem"
"(*runtime.mLockProfile).store" "runtime/internal/atomic.Load64"
"(*runtime/internal/atomic.UnsafePointer).Load" "runtime/internal/atomic.Loadp"
"runtime.stkbucket" "(*runtime/internal/atomic.UnsafePointer).Load"
"runtime.stkbucket" "runtime.lock"
"runtime.stkbucket" "(*runtime/internal/atomic.UnsafePointer).Load"
"(*runtime.sysMemStat).add" "runtime/internal/atomic.Xadd64"
"(*runtime.sysMemStat).add" "runtime.throw"
"runtime.sysAlloc" "(*runtime.sysMemStat).add"
"(*runtime/internal/atomic.Uint64).Add" "runtime/internal/atomic.Xadd64"
"runtime.sysAlloc" "(*runtime/internal/atomic.Uint64).Add"
"runtime.mmap" "internal/abi.FuncPCABI0"
"runtime.mmap" "runtime.libcCall"
"runtime.sysAllocOS" "runtime.mmap"
"runtime.sysAlloc" "runtime.sysAllocOS"
"runtime.stkbucket" "runtime.sysAlloc"
"runtime.stkbucket" "runtime.unlock"
"runtime.stkbucket" "runtime.throw"
"(*runtime/internal/atomic.UnsafePointer).StoreNoWB" "runtime/internal/atomic.StorepNoWB"
"runtime.stkbucket" "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
"runtime.stkbucket" "(*runtime/internal/atomic.UnsafePointer).Load"
"(*runtime.bucket).stk" "runtime.add"
"(*runtime.bucket).stk" "runtime.throw"
"runtime.stkbucket" "(*runtime.bucket).stk"
"runtime.stkbucket" "runtime.eqslice"
"runtime.stkbucket" "runtime.lock"
"runtime.stkbucket" "(*runtime/internal/atomic.UnsafePointer).Load"
"runtime.persistentalloc" "runtime.systemstack"
"runtime.newBucket" "runtime.persistentalloc"
"runtime.newBucket" "runtime.throw"
"runtime.stkbucket" "runtime.newBucket"
"runtime.stkbucket" "(*runtime.bucket).stk"
"runtime.stkbucket" "runtime.unlock"
"runtime.stkbucket" "(*runtime.bucket).stk"
"runtime.stkbucket" "runtime.eqslice"
"runtime.stkbucket" "(*runtime/internal/atomic.UnsafePointer).Load"
"runtime.stkbucket" "(*runtime/internal/atomic.UnsafePointer).Load"
"runtime.stkbucket" "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
"runtime.stkbucket" "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
"runtime.stkbucket" "runtime.unlock"
"runtime.saveBlockEventStack" "runtime.stkbucket"
"(*runtime.bucket).bp" "runtime.throw"
"(*runtime.bucket).bp" "runtime.add"
"runtime.saveBlockEventStack" "(*runtime.bucket).bp"
"runtime.saveBlockEventStack" "runtime.lock"
"runtime.saveBlockEventStack" "runtime.unlock"
"(*runtime.mLockProfile).store" "runtime.saveBlockEventStack"
"(*runtime.mLockProfile).store" "internal/abi.FuncPCABIInternal"
"(*runtime.mLockProfile).store" "runtime.saveBlockEventStack"
"runtime.releasem" "runtime.getg"
"(*runtime.mLockProfile).store" "runtime.releasem"
"(*runtime.mLockProfile).recordUnlock" "(*runtime.mLockProfile).store"
"runtime.unlock2" "(*runtime.mLockProfile).recordUnlock"
"runtime.unlock2" "runtime/internal/atomic.Casuintptr"
"runtime.unlock2" "(runtime.muintptr).ptr"
"runtime.unlock2" "runtime/internal/atomic.Casuintptr"
"runtime.semawakeup" "runtime.getg"
"runtime.semawakeup" "runtime.throw"
"runtime.semawakeup" "runtime.pthread_mutex_lock"
"runtime.pthread_cond_signal" "internal/abi.FuncPCABI0"
"runtime.pthread_cond_signal" "runtime.libcCall"
"runtime.pthread_cond_signal" "runtime.KeepAlive"
"runtime.semawakeup" "runtime.pthread_cond_signal"
"runtime.semawakeup" "runtime.pthread_mutex_unlock"
"runtime.unlock2" "runtime.semawakeup"
"runtime.unlock2" "runtime.throw"
"runtime.unlockWithRank" "runtime.unlock2"
"runtime.unlock" "runtime.unlockWithRank"
"runtime.GOMAXPROCS" "runtime.unlock"
"runtime.semacquire1" "runtime.getg"
"runtime.semacquire1" "runtime.throw"
"runtime.cansemacquire" "runtime/internal/atomic.Load"
"runtime.cansemacquire" "runtime/internal/atomic.Cas"
"runtime.semacquire1" "runtime.cansemacquire"
"runtime.acquireSudog" "runtime.acquirem"
"runtime.acquireSudog" "(runtime.puintptr).ptr"
"runtime.acquireSudog" "runtime.lock"
"runtime.acquireSudog" "runtime.unlock"
"runtime.acquireSudog" "runtime.throw"
"runtime.acquireSudog" "runtime.releasem"
"runtime.semacquire1" "runtime.acquireSudog"
"runtime.semacquire1" "(*runtime.semTable).rootFor"
"runtime.semacquire1" "runtime.cputicks"
"runtime.semacquire1" "runtime.cputicks"
"runtime.semacquire1" "runtime.lockWithRank"
"(*runtime/internal/atomic.Uint32).Add" "runtime/internal/atomic.Xadd"
"runtime.semacquire1" "(*runtime/internal/atomic.Uint32).Add"
"runtime.semacquire1" "runtime.cansemacquire"
"runtime.semacquire1" "(*runtime/internal/atomic.Uint32).Add"
"runtime.semacquire1" "runtime.unlock"
"(*runtime.semaRoot).queue" "runtime.getg"
"(*runtime.semaRoot).queue" "runtime.cheaprand"
"(*runtime.semaRoot).rotateRight" "runtime.throw"
"(*runtime.semaRoot).queue" "(*runtime.semaRoot).rotateRight"
"(*runtime.semaRoot).rotateLeft" "runtime.throw"
"(*runtime.semaRoot).queue" "(*runtime.semaRoot).rotateLeft"
"runtime.semacquire1" "(*runtime.semaRoot).queue"
"runtime.gopark" "runtime.checkTimeouts"
"runtime.gopark" "runtime.acquirem"
"(*runtime/internal/atomic.Uint32).Load" "runtime/internal/atomic.Load"
"runtime.readgstatus" "(*runtime/internal/atomic.Uint32).Load"
"runtime.gopark" "runtime.readgstatus"
"runtime.gopark" "runtime.throw"
"runtime.gopark" "runtime.releasem"
"runtime.gopark" "runtime.mcall"
"runtime.goparkunlock" "runtime.gopark"
"runtime.semacquire1" "runtime.goparkunlock"
"runtime.semacquire1" "runtime.cansemacquire"
"runtime.blockevent" "runtime/internal/atomic.Load64"
"runtime.blocksampled" "runtime.cheaprand64"
"runtime.blockevent" "runtime.blocksampled"
"runtime.saveblockevent" "runtime.getg"
"runtime.callers" "runtime.getcallersp"
"runtime.callers" "runtime.getcallerpc"
"runtime.callers" "runtime.getg"
"runtime.callers" "runtime.systemstack"
"runtime.saveblockevent" "runtime.callers"
"runtime.saveblockevent" "runtime.saveBlockEventStack"
"(*runtime.unwinder).initAt" "runtime.getg"
"(*runtime.unwinder).initAt" "runtime.throw"
"runtime.findfunc" "runtime.findmoduledatap"
"runtime.findfunc" "(*runtime.moduledata).textOff"
"runtime.findfunc" "runtime.add"
"(*runtime.unwinder).initAt" "runtime.findfunc"
"(*runtime.unwinder).initAt" "(runtime.funcInfo).valid"
"(*runtime.unwinder).initAt" "(*runtime.g).guintptr"
"runtime.printlock" "runtime.getg"
"runtime.printlock" "runtime.lock"
"runtime.hexdumpWords" "runtime.printlock"
"runtime.printunlock" "runtime.getg"
"runtime.printunlock" "runtime.unlock"
"runtime.hexdumpWords" "runtime.printunlock"
"runtime.hexdumpWords" "runtime.tracebackHexdump$1"
"runtime.recordForPanic" "runtime.printlock"
"runtime.recordForPanic" "(*runtime/internal/atomic.Uint32).Load"
"runtime.recordForPanic" "runtime.printunlock"
"runtime.gwrite" "runtime.recordForPanic"
"runtime.gwrite" "runtime.getg"
"runtime.write" "runtime.noescape"
"runtime.write1" "internal/abi.FuncPCABI0"
"runtime.write1" "runtime.libcCall"
"runtime.write1" "runtime.KeepAlive"
"runtime.write" "runtime.write1"
"runtime.writeErr" "runtime.write"
"runtime.gwrite" "runtime.writeErr"
"runtime.hexdumpWords" "runtime.gwrite"
"runtime.hexdumpWords" "runtime.findfunc"
"runtime.hexdumpWords" "(runtime.funcInfo).valid"
"runtime.funcname" "(runtime.funcInfo).valid"
"runtime.findnull" "internal/bytealg.IndexByteString"
"runtime.gostringnocopy" "runtime.findnull"
"(*runtime.moduledata).funcName" "runtime.gostringnocopy"
"runtime.funcname" "(*runtime.moduledata).funcName"
"runtime.hexdumpWords" "runtime.funcname"
"(*runtime.moduledata).textAddr" "runtime.throw"
"(runtime.funcInfo).entry" "(*runtime.moduledata).textAddr"
"runtime.hexdumpWords" "(runtime.funcInfo).entry"
"runtime.scanConservative$1" "runtime.addb"
"runtime.spanOf" "runtime.arenaIndex"
"runtime.spanOf" "(runtime.arenaIdx).l2"
"runtime.spanOf" "(runtime.arenaIdx).l1"
"runtime.spanOf" "(runtime.arenaIdx).l1"
"runtime.spanOf" "(runtime.arenaIdx).l2"
"runtime.spanOfHeap" "runtime.spanOf"
"runtime.spanOfHeap" "(*runtime.mspan).base"
"(*runtime/internal/atomic.Uint8).Load" "runtime/internal/atomic.Load8"
"(*runtime.mSpanStateBox).get" "(*runtime/internal/atomic.Uint8).Load"
"runtime.spanOfHeap" "(*runtime.mSpanStateBox).get"
"runtime.scanConservative$1" "runtime.spanOfHeap"
"(*runtime.mspan).objIndex" "(*runtime.mspan).base"
"(*runtime.mspan).divideByElemSize" "runtime.throw"
"(*runtime.mspan).objIndex" "(*runtime.mspan).divideByElemSize"
"runtime.scanConservative$1" "(*runtime.mspan).objIndex"
"(*runtime.gcBits).bytep" "runtime.addb"
"(*runtime.gcBits).bitp" "(*runtime.gcBits).bytep"
"(*runtime.mspan).isFree" "(*runtime.gcBits).bitp"
"runtime.scanConservative$1" "(*runtime.mspan).isFree"
"runtime.hexdumpWords" "runtime.scanConservative$1"
"runtime.tracebackHexdump" "runtime.hexdumpWords"
"(*runtime.unwinder).initAt" "runtime.tracebackHexdump"
"(*runtime.unwinder).initAt" "runtime.throw"
"(*runtime.unwinder).resolveInternal" "(runtime.guintptr).ptr"
"(*runtime.unwinder).finishInternal" "(runtime.guintptr).ptr"
"(*runtime.unwinder).finishInternal" "runtime.throw"
"(*runtime.unwinder).resolveInternal" "(*runtime.unwinder).finishInternal"
"runtime.pcvalue" "runtime.pcvalueCacheKey"
"runtime.pcvalue" "runtime.acquirem"
"runtime.pcvalue" "runtime.releasem"
"runtime.pcvalue" "(runtime.funcInfo).valid"
"runtime.pcvalue" "runtime.releasem"
"runtime.pcvalue" "runtime.throw"
"runtime.pcvalue" "(runtime.funcInfo).entry"
"runtime.pcvalue" "(runtime.funcInfo).entry"
"runtime.pcvalue" "runtime.throw"
"runtime.pcvalue" "(*runtime/internal/atomic.Uint32).Load"
"runtime.pcvalue" "(runtime.funcInfo).entry"
"runtime.step" "runtime.readvarint"
"runtime.step" "runtime.readvarint"
"runtime.pcvalue" "runtime.step"
"runtime.pcvalue" "(*runtime/internal/atomic.Uint32).Load"
"runtime.pcvalue" "runtime.acquirem"
"runtime.pcvalue" "runtime.throw"
"runtime.cheaprandn" "runtime.cheaprand"
"runtime.pcvalue" "runtime.cheaprandn"
"runtime.pcvalue" "runtime.releasem"
"runtime.pcvalue" "runtime.funcname"
"runtime.pcvalue" "(runtime.funcInfo).entry"
"runtime.pcvalue" "(runtime.funcInfo).entry"
"runtime.pcvalue" "runtime.step"
"runtime.pcvalue" "runtime.throw"
"runtime.funcspdelta" "runtime.pcvalue"
"runtime.funcspdelta" "runtime.funcname"
"runtime.funcspdelta" "(runtime.funcInfo).entry"
"runtime.funcspdelta" "runtime.throw"
"(*runtime.unwinder).resolveInternal" "runtime.funcspdelta"
"(*runtime.unwinder).resolveInternal" "(*runtime.guintptr).set"
"(*runtime.unwinder).resolveInternal" "runtime.findfunc"
"(*runtime.unwinder).resolveInternal" "(*runtime.guintptr).set"
"(*runtime.unwinder).resolveInternal" "runtime.funcspdelta"
"(*runtime.unwinder).resolveInternal" "runtime.funcname"
"(*runtime.unwinder).resolveInternal" "runtime.throw"
"(*runtime.unwinder).resolveInternal" "(runtime.funcInfo).entry"
"(*runtime.unwinder).initAt" "(*runtime.unwinder).resolveInternal"
"(*runtime.unwinder).init" "(*runtime.unwinder).initAt"
"runtime.gcallers" "(*runtime.unwinder).init"
"(*runtime.unwinder).cgoCallers" "(runtime.guintptr).ptr"
"runtime.cgoContextPCs" "(*runtime/internal/atomic.Uint32).Load"
"runtime.cgoContextPCs" "runtime.noescape"
"runtime.cgoContextPCs" "runtime.getg"
"runtime.cgoContextPCs" "runtime.getg"
"runtime.msanwrite" "runtime.throw"
"runtime.cgoContextPCs" "runtime.msanwrite"
"runtime.asanwrite" "runtime.throw"
"runtime.cgoContextPCs" "runtime.asanwrite"
"runtime.cgoContextPCs" "runtime.noescape"
"runtime.cgoContextPCs" "runtime.asmcgocall"
"runtime.cgocall" "runtime.throw"
"runtime.cgocall" "runtime.throw"
"runtime.racereleasemerge" "runtime.throw"
"runtime.cgocall" "runtime.racereleasemerge"
"runtime.cgocall" "runtime.getg"
"runtime.entersyscall" "runtime.getcallerpc"
"runtime.entersyscall" "runtime.getcallersp"
"(*runtime/internal/atomic.Uintptr).Load" "runtime/internal/atomic.Loaduintptr"
"runtime.traceEnabled" "(*runtime/internal/atomic.Uintptr).Load"
"runtime.traceAcquire" "runtime.traceEnabled"
"runtime.lockRankMayTraceFlush" "runtime.getLockRank"
"runtime.lockRankMayTraceFlush" "runtime.lockWithRankMayAcquire"
"runtime.traceAcquireEnabled" "runtime.lockRankMayTraceFlush"
"runtime.traceAcquireEnabled" "runtime.acquirem"
"(*runtime/internal/atomic.Uintptr).Add" "runtime/internal/atomic.Xadduintptr"
"runtime.traceAcquireEnabled" "(*runtime/internal/atomic.Uintptr).Add"
"runtime.traceAcquireEnabled" "runtime.throw"
"runtime.traceAcquireEnabled" "(*runtime/internal/atomic.Uintptr).Load"
"runtime.traceAcquireEnabled" "(*runtime/internal/atomic.Uintptr).Add"
"runtime.traceAcquireEnabled" "runtime.releasem"
"runtime.traceAcquire" "runtime.traceAcquireEnabled"
"runtime.reentersyscall" "runtime.traceAcquire"
"runtime.reentersyscall" "runtime.getg"
"runtime.save" "runtime.getg"
"runtime.save" "runtime.throw"
"runtime.badctxt" "runtime.throw"
"runtime.save" "runtime.badctxt"
"runtime.reentersyscall" "runtime.save"
"runtime.casgstatus" "runtime.systemstack"
"runtime.casgstatus" "runtime.acquireLockRank"
"runtime.casgstatus" "runtime.releaseLockRank"
"(*runtime/internal/atomic.Uint32).CompareAndSwap" "runtime/internal/atomic.Cas"
"runtime.casgstatus" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.casgstatus" "runtime.throw"
"runtime.casgstatus" "(*runtime/internal/atomic.Uint32).Load"
"runtime.casgstatus" "runtime.nanotime"
"runtime.casgstatus" "runtime.nanotime"
"runtime.casgstatus" "runtime.osyield"
"runtime.casgstatus" "runtime.nanotime"
"runtime.casgstatus" "runtime.procyield"
"runtime.casgstatus" "(*runtime/internal/atomic.Uint32).Load"
"runtime.casgstatus" "runtime.nanotime"
"runtime.casgstatus" "(runtime.waitReason).isMutexWait"
"runtime.casgstatus" "runtime.nanotime"
"runtime.casgstatus" "(*runtime/internal/atomic.Int64).Add"
"runtime.casgstatus" "(runtime.waitReason).isMutexWait"
"runtime.casgstatus" "runtime.nanotime"
"runtime.casgstatus" "runtime.nanotime"
"(*runtime.timeHistogram).record" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.timeHistogram).record" "runtime/internal/sys.Len64"
"(*runtime.timeHistogram).record" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.timeHistogram).record" "(*runtime/internal/atomic.Uint64).Add"
"runtime.casgstatus" "(*runtime.timeHistogram).record"
"runtime.reentersyscall" "runtime.casgstatus"
"runtime.reentersyscall" "runtime.save"
"runtime.reentersyscall" "runtime.systemstack"
"runtime.reentersyscall" "(runtime.traceLocker).ok"
"runtime.reentersyscall" "runtime.systemstack"
"runtime.reentersyscall" "runtime.save"
"(*runtime/internal/atomic.Bool).Load" "(*runtime/internal/atomic.Uint8).Load"
"runtime.reentersyscall" "(*runtime/internal/atomic.Bool).Load"
"runtime.reentersyscall" "runtime.systemstack"
"runtime.reentersyscall" "runtime.save"
"runtime.reentersyscall" "(runtime.puintptr).ptr"
"runtime.reentersyscall" "runtime.systemstack"
"runtime.reentersyscall" "runtime.save"
"runtime.reentersyscall" "(runtime.puintptr).ptr"
"runtime.reentersyscall" "(runtime.puintptr).ptr"
"runtime.reentersyscall" "(*runtime.puintptr).set"
"runtime.reentersyscall" "runtime/internal/atomic.Store"
"runtime.reentersyscall" "(*runtime/internal/atomic.Bool).Load"
"runtime.reentersyscall" "runtime.systemstack"
"runtime.reentersyscall" "runtime.save"
"runtime.entersyscall" "runtime.reentersyscall"
"runtime.cgocall" "runtime.entersyscall"
"runtime.cgocall" "runtime.osPreemptExtEnter"
"runtime.cgocall" "runtime.asmcgocall"
"runtime.cgocall" "runtime.osPreemptExtExit"
"runtime.exitsyscall" "runtime.getg"
"runtime.exitsyscall" "runtime.getcallersp"
"runtime.exitsyscall" "runtime.throw"
"runtime.exitsyscall" "(runtime.puintptr).ptr"
"runtime.exitsyscallfast" "runtime.getg"
"runtime.exitsyscallfast" "runtime.traceAcquire"
"runtime.wirep" "runtime.getg"
"runtime.wirep" "runtime.systemstack"
"runtime.wirep" "runtime.systemstack"
"runtime.wirep" "(*runtime.puintptr).set"
"runtime.wirep" "(*runtime.muintptr).set"
"runtime.exitsyscallfast" "runtime.wirep"
"runtime.exitsyscallfast_reacquired" "runtime.getg"
"runtime.exitsyscallfast_reacquired" "(runtime.puintptr).ptr"
"runtime.exitsyscallfast_reacquired" "(runtime.traceLocker).ok"
"runtime.exitsyscallfast_reacquired" "runtime.systemstack"
"runtime.exitsyscallfast_reacquired" "(runtime.puintptr).ptr"
"runtime.exitsyscallfast" "runtime.exitsyscallfast_reacquired"
"runtime.exitsyscallfast" "(runtime.traceLocker).ok"
"runtime.exitsyscallfast" "(runtime.traceLocker).ok"
"runtime.exitsyscallfast" "runtime/internal/atomic.Cas"
"runtime.traceRelease" "(*runtime/internal/atomic.Uintptr).Add"
"runtime.traceRelease" "runtime.throw"
"runtime.traceRelease" "runtime.releasem"
"runtime.exitsyscallfast" "runtime.traceRelease"
"runtime.exitsyscallfast" "runtime.traceRelease"
"runtime.exitsyscallfast" "runtime.systemstack"
"runtime.exitsyscall" "runtime.exitsyscallfast"
"runtime.exitsyscall" "runtime.systemstack"
"runtime.exitsyscall" "runtime.traceAcquire"
"runtime.exitsyscall" "(runtime.traceLocker).ok"
"runtime.exitsyscall" "(runtime.puintptr).ptr"
"runtime.exitsyscall" "(runtime.puintptr).ptr"
"runtime.exitsyscall" "runtime.casgstatus"
"runtime.exitsyscall" "(runtime.traceLocker).ok"
"runtime.exitsyscall" "(runtime.puintptr).ptr"
"runtime.exitsyscall" "runtime.systemstack"
"runtime.exitsyscall" "runtime.traceRelease"
"runtime.Gosched" "runtime.checkTimeouts"
"runtime.Gosched" "runtime.mcall"
"runtime.exitsyscall" "runtime.Gosched"
"runtime.schedEnabled" "runtime.assertLockHeld"
"runtime.isSystemGoroutine" "runtime.findfunc"
"runtime.isSystemGoroutine" "(runtime.funcInfo).valid"
"runtime.isSystemGoroutine" "runtime.funcname"
"runtime.isSystemGoroutine" "runtime.hasPrefix"
"runtime.isSystemGoroutine" "(*runtime/internal/atomic.Uint32).Load"
"runtime.schedEnabled" "runtime.isSystemGoroutine"
"runtime.exitsyscall" "runtime.schedEnabled"
"runtime.exitsyscall" "runtime.traceAcquire"
"runtime.exitsyscall" "(runtime.traceLocker).ok"
"runtime.exitsyscall" "runtime.mcall"
"runtime.exitsyscall" "(runtime.puintptr).ptr"
"runtime.exitsyscall" "(runtime.traceLocker).RecordSyscallExitedTime"
"runtime.exitsyscall" "runtime.traceRelease"
"runtime.cgocall" "runtime.exitsyscall"
"runtime.raceacquire" "runtime.throw"
"runtime.cgocall" "runtime.raceacquire"
"runtime.cgocall" "runtime.KeepAlive"
"runtime.cgocall" "runtime.KeepAlive"
"runtime.cgocall" "runtime.KeepAlive"
"runtime.cgoContextPCs" "runtime.cgocall"
"(*runtime.unwinder).cgoCallers" "runtime.cgoContextPCs"
"runtime.tracebackPCs" "(*runtime.unwinder).cgoCallers"
"(*runtime.unwinder).symPC" "(runtime.funcInfo).entry"
"runtime.tracebackPCs" "(*runtime.unwinder).symPC"
"runtime.newInlineUnwinder" "runtime.funcdata"
"runtime.pcdatastart" "runtime.add"
"runtime.pcdatavalue1" "runtime.pcdatastart"
"runtime.pcdatavalue1" "runtime.pcvalue"
"(*runtime.inlineUnwinder).resolveInternal" "runtime.pcdatavalue1"
"runtime.newInlineUnwinder" "(*runtime.inlineUnwinder).resolveInternal"
"runtime.tracebackPCs" "runtime.newInlineUnwinder"
"runtime.tracebackPCs" "(*runtime.unwinder).valid"
"(runtime.funcInfo).srcFunc" "(runtime.funcInfo).valid"
"(*runtime.inlineUnwinder).srcFunc" "(runtime.funcInfo).srcFunc"
"runtime.tracebackPCs" "(*runtime.inlineUnwinder).srcFunc"
"runtime.tracebackPCs" "(runtime.inlineFrame).valid"
"(*runtime.inlineUnwinder).next" "(runtime.funcInfo).entry"
"(*runtime.inlineUnwinder).next" "(*runtime.inlineUnwinder).resolveInternal"
"runtime.tracebackPCs" "(*runtime.inlineUnwinder).next"
"runtime.tracebackPCs" "runtime.elideWrapperCalling"
"(*runtime.unwinder).next" "(runtime.guintptr).ptr"
"(*runtime.unwinder).next" "(*runtime.unwinder).finishInternal"
"(*runtime.unwinder).next" "runtime.findfunc"
"(*runtime.unwinder).next" "(runtime.funcInfo).valid"
"(*runtime.unwinder).next" "runtime.funcname"
"(*runtime.unwinder).next" "runtime.tracebackHexdump"
"(*runtime.unwinder).next" "runtime.throw"
"(*runtime.unwinder).next" "(*runtime.unwinder).finishInternal"
"(*runtime.unwinder).next" "runtime.tracebackHexdump"
"(*runtime.unwinder).next" "runtime.throw"
"(*runtime.unwinder).next" "runtime.alignUp"
"(*runtime.unwinder).next" "runtime.findfunc"
"(*runtime.unwinder).next" "(runtime.funcInfo).valid"
"(*runtime.unwinder).next" "(*runtime.unwinder).resolveInternal"
"(*runtime.unwinder).next" "runtime.funcspdelta"
"runtime.tracebackPCs" "(*runtime.unwinder).next"
"runtime.gcallers" "runtime.tracebackPCs"
"runtime.saveblockevent" "runtime.gcallers"
"runtime.blockevent" "runtime.saveblockevent"
"runtime.semacquire1" "runtime.blockevent"
"runtime.releaseSudog" "runtime.throw"
"runtime.releaseSudog" "runtime.throw"
"runtime.releaseSudog" "runtime.throw"
"runtime.releaseSudog" "runtime.throw"
"runtime.releaseSudog" "runtime.throw"
"runtime.releaseSudog" "runtime.throw"
"runtime.releaseSudog" "runtime.getg"
"runtime.releaseSudog" "runtime.throw"
"runtime.releaseSudog" "runtime.acquirem"
"runtime.releaseSudog" "(runtime.puintptr).ptr"
"runtime.releaseSudog" "runtime.releasem"
"runtime.releaseSudog" "runtime.lock"
"runtime.releaseSudog" "runtime.unlock"
"runtime.semacquire1" "runtime.releaseSudog"
"runtime.semacquire" "runtime.semacquire1"
"runtime.stopTheWorldGC" "runtime.semacquire"
"runtime.stopTheWorld" "runtime.semacquire"
"runtime.stopTheWorld" "runtime.getg"
"runtime.stopTheWorld" "(runtime.stwReason).String"
"runtime.stopTheWorld" "runtime.systemstack"
"runtime.stopTheWorldGC" "runtime.stopTheWorld"
"runtime.GOMAXPROCS" "runtime.stopTheWorldGC"
"runtime.startTheWorld" "runtime.systemstack"
"runtime.startTheWorld" "runtime.acquirem"
"runtime.semrelease1" "(*runtime.semTable).rootFor"
"runtime.semrelease1" "runtime/internal/atomic.Xadd"
"runtime.semrelease1" "(*runtime/internal/atomic.Uint32).Load"
"runtime.semrelease1" "runtime.lockWithRank"
"runtime.semrelease1" "(*runtime/internal/atomic.Uint32).Load"
"runtime.semrelease1" "runtime.unlock"
"(*runtime.semaRoot).dequeue" "runtime.cputicks"
"(*runtime.semaRoot).dequeue" "(*runtime.semaRoot).rotateRight"
"(*runtime.semaRoot).dequeue" "(*runtime.semaRoot).rotateLeft"
"runtime.semrelease1" "(*runtime.semaRoot).dequeue"
"runtime.semrelease1" "(*runtime/internal/atomic.Uint32).Add"
"runtime.semrelease1" "runtime.unlock"
"runtime.mutexevent" "runtime/internal/atomic.Load64"
"runtime.mutexevent" "runtime.saveblockevent"
"runtime.mutexevent" "runtime.cheaprand64"
"runtime.semrelease1" "runtime.mutexevent"
"runtime.semrelease1" "runtime.throw"
"runtime.readyWithTime" "runtime.cputicks"
"runtime.goready" "runtime.systemstack"
"runtime.readyWithTime" "runtime.goready"
"runtime.semrelease1" "runtime.readyWithTime"
"runtime.semrelease1" "runtime.cansemacquire"
"runtime.goyield" "runtime.checkTimeouts"
"runtime.goyield" "runtime.mcall"
"runtime.semrelease1" "runtime.goyield"
"runtime.semrelease1" "runtime.getg"
"runtime.startTheWorld" "runtime.semrelease1"
"runtime.startTheWorld" "runtime.releasem"
"runtime.startTheWorldGC" "runtime.startTheWorld"
"runtime.semrelease" "runtime.semrelease1"
"runtime.startTheWorldGC" "runtime.semrelease"
"runtime.GOMAXPROCS" "runtime.startTheWorldGC"
"(*sync.Pool).pinSlow" "runtime.GOMAXPROCS"
"(*sync.Pool).pinSlow" "sync/atomic.StorePointer"
"(*sync.Pool).pinSlow" "sync.runtime_StoreReluintptr"
"(*sync.Pool).pin" "(*sync.Pool).pinSlow"
"(*sync.Pool).Get" "(*sync.Pool).pin"
"(*sync/atomic.Uint64).Load" "sync/atomic.LoadUint64"
"(*sync.poolDequeue).popHead" "(*sync/atomic.Uint64).Load"
"(*sync.poolDequeue).popHead" "(*sync.poolDequeue).unpack"
"(*sync.poolDequeue).popHead" "(*sync.poolDequeue).pack"
"(*sync/atomic.Uint64).CompareAndSwap" "sync/atomic.CompareAndSwapUint64"
"(*sync.poolDequeue).popHead" "(*sync/atomic.Uint64).CompareAndSwap"
"(*sync.poolChain).popHead" "(*sync.poolDequeue).popHead"
"sync.loadPoolChainElt" "sync/atomic.LoadPointer"
"(*sync.poolChain).popHead" "sync.loadPoolChainElt"
"(*sync.Pool).Get" "(*sync.poolChain).popHead"
"(*sync.Pool).Get" "sync.runtime_procUnpin"
"(*sync.Pool).getSlow" "sync.runtime_LoadAcquintptr"
"(*sync.Pool).getSlow" "sync.indexLocal"
"(*sync.poolChain).popTail" "sync.loadPoolChainElt"
"(*sync.poolChain).popTail" "sync.loadPoolChainElt"
"(*sync.poolDequeue).popTail" "(*sync/atomic.Uint64).Load"
"(*sync.poolDequeue).popTail" "(*sync.poolDequeue).unpack"
"(*sync.poolDequeue).popTail" "(*sync.poolDequeue).pack"
"(*sync.poolDequeue).popTail" "(*sync/atomic.Uint64).CompareAndSwap"
"(*sync.poolDequeue).popTail" "sync/atomic.StorePointer"
"(*sync.poolChain).popTail" "(*sync.poolDequeue).popTail"
"(*sync.poolChain).popTail" "sync/atomic.CompareAndSwapPointer"
"sync.storePoolChainElt" "sync/atomic.StorePointer"
"(*sync.poolChain).popTail" "sync.storePoolChainElt"
"(*sync.Pool).getSlow" "(*sync.poolChain).popTail"
"(*sync.Pool).getSlow" "sync/atomic.LoadUintptr"
"(*sync.Pool).getSlow" "sync.indexLocal"
"(*sync.Pool).getSlow" "sync.indexLocal"
"(*sync.Pool).getSlow" "(*sync.poolChain).popTail"
"(*sync.Pool).getSlow" "sync/atomic.StoreUintptr"
"(*sync.Pool).Get" "(*sync.Pool).getSlow"
"(*sync.Pool).Get" "internal/race.Enable"
"(*sync.Pool).Get" "sync.poolRaceAddr"
"(*sync.Pool).Get" "internal/race.Acquire"
"(*sync.Pool).Get" "fmt.init$1"
"(*sync.Pool).Get" "fmt.init$2"
"(*sync.Pool).Get" "log.init$1"
"(*sync.Pool).Get" "log/slog.init$1"
"(*sync.Pool).Get" "io.init$1"
"(*sync.Pool).Get" "log/slog/internal/buffer.init$1"
"(*sync.Pool).Get" "encoding/json.init$1"
"reflect.funcLayout$1" "reflect.unsafe_New"
"(*sync.Pool).Get" "reflect.funcLayout$1"
"fmt.newPrinter" "(*sync.Pool).Get"
"(*fmt.fmt).init" "(*fmt.fmt).clearflags"
"fmt.newPrinter" "(*fmt.fmt).init"
"fmt.Fprintf" "fmt.newPrinter"
"(*fmt.pp).doPrintf" "(*fmt.buffer).writeString"
"(*fmt.pp).doPrintf" "(*fmt.fmt).clearflags"
"fmt.parsenum" "fmt.tooLarge"
"fmt.parseArgNumber" "fmt.parsenum"
"(*fmt.pp).argNumber" "fmt.parseArgNumber"
"(*fmt.pp).doPrintf" "(*fmt.pp).argNumber"
"(*fmt.fmt).padString" "(*fmt.buffer).writeString"
"(*fmt.fmt).padString" "unicode/utf8.RuneCountInString"
"(*fmt.fmt).padString" "(*fmt.fmt).writePadding"
"(*fmt.fmt).padString" "(*fmt.buffer).writeString"
"(*fmt.fmt).padString" "(*fmt.buffer).writeString"
"(*fmt.fmt).padString" "(*fmt.fmt).writePadding"
"(*fmt.pp).printArg" "(*fmt.fmt).padString"
"(*fmt.pp).badVerb" "(*fmt.buffer).writeString"
"unicode/utf8.AppendRune" "unicode/utf8.appendRuneNonASCII"
"(*fmt.buffer).writeRune" "unicode/utf8.AppendRune"
"(*fmt.pp).badVerb" "(*fmt.buffer).writeRune"
"(*fmt.pp).badVerb" "(*fmt.buffer).writeByte"
"(*fmt.pp).badVerb" "(*fmt.buffer).writeByte"
"reflect.TypeOf" "reflect.noescape"
"reflect.toType" "reflect.toRType"
"reflect.TypeOf" "reflect.toType"
"(*fmt.pp).badVerb" "reflect.TypeOf"
"(*reflect.rtype).nameOff" "reflect.resolveNameOff"
"(*reflect.rtype).String" "(*reflect.rtype).nameOff"
"(internal/abi.Name).DataChecked" "internal/abi.addChecked"
"(internal/abi.Name).ReadVarint" "(internal/abi.Name).DataChecked"
"(internal/abi.Name).Name" "(internal/abi.Name).ReadVarint"
"(internal/abi.Name).Name" "(internal/abi.Name).DataChecked"
"(*reflect.rtype).String" "(internal/abi.Name).Name"
"(*fmt.pp).badVerb" "(*reflect.rtype).String"
"(*fmt.pp).badVerb" "(*fmt.buffer).writeString"
"(*fmt.pp).badVerb" "(*fmt.buffer).writeByte"
"(*fmt.pp).badVerb" "(*fmt.pp).printArg"
"(reflect.Value).Type" "reflect.noescape"
"(reflect.Value).typ" "reflect.noescape"
"(reflect.Value).typeSlow" "(reflect.Value).typ"
"(reflect.Value).typeSlow" "(reflect.Value).typ"
"(reflect.Value).typeSlow" "reflect.toRType"
"(reflect.Value).typeSlow" "(reflect.Value).typ"
"(reflect.Value).typeSlow" "(*internal/abi.Type).Kind"
"(*internal/abi.Type).Uncommon" "(*internal/abi.Type).Kind"
"(*internal/abi.Type).ExportedMethods" "(*internal/abi.Type).Uncommon"
"(*internal/abi.UncommonType).ExportedMethods" "internal/abi.addChecked"
"(*internal/abi.Type).ExportedMethods" "(*internal/abi.UncommonType).ExportedMethods"
"(reflect.Value).typeSlow" "(*internal/abi.Type).ExportedMethods"
"reflect.typeOffFor" "reflect.toRType"
"(*reflect.rtype).typeOff" "reflect.resolveTypeOff"
"reflect.typeOffFor" "(*reflect.rtype).typeOff"
"(reflect.Value).typeSlow" "reflect.typeOffFor"
"(reflect.Value).typeSlow" "reflect.toRType"
"(reflect.Value).typeSlow" "reflect.typeOffFor"
"(reflect.Value).typeSlow" "reflect.toRType"
"(reflect.Value).Type" "(reflect.Value).typeSlow"
"(*fmt.pp).badVerb" "(reflect.Value).Type"
"(*fmt.pp).badVerb" "(*reflect.rtype).String"
"(*fmt.pp).badVerb" "(*fmt.buffer).writeString"
"(*fmt.pp).badVerb" "(*fmt.buffer).writeByte"
"reflect.makeMethodValue" "(reflect.Value).typ"
"reflect.makeMethodValue" "(*internal/abi.Type).Kind"
"reflect.makeMethodValue" "(reflect.Value).typ"
"reflect.makeMethodValue" "(reflect.Value).Type"
"reflect.methodValueCallCodePtr" "internal/abi.FuncPCABI0"
"reflect.makeMethodValue" "reflect.methodValueCallCodePtr"
"reflect.funcLayout" "(*internal/abi.Type).Kind"
"reflect.stringFor" "reflect.toRType"
"reflect.stringFor" "(*reflect.rtype).String"
"reflect.funcLayout" "reflect.stringFor"
"reflect.funcLayout" "reflect.stringFor"
"(*sync/atomic.Pointer[sync.readOnly]).Load[sync.readOnly]" "sync/atomic.LoadPointer"
"(*sync.Map).loadReadOnly" "(*sync/atomic.Pointer[sync.readOnly]).Load[sync.readOnly]"
"(*sync.Map).Load" "(*sync.Map).loadReadOnly"
"(*sync.Map).Load" "(*sync.Mutex).Lock"
"(*sync.Map).Load" "(*sync.Map).loadReadOnly"
"(*sync/atomic.Pointer[sync.readOnly]).Store[sync.readOnly]" "sync/atomic.StorePointer"
"(*sync.Map).missLocked" "(*sync/atomic.Pointer[sync.readOnly]).Store[sync.readOnly]"
"(*sync.Map).Load" "(*sync.Map).missLocked"
"(*sync.Map).Load" "(*sync.Mutex).Unlock"
"(*sync/atomic.Pointer[any]).Load[any]" "sync/atomic.LoadPointer"
"(*sync.entry).load" "(*sync/atomic.Pointer[any]).Load[any]"
"(*sync.Map).Load" "(*sync.entry).load"
"reflect.funcLayout" "(*sync.Map).Load"
"reflect.funcLayout" "(*internal/abi.Type).Kind"
"(*reflect.abiSeq).addRcvr" "reflect.ifaceIndir"
"(*reflect.abiSeq).addRcvr" "(*reflect.abiSeq).assignIntN"
"(*reflect.abiSeq).addRcvr" "(*reflect.abiSeq).assignIntN"
"(*reflect.abiSeq).addRcvr" "(*internal/abi.Type).Pointers"
"(*reflect.abiSeq).stackAssign" "reflect.align"
"(*reflect.abiSeq).addRcvr" "(*reflect.abiSeq).stackAssign"
"reflect.newAbiDesc" "(*reflect.abiSeq).addRcvr"
"(*internal/abi.FuncType).InSlice" "internal/abi.addChecked"
"reflect.newAbiDesc" "(*internal/abi.FuncType).InSlice"
"reflect.newAbiDesc" "(*reflect.bitVector).append"
"reflect.newAbiDesc" "(*reflect.bitVector).append"
"(*reflect.abiSeq).addArg" "(*internal/abi.Type).Size"
"(*reflect.abiSeq).addArg" "(*internal/abi.Type).Align"
"(*reflect.abiSeq).addArg" "reflect.align"
"(*reflect.abiSeq).regAssign" "(*internal/abi.Type).Kind"
"(*reflect.abiSeq).regAssign" "(*internal/abi.Type).Size"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).assignIntN"
"(*reflect.abiSeq).regAssign" "(*internal/abi.Type).Size"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).assignIntN"
"(*reflect.abiSeq).regAssign" "(*internal/abi.Type).Size"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).assignFloatN"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).assignIntN"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).assignIntN"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).assignFloatN"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).assignFloatN"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).assignIntN"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).assignIntN"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).assignIntN"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).regAssign"
"(*reflect.abiSeq).regAssign" "(*internal/abi.Type).Kind"
"(*reflect.abiSeq).regAssign" "(*reflect.abiSeq).regAssign"
"(*reflect.abiSeq).addArg" "(*reflect.abiSeq).regAssign"
"(*reflect.abiSeq).addArg" "(*internal/abi.Type).Size"
"(*reflect.abiSeq).addArg" "(*internal/abi.Type).Align"
"(*reflect.abiSeq).addArg" "(*reflect.abiSeq).stackAssign"
"reflect.newAbiDesc" "(*reflect.abiSeq).addArg"
"reflect.newAbiDesc" "reflect.align"
"reflect.newAbiDesc" "reflect.align"
"(*internal/abi.FuncType).OutSlice" "(*internal/abi.FuncType).NumOut"
"(*internal/abi.FuncType).OutSlice" "internal/abi.addChecked"
"reflect.newAbiDesc" "(*internal/abi.FuncType).OutSlice"
"reflect.addTypeBits" "(*reflect.bitVector).append"
"reflect.addTypeBits" "(*reflect.bitVector).append"
"reflect.addTypeBits" "(*reflect.bitVector).append"
"reflect.addTypeBits" "(*reflect.bitVector).append"
"reflect.addTypeBits" "(*reflect.bitVector).append"
"reflect.addTypeBits" "reflect.addTypeBits"
"reflect.addTypeBits" "reflect.addTypeBits"
"reflect.newAbiDesc" "reflect.addTypeBits"
"reflect.newAbiDesc" "(*internal/abi.Type).Align"
"reflect.newAbiDesc" "reflect.align"
"reflect.newAbiDesc" "(*internal/abi.Type).Size"
"reflect.newAbiDesc" "(*reflect.abiSeq).stepsForValue"
"reflect.newAbiDesc" "(*internal/abi.IntArgRegBitmap).Set"
"reflect.newAbiDesc" "(*reflect.abiSeq).addArg"
"reflect.newAbiDesc" "reflect.addTypeBits"
"reflect.newAbiDesc" "(*reflect.abiSeq).stepsForValue"
"reflect.newAbiDesc" "(*internal/abi.IntArgRegBitmap).Set"
"reflect.funcLayout" "reflect.newAbiDesc"
"reflect.funcLayout" "reflect.align"
"reflect.funcLayout" "reflect.stringFor"
"reflect.funcLayout" "reflect.stringFor"
"internal/abi.NewName" "internal/abi.writeVarint"
"internal/abi.NewName" "internal/abi.writeVarint"
"reflect.newName" "internal/abi.NewName"
"reflect.funcLayout" "reflect.newName"
"reflect.resolveReflectName" "reflect.addReflectOff"
"reflect.funcLayout" "reflect.resolveReflectName"
"(*sync.Map).LoadOrStore" "(*sync.Map).loadReadOnly"
"(*sync.entry).tryLoadOrStore" "(*sync/atomic.Pointer[any]).Load[any]"
"(*sync/atomic.Pointer[any]).CompareAndSwap[any]" "sync/atomic.CompareAndSwapPointer"
"(*sync.entry).tryLoadOrStore" "(*sync/atomic.Pointer[any]).CompareAndSwap[any]"
"(*sync.entry).tryLoadOrStore" "(*sync/atomic.Pointer[any]).Load[any]"
"(*sync.Map).LoadOrStore" "(*sync.entry).tryLoadOrStore"
"(*sync.Map).LoadOrStore" "(*sync.Mutex).Lock"
"(*sync.Map).LoadOrStore" "(*sync.Map).loadReadOnly"
"(*sync.entry).unexpungeLocked" "(*sync/atomic.Pointer[any]).CompareAndSwap[any]"
"(*sync.Map).LoadOrStore" "(*sync.entry).unexpungeLocked"
"(*sync.Map).LoadOrStore" "(*sync.Mutex).Unlock"
"(*sync.Map).LoadOrStore" "(*sync.entry).tryLoadOrStore"
"(*sync.Map).LoadOrStore" "(*sync.entry).tryLoadOrStore"
"(*sync.Map).LoadOrStore" "(*sync.Map).missLocked"
"(*sync.Map).dirtyLocked" "(*sync.Map).loadReadOnly"
"(*sync.entry).tryExpungeLocked" "(*sync/atomic.Pointer[any]).Load[any]"
"(*sync.entry).tryExpungeLocked" "(*sync/atomic.Pointer[any]).CompareAndSwap[any]"
"(*sync.entry).tryExpungeLocked" "(*sync/atomic.Pointer[any]).Load[any]"
"(*sync.Map).dirtyLocked" "(*sync.entry).tryExpungeLocked"
"(*sync.Map).LoadOrStore" "(*sync.Map).dirtyLocked"
"(*sync.Map).LoadOrStore" "(*sync/atomic.Pointer[sync.readOnly]).Store[sync.readOnly]"
"(*sync/atomic.Pointer[any]).Store[any]" "sync/atomic.StorePointer"
"sync.newEntry" "(*sync/atomic.Pointer[any]).Store[any]"
"(*sync.Map).LoadOrStore" "sync.newEntry"
"reflect.funcLayout" "(*sync.Map).LoadOrStore"
"reflect.funcLayout" "reflect.stringFor"
"reflect.makeMethodValue" "reflect.funcLayout"
"reflect.methodReceiver" "(reflect.Value).typ"
"reflect.methodReceiver" "(*internal/abi.Type).Kind"
"reflect.methodReceiver" "(reflect.Value).typ"
"reflect.methodReceiver" "(reflect.Value).typ"
"reflect.methodReceiver" "(reflect.Value).typ"
"reflect.methodReceiver" "(*internal/abi.Type).ExportedMethods"
"(*reflect.interfaceType).nameOff" "reflect.toRType"
"(*reflect.interfaceType).nameOff" "(*reflect.rtype).nameOff"
"reflect.methodReceiver" "(*reflect.interfaceType).nameOff"
"reflect.methodReceiver" "(internal/abi.Name).IsExported"
"(*reflect.interfaceType).typeOff" "reflect.toRType"
"(*reflect.interfaceType).typeOff" "(*reflect.rtype).typeOff"
"reflect.methodReceiver" "(*reflect.interfaceType).typeOff"
"reflect.methodReceiver" "(reflect.Value).typ"
"reflect.nameOffFor" "reflect.toRType"
"reflect.nameOffFor" "(*reflect.rtype).nameOff"
"reflect.methodReceiver" "reflect.nameOffFor"
"reflect.methodReceiver" "(internal/abi.Name).IsExported"
"reflect.methodReceiver" "(reflect.Value).typ"
"reflect.textOffFor" "reflect.toRType"
"(*reflect.rtype).textOff" "reflect.resolveTextOff"
"reflect.textOffFor" "(*reflect.rtype).textOff"
"reflect.methodReceiver" "reflect.textOffFor"
"reflect.methodReceiver" "(reflect.Value).typ"
"reflect.methodReceiver" "reflect.typeOffFor"
"reflect.makeMethodValue" "reflect.methodReceiver"
"reflect.makeMethodValue" "(*internal/abi.Type).Common"
"reflect.valueInterface" "reflect.makeMethodValue"
"reflect.valueInterface" "(reflect.flag).kind"
"(reflect.Value).NumMethod" "(reflect.Value).typ"
"(reflect.Value).NumMethod" "(reflect.Value).typ"
"(reflect.Value).NumMethod" "reflect.toRType"
"(*reflect.rtype).Kind" "(*internal/abi.Type).Kind"
"(*reflect.rtype).NumMethod" "(*reflect.rtype).Kind"
"(*reflect.rtype).NumMethod" "(*reflect.interfaceType).NumMethod"
"(*reflect.rtype).uncommon" "(*internal/abi.Type).Uncommon"
"(*reflect.rtype).exportedMethods" "(*reflect.rtype).uncommon"
"(*reflect.rtype).exportedMethods" "(*internal/abi.UncommonType).ExportedMethods"
"(*reflect.rtype).NumMethod" "(*reflect.rtype).exportedMethods"
"(reflect.Value).NumMethod" "(*reflect.rtype).NumMethod"
"reflect.valueInterface" "(reflect.Value).NumMethod"
"reflect.packEface" "(reflect.Value).typ"
"reflect.packEface" "(*internal/abi.Type).IfaceIndir"
"reflect.packEface" "reflect.unsafe_New"
"reflect.packEface" "reflect.typedmemmove"
"reflect.valueInterface" "reflect.packEface"
"(reflect.Value).Interface" "reflect.valueInterface"
"(*fmt.pp).printValue" "(reflect.Value).Interface"
"(*fmt.pp).handleMethods" "(*fmt.pp).badVerb"
"reflect.unpackEface" "(*internal/abi.Type).Kind"
"reflect.unpackEface" "(*internal/abi.Type).IfaceIndir"
"reflect.ValueOf" "reflect.unpackEface"
"(*fmt.pp).catchPanic" "reflect.ValueOf"
"(reflect.Value).Kind" "(reflect.flag).kind"
"(*fmt.pp).catchPanic" "(reflect.Value).Kind"
"(*fmt.pp).catchPanic" "(*fmt.buffer).writeString"
"(reflect.Value).IsNil" "(reflect.flag).kind"
"(reflect.Value).IsNil" "(reflect.flag).kind"
"(*fmt.pp).catchPanic" "(reflect.Value).IsNil"
"(*fmt.pp).catchPanic" "(*fmt.fmt).clearflags"
"(*fmt.pp).catchPanic" "(*fmt.buffer).writeString"
"(*fmt.pp).catchPanic" "(*fmt.buffer).writeRune"
"(*fmt.pp).catchPanic" "(*fmt.buffer).writeString"
"(*fmt.pp).catchPanic" "(*fmt.buffer).writeString"
"(*fmt.pp).catchPanic" "(*fmt.buffer).writeString"
"(*fmt.pp).catchPanic" "(*fmt.pp).printArg"
"(*fmt.pp).catchPanic" "(*fmt.buffer).writeByte"
"(*fmt.pp).handleMethods" "(*fmt.pp).catchPanic"
"(*fmt.pp).handleMethods" "(*fmt.pp).catchPanic"
"(*sync/atomic.Uint32).Load" "sync/atomic.LoadUint32"
"(*sync.Once).Do" "(*sync/atomic.Uint32).Load"
"(*sync.Once).doSlow" "(*sync.Mutex).Lock"
"(*sync.Once).doSlow" "(*sync.Mutex).Unlock"
"(*sync.Once).doSlow" "(*sync/atomic.Uint32).Load"
"(*sync/atomic.Uint32).Store" "sync/atomic.StoreUint32"
"(*sync.Once).doSlow" "(*sync/atomic.Uint32).Store"
"(*flag.FlagSet).defaultUsage" "(*flag.FlagSet).Output"
"(*flag.FlagSet).defaultUsage" "fmt.Fprintf"
"internal/reflectlite.unpackEface" "(*internal/abi.Type).Kind"
"internal/reflectlite.unpackEface" "internal/reflectlite.ifaceIndir"
"internal/reflectlite.ValueOf" "internal/reflectlite.unpackEface"
"sort.Slice" "internal/reflectlite.ValueOf"
"internal/reflectlite.Swapper" "internal/reflectlite.ValueOf"
"(internal/reflectlite.Value).Kind" "(internal/reflectlite.flag).kind"
"internal/reflectlite.Swapper" "(internal/reflectlite.Value).Kind"
"internal/reflectlite.Swapper" "(internal/reflectlite.Value).Kind"
"(internal/reflectlite.Value).Len" "(internal/reflectlite.flag).kind"
"(internal/reflectlite.Value).typ" "internal/reflectlite.noescape"
"(internal/reflectlite.Value).Len" "(internal/reflectlite.Value).typ"
"(internal/reflectlite.Value).pointer" "(internal/reflectlite.Value).typ"
"(internal/reflectlite.Value).pointer" "(*internal/abi.Type).Size"
"(internal/reflectlite.Value).pointer" "(internal/reflectlite.Value).typ"
"(internal/reflectlite.Value).pointer" "(*internal/abi.Type).Pointers"
"(internal/reflectlite.Value).Len" "(internal/reflectlite.Value).pointer"
"(internal/reflectlite.Value).Len" "internal/reflectlite.chanlen"
"(internal/reflectlite.Value).Len" "(internal/reflectlite.Value).pointer"
"(internal/reflectlite.Value).Len" "internal/reflectlite.maplen"
"(internal/reflectlite.Value).Len" "(internal/reflectlite.flag).kind"
"internal/reflectlite.Swapper" "(internal/reflectlite.Value).Len"
"(internal/reflectlite.Value).Type" "(internal/reflectlite.Value).typ"
"(internal/reflectlite.Value).Type" "internal/reflectlite.toRType"
"internal/reflectlite.Swapper" "(internal/reflectlite.Value).Type"
"(internal/reflectlite.rtype).Elem" "(internal/reflectlite.rtype).common"
"(*internal/abi.Type).Elem" "(*internal/abi.Type).Kind"
"internal/reflectlite.elem" "(*internal/abi.Type).Elem"
"internal/reflectlite.elem" "internal/reflectlite.toRType"
"(internal/reflectlite.rtype).nameOff" "internal/reflectlite.resolveNameOff"
"(internal/reflectlite.rtype).String" "(internal/reflectlite.rtype).nameOff"
"(internal/reflectlite.rtype).String" "(internal/abi.Name).Name"
"internal/reflectlite.elem" "(internal/reflectlite.rtype).String"
"(internal/reflectlite.rtype).Elem" "internal/reflectlite.elem"
"internal/reflectlite.toType" "internal/reflectlite.toRType"
"(internal/reflectlite.rtype).Elem" "internal/reflectlite.toType"
"internal/reflectlite.Swapper" "(internal/reflectlite.rtype).Elem"
"internal/reflectlite.Swapper" "(*internal/abi.Type).Kind"
"internal/reflectlite.Swapper" "(internal/reflectlite.rtype).common"
"internal/reflectlite.Swapper" "internal/reflectlite.unsafe_New"
"internal/reflectlite.Swapper" "(*internal/abi.Type).Size"
"sort.Slice" "internal/reflectlite.Swapper"
"sort.Slice" "(internal/reflectlite.Value).Len"
"math/bits.Len" "math/bits.Len32"
"math/bits.Len" "math/bits.Len64"
"sort.Slice" "math/bits.Len"
"internal/reflectlite.arrayAt" "internal/reflectlite.add"
"internal/reflectlite.Swapper$9" "internal/reflectlite.arrayAt"
"internal/reflectlite.Swapper$9" "internal/reflectlite.arrayAt"
"internal/reflectlite.Swapper$9" "internal/reflectlite.typedmemmove"
"internal/reflectlite.Swapper$9" "internal/reflectlite.typedmemmove"
"internal/reflectlite.Swapper$9" "internal/reflectlite.typedmemmove"
"sort.insertionSort_func" "internal/reflectlite.Swapper$9"
"sort.insertionSort_func" "internal/reflectlite.Swapper$4"
"sort.insertionSort_func" "internal/reflectlite.Swapper$5"
"sort.insertionSort_func" "internal/reflectlite.Swapper$6"
"sort.insertionSort_func" "internal/reflectlite.Swapper$7"
"sort.insertionSort_func" "internal/reflectlite.Swapper$8"
"sort.insertionSort_func" "internal/reflectlite.Swapper$1"
"sort.insertionSort_func" "internal/reflectlite.Swapper$2"
"sort.insertionSort_func" "internal/reflectlite.Swapper$3"
"sort.insertionSort_func" "flag.sortFlags$1"
"sort.insertionSort_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"go/types.dependencyGraph$1" "(*go/types.graphNode).cost"
"go/types.dependencyGraph$1" "(*go/types.graphNode).cost"
"sort.insertionSort_func" "go/types.dependencyGraph$1"
"(*go/types.Checker).usage$1" "go/types.cmpPos"
"sort.insertionSort_func" "(*go/types.Checker).usage$1"
"go/types.isExported" "unicode/utf8.DecodeRuneInString"
"unicode.isExcludingLatin" "unicode.is16"
"unicode.isExcludingLatin" "unicode.is32"
"unicode.IsUpper" "unicode.isExcludingLatin"
"go/types.isExported" "unicode.IsUpper"
"go/types.Id" "go/types.isExported"
"(*go/types.object).Id" "go/types.Id"
"go/types.NewMethodSet$1" "(*go/types.object).Id"
"go/types.NewMethodSet$1" "(*go/types.object).Id"
"sort.insertionSort_func" "go/types.NewMethodSet$1"
"encoding/json.typeFields$1" "(encoding/json.byIndex).Less"
"sort.insertionSort_func" "encoding/json.typeFields$1"
"sort.pdqsort_func" "sort.insertionSort_func"
"sort.siftDown_func" "flag.sortFlags$1"
"sort.siftDown_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.siftDown_func" "go/types.dependencyGraph$1"
"sort.siftDown_func" "(*go/types.Checker).usage$1"
"sort.siftDown_func" "flag.sortFlags$1"
"sort.siftDown_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.siftDown_func" "go/types.dependencyGraph$1"
"sort.siftDown_func" "(*go/types.Checker).usage$1"
"sort.siftDown_func" "internal/reflectlite.Swapper$1"
"sort.siftDown_func" "internal/reflectlite.Swapper$2"
"sort.siftDown_func" "internal/reflectlite.Swapper$3"
"sort.siftDown_func" "internal/reflectlite.Swapper$9"
"sort.siftDown_func" "internal/reflectlite.Swapper$4"
"sort.siftDown_func" "internal/reflectlite.Swapper$5"
"sort.siftDown_func" "internal/reflectlite.Swapper$6"
"sort.siftDown_func" "internal/reflectlite.Swapper$7"
"sort.siftDown_func" "internal/reflectlite.Swapper$8"
"sort.siftDown_func" "go/types.NewMethodSet$1"
"sort.siftDown_func" "go/types.NewMethodSet$1"
"sort.siftDown_func" "encoding/json.typeFields$1"
"sort.siftDown_func" "encoding/json.typeFields$1"
"sort.heapSort_func" "sort.siftDown_func"
"sort.heapSort_func" "internal/reflectlite.Swapper$8"
"sort.heapSort_func" "internal/reflectlite.Swapper$9"
"sort.heapSort_func" "internal/reflectlite.Swapper$4"
"sort.heapSort_func" "internal/reflectlite.Swapper$5"
"sort.heapSort_func" "internal/reflectlite.Swapper$6"
"sort.heapSort_func" "internal/reflectlite.Swapper$7"
"sort.heapSort_func" "internal/reflectlite.Swapper$1"
"sort.heapSort_func" "internal/reflectlite.Swapper$2"
"sort.heapSort_func" "internal/reflectlite.Swapper$3"
"sort.heapSort_func" "sort.siftDown_func"
"sort.pdqsort_func" "sort.heapSort_func"
"sort.nextPowerOfTwo" "math/bits.Len"
"sort.breakPatterns_func" "sort.nextPowerOfTwo"
"sort.breakPatterns_func" "(*sort.xorshift).Next"
"sort.breakPatterns_func" "internal/reflectlite.Swapper$3"
"sort.breakPatterns_func" "internal/reflectlite.Swapper$1"
"sort.breakPatterns_func" "internal/reflectlite.Swapper$2"
"sort.breakPatterns_func" "internal/reflectlite.Swapper$5"
"sort.breakPatterns_func" "internal/reflectlite.Swapper$6"
"sort.breakPatterns_func" "internal/reflectlite.Swapper$7"
"sort.breakPatterns_func" "internal/reflectlite.Swapper$8"
"sort.breakPatterns_func" "internal/reflectlite.Swapper$9"
"sort.breakPatterns_func" "internal/reflectlite.Swapper$4"
"sort.pdqsort_func" "sort.breakPatterns_func"
"sort.order2_func" "go/types.NewMethodSet$1"
"sort.order2_func" "flag.sortFlags$1"
"sort.order2_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.order2_func" "go/types.dependencyGraph$1"
"sort.order2_func" "(*go/types.Checker).usage$1"
"sort.order2_func" "encoding/json.typeFields$1"
"sort.median_func" "sort.order2_func"
"sort.median_func" "sort.order2_func"
"sort.median_func" "sort.order2_func"
"sort.medianAdjacent_func" "sort.median_func"
"sort.choosePivot_func" "sort.medianAdjacent_func"
"sort.choosePivot_func" "sort.medianAdjacent_func"
"sort.choosePivot_func" "sort.medianAdjacent_func"
"sort.choosePivot_func" "sort.median_func"
"sort.pdqsort_func" "sort.choosePivot_func"
"sort.reverseRange_func" "internal/reflectlite.Swapper$1"
"sort.reverseRange_func" "internal/reflectlite.Swapper$2"
"sort.reverseRange_func" "internal/reflectlite.Swapper$3"
"sort.reverseRange_func" "internal/reflectlite.Swapper$9"
"sort.reverseRange_func" "internal/reflectlite.Swapper$4"
"sort.reverseRange_func" "internal/reflectlite.Swapper$5"
"sort.reverseRange_func" "internal/reflectlite.Swapper$6"
"sort.reverseRange_func" "internal/reflectlite.Swapper$7"
"sort.reverseRange_func" "internal/reflectlite.Swapper$8"
"sort.pdqsort_func" "sort.reverseRange_func"
"sort.partialInsertionSort_func" "flag.sortFlags$1"
"sort.partialInsertionSort_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.partialInsertionSort_func" "go/types.dependencyGraph$1"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$1"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$2"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$3"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$7"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$8"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$9"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$4"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$5"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$6"
"sort.partialInsertionSort_func" "flag.sortFlags$1"
"sort.partialInsertionSort_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.partialInsertionSort_func" "go/types.dependencyGraph$1"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$9"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$4"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$5"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$6"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$7"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$8"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$1"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$2"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$3"
"sort.partialInsertionSort_func" "flag.sortFlags$1"
"sort.partialInsertionSort_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.partialInsertionSort_func" "go/types.dependencyGraph$1"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$4"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$5"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$6"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$7"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$8"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$9"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$2"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$3"
"sort.partialInsertionSort_func" "internal/reflectlite.Swapper$1"
"sort.partialInsertionSort_func" "(*go/types.Checker).usage$1"
"sort.partialInsertionSort_func" "(*go/types.Checker).usage$1"
"sort.partialInsertionSort_func" "(*go/types.Checker).usage$1"
"sort.partialInsertionSort_func" "go/types.NewMethodSet$1"
"sort.partialInsertionSort_func" "go/types.NewMethodSet$1"
"sort.partialInsertionSort_func" "go/types.NewMethodSet$1"
"sort.partialInsertionSort_func" "encoding/json.typeFields$1"
"sort.partialInsertionSort_func" "encoding/json.typeFields$1"
"sort.partialInsertionSort_func" "encoding/json.typeFields$1"
"sort.pdqsort_func" "sort.partialInsertionSort_func"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$1"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$2"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$3"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$9"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$4"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$5"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$6"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$7"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$8"
"sort.partitionEqual_func" "flag.sortFlags$1"
"sort.partitionEqual_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.partitionEqual_func" "go/types.dependencyGraph$1"
"sort.partitionEqual_func" "flag.sortFlags$1"
"sort.partitionEqual_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.partitionEqual_func" "go/types.dependencyGraph$1"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$9"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$4"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$5"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$6"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$7"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$8"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$1"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$2"
"sort.partitionEqual_func" "internal/reflectlite.Swapper$3"
"sort.partitionEqual_func" "(*go/types.Checker).usage$1"
"sort.partitionEqual_func" "(*go/types.Checker).usage$1"
"sort.partitionEqual_func" "go/types.NewMethodSet$1"
"sort.partitionEqual_func" "go/types.NewMethodSet$1"
"sort.partitionEqual_func" "encoding/json.typeFields$1"
"sort.partitionEqual_func" "encoding/json.typeFields$1"
"sort.pdqsort_func" "sort.partitionEqual_func"
"sort.partition_func" "internal/reflectlite.Swapper$1"
"sort.partition_func" "internal/reflectlite.Swapper$2"
"sort.partition_func" "internal/reflectlite.Swapper$3"
"sort.partition_func" "internal/reflectlite.Swapper$7"
"sort.partition_func" "internal/reflectlite.Swapper$8"
"sort.partition_func" "internal/reflectlite.Swapper$9"
"sort.partition_func" "internal/reflectlite.Swapper$4"
"sort.partition_func" "internal/reflectlite.Swapper$5"
"sort.partition_func" "internal/reflectlite.Swapper$6"
"sort.partition_func" "flag.sortFlags$1"
"sort.partition_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.partition_func" "go/types.dependencyGraph$1"
"sort.partition_func" "flag.sortFlags$1"
"sort.partition_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.partition_func" "go/types.dependencyGraph$1"
"sort.partition_func" "internal/reflectlite.Swapper$4"
"sort.partition_func" "internal/reflectlite.Swapper$5"
"sort.partition_func" "internal/reflectlite.Swapper$6"
"sort.partition_func" "internal/reflectlite.Swapper$7"
"sort.partition_func" "internal/reflectlite.Swapper$8"
"sort.partition_func" "internal/reflectlite.Swapper$9"
"sort.partition_func" "internal/reflectlite.Swapper$2"
"sort.partition_func" "internal/reflectlite.Swapper$3"
"sort.partition_func" "internal/reflectlite.Swapper$1"
"sort.partition_func" "internal/reflectlite.Swapper$5"
"sort.partition_func" "internal/reflectlite.Swapper$6"
"sort.partition_func" "internal/reflectlite.Swapper$7"
"sort.partition_func" "internal/reflectlite.Swapper$8"
"sort.partition_func" "internal/reflectlite.Swapper$9"
"sort.partition_func" "internal/reflectlite.Swapper$4"
"sort.partition_func" "internal/reflectlite.Swapper$3"
"sort.partition_func" "internal/reflectlite.Swapper$1"
"sort.partition_func" "internal/reflectlite.Swapper$2"
"sort.partition_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.partition_func" "go/types.dependencyGraph$1"
"sort.partition_func" "flag.sortFlags$1"
"sort.partition_func" "flag.sortFlags$1"
"sort.partition_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.partition_func" "go/types.dependencyGraph$1"
"sort.partition_func" "internal/reflectlite.Swapper$1"
"sort.partition_func" "internal/reflectlite.Swapper$2"
"sort.partition_func" "internal/reflectlite.Swapper$3"
"sort.partition_func" "internal/reflectlite.Swapper$9"
"sort.partition_func" "internal/reflectlite.Swapper$4"
"sort.partition_func" "internal/reflectlite.Swapper$5"
"sort.partition_func" "internal/reflectlite.Swapper$6"
"sort.partition_func" "internal/reflectlite.Swapper$7"
"sort.partition_func" "internal/reflectlite.Swapper$8"
"sort.partition_func" "internal/reflectlite.Swapper$7"
"sort.partition_func" "internal/reflectlite.Swapper$8"
"sort.partition_func" "internal/reflectlite.Swapper$9"
"sort.partition_func" "internal/reflectlite.Swapper$4"
"sort.partition_func" "internal/reflectlite.Swapper$5"
"sort.partition_func" "internal/reflectlite.Swapper$6"
"sort.partition_func" "internal/reflectlite.Swapper$1"
"sort.partition_func" "internal/reflectlite.Swapper$2"
"sort.partition_func" "internal/reflectlite.Swapper$3"
"sort.partition_func" "(*go/types.Checker).usage$1"
"sort.partition_func" "(*go/types.Checker).usage$1"
"sort.partition_func" "(*go/types.Checker).usage$1"
"sort.partition_func" "(*go/types.Checker).usage$1"
"sort.partition_func" "go/types.NewMethodSet$1"
"sort.partition_func" "go/types.NewMethodSet$1"
"sort.partition_func" "go/types.NewMethodSet$1"
"sort.partition_func" "go/types.NewMethodSet$1"
"sort.partition_func" "encoding/json.typeFields$1"
"sort.partition_func" "encoding/json.typeFields$1"
"sort.partition_func" "encoding/json.typeFields$1"
"sort.partition_func" "encoding/json.typeFields$1"
"sort.pdqsort_func" "sort.partition_func"
"sort.pdqsort_func" "flag.sortFlags$1"
"sort.pdqsort_func" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"sort.pdqsort_func" "go/types.dependencyGraph$1"
"sort.pdqsort_func" "sort.pdqsort_func"
"sort.pdqsort_func" "sort.pdqsort_func"
"sort.pdqsort_func" "(*go/types.Checker).usage$1"
"sort.pdqsort_func" "go/types.NewMethodSet$1"
"sort.pdqsort_func" "encoding/json.typeFields$1"
"sort.Slice" "sort.pdqsort_func"
"flag.sortFlags" "sort.Slice"
"(*flag.FlagSet).VisitAll" "flag.sortFlags"
"(*flag.FlagSet).PrintDefaults$1" "fmt.Fprintf"
"(*flag.FlagSet).PrintDefaults$1" "flag.UnquoteUsage"
"(*strings.Builder).copyCheck" "strings.noescape"
"(*strings.Builder).WriteString" "(*strings.Builder).copyCheck"
"(*flag.FlagSet).PrintDefaults$1" "(*strings.Builder).WriteString"
"(*flag.FlagSet).PrintDefaults$1" "(*strings.Builder).WriteString"
"(*flag.FlagSet).PrintDefaults$1" "(*strings.Builder).Len"
"(*flag.FlagSet).PrintDefaults$1" "(*strings.Builder).WriteString"
"strings.Count" "unicode/utf8.RuneCountInString"
"strings.Count" "internal/bytealg.CountString"
"strings.IndexByte" "internal/bytealg.IndexByteString"
"strings.Index" "strings.IndexByte"
"strings.Index" "internal/bytealg.IndexString"
"strings.Index" "strings.IndexByte"
"strings.Index" "internal/bytealg.Cutover"
"strings.Index" "internal/bytealg.IndexString"
"strings.Index" "strings.IndexByte"
"internal/bytealg.IndexRabinKarp[string]" "internal/bytealg.HashStr[string]"
"strings.Index" "internal/bytealg.IndexRabinKarp[string]"
"strings.Count" "strings.Index"
"strings.Replace" "strings.Count"
"(*strings.Builder).Grow" "(*strings.Builder).copyCheck"
"(*strings.Builder).grow" "internal/bytealg.MakeNoZero"
"(*strings.Builder).Grow" "(*strings.Builder).grow"
"strings.Replace" "(*strings.Builder).Grow"
"strings.Replace" "(*strings.Builder).WriteString"
"strings.Replace" "(*strings.Builder).String"
"strings.Replace" "(*strings.Builder).WriteString"
"strings.Replace" "(*strings.Builder).WriteString"
"strings.Replace" "strings.Index"
"strings.Replace" "unicode/utf8.DecodeRuneInString"
"strings.ReplaceAll" "strings.Replace"
"(*flag.FlagSet).PrintDefaults$1" "strings.ReplaceAll"
"(*flag.FlagSet).PrintDefaults$1" "(*strings.Builder).WriteString"
"flag.isZeroValue" "reflect.TypeOf"
"flag.isZeroValue" "(*reflect.rtype).Kind"
"(*reflect.rtype).Elem" "(*reflect.rtype).common"
"reflect.elem" "(*internal/abi.Type).Elem"
"reflect.elem" "reflect.stringFor"
"(*reflect.rtype).Elem" "reflect.elem"
"(*reflect.rtype).Elem" "reflect.toType"
"flag.isZeroValue" "(*reflect.rtype).Elem"
"reflect.ptrTo" "reflect.toRType"
"(*reflect.rtype).ptrTo" "(*reflect.rtype).typeOff"
"(*reflect.rtype).ptrTo" "(*sync.Map).Load"
"(*reflect.rtype).ptrTo" "(*reflect.rtype).String"
"reflect.typesByString" "reflect.typelinks"
"reflect.rtypeOff" "reflect.add"
"reflect.typesByString" "reflect.rtypeOff"
"reflect.typesByString" "reflect.stringFor"
"reflect.typesByString" "reflect.rtypeOff"
"reflect.typesByString" "reflect.stringFor"
"(*reflect.rtype).ptrTo" "reflect.typesByString"
"(*reflect.rtype).ptrTo" "reflect.newName"
"(*reflect.rtype).ptrTo" "reflect.resolveReflectName"
"(*reflect.rtype).ptrTo" "reflect.fnv1"
"(*reflect.rtype).ptrTo" "(*sync.Map).LoadOrStore"
"(*reflect.rtype).ptrTo" "(*sync.Map).LoadOrStore"
"reflect.ptrTo" "(*reflect.rtype).ptrTo"
"reflect.New" "reflect.ptrTo"
"reflect.New" "reflect.ifaceIndir"
"reflect.New" "reflect.unsafe_New"
"flag.isZeroValue" "reflect.New"
"flag.isZeroValue$1" "(*reflect.rtype).Kind"
"flag.isZeroValue$1" "(*reflect.rtype).Elem"
"fmt.Errorf" "fmt.newPrinter"
"fmt.Errorf" "(*fmt.pp).doPrintf"
"(*sync.Pool).Put" "sync.runtime_randn"
"(*sync.Pool).Put" "(*sync.Pool).pin"
"(*sync.Pool).Put" "sync.poolRaceAddr"
"(*sync.Pool).Put" "internal/race.ReleaseMerge"
"(*sync.Pool).Put" "internal/race.Disable"
"(*sync.Pool).Put" "sync.runtime_procUnpin"
"(*sync.poolChain).pushHead" "sync.storePoolChainElt"
"(*sync.poolDequeue).pushHead" "(*sync/atomic.Uint64).Load"
"(*sync.poolDequeue).pushHead" "(*sync.poolDequeue).unpack"
"(*sync.poolDequeue).pushHead" "sync/atomic.LoadPointer"
"(*sync/atomic.Uint64).Add" "sync/atomic.AddUint64"
"(*sync.poolDequeue).pushHead" "(*sync/atomic.Uint64).Add"
"(*sync.poolChain).pushHead" "(*sync.poolDequeue).pushHead"
"(*sync.poolChain).pushHead" "sync.storePoolChainElt"
"(*sync.poolChain).pushHead" "(*sync.poolDequeue).pushHead"
"(*sync.Pool).Put" "(*sync.poolChain).pushHead"
"(*sync.Pool).Put" "internal/race.Enable"
"(*fmt.pp).free" "(*sync.Pool).Put"
"fmt.Errorf" "(*fmt.pp).free"
"fmt.Errorf" "errors.New"
"slices.Sort[[]int int]" "math/bits.Len"
"cmp.Less[int]" "cmp.isNaN[int]"
"cmp.Less[int]" "cmp.isNaN[int]"
"slices.insertionSortOrdered[int]" "cmp.Less[int]"
"slices.pdqsortOrdered[int]" "slices.insertionSortOrdered[int]"
"slices.siftDownOrdered[int]" "cmp.Less[int]"
"slices.siftDownOrdered[int]" "cmp.Less[int]"
"slices.heapSortOrdered[int]" "slices.siftDownOrdered[int]"
"slices.heapSortOrdered[int]" "slices.siftDownOrdered[int]"
"slices.pdqsortOrdered[int]" "slices.heapSortOrdered[int]"
"slices.nextPowerOfTwo" "math/bits.Len"
"slices.breakPatternsOrdered[int]" "slices.nextPowerOfTwo"
"slices.breakPatternsOrdered[int]" "(*slices.xorshift).Next"
"slices.pdqsortOrdered[int]" "slices.breakPatternsOrdered[int]"
"slices.order2Ordered[int]" "cmp.Less[int]"
"slices.medianOrdered[int]" "slices.order2Ordered[int]"
"slices.medianOrdered[int]" "slices.order2Ordered[int]"
"slices.medianOrdered[int]" "slices.order2Ordered[int]"
"slices.medianAdjacentOrdered[int]" "slices.medianOrdered[int]"
"slices.choosePivotOrdered[int]" "slices.medianAdjacentOrdered[int]"
"slices.choosePivotOrdered[int]" "slices.medianAdjacentOrdered[int]"
"slices.choosePivotOrdered[int]" "slices.medianAdjacentOrdered[int]"
"slices.choosePivotOrdered[int]" "slices.medianOrdered[int]"
"slices.pdqsortOrdered[int]" "slices.choosePivotOrdered[int]"
"slices.pdqsortOrdered[int]" "slices.reverseRangeOrdered[int]"
"slices.partialInsertionSortOrdered[int]" "cmp.Less[int]"
"slices.partialInsertionSortOrdered[int]" "cmp.Less[int]"
"slices.partialInsertionSortOrdered[int]" "cmp.Less[int]"
"slices.pdqsortOrdered[int]" "slices.partialInsertionSortOrdered[int]"
"slices.partitionEqualOrdered[int]" "cmp.Less[int]"
"slices.partitionEqualOrdered[int]" "cmp.Less[int]"
"slices.pdqsortOrdered[int]" "slices.partitionEqualOrdered[int]"
"slices.partitionOrdered[int]" "cmp.Less[int]"
"slices.partitionOrdered[int]" "cmp.Less[int]"
"slices.partitionOrdered[int]" "cmp.Less[int]"
"slices.partitionOrdered[int]" "cmp.Less[int]"
"slices.pdqsortOrdered[int]" "slices.partitionOrdered[int]"
"slices.pdqsortOrdered[int]" "cmp.Less[int]"
"slices.pdqsortOrdered[int]" "slices.pdqsortOrdered[int]"
"slices.pdqsortOrdered[int]" "slices.pdqsortOrdered[int]"
"slices.Sort[[]int int]" "slices.pdqsortOrdered[int]"
"sort.intsImpl" "slices.Sort[[]int int]"
"sort.Ints" "sort.intsImpl"
"fmt.Errorf" "sort.Ints"
"flag.isZeroValue$1" "fmt.Errorf"
"flag.isZeroValue" "flag.isZeroValue$1"
"flag.isZeroValue" "(reflect.Value).Interface"
"flag.isZeroValue" "(*flag.stringValue).String"
"reflect.Zero" "(*internal/abi.Type).Kind"
"reflect.Zero" "(*internal/abi.Type).IfaceIndir"
"reflect.Zero" "(*internal/abi.Type).Size"
"reflect.Zero" "reflect.unsafe_New"
"flag.isZeroValue" "reflect.Zero"
"(*flag.FlagSet).PrintDefaults$1" "flag.isZeroValue"
"(*flag.FlagSet).PrintDefaults$1" "(*strings.Builder).WriteString"
"(*flag.FlagSet).PrintDefaults$1" "(*flag.FlagSet).Output"
"(*flag.FlagSet).PrintDefaults$1" "(*strings.Builder).String"
"fmt.Fprint" "fmt.newPrinter"
"(*fmt.pp).doPrint" "reflect.TypeOf"
"(*fmt.pp).doPrint" "(*reflect.rtype).Kind"
"(*fmt.pp).doPrint" "(*fmt.buffer).writeByte"
"(*fmt.pp).doPrint" "(*fmt.pp).printArg"
"fmt.Fprint" "(*fmt.pp).doPrint"
"(*internal/poll.fdMutex).rwlock" "sync/atomic.LoadUint64"
"(*internal/poll.fdMutex).rwlock" "sync/atomic.CompareAndSwapUint64"
"(*internal/poll.fdMutex).rwlock" "internal/poll.runtime_Semacquire"
"(*internal/poll.FD).writeLock" "(*internal/poll.fdMutex).rwlock"
"(*internal/poll.FD).writeLock" "internal/poll.errClosing"
"(*internal/poll.FD).Write" "(*internal/poll.FD).writeLock"
"(*internal/poll.fdMutex).rwunlock" "sync/atomic.LoadUint64"
"(*internal/poll.fdMutex).rwunlock" "sync/atomic.CompareAndSwapUint64"
"(*internal/poll.fdMutex).rwunlock" "internal/poll.runtime_Semrelease"
"(*internal/poll.FD).writeUnlock" "(*internal/poll.fdMutex).rwunlock"
"(*internal/poll.pollDesc).close" "internal/poll.runtime_pollClose"
"(*internal/poll.FD).destroy" "(*internal/poll.pollDesc).close"
"syscall.Close" "internal/abi.FuncPCABI0"
"syscall.Close" "syscall.syscall"
"syscall.Close" "syscall.errnoErr"
"(*internal/poll.SysFile).destroy" "syscall.Close"
"(*internal/poll.FD).destroy" "(*internal/poll.SysFile).destroy"
"(*internal/poll.FD).destroy" "internal/poll.runtime_Semrelease"
"(*internal/poll.FD).writeUnlock" "(*internal/poll.FD).destroy"
"(*internal/poll.FD).Write" "(*internal/poll.FD).writeUnlock"
"(*internal/poll.pollDesc).prepare" "internal/poll.runtime_pollReset"
"internal/poll.convertErr" "internal/poll.errClosing"
"(*internal/poll.pollDesc).prepare" "internal/poll.convertErr"
"(*internal/poll.pollDesc).prepareWrite" "(*internal/poll.pollDesc).prepare"
"(*internal/poll.FD).Write" "(*internal/poll.pollDesc).prepareWrite"
"syscall.read" "internal/abi.FuncPCABI0"
"syscall.read" "syscall.syscall"
"syscall.read" "syscall.errnoErr"
"syscall.Read" "syscall.read"
"syscall.Read" "internal/race.WriteRange"
"syscall.Read" "internal/race.Acquire"
"syscall.Read" "syscall.msanWrite"
"syscall.Read" "syscall.asanWrite"
"internal/poll.ignoringEINTRIO" "syscall.Read"
"syscall.Seek" "internal/abi.FuncPCABI0"
"syscall.Seek" "syscall.syscallX"
"syscall.Seek" "syscall.errnoErr"
"syscall.Getdirentries" "syscall.Seek"
"syscall.ByteSliceFromString" "internal/bytealg.IndexByteString"
"syscall.BytePtrFromString" "syscall.ByteSliceFromString"
"syscall.openat" "syscall.BytePtrFromString"
"syscall.openat" "internal/abi.FuncPCABI0"
"syscall.openat" "syscall.syscall6"
"syscall.openat" "syscall.errnoErr"
"syscall.Getdirentries" "syscall.openat"
"syscall.fdopendir" "internal/abi.FuncPCABI0"
"syscall.fdopendir" "syscall.syscallPtr"
"syscall.fdopendir" "syscall.errnoErr"
"syscall.Getdirentries" "syscall.fdopendir"
"syscall.Getdirentries" "syscall.Close"
"syscall.closedir" "internal/abi.FuncPCABI0"
"syscall.closedir" "syscall.syscall"
"syscall.closedir" "syscall.errnoErr"
"syscall.Getdirentries" "syscall.closedir"
"syscall.readdir_r" "internal/abi.FuncPCABI0"
"syscall.readdir_r" "syscall.syscall"
"syscall.Getdirentries" "syscall.readdir_r"
"syscall.Getdirentries" "syscall.Seek"
"syscall.Getdirentries" "syscall.errnoErr"
"syscall.ReadDirent" "syscall.Getdirentries"
"internal/poll.ignoringEINTRIO" "syscall.ReadDirent"
"syscall.Write" "internal/race.ReleaseMerge"
"syscall.Write" "syscall.faketimeWrite"
"syscall.write" "internal/abi.FuncPCABI0"
"syscall.write" "syscall.syscall"
"syscall.write" "syscall.errnoErr"
"syscall.Write" "syscall.write"
"syscall.Write" "syscall.errnoErr"
"syscall.Write" "internal/race.ReadRange"
"syscall.Write" "syscall.msanRead"
"syscall.Write" "syscall.asanRead"
"internal/poll.ignoringEINTRIO" "syscall.Write"
"(*internal/poll.FD).Write" "internal/poll.ignoringEINTRIO"
"(*internal/poll.pollDesc).wait" "errors.New"
"(*internal/poll.pollDesc).wait" "internal/poll.runtime_pollWait"
"(*internal/poll.pollDesc).wait" "internal/poll.convertErr"
"(*internal/poll.pollDesc).waitWrite" "(*internal/poll.pollDesc).wait"
"(*internal/poll.FD).Write" "(*internal/poll.pollDesc).waitWrite"
"(*internal/poll.FD).Write" "(*internal/poll.pollDesc).pollable"
"fmt.Fprint" "(*internal/poll.FD).Write"
"fmt.Fprint" "(io.discard).Write"
"(*os/exec.prefixSuffixSaver).Write" "(*os/exec.prefixSuffixSaver).fill"
"(*os/exec.prefixSuffixSaver).Write" "(*os/exec.prefixSuffixSaver).fill"
"fmt.Fprint" "(*os/exec.prefixSuffixSaver).Write"
"(*fmt.pp).Write" "(*fmt.buffer).write"
"fmt.Fprint" "(*fmt.pp).Write"
"(*os.File).Write" "(*os.File).checkValid"
"(*os.File).write" "(*internal/poll.FD).Write"
"(*os.File).write" "runtime.KeepAlive"
"(*os.File).Write" "(*os.File).write"
"os.epipecheck" "os.sigpipe"
"(*os.File).Write" "os.epipecheck"
"(*os.File).wrapErr" "(*errors.errorString).Error"
"(*os.File).wrapErr" "(runtime.errorString).Error"
"(go/token.Position).String" "(*go/token.Position).IsValid"
"strconv.FormatInt" "strconv.small"
"strconv.formatBits" "strconv.isPowerOfTwo"
"math/bits.TrailingZeros" "math/bits.TrailingZeros32"
"math/bits.TrailingZeros" "math/bits.TrailingZeros64"
"strconv.formatBits" "math/bits.TrailingZeros"
"strconv.FormatInt" "strconv.formatBits"
"strconv.Itoa" "strconv.FormatInt"
"(go/token.Position).String" "strconv.Itoa"
"fmt.Sprintf" "fmt.newPrinter"
"fmt.Sprintf" "(*fmt.pp).doPrintf"
"fmt.Sprintf" "(*fmt.pp).free"
"(go/token.Position).String" "fmt.Sprintf"
"(go/scanner.Error).Error" "(go/token.Position).String"
"(go/scanner.Error).Error" "(*go/token.Position).IsValid"
"(go/scanner.ErrorList).Error" "(go/scanner.Error).Error"
"(go/scanner.ErrorList).Error" "fmt.Sprintf"
"(*os.File).wrapErr" "(go/scanner.ErrorList).Error"
"(*io/fs.PathError).Error" "(*errors.errorString).Error"
"(*io/fs.PathError).Error" "(runtime.errorString).Error"
"(*io/fs.PathError).Error" "(go/scanner.ErrorList).Error"
"(*io/fs.PathError).Error" "(*io/fs.PathError).Error"
"internal/itoa.Itoa" "internal/itoa.Uitoa"
"internal/itoa.Itoa" "internal/itoa.Uitoa"
"(syscall.Errno).Error" "internal/itoa.Itoa"
"(*io/fs.PathError).Error" "(syscall.Errno).Error"
"(*encoding/json.UnmarshalTypeError).Error" "(*reflect.rtype).String"
"(*encoding/json.UnmarshalTypeError).Error" "(*reflect.rtype).String"
"(*io/fs.PathError).Error" "(*encoding/json.UnmarshalTypeError).Error"
"(*io/fs.PathError).Error" "(context.deadlineExceededError).Error"
"(*encoding/json.InvalidUnmarshalError).Error" "(*reflect.rtype).Kind"
"(*encoding/json.InvalidUnmarshalError).Error" "(*reflect.rtype).String"
"(*encoding/json.InvalidUnmarshalError).Error" "(*reflect.rtype).String"
"(*io/fs.PathError).Error" "(*encoding/json.InvalidUnmarshalError).Error"
"(*io/fs.PathError).Error" "(*internal/poll.DeadlineExceededError).Error"
"(*io/fs.PathError).Error" "(*fmt.wrapError).Error"
"(*io/fs.PathError).Error" "(*fmt.wrapErrors).Error"
"(*io/fs.PathError).Error" "(runtime.plainError).Error"
"(*io/fs.PathError).Error" "(*go/build/constraint.SyntaxError).Error"
"(reflect.Kind).String" "strconv.Itoa"
"(*reflect.ValueError).Error" "(reflect.Kind).String"
"(*io/fs.PathError).Error" "(*reflect.ValueError).Error"
"strconv.appendQuotedWith" "unicode/utf8.DecodeRuneInString"
"strconv.IsPrint" "strconv.bsearch16"
"strconv.IsPrint" "strconv.bsearch32"
"strconv.IsPrint" "strconv.bsearch16"
"strconv.IsPrint" "strconv.bsearch16"
"strconv.appendEscapedRune" "strconv.IsPrint"
"strconv.appendEscapedRune" "strconv.IsPrint"
"strconv.appendEscapedRune" "unicode/utf8.AppendRune"
"strconv.isInGraphicList" "strconv.bsearch16"
"strconv.appendEscapedRune" "strconv.isInGraphicList"
"strconv.appendEscapedRune" "unicode/utf8.ValidRune"
"strconv.appendQuotedWith" "strconv.appendEscapedRune"
"strconv.quoteWith" "strconv.appendQuotedWith"
"strconv.Quote" "strconv.quoteWith"
"(*strconv.NumError).Error" "strconv.Quote"
"(*strconv.NumError).Error" "(*errors.errorString).Error"
"(*strconv.NumError).Error" "(runtime.errorString).Error"
"(*strconv.NumError).Error" "(go/scanner.ErrorList).Error"
"(*strconv.NumError).Error" "(*io/fs.PathError).Error"
"(*strconv.NumError).Error" "(syscall.Errno).Error"
"(*strconv.NumError).Error" "(*encoding/json.UnmarshalTypeError).Error"
"(*strconv.NumError).Error" "(context.deadlineExceededError).Error"
"(*strconv.NumError).Error" "(*encoding/json.InvalidUnmarshalError).Error"
"(*strconv.NumError).Error" "(*internal/poll.DeadlineExceededError).Error"
"(*strconv.NumError).Error" "(*fmt.wrapError).Error"
"(*strconv.NumError).Error" "(*fmt.wrapErrors).Error"
"(*strconv.NumError).Error" "(runtime.plainError).Error"
"(*strconv.NumError).Error" "(*go/build/constraint.SyntaxError).Error"
"(*strconv.NumError).Error" "(*reflect.ValueError).Error"
"(*strconv.NumError).Error" "(*strconv.NumError).Error"
"(*time.ParseError).Error" "time.quote"
"(*time.ParseError).Error" "time.quote"
"(*time.ParseError).Error" "time.quote"
"(*time.ParseError).Error" "time.quote"
"(*time.ParseError).Error" "time.quote"
"(*strconv.NumError).Error" "(*time.ParseError).Error"
"(*strconv.NumError).Error" "(internal/poll.errNetClosing).Error"
"(*go/types.ArgumentError).Error" "(*errors.errorString).Error"
"(*go/types.ArgumentError).Error" "(runtime.errorString).Error"
"(*go/types.ArgumentError).Error" "(go/scanner.ErrorList).Error"
"(*go/types.ArgumentError).Error" "(*io/fs.PathError).Error"
"(*go/types.ArgumentError).Error" "(syscall.Errno).Error"
"(*go/types.ArgumentError).Error" "(*encoding/json.UnmarshalTypeError).Error"
"(*go/types.ArgumentError).Error" "(context.deadlineExceededError).Error"
"(*go/types.ArgumentError).Error" "(*encoding/json.InvalidUnmarshalError).Error"
"(*go/types.ArgumentError).Error" "(*internal/poll.DeadlineExceededError).Error"
"(*go/types.ArgumentError).Error" "(*fmt.wrapError).Error"
"(*go/types.ArgumentError).Error" "(*fmt.wrapErrors).Error"
"(*go/types.ArgumentError).Error" "(runtime.plainError).Error"
"(*go/types.ArgumentError).Error" "(*go/build/constraint.SyntaxError).Error"
"(*go/types.ArgumentError).Error" "(*reflect.ValueError).Error"
"(*go/types.ArgumentError).Error" "(*strconv.NumError).Error"
"(*go/types.ArgumentError).Error" "(*time.ParseError).Error"
"(*go/types.ArgumentError).Error" "(internal/poll.errNetClosing).Error"
"(*go/types.ArgumentError).Error" "(*go/types.ArgumentError).Error"
"(*os.SyscallError).Error" "(*errors.errorString).Error"
"(*os.SyscallError).Error" "(runtime.errorString).Error"
"(*os.SyscallError).Error" "(go/scanner.ErrorList).Error"
"(*os.SyscallError).Error" "(*io/fs.PathError).Error"
"(*os.SyscallError).Error" "(syscall.Errno).Error"
"(*os.SyscallError).Error" "(*encoding/json.UnmarshalTypeError).Error"
"(*os.SyscallError).Error" "(context.deadlineExceededError).Error"
"(*os.SyscallError).Error" "(*encoding/json.InvalidUnmarshalError).Error"
"(*os.SyscallError).Error" "(*internal/poll.DeadlineExceededError).Error"
"(*os.SyscallError).Error" "(*fmt.wrapError).Error"
"(*os.SyscallError).Error" "(*fmt.wrapErrors).Error"
"(*os.SyscallError).Error" "(runtime.plainError).Error"
"(*os.SyscallError).Error" "(*go/build/constraint.SyntaxError).Error"
"(*os.SyscallError).Error" "(*reflect.ValueError).Error"
"(*os.SyscallError).Error" "(*strconv.NumError).Error"
"(*os.SyscallError).Error" "(*time.ParseError).Error"
"(*os.SyscallError).Error" "(internal/poll.errNetClosing).Error"
"(*os.SyscallError).Error" "(*go/types.ArgumentError).Error"
"(*os.SyscallError).Error" "(*os.SyscallError).Error"
"(*os.SyscallError).Error" "(*encoding/json.UnsupportedValueError).Error"
"(*encoding/json.UnsupportedTypeError).Error" "(*reflect.rtype).String"
"(*os.SyscallError).Error" "(*encoding/json.UnsupportedTypeError).Error"
"(*os.SyscallError).Error" "(time.fileSizeError).Error"
"(*encoding/json.MarshalerError).Error" "(*reflect.rtype).String"
"(*encoding/json.MarshalerError).Error" "(*errors.errorString).Error"
"(*encoding/json.MarshalerError).Error" "(runtime.errorString).Error"
"(*encoding/json.MarshalerError).Error" "(go/scanner.ErrorList).Error"
"(*encoding/json.MarshalerError).Error" "(*io/fs.PathError).Error"
"(*encoding/json.MarshalerError).Error" "(syscall.Errno).Error"
"(*encoding/json.MarshalerError).Error" "(*encoding/json.UnmarshalTypeError).Error"
"(*encoding/json.MarshalerError).Error" "(context.deadlineExceededError).Error"
"(*encoding/json.MarshalerError).Error" "(*encoding/json.InvalidUnmarshalError).Error"
"(*encoding/json.MarshalerError).Error" "(*internal/poll.DeadlineExceededError).Error"
"(*encoding/json.MarshalerError).Error" "(*fmt.wrapError).Error"
"(*encoding/json.MarshalerError).Error" "(*fmt.wrapErrors).Error"
"(*encoding/json.MarshalerError).Error" "(runtime.plainError).Error"
"(*encoding/json.MarshalerError).Error" "(*go/build/constraint.SyntaxError).Error"
"(*encoding/json.MarshalerError).Error" "(*reflect.ValueError).Error"
"(*encoding/json.MarshalerError).Error" "(*strconv.NumError).Error"
"(*encoding/json.MarshalerError).Error" "(*time.ParseError).Error"
"(*encoding/json.MarshalerError).Error" "(internal/poll.errNetClosing).Error"
"(*encoding/json.MarshalerError).Error" "(*go/types.ArgumentError).Error"
"(*encoding/json.MarshalerError).Error" "(*os.SyscallError).Error"
"(*encoding/json.MarshalerError).Error" "(*encoding/json.UnsupportedValueError).Error"
"(*encoding/json.MarshalerError).Error" "(*encoding/json.UnsupportedTypeError).Error"
"(*encoding/json.MarshalerError).Error" "(time.fileSizeError).Error"
"(*encoding/json.MarshalerError).Error" "(*encoding/json.MarshalerError).Error"
"(*encoding/json.MarshalerError).Error" "(golang.org/x/tools/go/packages.Error).Error"
"(*encoding/json.MarshalerError).Error" "(math/big.ErrNaN).Error"
"(*sync/atomic.Pointer[go/token.File]).Load[go/token.File]" "sync/atomic.LoadPointer"
"(*go/token.FileSet).file" "(*sync/atomic.Pointer[go/token.File]).Load[go/token.File]"
"(*sync.RWMutex).RLock" "internal/race.Disable"
"(*sync/atomic.Int32).Add" "sync/atomic.AddInt32"
"(*sync.RWMutex).RLock" "(*sync/atomic.Int32).Add"
"(*sync.RWMutex).RLock" "sync.runtime_SemacquireRWMutexR"
"(*sync.RWMutex).RLock" "internal/race.Enable"
"(*sync.RWMutex).RLock" "internal/race.Acquire"
"(*go/token.FileSet).file" "(*sync.RWMutex).RLock"
"(*sync.RWMutex).RUnlock" "internal/race.ReleaseMerge"
"(*sync.RWMutex).RUnlock" "internal/race.Disable"
"(*sync.RWMutex).RUnlock" "(*sync/atomic.Int32).Add"
"(*sync.RWMutex).rUnlockSlow" "internal/race.Enable"
"(*sync.RWMutex).rUnlockSlow" "sync.fatal"
"(*sync.RWMutex).rUnlockSlow" "(*sync/atomic.Int32).Add"
"(*sync.RWMutex).rUnlockSlow" "sync.runtime_Semrelease"
"(*sync.RWMutex).RUnlock" "(*sync.RWMutex).rUnlockSlow"
"(*sync.RWMutex).RUnlock" "internal/race.Enable"
"(*go/token.FileSet).file" "(*sync.RWMutex).RUnlock"
"sort.Search" "go/token.searchFiles$1"
"sort.Search" "go/token.searchLineInfos$1"
"(*go/types.MethodSet).Lookup$1" "(*go/types.object).Id"
"sort.Search" "(*go/types.MethodSet).Lookup$1"
"go/token.searchFiles" "sort.Search"
"(*go/token.FileSet).file" "go/token.searchFiles"
"(*sync/atomic.Pointer[go/token.File]).Store[go/token.File]" "sync/atomic.StorePointer"
"(*go/token.FileSet).file" "(*sync/atomic.Pointer[go/token.File]).Store[go/token.File]"
"(*go/token.FileSet).PositionFor" "(*go/token.FileSet).file"
"(*go/token.File).unpack" "(*sync.Mutex).Lock"
"(*go/token.File).unpack" "go/token.searchInts"
"go/token.searchLineInfos" "sort.Search"
"(*go/token.File).unpack" "go/token.searchLineInfos"
"(*go/token.File).unpack" "(*sync.Mutex).Unlock"
"(*go/token.File).unpack" "go/token.searchInts"
"(*go/token.File).position" "(*go/token.File).unpack"
"(*go/token.FileSet).PositionFor" "(*go/token.File).position"
"(*go/token.FileSet).Position" "(*go/token.FileSet).PositionFor"
"(go/types.Error).Error" "(*go/token.FileSet).Position"
"(go/types.Error).Error" "fmt.Sprintf"
"(*encoding/json.MarshalerError).Error" "(go/types.Error).Error"
"(*encoding/json.MarshalerError).Error" "(runtime.errorAddressString).Error"
"(*regexp/syntax.Error).Error" "(regexp/syntax.ErrorCode).String"
"(*encoding/json.MarshalerError).Error" "(*regexp/syntax.Error).Error"
"(*runtime.TypeAssertionError).Error" "runtime.toRType"
"runtime.reflectOffsLock" "runtime.lock"
"runtime.reflectOffsLock" "runtime.raceacquire"
"runtime.resolveNameOff" "runtime.reflectOffsLock"
"runtime.racerelease" "runtime.throw"
"runtime.reflectOffsUnlock" "runtime.racerelease"
"runtime.reflectOffsUnlock" "runtime.unlock"
"runtime.resolveNameOff" "runtime.reflectOffsUnlock"
"runtime.resolveNameOff" "runtime.throw"
"runtime.resolveNameOff" "runtime.throw"
"(runtime.rtype).nameOff" "runtime.resolveNameOff"
"(runtime.rtype).string" "(runtime.rtype).nameOff"
"(runtime.rtype).string" "(internal/abi.Name).Name"
"(*runtime.TypeAssertionError).Error" "(runtime.rtype).string"
"(*runtime.TypeAssertionError).Error" "runtime.toRType"
"(*runtime.TypeAssertionError).Error" "(runtime.rtype).string"
"(*runtime.TypeAssertionError).Error" "runtime.toRType"
"(*runtime.TypeAssertionError).Error" "(runtime.rtype).string"
"(*runtime.TypeAssertionError).Error" "runtime.toRType"
"(runtime.rtype).uncommon" "(*internal/abi.Type).Uncommon"
"(runtime.rtype).pkgpath" "(runtime.rtype).uncommon"
"(runtime.rtype).pkgpath" "(runtime.rtype).nameOff"
"(runtime.rtype).pkgpath" "(internal/abi.Name).Name"
"(runtime.rtype).pkgpath" "(internal/abi.Name).Name"
"(runtime.rtype).pkgpath" "(internal/abi.Name).Name"
"(*runtime.TypeAssertionError).Error" "(runtime.rtype).pkgpath"
"(*runtime.TypeAssertionError).Error" "runtime.toRType"
"(*runtime.TypeAssertionError).Error" "(runtime.rtype).pkgpath"
"(*encoding/json.MarshalerError).Error" "(*runtime.TypeAssertionError).Error"
"(*os/exec.Error).Error" "strconv.Quote"
"(*os/exec.Error).Error" "(*errors.errorString).Error"
"(*os/exec.Error).Error" "(runtime.errorString).Error"
"(*os/exec.Error).Error" "(go/scanner.ErrorList).Error"
"(*os/exec.Error).Error" "(*io/fs.PathError).Error"
"(*os/exec.Error).Error" "(syscall.Errno).Error"
"(*os/exec.Error).Error" "(*encoding/json.UnmarshalTypeError).Error"
"(*os/exec.Error).Error" "(context.deadlineExceededError).Error"
"(*os/exec.Error).Error" "(*encoding/json.InvalidUnmarshalError).Error"
"(*os/exec.Error).Error" "(*internal/poll.DeadlineExceededError).Error"
"(*os/exec.Error).Error" "(*fmt.wrapError).Error"
"(*os/exec.Error).Error" "(*fmt.wrapErrors).Error"
"(*os/exec.Error).Error" "(runtime.plainError).Error"
"(*os/exec.Error).Error" "(*go/build/constraint.SyntaxError).Error"
"(*os/exec.Error).Error" "(*reflect.ValueError).Error"
"(*os/exec.Error).Error" "(*strconv.NumError).Error"
"(*os/exec.Error).Error" "(*time.ParseError).Error"
"(*os/exec.Error).Error" "(internal/poll.errNetClosing).Error"
"(*os/exec.Error).Error" "(*go/types.ArgumentError).Error"
"(*os/exec.Error).Error" "(*os.SyscallError).Error"
"(*os/exec.Error).Error" "(*encoding/json.UnsupportedValueError).Error"
"(*os/exec.Error).Error" "(*encoding/json.UnsupportedTypeError).Error"
"(*os/exec.Error).Error" "(time.fileSizeError).Error"
"(*os/exec.Error).Error" "(*encoding/json.MarshalerError).Error"
"(*os/exec.Error).Error" "(golang.org/x/tools/go/packages.Error).Error"
"(*os/exec.Error).Error" "(math/big.ErrNaN).Error"
"(*os/exec.Error).Error" "(go/types.Error).Error"
"(*os/exec.Error).Error" "(runtime.errorAddressString).Error"
"(*os/exec.Error).Error" "(*regexp/syntax.Error).Error"
"(*os/exec.Error).Error" "(*runtime.TypeAssertionError).Error"
"(*os/exec.Error).Error" "(*os/exec.Error).Error"
"(*os/exec.Error).Error" "(*encoding/json.SyntaxError).Error"
"(*os/exec.Error).Error" "(*internal/bisect.parseError).Error"
"(*os.ProcessState).Sys" "(*os.ProcessState).sys"
"(*os.ProcessState).String" "(*os.ProcessState).Sys"
"(*os.ProcessState).String" "(syscall.WaitStatus).Exited"
"(syscall.WaitStatus).CoreDump" "(syscall.WaitStatus).Signaled"
"(*os.ProcessState).String" "(syscall.WaitStatus).CoreDump"
"(*os.ProcessState).String" "(syscall.WaitStatus).ExitStatus"
"(*os.ProcessState).String" "(syscall.WaitStatus).Signal"
"(syscall.Signal).String" "internal/itoa.Itoa"
"(*os.ProcessState).String" "(syscall.Signal).String"
"(*os.ProcessState).String" "(syscall.WaitStatus).Signaled"
"(*os.ProcessState).String" "internal/itoa.Uitox"
"(*os.ProcessState).String" "internal/itoa.Itoa"
"(syscall.WaitStatus).StopSignal" "(syscall.WaitStatus).Stopped"
"(*os.ProcessState).String" "(syscall.WaitStatus).StopSignal"
"(*os.ProcessState).String" "(syscall.Signal).String"
"(*os.ProcessState).String" "(syscall.WaitStatus).StopSignal"
"(*os.ProcessState).String" "(syscall.WaitStatus).Stopped"
"(*os.ProcessState).String" "(syscall.WaitStatus).Continued"
"(*os.ProcessState).String" "(syscall.WaitStatus).TrapCause"
"(*os.ProcessState).String" "internal/itoa.Itoa"
"(*os.ProcessState).String" "(syscall.WaitStatus).TrapCause"
"(*os/exec.ExitError).Error" "(*os.ProcessState).String"
"(*os/exec.Error).Error" "(*os/exec.ExitError).Error"
"(os/exec.wrappedError).Error" "(*errors.errorString).Error"
"(os/exec.wrappedError).Error" "(runtime.errorString).Error"
"(os/exec.wrappedError).Error" "(go/scanner.ErrorList).Error"
"(os/exec.wrappedError).Error" "(*io/fs.PathError).Error"
"(os/exec.wrappedError).Error" "(syscall.Errno).Error"
"(os/exec.wrappedError).Error" "(*encoding/json.UnmarshalTypeError).Error"
"(os/exec.wrappedError).Error" "(context.deadlineExceededError).Error"
"(os/exec.wrappedError).Error" "(*encoding/json.InvalidUnmarshalError).Error"
"(os/exec.wrappedError).Error" "(*internal/poll.DeadlineExceededError).Error"
"(os/exec.wrappedError).Error" "(*fmt.wrapError).Error"
"(os/exec.wrappedError).Error" "(*fmt.wrapErrors).Error"
"(os/exec.wrappedError).Error" "(runtime.plainError).Error"
"(os/exec.wrappedError).Error" "(*go/build/constraint.SyntaxError).Error"
"(os/exec.wrappedError).Error" "(*reflect.ValueError).Error"
"(os/exec.wrappedError).Error" "(*strconv.NumError).Error"
"(os/exec.wrappedError).Error" "(*time.ParseError).Error"
"(os/exec.wrappedError).Error" "(internal/poll.errNetClosing).Error"
"(os/exec.wrappedError).Error" "(*go/types.ArgumentError).Error"
"(os/exec.wrappedError).Error" "(*os.SyscallError).Error"
"(os/exec.wrappedError).Error" "(*encoding/json.UnsupportedValueError).Error"
"(os/exec.wrappedError).Error" "(*encoding/json.UnsupportedTypeError).Error"
"(os/exec.wrappedError).Error" "(time.fileSizeError).Error"
"(os/exec.wrappedError).Error" "(*encoding/json.MarshalerError).Error"
"(os/exec.wrappedError).Error" "(golang.org/x/tools/go/packages.Error).Error"
"(os/exec.wrappedError).Error" "(math/big.ErrNaN).Error"
"(os/exec.wrappedError).Error" "(go/types.Error).Error"
"(os/exec.wrappedError).Error" "(runtime.errorAddressString).Error"
"(os/exec.wrappedError).Error" "(*regexp/syntax.Error).Error"
"(os/exec.wrappedError).Error" "(*runtime.TypeAssertionError).Error"
"(os/exec.wrappedError).Error" "(*os/exec.Error).Error"
"(os/exec.wrappedError).Error" "(*encoding/json.SyntaxError).Error"
"(os/exec.wrappedError).Error" "(*internal/bisect.parseError).Error"
"(os/exec.wrappedError).Error" "(*os/exec.ExitError).Error"
"(os/exec.wrappedError).Error" "(os/exec.wrappedError).Error"
"(os/exec.wrappedError).Error" "(go/scanner.Error).Error"
"(encoding/base64.CorruptInputError).Error" "strconv.FormatInt"
"(os/exec.wrappedError).Error" "(encoding/base64.CorruptInputError).Error"
"(*internal/reflectlite.ValueError).Error" "(internal/abi.Kind).String"
"(os/exec.wrappedError).Error" "(*internal/reflectlite.ValueError).Error"
"(*os/exec.Error).Error" "(os/exec.wrappedError).Error"
"(*os/exec.Error).Error" "(go/scanner.Error).Error"
"(*os/exec.Error).Error" "(encoding/base64.CorruptInputError).Error"
"(*os/exec.Error).Error" "(*internal/reflectlite.ValueError).Error"
"(*encoding/json.MarshalerError).Error" "(*os/exec.Error).Error"
"(*encoding/json.MarshalerError).Error" "(*encoding/json.SyntaxError).Error"
"(*encoding/json.MarshalerError).Error" "(*internal/bisect.parseError).Error"
"(*encoding/json.MarshalerError).Error" "(*os/exec.ExitError).Error"
"(*encoding/json.MarshalerError).Error" "(os/exec.wrappedError).Error"
"(*encoding/json.MarshalerError).Error" "(go/scanner.Error).Error"
"(*encoding/json.MarshalerError).Error" "(encoding/base64.CorruptInputError).Error"
"(*encoding/json.MarshalerError).Error" "(*internal/reflectlite.ValueError).Error"
"(*os.SyscallError).Error" "(*encoding/json.MarshalerError).Error"
"(*os.SyscallError).Error" "(golang.org/x/tools/go/packages.Error).Error"
"(*os.SyscallError).Error" "(math/big.ErrNaN).Error"
"(*os.SyscallError).Error" "(go/types.Error).Error"
"(*os.SyscallError).Error" "(runtime.errorAddressString).Error"
"(*os.SyscallError).Error" "(*regexp/syntax.Error).Error"
"(*os.SyscallError).Error" "(*runtime.TypeAssertionError).Error"
"(*os.SyscallError).Error" "(*os/exec.Error).Error"
"(*os.SyscallError).Error" "(*encoding/json.SyntaxError).Error"
"(*os.SyscallError).Error" "(*internal/bisect.parseError).Error"
"(*os.SyscallError).Error" "(*os/exec.ExitError).Error"
"(*os.SyscallError).Error" "(os/exec.wrappedError).Error"
"(*os.SyscallError).Error" "(go/scanner.Error).Error"
"(*os.SyscallError).Error" "(encoding/base64.CorruptInputError).Error"
"(*os.SyscallError).Error" "(*internal/reflectlite.ValueError).Error"
"(*go/types.ArgumentError).Error" "(*os.SyscallError).Error"
"(*go/types.ArgumentError).Error" "(*encoding/json.UnsupportedValueError).Error"
"(*go/types.ArgumentError).Error" "(*encoding/json.UnsupportedTypeError).Error"
"(*go/types.ArgumentError).Error" "(time.fileSizeError).Error"
"(*go/types.ArgumentError).Error" "(*encoding/json.MarshalerError).Error"
"(*go/types.ArgumentError).Error" "(golang.org/x/tools/go/packages.Error).Error"
"(*go/types.ArgumentError).Error" "(math/big.ErrNaN).Error"
"(*go/types.ArgumentError).Error" "(go/types.Error).Error"
"(*go/types.ArgumentError).Error" "(runtime.errorAddressString).Error"
"(*go/types.ArgumentError).Error" "(*regexp/syntax.Error).Error"
"(*go/types.ArgumentError).Error" "(*runtime.TypeAssertionError).Error"
"(*go/types.ArgumentError).Error" "(*os/exec.Error).Error"
"(*go/types.ArgumentError).Error" "(*encoding/json.SyntaxError).Error"
"(*go/types.ArgumentError).Error" "(*internal/bisect.parseError).Error"
"(*go/types.ArgumentError).Error" "(*os/exec.ExitError).Error"
"(*go/types.ArgumentError).Error" "(os/exec.wrappedError).Error"
"(*go/types.ArgumentError).Error" "(go/scanner.Error).Error"
"(*go/types.ArgumentError).Error" "(encoding/base64.CorruptInputError).Error"
"(*go/types.ArgumentError).Error" "(*internal/reflectlite.ValueError).Error"
"(*strconv.NumError).Error" "(*go/types.ArgumentError).Error"
"(*strconv.NumError).Error" "(*os.SyscallError).Error"
"(*strconv.NumError).Error" "(*encoding/json.UnsupportedValueError).Error"
"(*strconv.NumError).Error" "(*encoding/json.UnsupportedTypeError).Error"
"(*strconv.NumError).Error" "(time.fileSizeError).Error"
"(*strconv.NumError).Error" "(*encoding/json.MarshalerError).Error"
"(*strconv.NumError).Error" "(golang.org/x/tools/go/packages.Error).Error"
"(*strconv.NumError).Error" "(math/big.ErrNaN).Error"
"(*strconv.NumError).Error" "(go/types.Error).Error"
"(*strconv.NumError).Error" "(runtime.errorAddressString).Error"
"(*strconv.NumError).Error" "(*regexp/syntax.Error).Error"
"(*strconv.NumError).Error" "(*runtime.TypeAssertionError).Error"
"(*strconv.NumError).Error" "(*os/exec.Error).Error"
"(*strconv.NumError).Error" "(*encoding/json.SyntaxError).Error"
"(*strconv.NumError).Error" "(*internal/bisect.parseError).Error"
"(*strconv.NumError).Error" "(*os/exec.ExitError).Error"
"(*strconv.NumError).Error" "(os/exec.wrappedError).Error"
"(*strconv.NumError).Error" "(go/scanner.Error).Error"
"(*strconv.NumError).Error" "(encoding/base64.CorruptInputError).Error"
"(*strconv.NumError).Error" "(*internal/reflectlite.ValueError).Error"
"(*io/fs.PathError).Error" "(*strconv.NumError).Error"
"(*io/fs.PathError).Error" "(*time.ParseError).Error"
"(*io/fs.PathError).Error" "(internal/poll.errNetClosing).Error"
"(*io/fs.PathError).Error" "(*go/types.ArgumentError).Error"
"(*io/fs.PathError).Error" "(*os.SyscallError).Error"
"(*io/fs.PathError).Error" "(*encoding/json.UnsupportedValueError).Error"
"(*io/fs.PathError).Error" "(*encoding/json.UnsupportedTypeError).Error"
"(*io/fs.PathError).Error" "(time.fileSizeError).Error"
"(*io/fs.PathError).Error" "(*encoding/json.MarshalerError).Error"
"(*io/fs.PathError).Error" "(golang.org/x/tools/go/packages.Error).Error"
"(*io/fs.PathError).Error" "(math/big.ErrNaN).Error"
"(*io/fs.PathError).Error" "(go/types.Error).Error"
"(*io/fs.PathError).Error" "(runtime.errorAddressString).Error"
"(*io/fs.PathError).Error" "(*regexp/syntax.Error).Error"
"(*io/fs.PathError).Error" "(*runtime.TypeAssertionError).Error"
"(*io/fs.PathError).Error" "(*os/exec.Error).Error"
"(*io/fs.PathError).Error" "(*encoding/json.SyntaxError).Error"
"(*io/fs.PathError).Error" "(*internal/bisect.parseError).Error"
"(*io/fs.PathError).Error" "(*os/exec.ExitError).Error"
"(*io/fs.PathError).Error" "(os/exec.wrappedError).Error"
"(*io/fs.PathError).Error" "(go/scanner.Error).Error"
"(*io/fs.PathError).Error" "(encoding/base64.CorruptInputError).Error"
"(*io/fs.PathError).Error" "(*internal/reflectlite.ValueError).Error"
"(*os.File).wrapErr" "(*io/fs.PathError).Error"
"(*os.File).wrapErr" "(syscall.Errno).Error"
"(*os.File).wrapErr" "(*encoding/json.UnmarshalTypeError).Error"
"(*os.File).wrapErr" "(context.deadlineExceededError).Error"
"(*os.File).wrapErr" "(*encoding/json.InvalidUnmarshalError).Error"
"(*os.File).wrapErr" "(*internal/poll.DeadlineExceededError).Error"
"(*os.File).wrapErr" "(*fmt.wrapError).Error"
"(*os.File).wrapErr" "(*fmt.wrapErrors).Error"
"(*os.File).wrapErr" "(runtime.plainError).Error"
"(*os.File).wrapErr" "(*go/build/constraint.SyntaxError).Error"
"(*os.File).wrapErr" "(*reflect.ValueError).Error"
"(*os.File).wrapErr" "(*strconv.NumError).Error"
"internal/reflectlite.TypeOf" "internal/reflectlite.noescape"
"internal/reflectlite.TypeOf" "internal/reflectlite.toType"
"errors.Is" "internal/reflectlite.TypeOf"
"errors.Is" "(internal/reflectlite.rtype).Comparable"
"errors.is" "(syscall.Errno).Is"
"errors.is" "(*go/types.ArgumentError).Unwrap"
"errors.is" "(*io/fs.PathError).Unwrap"
"errors.is" "(*strconv.NumError).Unwrap"
"errors.is" "(*fmt.wrapError).Unwrap"
"errors.is" "(*os.SyscallError).Unwrap"
"errors.is" "(*fmt.wrapErrors).Unwrap"
"errors.is" "errors.is"
"errors.is" "(*os/exec.Error).Unwrap"
"errors.is" "(os/exec.wrappedError).Unwrap"
"errors.is" "(*encoding/json.MarshalerError).Unwrap"
"errors.Is" "errors.is"
"(*os.File).wrapErr" "errors.Is"
"(*os.File).wrapErr" "(*time.ParseError).Error"
"(*os.File).wrapErr" "(internal/poll.errNetClosing).Error"
"(*os.File).wrapErr" "(*go/types.ArgumentError).Error"
"(*os.File).wrapErr" "(*os.SyscallError).Error"
"(*os.File).wrapErr" "(*encoding/json.UnsupportedValueError).Error"
"(*os.File).wrapErr" "(*encoding/json.UnsupportedTypeError).Error"
"(*os.File).wrapErr" "(time.fileSizeError).Error"
"(*os.File).wrapErr" "(*encoding/json.MarshalerError).Error"
"(*os.File).wrapErr" "(golang.org/x/tools/go/packages.Error).Error"
"(*os.File).wrapErr" "(math/big.ErrNaN).Error"
"(*os.File).wrapErr" "(go/types.Error).Error"
"(*os.File).wrapErr" "(runtime.errorAddressString).Error"
"(*os.File).wrapErr" "(*regexp/syntax.Error).Error"
"(*os.File).wrapErr" "(*runtime.TypeAssertionError).Error"
"(*os.File).wrapErr" "(*os/exec.Error).Error"
"(*os.File).wrapErr" "(*encoding/json.SyntaxError).Error"
"(*os.File).wrapErr" "(*internal/bisect.parseError).Error"
"(*os.File).wrapErr" "(*os/exec.ExitError).Error"
"(*os.File).wrapErr" "(os/exec.wrappedError).Error"
"(*os.File).wrapErr" "(go/scanner.Error).Error"
"(*os.File).wrapErr" "(encoding/base64.CorruptInputError).Error"
"(*os.File).wrapErr" "(*internal/reflectlite.ValueError).Error"
"(*os.File).Write" "(*os.File).wrapErr"
"fmt.Fprint" "(*os.File).Write"
"(*crypto/md5.digest).Write" "crypto/md5.block"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "(encoding/binary.littleEndian).Uint32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"crypto/md5.blockGeneric" "math/bits.RotateLeft32"
"(*crypto/md5.digest).Write" "crypto/md5.blockGeneric"
"(*crypto/md5.digest).Write" "crypto/md5.block"
"(*crypto/md5.digest).Write" "crypto/md5.blockGeneric"
"fmt.Fprint" "(*crypto/md5.digest).Write"
"fmt.Fprint" "(*fmt.pp).free"
"(*bytes.Buffer).Write" "(*bytes.Buffer).tryGrowByReslice"
"(*bytes.Buffer).grow" "(*bytes.Buffer).Len"
"(*bytes.Buffer).grow" "(*bytes.Buffer).Reset"
"(*bytes.Buffer).grow" "(*bytes.Buffer).tryGrowByReslice"
"bytes.growSlice" "bytes.growSlice$1"
"(*bytes.Buffer).grow" "bytes.growSlice"
"(*bytes.Buffer).Write" "(*bytes.Buffer).grow"
"fmt.Fprint" "(*bytes.Buffer).Write"
"(*strings.Builder).Write" "(*strings.Builder).copyCheck"
"fmt.Fprint" "(*strings.Builder).Write"
"(*go/ast.printer).Write" "(*internal/poll.FD).Write"
"(*go/ast.printer).Write" "(io.discard).Write"
"(*go/ast.printer).Write" "(*os/exec.prefixSuffixSaver).Write"
"(*go/ast.printer).Write" "(*fmt.pp).Write"
"(*go/ast.printer).Write" "(*os.File).Write"
"(*go/ast.printer).Write" "(*strings.Builder).Write"
"(*go/ast.printer).Write" "(*crypto/md5.digest).Write"
"(*go/ast.printer).Write" "(*internal/poll.FD).Write"
"(*go/ast.printer).Write" "(*crypto/md5.digest).Write"
"(*go/ast.printer).Write" "(*go/ast.printer).Write"
"(*go/ast.printer).Write" "(*fmt.pp).Write"
"(*go/ast.printer).Write" "(*log/slog/internal/buffer.Buffer).Write"
"(*go/ast.printer).Write" "(*strings.Builder).Write"
"(*go/ast.printer).Write" "(*bytes.Buffer).Write"
"(*internal/godebug.runtimeStderr).Write" "internal/godebug.write"
"(*go/ast.printer).Write" "(*internal/godebug.runtimeStderr).Write"
"(*go/ast.printer).Write" "(*bytes.Buffer).Write"
"(*go/ast.printer).Write" "(*crypto/md5.digest).Write"
"(*go/ast.printer).Write" "(*os/exec.prefixSuffixSaver).Write"
"(*go/ast.printer).Write" "(*go/ast.printer).Write"
"(*go/ast.printer).Write" "fmt.Fprintf"
"(*go/ast.printer).Write" "(*internal/poll.FD).Write"
"(*go/ast.printer).Write" "(io.discard).Write"
"(*go/ast.printer).Write" "(io.discard).Write"
"(*go/ast.printer).Write" "(*fmt.pp).Write"
"(*go/ast.printer).Write" "(*os.File).Write"
"(*go/ast.printer).Write" "(*log/slog/internal/buffer.Buffer).Write"
"(*go/ast.printer).Write" "(*internal/godebug.runtimeStderr).Write"
"(*go/ast.printer).Write" "(*go/ast.printer).Write"
"(*go/ast.printer).Write" "(*internal/godebug.runtimeStderr).Write"
"(*go/ast.printer).Write" "(*os/exec.prefixSuffixSaver).Write"
"(*go/ast.printer).Write" "(*os.File).Write"
"(*go/ast.printer).Write" "(*log/slog/internal/buffer.Buffer).Write"
"(*go/ast.printer).Write" "(*strings.Builder).Write"
"(*go/ast.printer).Write" "(*bytes.Buffer).Write"
"fmt.Fprint" "(*go/ast.printer).Write"
"fmt.Fprint" "(*internal/godebug.runtimeStderr).Write"
"fmt.Fprint" "(*log/slog/internal/buffer.Buffer).Write"
"(*flag.FlagSet).PrintDefaults$1" "fmt.Fprint"
"(*flag.FlagSet).PrintDefaults$1" "fmt.Fprintf"
"(*flag.FlagSet).PrintDefaults$1" "fmt.Fprintf"
"(*flag.FlagSet).VisitAll" "(*flag.FlagSet).PrintDefaults$1"
"(*flag.FlagSet).PrintDefaults" "(*flag.FlagSet).VisitAll"
"(*flag.FlagSet).PrintDefaults" "(*flag.FlagSet).Output"
"fmt.Fprintln" "fmt.newPrinter"
"(*fmt.pp).doPrintln" "(*fmt.buffer).writeByte"
"(*fmt.pp).doPrintln" "(*fmt.buffer).writeByte"
"(*fmt.pp).doPrintln" "(*fmt.pp).printArg"
"fmt.Fprintln" "(*fmt.pp).doPrintln"
"fmt.Fprintln" "(*internal/poll.FD).Write"
"fmt.Fprintln" "(io.discard).Write"
"fmt.Fprintln" "(*internal/godebug.runtimeStderr).Write"
"fmt.Fprintln" "(*fmt.pp).Write"
"fmt.Fprintln" "(*os.File).Write"
"fmt.Fprintln" "(*crypto/md5.digest).Write"
"fmt.Fprintln" "(*os/exec.prefixSuffixSaver).Write"
"fmt.Fprintln" "(*fmt.pp).free"
"fmt.Fprintln" "(*strings.Builder).Write"
"fmt.Fprintln" "(*go/ast.printer).Write"
"fmt.Fprintln" "(*bytes.Buffer).Write"
"fmt.Fprintln" "(*log/slog/internal/buffer.Buffer).Write"
"(*flag.FlagSet).PrintDefaults" "fmt.Fprintln"
"(*flag.FlagSet).PrintDefaults" "(*flag.FlagSet).Output"
"(*flag.FlagSet).PrintDefaults" "fmt.Fprintln"
"(*flag.FlagSet).defaultUsage" "(*flag.FlagSet).PrintDefaults"
"(*flag.FlagSet).defaultUsage" "(*flag.FlagSet).Output"
"(*flag.FlagSet).defaultUsage" "fmt.Fprintf"
"(*sync.Once).doSlow" "(*flag.FlagSet).defaultUsage"
"(*sync.Once).doSlow" "syscall.libc_shutdown_trampoline"
"(*sync.Once).doSlow" "syscall.libc_munmap_trampoline"
"(*sync.Once).doSlow" "syscall.libc_fchdir_trampoline"
"runtime.addfinalizer" "runtime.lock"
"(*runtime.fixalloc).alloc" "runtime.throw"
"(*runtime.fixalloc).alloc" "runtime.memclrNoHeapPointers"
"(*runtime.fixalloc).alloc" "runtime.persistentalloc"
"runtime.addfinalizer" "(*runtime.fixalloc).alloc"
"runtime.addfinalizer" "runtime.unlock"
"runtime.addspecial" "runtime.spanOfHeap"
"runtime.addspecial" "runtime.throw"
"runtime.addspecial" "runtime.acquirem"
"(*runtime.mspan).ensureSwept" "runtime.getg"
"(*runtime.mspan).ensureSwept" "runtime.throw"
"(*runtime.activeSweep).begin" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.activeSweep).begin" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"(*runtime.mspan).ensureSwept" "(*runtime.activeSweep).begin"
"(*runtime.sweepLocker).tryAcquire" "runtime.throw"
"(*runtime.sweepLocker).tryAcquire" "runtime/internal/atomic.Load"
"(*runtime.sweepLocker).tryAcquire" "runtime/internal/atomic.Cas"
"(*runtime.mspan).ensureSwept" "(*runtime.sweepLocker).tryAcquire"
"(*runtime.sweepLocked).sweep" "runtime.getg"
"(*runtime.sweepLocked).sweep" "runtime.throw"
"(*runtime.sweepLocked).sweep" "(*runtime.mSpanStateBox).get"
"(*runtime.sweepLocked).sweep" "runtime.throw"
"(*runtime.sweepLocked).sweep" "runtime.traceAcquire"
"(*runtime.sweepLocked).sweep" "(runtime.traceLocker).ok"
"(runtime.traceLocker).GCSweepSpan" "(runtime.puintptr).ptr"
"(runtime.traceLocker).eventWriter" "(runtime.traceLocker).writer"
"(runtime.traceLocker).eventWriter" "(runtime.puintptr).ptr"
"(runtime.traceWriter).writeProcStatus" "runtime.throw"
"(runtime.traceWriter).ensure" "(*runtime.traceBuf).available"
"(runtime.traceWriter).refill" "runtime.systemstack"
"runtime.traceClockNow" "runtime.cputicks"
"runtime.traceClockNow" "runtime.nanotime"
"(runtime.traceWriter).refill" "runtime.traceClockNow"
"(runtime.traceWriter).refill" "(*runtime.traceBuf).byte"
"(runtime.traceWriter).refill" "(*runtime.traceBuf).varint"
"(runtime.traceWriter).refill" "(*runtime.traceBuf).varint"
"(runtime.traceWriter).refill" "(*runtime.traceBuf).varint"
"(runtime.traceWriter).refill" "(*runtime.traceBuf).varintReserve"
"(runtime.traceWriter).ensure" "(runtime.traceWriter).refill"
"(runtime.traceWriter).event" "(runtime.traceWriter).ensure"
"(runtime.traceWriter).event" "runtime.traceClockNow"
"(runtime.traceWriter).event" "(*runtime.traceBuf).byte"
"(runtime.traceWriter).event" "(*runtime.traceBuf).varint"
"(runtime.traceWriter).event" "(*runtime.traceBuf).varint"
"(runtime.traceWriter).writeProcStatus" "(runtime.traceWriter).event"
"(runtime.traceWriter).writeProcStatus" "(runtime.traceWriter).event"
"(runtime.traceLocker).eventWriter" "(runtime.traceWriter).writeProcStatus"
"(*runtime.traceSchedResourceState).acquireStatus" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"(*runtime.traceSchedResourceState).readyNextGen" "runtime.traceNextGen"
"(*runtime/internal/atomic.Uint32).Store" "runtime/internal/atomic.Store"
"(*runtime.traceSchedResourceState).readyNextGen" "(*runtime/internal/atomic.Uint32).Store"
"(*runtime.traceSchedResourceState).acquireStatus" "(*runtime.traceSchedResourceState).readyNextGen"
"(runtime.traceLocker).eventWriter" "(*runtime.traceSchedResourceState).acquireStatus"
"(*runtime.traceSchedResourceState).statusWasTraced" "(*runtime/internal/atomic.Uint32).Load"
"(runtime.traceLocker).eventWriter" "(*runtime.traceSchedResourceState).statusWasTraced"
"(runtime.traceWriter).writeGoStatus" "runtime.throw"
"(runtime.traceWriter).writeGoStatus" "(runtime.traceWriter).event"
"(runtime.traceWriter).writeGoStatus" "(runtime.traceWriter).event"
"(runtime.traceLocker).eventWriter" "(runtime.traceWriter).writeGoStatus"
"(runtime.traceLocker).eventWriter" "(*runtime.traceSchedResourceState).acquireStatus"
"(runtime.traceLocker).eventWriter" "(*runtime.traceSchedResourceState).statusWasTraced"
"(runtime.traceLocker).GCSweepSpan" "(runtime.traceLocker).eventWriter"
"runtime.traceStack" "runtime.getg"
"runtime.traceStack" "runtime.tracefpunwindoff"
"runtime.traceStack" "(*runtime.m).hasCgoOnStack"
"runtime.traceStack" "runtime.callers"
"runtime.traceStack" "runtime.gcallers"
"runtime.traceStack" "runtime.getfp"
"runtime.traceStack" "runtime.fpTracebackPCs"
"runtime.traceStack" "runtime.fpTracebackPCs"
"(*runtime.traceStackTable).put" "runtime.noescape"
"(*runtime.traceMap).put" "runtime.memhash"
"(*runtime.traceMap).bucket" "(*runtime/internal/atomic.UnsafePointer).Load"
"(*runtime.traceMap).find" "(*runtime.traceMap).bucket"
"(*runtime.traceMap).find" "runtime.memequal"
"(*runtime.traceMapNode).next" "(*runtime/internal/atomic.UnsafePointer).Load"
"(*runtime.traceMap).find" "(*runtime.traceMapNode).next"
"(*runtime.traceMap).put" "(*runtime.traceMap).find"
"(*runtime.traceMap).put" "runtime.systemstack"
"(*runtime.traceStackTable).put" "(*runtime.traceMap).put"
"runtime.traceStack" "(*runtime.traceStackTable).put"
"(runtime.traceLocker).stack" "runtime.traceStack"
"(runtime.traceLocker).GCSweepSpan" "(runtime.traceLocker).stack"
"(runtime.traceEventWriter).write" "(runtime.traceWriter).event"
"(runtime.traceEventWriter).commit" "(runtime.traceEventWriter).write"
"(runtime.traceEventWriter).end" "(runtime.traceWriter).end"
"(runtime.traceEventWriter).commit" "(runtime.traceEventWriter).end"
"(runtime.traceLocker).GCSweepSpan" "(runtime.traceEventWriter).commit"
"(*runtime.sweepLocked).sweep" "(runtime.traceLocker).GCSweepSpan"
"(*runtime.sweepLocked).sweep" "runtime.traceRelease"
"(*runtime.sweepLocked).sweep" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.sweepLocked).sweep" "runtime.newSpecialsIter"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).base"
"(*runtime.mspan).markBitsForIndex" "(*runtime.gcBits).bitp"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).markBitsForIndex"
"(*runtime.sweepLocked).sweep" "(runtime.markBits).isMarked"
"(*runtime.sweepLocked).sweep" "(*runtime.specialsIter).valid"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).base"
"(*runtime.sweepLocked).sweep" "(runtime.markBits).setMarkedNonAtomic"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).base"
"(*runtime.sweepLocked).sweep" "(*runtime.specialsIter).valid"
"(*runtime.sweepLocked).sweep" "(*runtime.specialsIter).unlinkAndNext"
"runtime.queuefinalizer" "runtime.throw"
"runtime.queuefinalizer" "runtime.lock"
"runtime.queuefinalizer" "runtime/internal/atomic.Xadd"
"runtime.queuefinalizer" "runtime.unlock"
"(*runtime/internal/atomic.Uint32).Or" "runtime/internal/atomic.Or"
"runtime.queuefinalizer" "(*runtime/internal/atomic.Uint32).Or"
"runtime.queuefinalizer" "runtime.persistentalloc"
"runtime.queuefinalizer" "runtime.throw"
"runtime.freeSpecial" "runtime.queuefinalizer"
"runtime.freeSpecial" "runtime.lock"
"runtime.freeSpecial" "(*runtime.fixalloc).free"
"runtime.freeSpecial" "runtime.unlock"
"(*runtime.mProfCycleHolder).read" "(*runtime/internal/atomic.Uint32).Load"
"runtime.mProf_Free" "(*runtime.mProfCycleHolder).read"
"(*runtime.bucket).mp" "runtime.throw"
"(*runtime.bucket).mp" "runtime.add"
"runtime.mProf_Free" "(*runtime.bucket).mp"
"runtime.mProf_Free" "runtime.lock"
"runtime.mProf_Free" "runtime.unlock"
"runtime.freeSpecial" "runtime.mProf_Free"
"runtime.freeSpecial" "runtime.lock"
"runtime.freeSpecial" "(*runtime.fixalloc).free"
"runtime.freeSpecial" "runtime.unlock"
"runtime.freeSpecial" "runtime.lock"
"runtime.freeSpecial" "(*runtime.fixalloc).free"
"runtime.freeSpecial" "runtime.unlock"
"runtime.freeSpecial" "runtime.throw"
"(*runtime.sweepLocked).sweep" "runtime.freeSpecial"
"(*runtime.sweepLocked).sweep" "(*runtime.specialsIter).next"
"(*runtime.sweepLocked).sweep" "(*runtime.specialsIter).unlinkAndNext"
"(*runtime.sweepLocked).sweep" "runtime.freeSpecial"
"(*runtime.sweepLocked).sweep" "(*runtime.specialsIter).next"
"runtime.spanHasNoSpecials" "(*runtime.mspan).base"
"runtime.spanHasNoSpecials" "(*runtime.mspan).base"
"runtime.spanHasNoSpecials" "runtime.arenaIndex"
"runtime.spanHasNoSpecials" "(runtime.arenaIdx).l1"
"runtime.spanHasNoSpecials" "(runtime.arenaIdx).l2"
"runtime.spanHasNoSpecials" "runtime/internal/atomic.And8"
"(*runtime.sweepLocked).sweep" "runtime.spanHasNoSpecials"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).markBitsForBase"
"(*runtime.mspan).allocBitsForIndex" "(*runtime.gcBits).bitp"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).allocBitsForIndex"
"(*runtime.sweepLocked).sweep" "(runtime.markBits).isMarked"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).base"
"(*runtime.sweepLocked).sweep" "(*runtime.markBits).advance"
"(*runtime.sweepLocked).sweep" "(*runtime.markBits).advance"
"(*runtime.sweepLocked).sweep" "(runtime.markBits).isMarked"
"runtime.tracefree" "runtime.lock"
"runtime.tracefree" "runtime.getg"
"runtime.gotraceback" "runtime.getg"
"runtime.gotraceback" "runtime/internal/atomic.Load"
"runtime.goroutineheader" "runtime.gotraceback"
"runtime.goroutineheader" "runtime.readgstatus"
"runtime.goroutineheader" "(runtime.waitReason).String"
"runtime.goroutineheader" "runtime.nanotime"
"runtime.tracefree" "runtime.goroutineheader"
"runtime.tracefree" "runtime.getcallerpc"
"runtime.tracefree" "runtime.getcallersp"
"runtime.tracefree" "runtime.systemstack"
"runtime.tracefree" "runtime.unlock"
"(*runtime.sweepLocked).sweep" "runtime.tracefree"
"runtime.clobberfree" "runtime.add"
"(*runtime.sweepLocked).sweep" "runtime.clobberfree"
"runtime.racefree" "runtime.throw"
"(*runtime.sweepLocked).sweep" "runtime.racefree"
"runtime.msanfree" "runtime.throw"
"(*runtime.sweepLocked).sweep" "runtime.msanfree"
"runtime.asanpoison" "runtime.throw"
"(*runtime.sweepLocked).sweep" "runtime.asanpoison"
"(*runtime.sweepLocked).sweep" "(*runtime.gcBits).bytep"
"(*runtime.sweepLocked).sweep" "(*runtime.gcBits).bytep"
"(*runtime.mspan).countAlloc" "runtime.divRoundUp"
"(*runtime.mspan).countAlloc" "(*runtime.gcBits).bytep"
"(*runtime.mspan).countAlloc" "runtime/internal/sys.OnesCount64"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).countAlloc"
"(*runtime.mspan).reportZombies" "runtime.printlock"
"(*runtime.mspan).reportZombies" "(*runtime.mspan).markBitsForBase"
"(*runtime.mspan).reportZombies" "(*runtime.mspan).allocBitsForIndex"
"(*runtime.mspan).reportZombies" "(*runtime.mspan).base"
"(*runtime.mspan).reportZombies" "runtime.throw"
"(*runtime.mspan).reportZombies" "(runtime.markBits).isMarked"
"(*runtime.mspan).reportZombies" "(runtime.markBits).isMarked"
"(*runtime.mspan).reportZombies" "(runtime.markBits).isMarked"
"(*runtime.mspan).reportZombies" "(*runtime.markBits).advance"
"(*runtime.mspan).reportZombies" "(*runtime.markBits).advance"
"(*runtime.mspan).reportZombies" "runtime.hexdumpWords"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).reportZombies"
"(*runtime.sweepLocked).sweep" "runtime.divRoundUp"
"(*runtime.sweepLocked).sweep" "(*runtime.gcBits).bytep"
"(*runtime.sweepLocked).sweep" "(*runtime.gcBits).bytep"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).reportZombies"
"(*runtime.sweepLocked).sweep" "runtime.throw"
"(*runtime.sweepLocked).sweep" "runtime.traceEnabled"
"(*runtime.sweepLocked).sweep" "runtime.getg"
"(*runtime.sweepLocked).sweep" "(runtime.puintptr).ptr"
"runtime.newMarkBits" "runtime/internal/atomic.Loadp"
"(*runtime.gcBitsArena).tryAlloc" "runtime/internal/atomic.Xadduintptr"
"(*runtime.gcBitsArena).tryAlloc" "runtime/internal/atomic.Loaduintptr"
"runtime.newMarkBits" "(*runtime.gcBitsArena).tryAlloc"
"runtime.newMarkBits" "runtime.lock"
"runtime.newMarkBits" "(*runtime.gcBitsArena).tryAlloc"
"runtime.newMarkBits" "runtime.unlock"
"runtime.newArenaMayUnlock" "runtime.unlock"
"runtime.newArenaMayUnlock" "runtime.sysAlloc"
"runtime.newArenaMayUnlock" "runtime.memclrNoHeapPointers"
"runtime.newArenaMayUnlock" "runtime.throw"
"runtime.newArenaMayUnlock" "runtime.lock"
"runtime.newMarkBits" "runtime.newArenaMayUnlock"
"runtime.newMarkBits" "(*runtime.gcBitsArena).tryAlloc"
"runtime.newMarkBits" "runtime.unlock"
"runtime.newMarkBits" "(*runtime.gcBitsArena).tryAlloc"
"runtime.newMarkBits" "runtime.throw"
"runtime.newMarkBits" "runtime/internal/atomic.StorepNoWB"
"runtime.newMarkBits" "runtime.unlock"
"(*runtime.sweepLocked).sweep" "runtime.newMarkBits"
"(*runtime.mspan).getPinnerBits" "runtime/internal/atomic.Loadp"
"(*runtime.mspan).refreshPinnerBits" "(*runtime.mspan).getPinnerBits"
"(*runtime.mspan).pinnerBitSize" "runtime.divRoundUp"
"(*runtime.mspan).refreshPinnerBits" "(*runtime.mspan).pinnerBitSize"
"(*runtime.mspan).refreshPinnerBits" "runtime.alignUp"
"(*runtime.mspan).newPinnerBits" "runtime.newMarkBits"
"(*runtime.mspan).refreshPinnerBits" "(*runtime.mspan).newPinnerBits"
"(*runtime.mspan).refreshPinnerBits" "runtime.memmove"
"runtime.atomicwb" "runtime.getg"
"runtime.atomicwb" "(runtime.puintptr).ptr"
"runtime.wbBufFlush" "runtime.getg"
"runtime.wbBufFlush" "runtime.getg"
"runtime.wbBufFlush" "(runtime.puintptr).ptr"
"runtime.wbBufFlush" "(*runtime.wbBuf).discard"
"runtime.wbBufFlush" "runtime.systemstack"
"(*runtime.wbBuf).get2" "runtime.wbBufFlush"
"runtime.atomicwb" "(*runtime.wbBuf).get2"
"runtime.atomicstorep" "runtime.atomicwb"
"runtime.inHeapOrStack" "runtime.spanOf"
"runtime.inHeapOrStack" "(*runtime.mSpanStateBox).get"
"runtime.inHeapOrStack" "(*runtime.mspan).base"
"runtime.cgoIsGoPointer" "runtime.inHeapOrStack"
"runtime.activeModules" "runtime/internal/atomic.Loadp"
"runtime.cgoIsGoPointer" "runtime.activeModules"
"runtime.cgoIsGoPointer" "runtime.cgoInRange"
"runtime.cgoIsGoPointer" "runtime.cgoInRange"
"runtime.cgoCheckPtrWrite" "runtime.cgoIsGoPointer"
"runtime.cgoCheckPtrWrite" "runtime.cgoIsGoPointer"
"runtime.cgoCheckPtrWrite" "runtime.getg"
"runtime.isPinned" "runtime.spanOfHeap"
"runtime.isPinned" "(*runtime.mspan).getPinnerBits"
"runtime.isPinned" "(*runtime.mspan).objIndex"
"(*runtime.pinnerBits).ofObject" "(*runtime.gcBits).bitp"
"(*runtime.pinnerBits).ofObject" "runtime/internal/atomic.Load8"
"runtime.isPinned" "(*runtime.pinnerBits).ofObject"
"runtime.isPinned" "runtime.KeepAlive"
"runtime.isPinned" "(*runtime.pinState).isPinned"
"runtime.cgoCheckPtrWrite" "runtime.isPinned"
"runtime.inPersistentAlloc" "runtime/internal/atomic.Loaduintptr"
"runtime.cgoCheckPtrWrite" "runtime.inPersistentAlloc"
"runtime.cgoCheckPtrWrite" "runtime.systemstack"
"runtime.atomicstorep" "runtime.cgoCheckPtrWrite"
"runtime.atomicstorep" "runtime.noescape"
"runtime.atomicstorep" "runtime/internal/atomic.StorepNoWB"
"(*runtime.mspan).setPinnerBits" "runtime.atomicstorep"
"(*runtime.mspan).refreshPinnerBits" "(*runtime.mspan).setPinnerBits"
"(*runtime.mspan).refreshPinnerBits" "(*runtime.mspan).setPinnerBits"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).refreshPinnerBits"
"(*runtime.mspan).refillAllocCache" "(*runtime.gcBits).bytep"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).refillAllocCache"
"(*runtime.sweepLocked).sweep" "(*runtime.mSpanStateBox).get"
"(*runtime.sweepLocked).sweep" "runtime.throw"
"(*runtime.sweepLocked).sweep" "runtime.throw"
"(*runtime.sweepLocked).sweep" "runtime/internal/atomic.Store"
"(*runtime.sweepLocked).sweep" "(runtime.spanClass).sizeclass"
"(*runtime.sweepLocked).sweep" "runtime.throw"
"(*runtime.sweepLocked).sweep" "(*runtime.mcentral).fullSwept"
"(*runtime.atomicHeadTailIndex).incTail" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.atomicHeadTailIndex).incTail" "(runtime.headTailIndex).tail"
"(*runtime.atomicHeadTailIndex).incTail" "(runtime.headTailIndex).head"
"(*runtime.atomicHeadTailIndex).incTail" "(runtime.headTailIndex).tail"
"(*runtime.atomicHeadTailIndex).incTail" "runtime.throw"
"(*runtime.spanSet).push" "(*runtime.atomicHeadTailIndex).incTail"
"(*runtime.spanSet).push" "(runtime.headTailIndex).tail"
"(*runtime.spanSet).push" "(*runtime/internal/atomic.Uintptr).Load"
"(*runtime.atomicSpanSetSpinePointer).Load" "(*runtime/internal/atomic.UnsafePointer).Load"
"(*runtime.spanSet).push" "(*runtime.atomicSpanSetSpinePointer).Load"
"(runtime.spanSetSpinePointer).lookup" "runtime.add"
"(*runtime.spanSet).push" "(runtime.spanSetSpinePointer).lookup"
"(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).Load[runtime.spanSetBlock]" "(*runtime/internal/atomic.UnsafePointer).Load"
"(*runtime.spanSet).push" "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).Load[runtime.spanSetBlock]"
"(*runtime.atomicMSpanPointer).StoreNoWB" "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
"(*runtime.spanSet).push" "(*runtime.atomicMSpanPointer).StoreNoWB"
"(*runtime.spanSet).push" "runtime.lock"
"(*runtime.spanSet).push" "(*runtime/internal/atomic.Uintptr).Load"
"(*runtime.spanSet).push" "runtime.unlock"
"(*runtime.spanSet).push" "(*runtime.atomicSpanSetSpinePointer).Load"
"(*runtime.lfstack).pop" "runtime/internal/atomic.Load64"
"runtime.lfstackUnpack" "(runtime.taggedPointer).pointer"
"(*runtime.lfstack).pop" "runtime.lfstackUnpack"
"(*runtime.lfstack).pop" "runtime/internal/atomic.Load64"
"(*runtime.lfstack).pop" "runtime/internal/atomic.Cas64"
"(*runtime.spanSetBlockAlloc).alloc" "(*runtime.lfstack).pop"
"(*runtime.spanSetBlockAlloc).alloc" "runtime.persistentalloc"
"(*runtime.spanSet).push" "(*runtime.spanSetBlockAlloc).alloc"
"(*runtime.spanSet).push" "(runtime.spanSetSpinePointer).lookup"
"(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).StoreNoWB[runtime.spanSetBlock]" "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
"(*runtime.spanSet).push" "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).StoreNoWB[runtime.spanSetBlock]"
"(*runtime/internal/atomic.Uintptr).Store" "runtime/internal/atomic.Storeuintptr"
"(*runtime.spanSet).push" "(*runtime/internal/atomic.Uintptr).Store"
"(*runtime.spanSet).push" "runtime.unlock"
"(*runtime.spanSet).push" "runtime.persistentalloc"
"(*runtime.spanSet).push" "runtime.memmove"
"(*runtime.atomicSpanSetSpinePointer).StoreNoWB" "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
"(*runtime.spanSet).push" "(*runtime.atomicSpanSetSpinePointer).StoreNoWB"
"(*runtime.sweepLocked).sweep" "(*runtime.spanSet).push"
"(*runtime.sweepLocked).sweep" "(*runtime/internal/atomic.Uintptr).Add"
"(*runtime/internal/atomic.Uint8).Store" "runtime/internal/atomic.Store8"
"(*runtime.mSpanStateBox).set" "(*runtime/internal/atomic.Uint8).Store"
"(*runtime.sweepLocked).sweep" "(*runtime.mSpanStateBox).set"
"(*runtime.sweepLocked).sweep" "runtime.systemstack"
"(*runtime.consistentHeapStats).acquire" "runtime.getg"
"(*runtime.consistentHeapStats).acquire" "(runtime.puintptr).ptr"
"(*runtime.consistentHeapStats).acquire" "(*runtime/internal/atomic.Uint32).Add"
"(*runtime.consistentHeapStats).acquire" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.consistentHeapStats).acquire" "runtime.lock"
"(*runtime.consistentHeapStats).acquire" "runtime.throw"
"(*runtime.sweepLocked).sweep" "(*runtime.consistentHeapStats).acquire"
"(*runtime.sweepLocked).sweep" "(runtime.spanClass).sizeclass"
"(*runtime.sweepLocked).sweep" "runtime/internal/atomic.Xadd64"
"(*runtime.consistentHeapStats).release" "runtime.getg"
"(*runtime.consistentHeapStats).release" "(runtime.puintptr).ptr"
"(*runtime.consistentHeapStats).release" "(*runtime/internal/atomic.Uint32).Add"
"(*runtime.consistentHeapStats).release" "runtime.unlock"
"(*runtime.consistentHeapStats).release" "runtime.throw"
"(*runtime.sweepLocked).sweep" "(*runtime.consistentHeapStats).release"
"(*runtime.sweepLocked).sweep" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.mheap).freeSpan" "runtime.systemstack"
"(*runtime.sweepLocked).sweep" "(*runtime.mheap).freeSpan"
"(*runtime.sweepLocked).sweep" "(*runtime.mcentral).fullSwept"
"(*runtime.sweepLocked).sweep" "(*runtime.spanSet).push"
"(*runtime.sweepLocked).sweep" "(*runtime.mcentral).partialSwept"
"(*runtime.sweepLocked).sweep" "(*runtime.spanSet).push"
"(*runtime.sweepLocked).sweep" "(*runtime.mcentral).fullSwept"
"(*runtime.sweepLocked).sweep" "(*runtime.spanSet).push"
"(*runtime.sweepLocked).sweep" "(*runtime.mspan).base"
"runtime.sysFault" "(*runtime/internal/atomic.Uint64).Add"
"runtime.sysFaultOS" "runtime.mmap"
"runtime.sysFault" "runtime.sysFaultOS"
"(*runtime.sweepLocked).sweep" "runtime.sysFault"
"(*runtime.sweepLocked).sweep" "(*runtime.mheap).freeSpan"
"(*runtime.sweepLocked).sweep" "runtime.systemstack"
"(*runtime.sweepLocked).sweep" "(*runtime.consistentHeapStats).acquire"
"(*runtime.sweepLocked).sweep" "runtime/internal/atomic.Xadd64"
"(*runtime.sweepLocked).sweep" "runtime/internal/atomic.Xadd64"
"(*runtime.sweepLocked).sweep" "(*runtime.consistentHeapStats).release"
"(*runtime.sweepLocked).sweep" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.mspan).ensureSwept" "(*runtime.sweepLocked).sweep"
"(*runtime.activeSweep).end" "runtime.throw"
"(*runtime.activeSweep).end" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.activeSweep).end" "runtime.throw"
"(*runtime.activeSweep).end" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"(*runtime/internal/atomic.Uint64).Load" "runtime/internal/atomic.Load64"
"(*runtime.activeSweep).end" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.activeSweep).end" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.mspan).ensureSwept" "(*runtime.activeSweep).end"
"(*runtime.mspan).ensureSwept" "(*runtime.activeSweep).end"
"(*runtime.mspan).ensureSwept" "runtime/internal/atomic.Load"
"(*runtime.mspan).ensureSwept" "runtime.osyield"
"runtime.addspecial" "(*runtime.mspan).ensureSwept"
"runtime.addspecial" "(*runtime.mspan).base"
"runtime.addspecial" "runtime.lock"
"runtime.addspecial" "(*runtime.mspan).specialFindSplicePoint"
"runtime.spanHasSpecials" "(*runtime.mspan).base"
"runtime.spanHasSpecials" "(*runtime.mspan).base"
"runtime.spanHasSpecials" "runtime.arenaIndex"
"runtime.spanHasSpecials" "(runtime.arenaIdx).l1"
"runtime.spanHasSpecials" "(runtime.arenaIdx).l2"
"runtime.spanHasSpecials" "runtime/internal/atomic.Or8"
"runtime.addspecial" "runtime.spanHasSpecials"
"runtime.addspecial" "runtime.unlock"
"runtime.addspecial" "runtime.releasem"
"runtime.addfinalizer" "runtime.addspecial"
"runtime.addfinalizer" "runtime.lock"
"runtime.addfinalizer" "(*runtime.fixalloc).free"
"runtime.addfinalizer" "runtime.unlock"
"runtime.findObject" "runtime.spanOf"
"runtime.findObject" "(*runtime.mSpanStateBox).get"
"runtime.badPointer" "runtime.printlock"
"runtime.badPointer" "(*runtime.mSpanStateBox).get"
"runtime.badPointer" "(*runtime.mspan).base"
"runtime.gcDumpObject" "runtime.spanOf"
"runtime.gcDumpObject" "(*runtime.mspan).base"
"runtime.gcDumpObject" "(*runtime.mSpanStateBox).get"
"runtime.gcDumpObject" "(*runtime.mSpanStateBox).get"
"runtime.badPointer" "runtime.gcDumpObject"
"runtime.badPointer" "runtime.getg"
"runtime.badPointer" "runtime.throw"
"runtime.findObject" "runtime.badPointer"
"runtime.findObject" "(*runtime.mspan).objIndex"
"runtime.findObject" "(*runtime.mspan).base"
"runtime.findObject" "(*runtime.mspan).base"
"runtime.findObject" "runtime.badPointer"
"runtime.addfinalizer" "runtime.findObject"
"runtime.addfinalizer" "runtime.acquirem"
"runtime.addfinalizer" "(runtime.puintptr).ptr"
"runtime.addfinalizer" "(runtime.spanClass).noscan"
"runtime.scanobject" "runtime/internal/sys.Prefetch"
"runtime.spanOfUnchecked" "runtime.arenaIndex"
"runtime.spanOfUnchecked" "(runtime.arenaIdx).l1"
"runtime.spanOfUnchecked" "(runtime.arenaIdx).l2"
"runtime.scanobject" "runtime.spanOfUnchecked"
"runtime.scanobject" "runtime.throw"
"runtime.scanobject" "(runtime.spanClass).noscan"
"runtime.scanobject" "runtime.throw"
"runtime.scanobject" "(*runtime.mspan).base"
"runtime.scanobject" "(*runtime.mspan).base"
"runtime.scanobject" "(*runtime.mspan).base"
"runtime.scanobject" "(*runtime.gcWork).putFast"
"(*runtime.gcWork).put" "runtime.lockWithRankMayAcquire"
"(*runtime.gcWork).put" "runtime.lockWithRankMayAcquire"
"runtime.getempty" "(*runtime.lfstack).pop"
"runtime.getempty" "runtime.lockWithRankMayAcquire"
"runtime.getempty" "runtime.lockWithRankMayAcquire"
"(*runtime.workbuf).checkempty" "runtime.throw"
"runtime.getempty" "(*runtime.workbuf).checkempty"
"runtime.getempty" "runtime.lock"
"(*runtime.mSpanList).remove" "runtime.throw"
"runtime.getempty" "(*runtime.mSpanList).remove"
"(*runtime.mSpanList).insert" "runtime.throw"
"runtime.getempty" "(*runtime.mSpanList).insert"
"runtime.getempty" "runtime.unlock"
"runtime.getempty" "runtime.systemstack"
"runtime.getempty" "runtime.throw"
"runtime.getempty" "runtime.lock"
"runtime.getempty" "(*runtime.mSpanList).insert"
"runtime.getempty" "runtime.unlock"
"runtime.getempty" "(*runtime.mspan).base"
"runtime.lfnodeValidate" "runtime.findObject"
"runtime.lfnodeValidate" "runtime.throw"
"runtime.taggedPointerPack" "runtime.throw"
"runtime.lfstackPack" "runtime.taggedPointerPack"
"runtime.lfnodeValidate" "runtime.lfstackPack"
"runtime.lfnodeValidate" "runtime.lfstackUnpack"
"runtime.lfnodeValidate" "runtime.printlock"
"runtime.lfnodeValidate" "runtime.throw"
"runtime.getempty" "runtime.lfnodeValidate"
"runtime.putempty" "(*runtime.workbuf).checkempty"
"(*runtime.lfstack).push" "runtime.lfstackPack"
"(*runtime.lfstack).push" "runtime.lfstackUnpack"
"(*runtime.lfstack).push" "runtime.throw"
"(*runtime.lfstack).push" "runtime/internal/atomic.Load64"
"(*runtime.lfstack).push" "runtime/internal/atomic.Cas64"
"runtime.putempty" "(*runtime.lfstack).push"
"runtime.getempty" "runtime.putempty"
"(*runtime.gcWork).init" "runtime.getempty"
"runtime.trygetfull" "(*runtime.lfstack).pop"
"(*runtime.workbuf).checknonempty" "runtime.throw"
"runtime.trygetfull" "(*runtime.workbuf).checknonempty"
"(*runtime.gcWork).init" "runtime.trygetfull"
"(*runtime.gcWork).init" "runtime.getempty"
"(*runtime.gcWork).put" "(*runtime.gcWork).init"
"runtime.putfull" "(*runtime.workbuf).checknonempty"
"runtime.putfull" "(*runtime.lfstack).push"
"(*runtime.gcWork).put" "runtime.putfull"
"(*runtime.gcWork).put" "runtime.getempty"
"(*runtime/internal/atomic.Int64).Load" "runtime/internal/atomic.Loadint64"
"(*runtime.gcControllerState).enlistWorker" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).enlistWorker" "runtime.getg"
"(*runtime.gcControllerState).enlistWorker" "(runtime.puintptr).ptr"
"(*runtime.gcControllerState).enlistWorker" "runtime.cheaprandn"
"runtime.preemptone" "(runtime.muintptr).ptr"
"runtime.preemptone" "runtime.getg"
"(*runtime.rwmutex).rlock" "runtime.acquirem"
"(*runtime.rwmutex).rlock" "runtime.acquireLockRank"
"(*runtime.rwmutex).rlock" "runtime.getLockRank"
"(*runtime.rwmutex).rlock" "runtime.lockWithRankMayAcquire"
"(*runtime/internal/atomic.Int32).Add" "runtime/internal/atomic.Xaddint32"
"(*runtime.rwmutex).rlock" "(*runtime/internal/atomic.Int32).Add"
"(*runtime.rwmutex).rlock" "runtime.systemstack"
"runtime.preemptM" "(*runtime.rwmutex).rlock"
"runtime.preemptM" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.preemptM" "(*runtime/internal/atomic.Int32).Add"
"runtime.pthread_kill" "internal/abi.FuncPCABI0"
"runtime.pthread_kill" "runtime.libcCall"
"runtime.signalM" "runtime.pthread_kill"
"runtime.preemptM" "runtime.signalM"
"(*runtime.rwmutex).runlock" "(*runtime/internal/atomic.Int32).Add"
"(*runtime.rwmutex).runlock" "runtime.releaseLockRank"
"(*runtime.rwmutex).runlock" "runtime.getg"
"(*runtime.rwmutex).runlock" "runtime.releasem"
"(*runtime.rwmutex).runlock" "runtime.throw"
"(*runtime.rwmutex).runlock" "(*runtime/internal/atomic.Int32).Add"
"(*runtime.rwmutex).runlock" "runtime.lock"
"(*runtime.rwmutex).runlock" "(runtime.muintptr).ptr"
"runtime.notewakeup" "runtime/internal/atomic.Loaduintptr"
"runtime.notewakeup" "runtime/internal/atomic.Casuintptr"
"runtime.notewakeup" "runtime.throw"
"runtime.notewakeup" "runtime.semawakeup"
"(*runtime.rwmutex).runlock" "runtime.notewakeup"
"(*runtime.rwmutex).runlock" "runtime.unlock"
"runtime.preemptM" "(*runtime.rwmutex).runlock"
"runtime.preemptone" "runtime.preemptM"
"(*runtime.gcControllerState).enlistWorker" "runtime.preemptone"
"(*runtime.gcWork).put" "(*runtime.gcControllerState).enlistWorker"
"runtime.scanobject" "(*runtime.gcWork).put"
"runtime.scanobject" "(*runtime.mspan).base"
"(*runtime.mspan).objBase" "(*runtime.mspan).base"
"(*runtime.mspan).objBase" "(*runtime.mspan).objIndex"
"(*runtime.mspan).typePointersOfUnchecked" "(*runtime.mspan).objBase"
"(*runtime.mspan).typePointersOfUnchecked" "runtime.throw"
"(*runtime.mspan).typePointersOfUnchecked" "(runtime.spanClass).noscan"
"(*runtime.mspan).typePointersOfUnchecked" "(*runtime.mspan).objBase"
"(*runtime.mspan).typePointersOfUnchecked" "runtime.heapBitsInSpan"
"(*runtime.mspan).heapBitsSmallForAddr" "(*runtime.mspan).base"
"(*runtime.mspan).heapBitsSmallForAddr" "(*runtime.mspan).base"
"(*runtime.mspan).heapBitsSmallForAddr" "(*runtime.mspan).base"
"(*runtime.mspan).heapBitsSmallForAddr" "runtime.addb"
"(*runtime.mspan).heapBitsSmallForAddr" "runtime.addb"
"(*runtime.mspan).typePointersOfUnchecked" "(*runtime.mspan).heapBitsSmallForAddr"
"(*runtime.mspan).typePointersOfUnchecked" "(runtime.spanClass).sizeclass"
"runtime.readUintptr" "runtime/internal/sys.Bswap64"
"runtime.readUintptr" "runtime/internal/sys.Bswap32"
"(*runtime.mspan).typePointersOfUnchecked" "runtime.readUintptr"
"runtime.scanobject" "(*runtime.mspan).typePointersOfUnchecked"
"(runtime.typePointers).fastForward" "runtime.alignDown"
"(runtime.typePointers).fastForward" "runtime.alignDown"
"(runtime.typePointers).fastForward" "runtime.readUintptr"
"(runtime.typePointers).fastForward" "runtime.addb"
"(runtime.typePointers).fastForward" "runtime.readUintptr"
"runtime.scanobject" "(runtime.typePointers).fastForward"
"runtime.scanobject" "(*runtime.mspan).typePointersOfUnchecked"
"runtime.scanobject" "runtime.heapBitsForAddr"
"(runtime.typePointers).nextFast" "runtime/internal/sys.TrailingZeros64"
"(runtime.typePointers).nextFast" "runtime/internal/sys.TrailingZeros32"
"runtime.scanobject" "(runtime.typePointers).nextFast"
"runtime.scanobject" "(runtime.heapBits).nextFast"
"(runtime.typePointers).next" "(runtime.typePointers).nextFast"
"(runtime.typePointers).next" "runtime.addb"
"(runtime.typePointers).next" "runtime.readUintptr"
"runtime.scanobject" "(runtime.typePointers).next"
"runtime.scanobject" "(runtime.heapBits).next"
"runtime.scanobject" "runtime.findObject"
"runtime.greyobject" "runtime.throw"
"runtime.greyobject" "(*runtime.mspan).markBitsForIndex"
"runtime.setCheckmark" "(runtime.markBits).isMarked"
"runtime.setCheckmark" "runtime.printlock"
"runtime.setCheckmark" "runtime.gcDumpObject"
"runtime.setCheckmark" "runtime.gcDumpObject"
"runtime.setCheckmark" "runtime.getg"
"runtime.setCheckmark" "runtime.throw"
"runtime.setCheckmark" "runtime.arenaIndex"
"runtime.setCheckmark" "(runtime.arenaIdx).l1"
"runtime.setCheckmark" "(runtime.arenaIdx).l2"
"runtime.setCheckmark" "runtime/internal/atomic.Load8"
"runtime.setCheckmark" "runtime/internal/atomic.Or8"
"runtime.greyobject" "runtime.setCheckmark"
"runtime.greyobject" "runtime/internal/sys.Prefetch"
"runtime.greyobject" "(*runtime.gcWork).putFast"
"runtime.greyobject" "runtime.gcDumpObject"
"runtime.greyobject" "runtime.gcDumpObject"
"runtime.greyobject" "runtime.getg"
"runtime.greyobject" "runtime.throw"
"runtime.greyobject" "(runtime.markBits).isMarked"
"runtime.greyobject" "(*runtime.mspan).isFree"
"(runtime.markBits).setMarked" "runtime/internal/atomic.Or8"
"runtime.greyobject" "(runtime.markBits).setMarked"
"runtime.greyobject" "(*runtime.mspan).base"
"runtime.pageIndexOf" "runtime.arenaIndex"
"runtime.pageIndexOf" "(runtime.arenaIdx).l1"
"runtime.pageIndexOf" "(runtime.arenaIdx).l2"
"runtime.greyobject" "runtime.pageIndexOf"
"runtime.greyobject" "runtime/internal/atomic.Or8"
"runtime.greyobject" "(runtime.spanClass).noscan"
"runtime.greyobject" "(*runtime.gcWork).put"
"runtime.scanobject" "runtime.greyobject"
"runtime.addfinalizer" "runtime.scanobject"
"runtime.scanblock" "runtime.addb"
"runtime.scanblock" "runtime.findObject"
"runtime.scanblock" "runtime.greyobject"
"(*runtime.stackScanState).putPtr" "runtime.throw"
"(*runtime.stackScanState).putPtr" "runtime.getempty"
"(*runtime.stackScanState).putPtr" "runtime.getempty"
"runtime.scanblock" "(*runtime.stackScanState).putPtr"
"runtime.addfinalizer" "runtime.scanblock"
"runtime.addfinalizer" "runtime.releasem"
"runtime.SetFinalizer$2" "runtime.addfinalizer"
"runtime.SetFinalizer$2" "runtime.throw"
"(*sync.Once).doSlow" "runtime.SetFinalizer$2"
"(*sync.Once).doSlow" "syscall.libc_ftruncate_trampoline"
"(*sync.Once).doSlow" "syscall.libc_setrlimit_trampoline"
"(*sync.Once).doSlow" "syscall.libc_accept_trampoline"
"runtime.Caller" "runtime.callers"
"runtime.Caller" "runtime.CallersFrames"
"(*runtime.Frames).Next" "runtime.findfunc"
"(*runtime.Frames).Next" "(runtime.funcInfo).valid"
"(*runtime.Frames).Next" "(runtime.funcInfo)._Func"
"(*runtime.Func).Entry" "(*runtime.Func).raw"
"(*runtime.Func).Entry" "(*runtime._func).isInlined"
"(*runtime.Func).Entry" "(*runtime._func).funcInfo"
"(*runtime.Func).Entry" "(runtime.funcInfo).entry"
"(*runtime.Frames).Next" "(*runtime.Func).Entry"
"runtime.callCgoSymbolizer" "(*runtime/internal/atomic.Uint32).Load"
"runtime.callCgoSymbolizer" "runtime.getg"
"runtime.callCgoSymbolizer" "runtime.getg"
"runtime.callCgoSymbolizer" "runtime.msanwrite"
"runtime.callCgoSymbolizer" "runtime.asanwrite"
"runtime.callCgoSymbolizer" "runtime.noescape"
"runtime.callCgoSymbolizer" "runtime.asmcgocall"
"runtime.callCgoSymbolizer" "runtime.cgocall"
"runtime.expandCgoFrames" "runtime.callCgoSymbolizer"
"runtime.gostring" "runtime.findnull"
"runtime.mallocgc" "runtime.throw"
"runtime.lockRankMayQueueFinalizer" "runtime.getLockRank"
"runtime.lockRankMayQueueFinalizer" "runtime.lockWithRankMayAcquire"
"runtime.mallocgc" "runtime.lockRankMayQueueFinalizer"
"runtime.mallocgc" "runtime.computeRZlog"
"runtime.deductAssistCredit" "runtime.getg"
"runtime.gcAssistAlloc" "runtime.getg"
"runtime.gcAssistAlloc" "runtime.getg"
"(*runtime.gcCPULimiterState).limiting" "(*runtime/internal/atomic.Bool).Load"
"runtime.gcAssistAlloc" "(*runtime.gcCPULimiterState).limiting"
"(*runtime/internal/atomic.Float64).Load" "(*runtime/internal/atomic.Uint64).Load"
"runtime.gcAssistAlloc" "(*runtime/internal/atomic.Float64).Load"
"runtime.gcAssistAlloc" "(*runtime/internal/atomic.Float64).Load"
"runtime.gcAssistAlloc" "runtime.traceAcquire"
"runtime.gcAssistAlloc" "(runtime.traceLocker).ok"
"(runtime.traceLocker).GCMarkAssistDone" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).GCMarkAssistDone" "(runtime.traceEventWriter).commit"
"runtime.gcAssistAlloc" "(runtime.traceLocker).GCMarkAssistDone"
"runtime.gcAssistAlloc" "runtime.traceRelease"
"runtime.gcAssistAlloc" "(*runtime/internal/atomic.Int64).Load"
"runtime.gcAssistAlloc" "(*runtime/internal/atomic.Int64).Add"
"runtime.gcAssistAlloc" "runtime.traceAcquire"
"runtime.gcAssistAlloc" "(runtime.traceLocker).ok"
"runtime.gcAssistAlloc" "(runtime.traceLocker).GCMarkAssistDone"
"runtime.gcAssistAlloc" "runtime.traceRelease"
"runtime.gcAssistAlloc" "runtime.traceAcquire"
"runtime.gcAssistAlloc" "(runtime.traceLocker).ok"
"runtime.gcAssistAlloc" "runtime.systemstack"
"(runtime.traceLocker).GCMarkAssistStart" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).GCMarkAssistStart" "(runtime.traceLocker).stack"
"(runtime.traceLocker).GCMarkAssistStart" "(runtime.traceEventWriter).commit"
"runtime.gcAssistAlloc" "(runtime.traceLocker).GCMarkAssistStart"
"runtime.gcAssistAlloc" "runtime.traceRelease"
"runtime.gcMarkDone" "runtime.semacquire"
"runtime.gcMarkDone" "runtime.semrelease"
"runtime.gcMarkDone" "runtime.semacquire"
"runtime.forEachP" "runtime.systemstack"
"runtime.gcMarkDone" "runtime.forEachP"
"(*runtime.lfstack).empty" "runtime/internal/atomic.Load64"
"runtime.gcMarkWorkAvailable" "(*runtime.lfstack).empty"
"runtime.gcMarkWorkAvailable" "(*runtime.gcWork).empty"
"runtime.gcMarkDone" "runtime.gcMarkWorkAvailable"
"runtime.gcMarkDone" "runtime.semrelease"
"runtime.gcMarkDone" "runtime.nanotime"
"runtime.gcMarkDone" "runtime.getg"
"runtime.gcMarkDone" "runtime.systemstack"
"runtime.gcMarkDone" "runtime.systemstack"
"runtime.gcMarkDone" "runtime.getg"
"runtime.gcMarkDone" "runtime.systemstack"
"runtime.gcMarkDone" "runtime.semrelease"
"runtime.gcComputeStartingStackSize" "runtime.round2"
"runtime.gcMarkDone" "runtime.gcComputeStartingStackSize"
"runtime.gcMarkDone" "runtime/internal/atomic.Store"
"(*runtime.gcCPULimiterState).tryLock" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"(*runtime.gcCPULimiterState).startGCTransition" "(*runtime.gcCPULimiterState).tryLock"
"(*runtime.gcCPULimiterState).startGCTransition" "runtime.throw"
"(*runtime.gcCPULimiterState).startGCTransition" "runtime.throw"
"(*runtime.gcCPULimiterState).updateLocked" "(*runtime/internal/atomic.Int64).Load"
"(*runtime/internal/atomic.Int64).Store" "runtime/internal/atomic.Storeint64"
"(*runtime.gcCPULimiterState).updateLocked" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.gcCPULimiterState).updateLocked" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcCPULimiterState).updateLocked" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.gcCPULimiterState).updateLocked" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcCPULimiterState).updateLocked" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.gcCPULimiterState).updateLocked" "runtime.acquirem"
"(*runtime.limiterEvent).consume" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.limiterEvent).consume" "(runtime.limiterEventStamp).typ"
"(*runtime.limiterEvent).consume" "(runtime.limiterEventStamp).duration"
"(*runtime.limiterEvent).consume" "runtime.makeLimiterEventStamp"
"(*runtime/internal/atomic.Uint64).CompareAndSwap" "runtime/internal/atomic.Cas64"
"(*runtime.limiterEvent).consume" "(*runtime/internal/atomic.Uint64).CompareAndSwap"
"(*runtime.gcCPULimiterState).updateLocked" "(*runtime.limiterEvent).consume"
"(*runtime.gcCPULimiterState).updateLocked" "runtime.releasem"
"(*runtime.gcCPULimiterState).updateLocked" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.gcCPULimiterState).updateLocked" "runtime.throw"
"(*runtime/internal/atomic.Bool).Store" "(*runtime/internal/atomic.Uint8).Store"
"(*runtime.gcCPULimiterState).accumulate" "(*runtime/internal/atomic.Bool).Store"
"(*runtime.gcCPULimiterState).accumulate" "(*runtime/internal/atomic.Uint32).Store"
"(*runtime.gcCPULimiterState).accumulate" "(*runtime/internal/atomic.Bool).Store"
"(*runtime.gcCPULimiterState).updateLocked" "(*runtime.gcCPULimiterState).accumulate"
"(*runtime.gcCPULimiterState).startGCTransition" "(*runtime.gcCPULimiterState).updateLocked"
"runtime.gcMarkDone" "(*runtime.gcCPULimiterState).startGCTransition"
"runtime.gcWakeAllAssists" "runtime.lock"
"runtime.gcWakeAllAssists" "(*runtime.gQueue).popList"
"runtime.injectglist" "(*runtime.gList).empty"
"runtime.injectglist" "runtime.traceAcquire"
"runtime.injectglist" "(runtime.traceLocker).ok"
"runtime.injectglist" "(runtime.guintptr).ptr"
"runtime.injectglist" "(runtime.guintptr).ptr"
"(runtime.traceLocker).GoUnpark" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).GoUnpark" "(*runtime.traceSchedResourceState).statusWasTraced"
"(runtime.traceLocker).GoUnpark" "(runtime.traceWriter).writeGoStatus"
"(runtime.traceLocker).GoUnpark" "(*runtime.traceSchedResourceState).nextSeq"
"(runtime.traceLocker).GoUnpark" "(runtime.traceLocker).stack"
"(runtime.traceLocker).GoUnpark" "(runtime.traceEventWriter).commit"
"(runtime.traceLocker).GoUnpark" "(*runtime.traceSchedResourceState).acquireStatus"
"runtime.injectglist" "(runtime.traceLocker).GoUnpark"
"runtime.injectglist" "(runtime.guintptr).ptr"
"runtime.injectglist" "runtime.traceRelease"
"runtime.injectglist" "runtime.casgstatus"
"runtime.injectglist" "(runtime.guintptr).ptr"
"runtime.injectglist" "(*runtime.guintptr).set"
"runtime.injectglist" "(*runtime.guintptr).set"
"runtime.injectglist" "runtime.getg"
"runtime.injectglist" "(runtime.puintptr).ptr"
"runtime.injectglist" "runtime.lock"
"runtime.globrunqputbatch" "runtime.assertLockHeld"
"(*runtime.gQueue).pushBackAll" "(runtime.guintptr).ptr"
"(*runtime.gQueue).pushBackAll" "(runtime.guintptr).ptr"
"runtime.globrunqputbatch" "(*runtime.gQueue).pushBackAll"
"runtime.injectglist" "runtime.globrunqputbatch"
"runtime.injectglist" "runtime.unlock"
"runtime.injectglist$1" "runtime.acquirem"
"runtime.injectglist$1" "runtime.lock"
"runtime.pidlegetSpinning" "runtime.assertLockHeld"
"runtime.pidleget" "runtime.assertLockHeld"
"runtime.pidleget" "(runtime.puintptr).ptr"
"runtime.pidleget" "runtime.nanotime"
"(runtime.pMask).set" "runtime/internal/atomic.Or"
"runtime.pidleget" "(runtime.pMask).set"
"(runtime.pMask).clear" "runtime/internal/atomic.And"
"runtime.pidleget" "(runtime.pMask).clear"
"runtime.pidleget" "(*runtime/internal/atomic.Int32).Add"
"(*runtime.limiterEvent).stop" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.limiterEvent).stop" "(runtime.limiterEventStamp).typ"
"(*runtime.limiterEvent).stop" "(runtime.limiterEventStamp).typ"
"(*runtime.limiterEvent).stop" "runtime.throw"
"(*runtime.limiterEvent).stop" "(*runtime/internal/atomic.Uint64).CompareAndSwap"
"(*runtime.limiterEvent).stop" "(runtime.limiterEventStamp).duration"
"(*runtime.gcCPULimiterState).addIdleTime" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.limiterEvent).stop" "(*runtime.gcCPULimiterState).addIdleTime"
"(*runtime.limiterEvent).stop" "(*runtime.gcCPULimiterState).addIdleTime"
"(*runtime.limiterEvent).stop" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.gcCPULimiterState).addAssistTime" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.limiterEvent).stop" "(*runtime.gcCPULimiterState).addAssistTime"
"(*runtime.limiterEvent).stop" "runtime.throw"
"runtime.pidleget" "(*runtime.limiterEvent).stop"
"runtime.pidlegetSpinning" "runtime.pidleget"
"runtime.pidlegetSpinning" "(*runtime/internal/atomic.Uint32).Store"
"runtime.injectglist$1" "runtime.pidlegetSpinning"
"runtime.injectglist$1" "runtime.unlock"
"runtime.injectglist$1" "runtime.releasem"
"runtime.startm" "runtime.acquirem"
"runtime.startm" "runtime.lock"
"runtime.mget" "runtime.assertLockHeld"
"runtime.mget" "(runtime.muintptr).ptr"
"runtime.startm" "runtime.mget"
"runtime.startm" "runtime.throw"
"runtime.startm" "runtime.pidleget"
"runtime.startm" "runtime.unlock"
"runtime.startm" "runtime.releasem"
"runtime.mReserveID" "runtime.assertLockHeld"
"runtime.mReserveID" "runtime.throw"
"runtime.checkmcount" "runtime.assertLockHeld"
"runtime.checkmcount" "runtime.mcount"
"runtime.checkmcount" "(*runtime/internal/atomic.Uint32).Load"
"runtime.checkmcount" "(*runtime/internal/atomic.Uint32).Load"
"runtime.checkmcount" "runtime.throw"
"runtime.mReserveID" "runtime.checkmcount"
"runtime.startm" "runtime.mReserveID"
"runtime.startm" "runtime.unlock"
"runtime.newm" "runtime.acquirem"
"runtime.allocm" "(*runtime.rwmutex).rlock"
"runtime.allocm" "runtime.acquirem"
"runtime.allocm" "runtime.getg"
"runtime.acquirep" "runtime.wirep"
"(*runtime.mcache).prepareForSweep" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.mcache).prepareForSweep" "runtime.throw"
"(*runtime.mcache).releaseAll" "(*runtime.consistentHeapStats).acquire"
"(*runtime.mcache).releaseAll" "runtime/internal/atomic.Xadd64"
"(*runtime.mcache).releaseAll" "(*runtime.consistentHeapStats).release"
"(*runtime.gcControllerState).update" "runtime.traceAcquire"
"(*runtime.gcControllerState).update" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.gcControllerState).update" "(runtime.traceLocker).ok"
"(runtime.traceLocker).HeapAlloc" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).HeapAlloc" "(runtime.traceEventWriter).commit"
"(*runtime.gcControllerState).update" "(runtime.traceLocker).HeapAlloc"
"(*runtime.gcControllerState).update" "runtime.traceRelease"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Int32).Load"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).heapGoalInternal" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.sysMemStat).load" "runtime/internal/atomic.Load64"
"(*runtime.gcControllerState).memoryLimitHeapGoal" "(*runtime.sysMemStat).load"
"(*runtime.gcControllerState).memoryLimitHeapGoal" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).memoryLimitHeapGoal" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).memoryLimitHeapGoal" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).memoryLimitHeapGoal" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).heapGoalInternal" "(*runtime.gcControllerState).memoryLimitHeapGoal"
"(*runtime.gcControllerState).heapGoalInternal" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).heapGoal" "(*runtime.gcControllerState).heapGoalInternal"
"(*runtime.gcControllerState).revise" "(*runtime.gcControllerState).heapGoal"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime/internal/atomic.Uint64).Store" "runtime/internal/atomic.Store64"
"(*runtime/internal/atomic.Float64).Store" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Float64).Store"
"(*runtime.gcControllerState).revise" "(*runtime/internal/atomic.Float64).Store"
"(*runtime.gcControllerState).update" "(*runtime.gcControllerState).revise"
"(*runtime.gcControllerState).update" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.mcache).releaseAll" "(*runtime.gcControllerState).update"
"(*runtime.mcache).releaseAll" "(*runtime.consistentHeapStats).acquire"
"(*runtime.mcache).releaseAll" "(runtime.spanClass).sizeclass"
"(*runtime.mcache).releaseAll" "runtime/internal/atomic.Xadd64"
"(*runtime.mcache).releaseAll" "(*runtime.consistentHeapStats).release"
"(*runtime.mcache).releaseAll" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.mcentral).uncacheSpan" "runtime.throw"
"(*runtime.mcentral).uncacheSpan" "runtime/internal/atomic.Store"
"(*runtime.mcentral).uncacheSpan" "runtime/internal/atomic.Store"
"(*runtime.mcentral).uncacheSpan" "(*runtime.sweepLocked).sweep"
"(*runtime.mcentral).uncacheSpan" "(*runtime.mcentral).partialSwept"
"(*runtime.mcentral).uncacheSpan" "(*runtime.spanSet).push"
"(*runtime.mcentral).uncacheSpan" "(*runtime.mcentral).fullSwept"
"(*runtime.mcentral).uncacheSpan" "(*runtime.spanSet).push"
"(*runtime.mcache).releaseAll" "(*runtime.mcentral).uncacheSpan"
"(*runtime.mcache).prepareForSweep" "(*runtime.mcache).releaseAll"
"runtime.stackcache_clear" "runtime.lock"
"runtime.stackcache_clear" "(runtime.gclinkptr).ptr"
"runtime.stackpoolfree" "runtime.spanOfUnchecked"
"runtime.stackpoolfree" "(*runtime.mSpanStateBox).get"
"runtime.stackpoolfree" "runtime.throw"
"runtime.stackpoolfree" "(runtime.gclinkptr).ptr"
"runtime.stackpoolfree" "(*runtime.mSpanList).insert"
"runtime.stackpoolfree" "(runtime.gclinkptr).ptr"
"runtime.stackpoolfree" "(*runtime.mSpanList).remove"
"runtime.stackpoolfree" "runtime.osStackFree"
"(*runtime.mheap).freeManual" "runtime.getg"
"(*runtime.mheap).freeManual" "(runtime.puintptr).ptr"
"(*runtime.mheap).freeManual" "(*runtime.mspan).base"
"(*runtime.mheap).freeManual" "runtime.pageTraceFree"
"(*runtime.mheap).freeManual" "runtime.lock"
"(*runtime.mheap).freeSpanLocked" "runtime.assertLockHeld"
"(*runtime.mheap).freeSpanLocked" "(*runtime.mSpanStateBox).get"
"(*runtime.mheap).freeSpanLocked" "(*runtime.sysMemStat).add"
"(*runtime.mheap).freeSpanLocked" "runtime.throw"
"(*runtime.mheap).freeSpanLocked" "runtime.throw"
"(*runtime.mheap).freeSpanLocked" "runtime.throw"
"(*runtime.mheap).freeSpanLocked" "(*runtime.mspan).base"
"(*runtime.mheap).freeSpanLocked" "runtime.throw"
"(*runtime.mheap).freeSpanLocked" "(*runtime/internal/atomic.Uintptr).Add"
"(*runtime.mheap).freeSpanLocked" "(*runtime.mspan).base"
"(*runtime.mheap).freeSpanLocked" "runtime.pageIndexOf"
"(*runtime.mheap).freeSpanLocked" "runtime/internal/atomic.And8"
"(*runtime.mheap).freeSpanLocked" "(*runtime.sysMemStat).add"
"(*runtime.mheap).freeSpanLocked" "(*runtime.consistentHeapStats).acquire"
"(*runtime.mheap).freeSpanLocked" "(*runtime.consistentHeapStats).release"
"(*runtime.mheap).freeSpanLocked" "(*runtime.mspan).base"
"(*runtime.pageAlloc).free" "runtime.assertLockHeld"
"(*runtime.pageAlloc).free" "(runtime.offAddr).lessThan"
"(*runtime.pageAlloc).free" "runtime.chunkIndex"
"(*runtime.pageAlloc).free" "runtime.chunkPageIndex"
"(*runtime.pageAlloc).chunkOf" "(runtime.chunkIdx).l1"
"(*runtime.pageAlloc).chunkOf" "(runtime.chunkIdx).l2"
"(*runtime.pageAlloc).free" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pallocBits).free1" "(*runtime.pageBits).clear"
"(*runtime.pageAlloc).free" "(*runtime.pallocBits).free1"
"(*runtime.atomicScavChunkData).load" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.atomicScavChunkData).load" "runtime.unpackScavChunkData"
"(*runtime.scavengeIndex).free" "(*runtime.atomicScavChunkData).load"
"(*runtime.scavChunkData).free" "runtime.throw"
"(*runtime.scavChunkData).free" "(*runtime.scavChunkFlags).setNonEmpty"
"(*runtime.scavengeIndex).free" "(*runtime.scavChunkData).free"
"(*runtime.atomicScavChunkData).store" "(runtime.scavChunkData).pack"
"(*runtime.atomicScavChunkData).store" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.scavengeIndex).free" "(*runtime.atomicScavChunkData).store"
"(*runtime.scavengeIndex).free" "runtime.chunkBase"
"(*runtime.scavengeIndex).free" "(runtime.offAddr).lessThan"
"(*runtime.atomicOffAddr).Load" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.scavengeIndex).free" "(*runtime.atomicOffAddr).Load"
"(*runtime.scavengeIndex).free" "(runtime.offAddr).lessThan"
"(*runtime.atomicOffAddr).StoreMarked" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.scavengeIndex).free" "(*runtime.atomicOffAddr).StoreMarked"
"(*runtime.pageAlloc).free" "(*runtime.scavengeIndex).free"
"(*runtime.pageAlloc).update" "runtime.assertLockHeld"
"(*runtime.pageAlloc).update" "runtime.chunkIndex"
"(*runtime.pageAlloc).update" "runtime.chunkIndex"
"(*runtime.pageAlloc).update" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pallocBits).summarize" "runtime/internal/sys.TrailingZeros64"
"runtime/internal/sys.LeadingZeros64" "runtime/internal/sys.Len64"
"(*runtime.pallocBits).summarize" "runtime/internal/sys.LeadingZeros64"
"(*runtime.pallocBits).summarize" "runtime.packPallocSum"
"(*runtime.pallocBits).summarize" "runtime.packPallocSum"
"(*runtime.pallocBits).summarize" "runtime/internal/sys.TrailingZeros64"
"(*runtime.pallocBits).summarize" "runtime.packPallocSum"
"(*runtime.pallocBits).summarize" "runtime/internal/sys.TrailingZeros64"
"(*runtime.pallocBits).summarize" "runtime/internal/sys.TrailingZeros64"
"(*runtime.pageAlloc).update" "(*runtime.pallocBits).summarize"
"(*runtime.pageAlloc).update" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).update" "(*runtime.pallocBits).summarize"
"(*runtime.pageAlloc).update" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).update" "(*runtime.pallocBits).summarize"
"(*runtime.pageAlloc).update" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).update" "(*runtime.pallocBits).summarize"
"(*runtime.pageAlloc).update" "runtime.addrsToSummaryRange"
"runtime.mergeSummaries" "(runtime.pallocSum).unpack"
"runtime.mergeSummaries" "(runtime.pallocSum).unpack"
"runtime.mergeSummaries" "runtime.packPallocSum"
"(*runtime.pageAlloc).update" "runtime.mergeSummaries"
"(*runtime.pageAlloc).free" "(*runtime.pageAlloc).update"
"(*runtime.pageAlloc).free" "runtime.chunkIndex"
"(*runtime.pageAlloc).free" "runtime.chunkIndex"
"(*runtime.pageAlloc).free" "runtime.chunkPageIndex"
"(*runtime.pageAlloc).free" "runtime.chunkPageIndex"
"(*runtime.pageAlloc).free" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageBits).clearRange" "(*runtime.pageBits).clear"
"(*runtime.pallocBits).free" "(*runtime.pageBits).clearRange"
"(*runtime.pageAlloc).free" "(*runtime.pallocBits).free"
"(*runtime.pageAlloc).free" "(*runtime.scavengeIndex).free"
"(*runtime.pageAlloc).free" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).free" "(*runtime.pallocBits).free"
"(*runtime.pageAlloc).free" "(*runtime.scavengeIndex).free"
"(*runtime.pageAlloc).free" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pallocBits).freeAll" "(*runtime.pageBits).clearAll"
"(*runtime.pageAlloc).free" "(*runtime.pallocBits).freeAll"
"(*runtime.pageAlloc).free" "(*runtime.scavengeIndex).free"
"(*runtime.pageAlloc).free" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).free" "(*runtime.pallocBits).free"
"(*runtime.pageAlloc).free" "(*runtime.scavengeIndex).free"
"(*runtime.mheap).freeSpanLocked" "(*runtime.pageAlloc).free"
"(*runtime.mheap).freeSpanLocked" "(*runtime.mSpanStateBox).set"
"(*runtime.mheap).freeMSpanLocked" "runtime.assertLockHeld"
"(*runtime.mheap).freeMSpanLocked" "runtime.getg"
"(*runtime.mheap).freeMSpanLocked" "(runtime.puintptr).ptr"
"(*runtime.mheap).freeMSpanLocked" "(*runtime.fixalloc).free"
"(*runtime.mheap).freeSpanLocked" "(*runtime.mheap).freeMSpanLocked"
"(*runtime.mheap).freeSpanLocked" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).freeSpanLocked" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).freeSpanLocked" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).freeSpanLocked" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).freeManual" "(*runtime.mheap).freeSpanLocked"
"(*runtime.mheap).freeManual" "runtime.unlock"
"runtime.stackpoolfree" "(*runtime.mheap).freeManual"
"runtime.stackcache_clear" "runtime.stackpoolfree"
"runtime.stackcache_clear" "runtime.unlock"
"runtime.stackcache_clear" "(runtime.gclinkptr).ptr"
"(*runtime.mcache).prepareForSweep" "runtime.stackcache_clear"
"(*runtime.mcache).prepareForSweep" "(*runtime/internal/atomic.Uint32).Store"
"runtime.acquirep" "(*runtime.mcache).prepareForSweep"
"runtime.acquirep" "runtime.traceAcquire"
"runtime.acquirep" "(runtime.traceLocker).ok"
"(runtime.traceLocker).ProcStart" "(runtime.puintptr).ptr"
"(runtime.traceLocker).ProcStart" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).ProcStart" "(*runtime.traceSchedResourceState).nextSeq"
"(runtime.traceLocker).ProcStart" "(runtime.traceEventWriter).commit"
"runtime.acquirep" "(runtime.traceLocker).ProcStart"
"runtime.acquirep" "runtime.traceRelease"
"runtime.allocm" "runtime.acquirep"
"runtime.allocm" "runtime.lock"
"runtime.mcommoninit" "runtime.getg"
"runtime.mcommoninit" "runtime.callers"
"runtime.mcommoninit" "runtime.lock"
"runtime.bootstrapRand" "runtime.lock"
"runtime.fatal" "runtime.systemstack"
"runtime.fatal" "runtime.fatalthrow"
"runtime.bootstrapRand" "runtime.fatal"
"runtime.bootstrapRand" "(*internal/chacha8rand.State).Next"
"runtime.bootstrapRand" "runtime.unlock"
"(*internal/chacha8rand.State).Refill" "internal/chacha8rand.block"
"runtime.bootstrapRand" "(*internal/chacha8rand.State).Refill"
"runtime.mrandinit" "runtime.bootstrapRand"
"runtime.bootstrapRandReseed" "runtime.lock"
"runtime.bootstrapRandReseed" "runtime.fatal"
"(*internal/chacha8rand.State).Init64" "internal/chacha8rand.block"
"(*internal/chacha8rand.State).Reseed" "(*internal/chacha8rand.State).Init64"
"(*internal/chacha8rand.State).Reseed" "(*internal/chacha8rand.State).Next"
"(*internal/chacha8rand.State).Reseed" "(*internal/chacha8rand.State).Refill"
"runtime.bootstrapRandReseed" "(*internal/chacha8rand.State).Reseed"
"runtime.bootstrapRandReseed" "runtime.unlock"
"runtime.mrandinit" "runtime.bootstrapRandReseed"
"runtime.mrandinit" "(*internal/chacha8rand.State).Init64"
"runtime.rand" "runtime.getg"
"runtime.rand" "(*internal/chacha8rand.State).Next"
"runtime.rand" "(*internal/chacha8rand.State).Refill"
"runtime.mrandinit" "runtime.rand"
"runtime.mcommoninit" "runtime.mrandinit"
"runtime.malg" "runtime.round2"
"runtime.malg" "runtime.systemstack"
"runtime.mpreinit" "runtime.malg"
"runtime.mlock" "internal/abi.FuncPCABI0"
"runtime.mlock" "runtime.libcCall"
"runtime.mlock" "runtime.KeepAlive"
"runtime.mpreinit" "runtime.mlock"
"runtime.mcommoninit" "runtime.mpreinit"
"runtime.mcommoninit" "runtime.mReserveID"
"runtime.mcommoninit" "runtime.atomicstorep"
"runtime.mcommoninit" "runtime.unlock"
"runtime.allocm" "runtime.mcommoninit"
"runtime.allocm" "(*runtime/internal/atomic.Uint32).Load"
"runtime.allocm" "runtime.unlock"
"runtime.allocm" "runtime.traceEnabled"
"runtime.traceThreadDestroy" "runtime.assertLockHeld"
"runtime.traceThreadDestroy" "(*runtime/internal/atomic.Uintptr).Add"
"runtime.traceThreadDestroy" "runtime.throw"
"runtime.traceThreadDestroy" "runtime.systemstack"
"runtime.traceThreadDestroy" "(*runtime/internal/atomic.Uintptr).Add"
"runtime.traceThreadDestroy" "runtime.throw"
"runtime.allocm" "runtime.traceThreadDestroy"
"runtime.traceShuttingDown" "(*runtime/internal/atomic.Bool).Load"
"runtime.allocm" "runtime.traceShuttingDown"
"runtime.allocm" "runtime.systemstack"
"runtime.allocm" "runtime.malg"
"runtime.allocm" "(runtime.puintptr).ptr"
"runtime.allocm" "runtime.malg"
"runtime.allocm" "runtime.mStackIsSystemAllocated"
"runtime.releasep" "runtime.traceAcquire"
"runtime.releasep" "(runtime.traceLocker).ok"
"runtime.releasep" "runtime.getg"
"runtime.releasep" "(runtime.puintptr).ptr"
"(runtime.traceLocker).ProcStop" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).ProcStop" "(runtime.traceEventWriter).commit"
"runtime.releasep" "(runtime.traceLocker).ProcStop"
"runtime.releasep" "runtime.traceRelease"
"runtime.releasepNoTrace" "runtime.getg"
"runtime.releasepNoTrace" "runtime.throw"
"runtime.releasepNoTrace" "(runtime.puintptr).ptr"
"runtime.releasepNoTrace" "(runtime.muintptr).ptr"
"runtime.releasepNoTrace" "(runtime.puintptr).ptr"
"runtime.releasepNoTrace" "runtime.throw"
"runtime.releasep" "runtime.releasepNoTrace"
"runtime.allocm" "runtime.releasep"
"runtime.allocm" "runtime.releasem"
"runtime.allocm" "(*runtime.rwmutex).runlock"
"runtime.newm" "runtime.allocm"
"runtime.newm" "(*runtime.puintptr).set"
"runtime.newm" "runtime.getg"
"runtime.newm" "runtime.lock"
"runtime.newm1" "(*runtime.rwmutex).rlock"
"runtime.pthread_attr_init" "internal/abi.FuncPCABI0"
"runtime.pthread_attr_init" "runtime.libcCall"
"runtime.pthread_attr_init" "runtime.KeepAlive"
"runtime.newosproc" "runtime.pthread_attr_init"
"runtime.writeErrStr" "runtime.write"
"runtime.newosproc" "runtime.writeErrStr"
"runtime.exit" "internal/abi.FuncPCABI0"
"runtime.exit" "runtime.libcCall"
"runtime.newosproc" "runtime.exit"
"runtime.pthread_attr_getstacksize" "internal/abi.FuncPCABI0"
"runtime.pthread_attr_getstacksize" "runtime.libcCall"
"runtime.pthread_attr_getstacksize" "runtime.KeepAlive"
"runtime.pthread_attr_getstacksize" "runtime.KeepAlive"
"runtime.newosproc" "runtime.pthread_attr_getstacksize"
"runtime.newosproc" "runtime.writeErrStr"
"runtime.newosproc" "runtime.exit"
"runtime.pthread_attr_setdetachstate" "internal/abi.FuncPCABI0"
"runtime.pthread_attr_setdetachstate" "runtime.libcCall"
"runtime.pthread_attr_setdetachstate" "runtime.KeepAlive"
"runtime.newosproc" "runtime.pthread_attr_setdetachstate"
"runtime.newosproc" "runtime.writeErrStr"
"runtime.newosproc" "runtime.exit"
"runtime.sigprocmask" "internal/abi.FuncPCABI0"
"runtime.sigprocmask" "runtime.libcCall"
"runtime.sigprocmask" "runtime.KeepAlive"
"runtime.sigprocmask" "runtime.KeepAlive"
"runtime.newosproc" "runtime.sigprocmask"
"runtime.newosproc$1" "internal/abi.FuncPCABI0"
"runtime.pthread_create" "internal/abi.FuncPCABI0"
"runtime.pthread_create" "runtime.libcCall"
"runtime.pthread_create" "runtime.KeepAlive"
"runtime.pthread_create" "runtime.KeepAlive"
"runtime.newosproc$1" "runtime.pthread_create"
"runtime.retryOnEAGAIN" "runtime.newosproc$1"
"runtime.usleep_no_g" "internal/abi.FuncPCABI0"
"runtime.usleep_no_g" "runtime.asmcgocall_no_g"
"runtime.retryOnEAGAIN" "runtime.usleep_no_g"
"runtime.newosproc" "runtime.retryOnEAGAIN"
"runtime.newosproc" "runtime.sigprocmask"
"runtime.newosproc" "runtime.writeErrStr"
"runtime.newosproc" "runtime.exit"
"runtime.newm1" "runtime.newosproc"
"runtime.newm1" "(*runtime.rwmutex).runlock"
"runtime.newm1" "runtime.throw"
"runtime.newm1" "(*runtime.guintptr).set"
"runtime.newm1" "internal/abi.FuncPCABI0"
"runtime.newm1" "runtime.msanwrite"
"runtime.newm1" "runtime.asanwrite"
"runtime.newm1" "(*runtime.rwmutex).rlock"
"runtime.newm1" "runtime.asmcgocall"
"runtime.newm1" "(*runtime.rwmutex).runlock"
"runtime.newm" "runtime.newm1"
"runtime.newm" "runtime.getg"
"runtime.newm" "runtime.releasem"
"runtime.newm" "runtime.throw"
"runtime.newm" "(*runtime.muintptr).set"
"runtime.newm" "runtime.notewakeup"
"runtime.newm" "runtime.unlock"
"runtime.newm" "runtime.getg"
"runtime.newm" "runtime.releasem"
"runtime.startm" "runtime.newm"
"runtime.startm" "runtime.lock"
"runtime.startm" "runtime.releasem"
"runtime.startm" "runtime.unlock"
"runtime.startm" "runtime.throw"
"runtime.startm" "runtime.throw"
"runtime.startm" "runtime.throw"
"runtime.startm" "(*runtime.puintptr).set"
"runtime.startm" "runtime.notewakeup"
"runtime.startm" "runtime.releasem"
"runtime.runqempty" "runtime/internal/atomic.Load"
"runtime.runqempty" "runtime/internal/atomic.Load"
"runtime.runqempty" "runtime/internal/atomic.Loaduintptr"
"runtime.runqempty" "runtime/internal/atomic.Load"
"runtime.startm" "runtime.runqempty"
"runtime.injectglist$1" "runtime.startm"
"runtime.injectglist$1" "runtime.unlock"
"runtime.injectglist$1" "runtime.releasem"
"runtime.injectglist" "runtime.injectglist$1"
"runtime.injectglist" "(*runtime/internal/atomic.Int32).Load"
"(*runtime.gQueue).pop" "(runtime.guintptr).ptr"
"runtime.injectglist" "(*runtime.gQueue).pop"
"(*runtime.gQueue).pushBack" "(runtime.guintptr).ptr"
"(*runtime.gQueue).pushBack" "(*runtime.guintptr).set"
"(*runtime.gQueue).pushBack" "(*runtime.guintptr).set"
"(*runtime.gQueue).pushBack" "(*runtime.guintptr).set"
"runtime.injectglist" "(*runtime.gQueue).pushBack"
"runtime.injectglist" "(*runtime.gQueue).empty"
"runtime.injectglist" "runtime.lock"
"runtime.injectglist" "runtime.globrunqputbatch"
"runtime.injectglist" "runtime.unlock"
"runtime.injectglist" "runtime.injectglist$1"
"runtime.injectglist" "(*runtime.gQueue).empty"
"runtime.runqputbatch" "runtime/internal/atomic.LoadAcq"
"runtime.runqputbatch" "(*runtime.gQueue).pop"
"runtime.runqputbatch" "(*runtime.guintptr).set"
"runtime.runqputbatch" "(*runtime.gQueue).empty"
"runtime.runqputbatch" "runtime/internal/atomic.StoreRel"
"runtime.runqputbatch" "(*runtime.gQueue).empty"
"runtime.runqputbatch" "runtime.cheaprandn"
"runtime.runqputbatch" "runtime.runqputbatch$1"
"runtime.runqputbatch" "runtime.runqputbatch$1"
"runtime.runqputbatch" "runtime.runqputbatch$1"
"runtime.runqputbatch" "runtime.runqputbatch$1"
"runtime.runqputbatch" "runtime.lock"
"runtime.runqputbatch" "runtime.globrunqputbatch"
"runtime.runqputbatch" "runtime.unlock"
"runtime.injectglist" "runtime.runqputbatch"
"runtime.gcWakeAllAssists" "runtime.injectglist"
"runtime.gcWakeAllAssists" "runtime.unlock"
"runtime.gcMarkDone" "runtime.gcWakeAllAssists"
"runtime.gcMarkDone" "runtime.semrelease"
"runtime.schedEnableUser" "runtime.lock"
"runtime.schedEnableUser" "runtime.unlock"
"runtime.schedEnableUser" "runtime.globrunqputbatch"
"runtime.schedEnableUser" "runtime.unlock"
"runtime.schedEnableUser" "runtime.unlock"
"runtime.schedEnableUser" "runtime.startm"
"runtime.schedEnableUser" "(*runtime/internal/atomic.Int32).Load"
"runtime.gcMarkDone" "runtime.schedEnableUser"
"(*runtime.gcControllerState).endCycle" "(*runtime.gcControllerState).heapGoal"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).endCycle" "runtime.printlock"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).endCycle" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).endCycle" "runtime.printunlock"
"runtime.gcMarkDone" "(*runtime.gcControllerState).endCycle"
"runtime.setGCPhase" "runtime/internal/atomic.Store"
"runtime.gcMarkTermination" "runtime.setGCPhase"
"runtime.gcMarkTermination" "(*runtime/internal/atomic.Uint64).Load"
"runtime.gcMarkTermination" "runtime.nanotime"
"runtime.gcMarkTermination" "runtime.acquirem"
"runtime.casGToWaiting" "runtime.casgstatus"
"runtime.gcMarkTermination" "runtime.casGToWaiting"
"runtime.gcMarkTermination" "runtime.systemstack"
"runtime.gcMarkTermination" "runtime.systemstack"
"runtime.gcMarkTermination" "runtime.casgstatus"
"runtime.gcMarkTermination" "runtime.traceAcquire"
"runtime.gcMarkTermination" "(runtime.traceLocker).ok"
"(runtime.traceLocker).GCDone" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).GCDone" "(runtime.traceEventWriter).commit"
"runtime.gcMarkTermination" "(runtime.traceLocker).GCDone"
"runtime.gcMarkTermination" "runtime.traceRelease"
"runtime.gcMarkTermination" "runtime.throw"
"runtime.gcMarkTermination" "(*runtime.sysMemStat).load"
"runtime.gcMarkTermination" "runtime.systemstack"
"runtime.gcMarkTermination" "runtime.nanotime"
"runtime.walltime" "internal/abi.FuncPCABI0"
"runtime.walltime" "runtime.libcCall"
"runtime.time_now" "runtime.walltime"
"runtime.time_now" "runtime.nanotime"
"runtime.gcMarkTermination" "runtime.time_now"
"runtime.gcMarkTermination" "runtime/internal/atomic.Store64"
"runtime.gcMarkTermination" "runtime/internal/atomic.Store64"
"(*runtime.cpuStats).accumulate" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.cpuStats).accumulate" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.cpuStats).accumulate" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.cpuStats).accumulate" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.cpuStats).accumulate" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.cpuStats).accumulate" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.cpuStats).accumulate" "(*runtime/internal/atomic.Int64).Load"
"runtime.gcMarkTermination" "(*runtime.cpuStats).accumulate"
"runtime.gcMarkTermination" "(*runtime/internal/atomic.Int64).Store"
"runtime.gcMarkTermination" "(*runtime/internal/atomic.Int64).Store"
"runtime.gcMarkTermination" "(*runtime/internal/atomic.Int64).Store"
"runtime.gcMarkTermination" "runtime.lock"
"runtime.gcMarkTermination" "runtime.injectglist"
"runtime.gcMarkTermination" "runtime.unlock"
"(*runtime.scavengeIndex).nextGen" "(*runtime.atomicOffAddr).Load"
"(*runtime.scavengeIndex).nextGen" "(runtime.offAddr).lessThan"
"(*runtime.scavengeIndex).nextGen" "(runtime.offAddr).addr"
"(*runtime.scavengeIndex).nextGen" "(*runtime.atomicOffAddr).StoreMarked"
"runtime.gcMarkTermination" "(*runtime.scavengeIndex).nextGen"
"(*runtime.gcCPULimiterState).finishGCTransition" "runtime.throw"
"(*runtime.gcCPULimiterState).finishGCTransition" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcCPULimiterState).finishGCTransition" "(*runtime.gcCPULimiterState).accumulate"
"(*runtime.gcCPULimiterState).finishGCTransition" "(*runtime/internal/atomic.Int64).Store"
"(*runtime/internal/atomic.Uint32).Swap" "runtime/internal/atomic.Xchg"
"(*runtime.gcCPULimiterState).unlock" "(*runtime/internal/atomic.Uint32).Swap"
"(*runtime.gcCPULimiterState).unlock" "runtime.throw"
"(*runtime.gcCPULimiterState).finishGCTransition" "(*runtime.gcCPULimiterState).unlock"
"runtime.gcMarkTermination" "(*runtime.gcCPULimiterState).finishGCTransition"
"(*runtime.mProfCycleHolder).increment" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.mProfCycleHolder).increment" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.mProf_NextCycle" "(*runtime.mProfCycleHolder).increment"
"runtime.gcMarkTermination" "runtime.mProf_NextCycle"
"runtime.gcMarkTermination" "(*runtime.activeSweep).begin"
"runtime.gcMarkTermination" "runtime.throw"
"runtime.gcMarkTermination" "runtime.systemstack"
"(*runtime.mProfCycleHolder).setFlushed" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.mProfCycleHolder).setFlushed" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.mProf_Flush" "(*runtime.mProfCycleHolder).setFlushed"
"runtime.mProf_Flush" "runtime.lock"
"runtime.mProf_Flush" "runtime.lock"
"runtime.mProf_FlushLocked" "runtime.assertLockHeld"
"runtime.mProf_FlushLocked" "runtime.assertLockHeld"
"runtime.mProf_FlushLocked" "(*runtime/internal/atomic.UnsafePointer).Load"
"runtime.mProf_FlushLocked" "(*runtime.bucket).mp"
"runtime.mProf_FlushLocked" "(*runtime.memRecordCycle).add"
"runtime.mProf_Flush" "runtime.mProf_FlushLocked"
"runtime.mProf_Flush" "runtime.unlock"
"runtime.mProf_Flush" "runtime.unlock"
"runtime.gcMarkTermination" "runtime.mProf_Flush"
"runtime.prepareFreeWorkbufs" "runtime.lock"
"runtime.prepareFreeWorkbufs" "runtime.throw"
"(*runtime.mSpanList).takeAll" "(*runtime.mSpanList).isEmpty"
"(*runtime.mSpanList).takeAll" "(*runtime.mSpanList).isEmpty"
"runtime.prepareFreeWorkbufs" "(*runtime.mSpanList).takeAll"
"runtime.prepareFreeWorkbufs" "runtime.unlock"
"runtime.gcMarkTermination" "runtime.prepareFreeWorkbufs"
"runtime.gcMarkTermination" "runtime.systemstack"
"runtime.gcMarkTermination" "runtime.forEachP"
"runtime.gcMarkTermination" "runtime.throw"
"runtime.gcMarkTermination" "(*runtime.activeSweep).end"
"runtime.gcMarkTermination" "runtime.printlock"
"runtime.gcMarkTermination" "runtime.itoaDiv"
"runtime.gcMarkTermination" "runtime.lock"
"runtime.gcMarkTermination" "runtime.unlock"
"runtime.gcMarkTermination" "(*runtime/internal/atomic.Int64).Load"
"runtime.gcMarkTermination" "(*runtime/internal/atomic.Int64).Load"
"runtime.gcMarkTermination" "(*runtime/internal/atomic.Int64).Load"
"runtime.gcMarkTermination" "(*runtime/internal/atomic.Int64).Load"
"runtime.fmtNSAsMS" "runtime.itoaDiv"
"runtime.fmtNSAsMS" "runtime.itoaDiv"
"runtime.gcMarkTermination" "runtime.fmtNSAsMS"
"runtime.gcMarkTermination" "(*runtime/internal/atomic.Uint64).Load"
"runtime.gcMarkTermination" "(*runtime/internal/atomic.Uint64).Load"
"runtime.gcMarkTermination" "runtime.fmtNSAsMS"
"runtime.gcMarkTermination" "runtime.printunlock"
"(*runtime.mspan).setUserArenaChunkToFault" "runtime.throw"
"(*runtime.mspan).setUserArenaChunkToFault" "runtime.throw"
"runtime.makeSpanClass" "runtime.bool2int"
"(*runtime.mspan).setUserArenaChunkToFault" "runtime.makeSpanClass"
"(*runtime.mspan).setUserArenaChunkToFault" "(*runtime.mspan).base"
"(*runtime.mspan).setUserArenaChunkToFault" "runtime.sysFault"
"(*runtime.mspan).setUserArenaChunkToFault" "(*runtime.sysMemStat).add"
"(*runtime.mspan).setUserArenaChunkToFault" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.mspan).setUserArenaChunkToFault" "(*runtime.consistentHeapStats).acquire"
"(*runtime.mspan).setUserArenaChunkToFault" "runtime/internal/atomic.Xaddint64"
"(*runtime.mspan).setUserArenaChunkToFault" "runtime/internal/atomic.Xaddint64"
"(*runtime.mspan).setUserArenaChunkToFault" "runtime/internal/atomic.Xadd64"
"(*runtime.mspan).setUserArenaChunkToFault" "runtime/internal/atomic.Xadd64"
"(*runtime.mspan).setUserArenaChunkToFault" "(*runtime.consistentHeapStats).release"
"(*runtime.mspan).setUserArenaChunkToFault" "(*runtime.gcControllerState).update"
"(*runtime.mspan).setUserArenaChunkToFault" "(*runtime.mspan).base"
"(*runtime.mspan).setUserArenaChunkToFault" "runtime.racefree"
"(*runtime.mspan).setUserArenaChunkToFault" "runtime.systemstack"
"runtime.gcMarkTermination" "(*runtime.mspan).setUserArenaChunkToFault"
"runtime.gcMarkTermination" "(*runtime.gcControllerState).heapGoal"
"runtime.gcMarkTermination" "runtime.systemstack"
"runtime.gcMarkTermination" "runtime.semrelease"
"runtime.gcMarkTermination" "runtime.semrelease"
"runtime.gcMarkTermination" "runtime.releasem"
"runtime.gcMarkTermination" "runtime.Gosched"
"runtime.gcMarkDone" "runtime.gcMarkTermination"
"runtime.gcAssistAlloc" "runtime.gcMarkDone"
"runtime.gcAssistAlloc" "runtime.Gosched"
"runtime.gcParkAssist" "runtime.lock"
"runtime.gcParkAssist" "runtime/internal/atomic.Load"
"runtime.gcParkAssist" "runtime.unlock"
"runtime.gcParkAssist" "runtime.getg"
"runtime.gcParkAssist" "(*runtime.gQueue).pushBack"
"runtime.gcParkAssist" "(*runtime/internal/atomic.Int64).Load"
"runtime.gcParkAssist" "runtime.goparkunlock"
"runtime.gcParkAssist" "(runtime.guintptr).ptr"
"runtime.gcParkAssist" "(*runtime.guintptr).set"
"runtime.gcParkAssist" "runtime.unlock"
"runtime.gcAssistAlloc" "runtime.gcParkAssist"
"runtime.gcAssistAlloc" "runtime.traceAcquire"
"runtime.gcAssistAlloc" "(runtime.traceLocker).ok"
"runtime.gcAssistAlloc" "(runtime.traceLocker).GCMarkAssistDone"
"runtime.gcAssistAlloc" "runtime.traceRelease"
"runtime.deductAssistCredit" "runtime.gcAssistAlloc"
"runtime.mallocgc" "runtime.deductAssistCredit"
"runtime.mallocgc" "runtime.acquirem"
"runtime.mallocgc" "runtime.persistentalloc"
"runtime.mallocgc" "runtime.getg"
"runtime.mallocgc" "runtime.throw"
"runtime.mallocgc" "runtime.getg"
"runtime.mallocgc" "runtime.throw"
"runtime.getMCache" "(runtime.puintptr).ptr"
"runtime.mallocgc" "runtime.getMCache"
"runtime.mallocgc" "runtime.throw"
"(*runtime.mcache).allocLarge" "runtime.throw"
"runtime.deductSweepCredit" "runtime.traceAcquire"
"runtime.deductSweepCredit" "(runtime.traceLocker).ok"
"(runtime.traceLocker).GCSweepStart" "(runtime.puintptr).ptr"
"(runtime.traceLocker).GCSweepStart" "runtime.throw"
"runtime.deductSweepCredit" "(runtime.traceLocker).GCSweepStart"
"runtime.deductSweepCredit" "runtime.traceRelease"
"runtime.deductSweepCredit" "(*runtime/internal/atomic.Uint64).Load"
"runtime.deductSweepCredit" "(*runtime/internal/atomic.Uint64).Load"
"runtime.sweepone" "runtime.getg"
"runtime.sweepone" "(*runtime.activeSweep).begin"
"(*runtime.sweepClass).load" "runtime/internal/atomic.Load"
"(*runtime.mheap).nextSpanForSweep" "(*runtime.sweepClass).load"
"(*runtime.mheap).nextSpanForSweep" "(runtime.sweepClass).split"
"(*runtime.sweepClass).update" "(*runtime.sweepClass).load"
"(*runtime.sweepClass).update" "(*runtime.sweepClass).load"
"(*runtime.sweepClass).update" "runtime/internal/atomic.Cas"
"(*runtime.mheap).nextSpanForSweep" "(*runtime.sweepClass).update"
"(*runtime.mheap).nextSpanForSweep" "(*runtime.mcentral).fullUnswept"
"(*runtime.atomicHeadTailIndex).load" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.spanSet).pop" "(*runtime.atomicHeadTailIndex).load"
"(runtime.headTailIndex).split" "(runtime.headTailIndex).head"
"(runtime.headTailIndex).split" "(runtime.headTailIndex).tail"
"(*runtime.spanSet).pop" "(runtime.headTailIndex).split"
"(*runtime.spanSet).pop" "(*runtime/internal/atomic.Uintptr).Load"
"(*runtime.spanSet).pop" "runtime.makeHeadTailIndex"
"(*runtime.atomicHeadTailIndex).cas" "(*runtime/internal/atomic.Uint64).CompareAndSwap"
"(*runtime.spanSet).pop" "(*runtime.atomicHeadTailIndex).cas"
"(*runtime.spanSet).pop" "(*runtime.atomicSpanSetSpinePointer).Load"
"(*runtime.spanSet).pop" "(runtime.spanSetSpinePointer).lookup"
"(*runtime.spanSet).pop" "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).Load[runtime.spanSetBlock]"
"(*runtime.atomicMSpanPointer).Load" "(*runtime/internal/atomic.UnsafePointer).Load"
"(*runtime.spanSet).pop" "(*runtime.atomicMSpanPointer).Load"
"(*runtime.spanSet).pop" "(*runtime.atomicHeadTailIndex).load"
"(*runtime.spanSet).pop" "(runtime.headTailIndex).split"
"(*runtime.spanSet).pop" "(*runtime.atomicMSpanPointer).Load"
"(*runtime.spanSet).pop" "(*runtime.atomicMSpanPointer).StoreNoWB"
"(*runtime.spanSet).pop" "(*runtime/internal/atomic.Uint32).Add"
"(*runtime.spanSet).pop" "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).StoreNoWB[runtime.spanSetBlock]"
"(*runtime.spanSetBlockAlloc).free" "(*runtime/internal/atomic.Uint32).Store"
"(*runtime.spanSetBlockAlloc).free" "(*runtime.lfstack).push"
"(*runtime.spanSet).pop" "(*runtime.spanSetBlockAlloc).free"
"(*runtime.mheap).nextSpanForSweep" "(*runtime.spanSet).pop"
"(*runtime.mheap).nextSpanForSweep" "(*runtime.mcentral).partialUnswept"
"(*runtime.mheap).nextSpanForSweep" "(*runtime.spanSet).pop"
"(*runtime.mheap).nextSpanForSweep" "(*runtime.sweepClass).update"
"runtime.sweepone" "(*runtime.mheap).nextSpanForSweep"
"runtime.sweepone" "(*runtime.activeSweep).end"
"(*runtime.activeSweep).markDrained" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.activeSweep).markDrained" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.sweepone" "(*runtime.activeSweep).markDrained"
"runtime.sweepone" "(*runtime.mSpanStateBox).get"
"runtime.sweepone" "(*runtime.sweepLocker).tryAcquire"
"runtime.sweepone" "runtime.throw"
"runtime.sweepone" "(*runtime.sweepLocked).sweep"
"runtime.sweepone" "(*runtime/internal/atomic.Uintptr).Add"
"runtime.sweepone" "runtime.systemstack"
"(*runtime.scavengerState).ready" "(*runtime/internal/atomic.Uint32).Store"
"runtime.sweepone" "(*runtime.scavengerState).ready"
"runtime.deductSweepCredit" "runtime.sweepone"
"runtime.deductSweepCredit" "runtime.traceAcquire"
"runtime.deductSweepCredit" "(runtime.traceLocker).ok"
"runtime.deductSweepCredit" "(*runtime/internal/atomic.Uint64).Load"
"runtime.deductSweepCredit" "(*runtime/internal/atomic.Uint64).Load"
"(runtime.traceLocker).GCSweepDone" "(runtime.puintptr).ptr"
"(runtime.traceLocker).GCSweepDone" "runtime.throw"
"(runtime.traceLocker).GCSweepDone" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).GCSweepDone" "(runtime.traceEventWriter).commit"
"runtime.deductSweepCredit" "(runtime.traceLocker).GCSweepDone"
"runtime.deductSweepCredit" "runtime.traceRelease"
"(*runtime.mcache).allocLarge" "runtime.deductSweepCredit"
"(*runtime.mcache).allocLarge" "runtime.makeSpanClass"
"(*runtime.mheap).alloc" "runtime.systemstack"
"(*runtime.mcache).allocLarge" "(*runtime.mheap).alloc"
"(*runtime.mcache).allocLarge" "runtime.throw"
"(*runtime.mcache).allocLarge" "(*runtime.consistentHeapStats).acquire"
"(*runtime.mcache).allocLarge" "runtime/internal/atomic.Xadd64"
"(*runtime.mcache).allocLarge" "runtime/internal/atomic.Xadd64"
"(*runtime.mcache).allocLarge" "(*runtime.consistentHeapStats).release"
"(*runtime.mcache).allocLarge" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.mcache).allocLarge" "(*runtime.gcControllerState).update"
"(*runtime.mcache).allocLarge" "(*runtime.mcentral).fullSwept"
"(*runtime.mcache).allocLarge" "(*runtime.spanSet).push"
"(*runtime.mcache).allocLarge" "(*runtime.mspan).base"
"(*runtime.mspan).initHeapBits" "(runtime.spanClass).noscan"
"(*runtime.mspan).heapBits" "(runtime.spanClass).noscan"
"(*runtime.mspan).heapBits" "runtime.throw"
"(*runtime.mspan).heapBits" "runtime.throw"
"(*runtime.mspan).heapBits" "(*runtime.mspan).base"
"(*runtime.mspan).heapBits" "runtime.heapBitsSlice"
"(*runtime.mspan).heapBits" "(*runtime.mspan).base"
"(*runtime.mspan).heapBits" "runtime.heapBitsSlice"
"(*runtime.mspan).initHeapBits" "(*runtime.mspan).heapBits"
"(*runtime.mspan).initHeapBits" "runtime.heapBitsInSpan"
"(*runtime.mcache).allocLarge" "(*runtime.mspan).initHeapBits"
"runtime.mallocgc" "(*runtime.mcache).allocLarge"
"runtime.mallocgc" "(*runtime.mspan).base"
"runtime.mallocgc" "runtime.alignUp"
"runtime.mallocgc" "runtime.alignUp"
"runtime.mallocgc" "runtime.alignUp"
"runtime.mallocgc" "runtime.alignUp"
"runtime.mallocgc" "runtime.releasem"
"runtime.nextFreeFast" "runtime/internal/sys.TrailingZeros64"
"runtime.nextFreeFast" "(*runtime.mspan).base"
"runtime.mallocgc" "runtime.nextFreeFast"
"(*runtime.mspan).nextFreeIndex" "runtime.throw"
"(*runtime.mspan).nextFreeIndex" "runtime/internal/sys.TrailingZeros64"
"(*runtime.mspan).nextFreeIndex" "(*runtime.mspan).refillAllocCache"
"(*runtime.mspan).nextFreeIndex" "runtime/internal/sys.TrailingZeros64"
"(*runtime.mspan).nextFreeIndex" "(*runtime.mspan).refillAllocCache"
"(*runtime.mcache).nextFree" "(*runtime.mspan).nextFreeIndex"
"(*runtime.mcache).nextFree" "runtime.throw"
"(*runtime.mcache).refill" "runtime.throw"
"(*runtime.mcentral).cacheSpan" "(runtime.spanClass).sizeclass"
"(*runtime.mcentral).cacheSpan" "runtime.deductSweepCredit"
"(*runtime.mcentral).cacheSpan" "runtime.traceAcquire"
"(*runtime.mcentral).cacheSpan" "(runtime.traceLocker).ok"
"(*runtime.mcentral).cacheSpan" "(runtime.traceLocker).GCSweepStart"
"(*runtime.mcentral).cacheSpan" "runtime.traceRelease"
"(*runtime.mcentral).cacheSpan" "(*runtime.mcentral).partialSwept"
"(*runtime.mcentral).cacheSpan" "(*runtime.spanSet).pop"
"(*runtime.mcentral).cacheSpan" "(*runtime.activeSweep).begin"
"(*runtime.mcentral).cacheSpan" "runtime.traceAcquire"
"(*runtime.mcentral).cacheSpan" "(runtime.traceLocker).ok"
"(*runtime.mcentral).cacheSpan" "(*runtime.mcentral).partialUnswept"
"(*runtime.mcentral).cacheSpan" "(*runtime.spanSet).pop"
"(*runtime.mcentral).cacheSpan" "(*runtime.sweepLocker).tryAcquire"
"(*runtime.mcentral).cacheSpan" "(*runtime.sweepLocked).sweep"
"(*runtime.mcentral).cacheSpan" "(*runtime.activeSweep).end"
"(*runtime.mcentral).cacheSpan" "(*runtime.mcentral).fullUnswept"
"(*runtime.mcentral).cacheSpan" "(*runtime.spanSet).pop"
"(*runtime.mcentral).cacheSpan" "(*runtime.activeSweep).end"
"(*runtime.mcentral).cacheSpan" "(*runtime.sweepLocker).tryAcquire"
"(*runtime.mcentral).cacheSpan" "(*runtime.sweepLocked).sweep"
"(*runtime.mcentral).cacheSpan" "(*runtime.mspan).nextFreeIndex"
"(*runtime.mcentral).cacheSpan" "(*runtime.activeSweep).end"
"(*runtime.mcentral).cacheSpan" "(*runtime.mcentral).fullSwept"
"(*runtime.mcentral).cacheSpan" "(*runtime.spanSet).push"
"(*runtime.mcentral).cacheSpan" "(runtime.traceLocker).GCSweepDone"
"(*runtime.mcentral).cacheSpan" "runtime.traceRelease"
"(*runtime.mcentral).grow" "(runtime.spanClass).sizeclass"
"(*runtime.mcentral).grow" "(runtime.spanClass).sizeclass"
"(*runtime.mcentral).grow" "(*runtime.mheap).alloc"
"(*runtime.mcentral).grow" "(*runtime.mspan).divideByElemSize"
"(*runtime.mcentral).grow" "(*runtime.mspan).base"
"(*runtime.mcentral).grow" "(*runtime.mspan).initHeapBits"
"(*runtime.mcentral).cacheSpan" "(*runtime.mcentral).grow"
"(*runtime.mcentral).cacheSpan" "runtime.traceAcquire"
"(*runtime.mcentral).cacheSpan" "(runtime.traceLocker).ok"
"(*runtime.mcentral).cacheSpan" "(runtime.traceLocker).GCSweepDone"
"(*runtime.mcentral).cacheSpan" "runtime.traceRelease"
"(*runtime.mcentral).cacheSpan" "runtime.throw"
"(*runtime.mcentral).cacheSpan" "(*runtime.mspan).refillAllocCache"
"(*runtime.mcache).refill" "(*runtime.mcentral).cacheSpan"
"(*runtime.mcache).refill" "runtime.throw"
"(*runtime.mcache).refill" "(*runtime.mcentral).uncacheSpan"
"(*runtime.mcache).refill" "(*runtime.consistentHeapStats).acquire"
"(*runtime.mcache).refill" "(runtime.spanClass).sizeclass"
"(*runtime.mcache).refill" "runtime/internal/atomic.Xadd64"
"(*runtime.mcache).refill" "runtime/internal/atomic.Xadd64"
"(*runtime.mcache).refill" "(*runtime.consistentHeapStats).release"
"(*runtime.mcache).refill" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.mcache).refill" "runtime.throw"
"(*runtime.mcache).refill" "runtime.throw"
"(*runtime.mcache).refill" "(*runtime.gcControllerState).update"
"(*runtime.mcache).nextFree" "(*runtime.mcache).refill"
"(*runtime.mcache).nextFree" "(*runtime.mspan).nextFreeIndex"
"(*runtime.mcache).nextFree" "runtime.throw"
"(*runtime.mcache).nextFree" "(*runtime.mspan).base"
"(*runtime.mcache).nextFree" "runtime.throw"
"runtime.mallocgc" "(*runtime.mcache).nextFree"
"runtime.mallocgc" "runtime.heapBitsInSpan"
"runtime.mallocgc" "runtime.divRoundUp"
"runtime.mallocgc" "runtime.makeSpanClass"
"runtime.mallocgc" "runtime.nextFreeFast"
"runtime.mallocgc" "runtime.divRoundUp"
"runtime.mallocgc" "(*runtime.mcache).nextFree"
"runtime.mallocgc" "runtime.memclrNoHeapPointers"
"runtime.mallocgc" "runtime.add"
"runtime.mallocgc" "runtime.memclrNoHeapPointers"
"runtime.mallocgc" "runtime.publicationBarrier"
"runtime.heapSetType" "runtime.throw"
"(*runtime.mspan).writeHeapBitsSmall" "runtime.readUintptr"
"(*runtime.mspan).writeHeapBitsSmall" "(*runtime.mspan).heapBits"
"(*runtime.mspan).writeHeapBitsSmall" "(*runtime.mspan).base"
"(*runtime.mspan).writeHeapBitsSmall" "(*runtime.mspan).heapBitsSmallForAddr"
"(*runtime.mspan).writeHeapBitsSmall" "runtime.throw"
"runtime.heapSetType" "(*runtime.mspan).writeHeapBitsSmall"
"runtime.heapSetType" "runtime.heapBitsInSpan"
"runtime.heapSetType" "runtime.heapBitsInSpan"
"runtime.heapSetType" "(runtime.spanClass).sizeclass"
"runtime.heapSetType" "runtime.throw"
"runtime.heapSetType" "runtime.alignUp"
"runtime.heapSetType" "runtime.alignUp"
"runtime.heapSetType" "runtime.alignUp"
"runtime.heapSetType" "runtime.systemstack"
"runtime.heapSetType" "(*runtime.mspan).base"
"runtime.heapSetType" "(*runtime.mspan).base"
"runtime.heapSetType" "runtime.add"
"runtime.heapSetType" "runtime.addb"
"runtime.runGCProg" "runtime.add1"
"runtime.runGCProg" "runtime.add1"
"runtime.runGCProg" "runtime.add1"
"runtime.runGCProg" "runtime.add1"
"runtime.runGCProg" "runtime.add1"
"runtime.runGCProg" "runtime.add1"
"runtime.runGCProg" "runtime.add1"
"runtime.runGCProg" "runtime.subtract1"
"runtime.runGCProg" "runtime.subtractb"
"runtime.runGCProg" "runtime.subtract1"
"runtime.runGCProg" "runtime.add1"
"runtime.runGCProg" "runtime.add1"
"runtime.runGCProg" "runtime.add1"
"runtime.runGCProg" "runtime.add1"
"runtime.runGCProg" "runtime.add1"
"runtime.heapSetType" "runtime.runGCProg"
"runtime.doubleCheckHeapPointers" "(*runtime.mspan).objBase"
"runtime.doubleCheckHeapPointers" "(*runtime.mspan).typePointersOfUnchecked"
"runtime.doubleCheckHeapPointers" "runtime.addb"
"runtime.doubleCheckHeapPointers" "(runtime.typePointers).next"
"runtime.doubleCheckHeapPointers" "(runtime.typePointers).next"
"runtime.doubleCheckHeapPointers" "(*runtime.mspan).typePointersOfUnchecked"
"runtime.doubleCheckHeapPointers" "runtime.dumpTypePointers"
"runtime.doubleCheckHeapPointers" "(runtime.typePointers).next"
"runtime.doubleCheckHeapPointers" "runtime.dumpTypePointers"
"runtime.doubleCheckHeapPointers" "runtime.throw"
"runtime.doubleCheckHeapPointers" "runtime.dumpTypePointers"
"runtime.heapSetType" "runtime.doubleCheckHeapPointers"
"runtime.heapSetType" "runtime.cheaprand"
"runtime.heapSetType" "runtime.alignUp"
"runtime.heapSetType" "runtime.cheaprand"
"runtime.heapSetType" "runtime.alignDown"
"runtime.doubleCheckHeapPointersInterior" "runtime.throw"
"(*runtime.mspan).typePointersOf" "(*runtime.mspan).objBase"
"(*runtime.mspan).typePointersOf" "(*runtime.mspan).typePointersOfUnchecked"
"(*runtime.mspan).typePointersOf" "(runtime.typePointers).fastForward"
"runtime.doubleCheckHeapPointersInterior" "(*runtime.mspan).typePointersOf"
"runtime.doubleCheckHeapPointersInterior" "runtime.addb"
"runtime.doubleCheckHeapPointersInterior" "(runtime.typePointers).next"
"runtime.doubleCheckHeapPointersInterior" "(runtime.typePointers).next"
"runtime.doubleCheckHeapPointersInterior" "(*runtime.mspan).typePointersOf"
"runtime.doubleCheckHeapPointersInterior" "runtime.dumpTypePointers"
"runtime.doubleCheckHeapPointersInterior" "(runtime.typePointers).next"
"runtime.doubleCheckHeapPointersInterior" "runtime.dumpTypePointers"
"runtime.doubleCheckHeapPointersInterior" "runtime.dumpTypePointers"
"runtime.doubleCheckHeapPointersInterior" "runtime.throw"
"runtime.doubleCheckHeapPointersInterior" "runtime.addb"
"runtime.heapSetType" "runtime.doubleCheckHeapPointersInterior"
"runtime.mallocgc" "runtime.heapSetType"
"runtime.mallocgc" "runtime.heapBitsSetType"
"runtime.gcmarknewobject" "runtime.throw"
"runtime.gcmarknewobject" "(*runtime.mspan).objIndex"
"runtime.gcmarknewobject" "(*runtime.mspan).markBitsForIndex"
"runtime.gcmarknewobject" "(runtime.markBits).setMarked"
"runtime.gcmarknewobject" "(*runtime.mspan).base"
"runtime.gcmarknewobject" "runtime.pageIndexOf"
"runtime.gcmarknewobject" "runtime/internal/atomic.Or8"
"runtime.gcmarknewobject" "runtime.getg"
"runtime.gcmarknewobject" "(runtime.puintptr).ptr"
"runtime.mallocgc" "runtime.gcmarknewobject"
"runtime.racemalloc" "runtime.throw"
"runtime.mallocgc" "runtime.racemalloc"
"runtime.msanmalloc" "runtime.throw"
"runtime.mallocgc" "runtime.msanmalloc"
"runtime.mallocgc" "runtime.asanpoison"
"runtime.asanunpoison" "runtime.throw"
"runtime.mallocgc" "runtime.asanunpoison"
"runtime.mallocgc" "runtime.releasem"
"runtime.profilealloc" "runtime.getMCache"
"runtime.profilealloc" "runtime.throw"
"runtime.nextSample" "runtime.getg"
"runtime.fastexprand" "runtime.cheaprandn"
"runtime.fastlog2" "runtime.float64bits"
"runtime.fastexprand" "runtime.fastlog2"
"runtime.nextSample" "runtime.fastexprand"
"runtime.nextSampleNoFP" "runtime.cheaprandn"
"runtime.nextSample" "runtime.nextSampleNoFP"
"runtime.profilealloc" "runtime.nextSample"
"runtime.mProf_Malloc" "runtime.callers"
"runtime.mProf_Malloc" "(*runtime.mProfCycleHolder).read"
"runtime.mProf_Malloc" "runtime.stkbucket"
"runtime.mProf_Malloc" "(*runtime.bucket).mp"
"runtime.mProf_Malloc" "runtime.lock"
"runtime.mProf_Malloc" "runtime.unlock"
"runtime.mProf_Malloc" "runtime.systemstack"
"runtime.profilealloc" "runtime.mProf_Malloc"
"runtime.mallocgc" "runtime.profilealloc"
"runtime.mallocgc" "runtime.throw"
"runtime.mallocgc" "runtime.throw"
"runtime.memclrNoHeapPointersChunked" "runtime.getg"
"runtime.goschedguarded" "runtime.mcall"
"runtime.memclrNoHeapPointersChunked" "runtime.goschedguarded"
"runtime.memclrNoHeapPointersChunked" "runtime.memclrNoHeapPointers"
"runtime.mallocgc" "runtime.memclrNoHeapPointersChunked"
"runtime.tracealloc" "runtime.lock"
"runtime.tracealloc" "runtime.getg"
"runtime.tracealloc" "runtime.toRType"
"runtime.tracealloc" "(runtime.rtype).string"
"runtime.tracealloc" "runtime.goroutineheader"
"runtime.tracealloc" "runtime.getcallerpc"
"runtime.tracealloc" "runtime.getcallersp"
"runtime.tracealloc" "runtime.systemstack"
"runtime.tracealloc" "runtime.unlock"
"runtime.tracealloc" "runtime.goroutineheader"
"runtime.traceback1" "(*runtime/internal/atomic.Uint32).Store"
"runtime.traceback1" "(*runtime/internal/atomic.Uint32).Store"
"runtime.printCgoTraceback" "runtime.callCgoSymbolizer"
"runtime.printOneCgoTraceback" "runtime.printCgoTraceback$1"
"runtime.printOneCgoTraceback" "runtime.callCgoSymbolizer"
"runtime.printOneCgoTraceback" "runtime.gostringnocopy"
"runtime.printOneCgoTraceback" "runtime.gostringnocopy"
"runtime.printOneCgoTraceback" "runtime.traceback2$1"
"runtime.printCgoTraceback" "runtime.printOneCgoTraceback"
"runtime.traceback1" "runtime.printCgoTraceback"
"runtime.traceback1" "runtime.readgstatus"
"runtime.traceback1$1" "(*runtime.unwinder).initAt"
"runtime.traceback2" "(runtime.guintptr).ptr"
"runtime.traceback2" "runtime.gotraceback"
"runtime.traceback2" "(*runtime.unwinder).symPC"
"runtime.traceback2" "runtime.newInlineUnwinder"
"runtime.traceback2" "(*runtime.unwinder).valid"
"runtime.traceback2" "(runtime.inlineFrame).valid"
"runtime.traceback2" "(*runtime.inlineUnwinder).srcFunc"
"runtime.traceback2" "(*runtime.inlineUnwinder).next"
"runtime.traceback2" "(*runtime.unwinder).cgoCallers"
"runtime.traceback2" "runtime.traceback2$1"
"runtime.showframe" "runtime.getg"
"runtime.showfuncinfo" "runtime.gotraceback"
"(runtime.srcFunc).name" "(*runtime.moduledata).funcName"
"runtime.showfuncinfo" "(runtime.srcFunc).name"
"runtime.showfuncinfo" "runtime.elideWrapperCalling"
"runtime.showfuncinfo" "internal/bytealg.IndexByteString"
"runtime.showfuncinfo" "runtime.hasPrefix"
"runtime.showfuncinfo" "runtime.isExportedRuntime"
"runtime.showframe" "runtime.showfuncinfo"
"runtime.showframe" "(runtime.guintptr).ptr"
"runtime.traceback2" "runtime.showframe"
"runtime.traceback2" "(runtime.srcFunc).name"
"runtime.funcline1" "(runtime.funcInfo).valid"
"runtime.funcline1" "runtime.pcvalue"
"runtime.funcline1" "runtime.pcvalue"
"runtime.funcfile" "(runtime.funcInfo).valid"
"runtime.funcfile" "runtime.gostringnocopy"
"runtime.funcline1" "runtime.funcfile"
"(*runtime.inlineUnwinder).fileLine" "runtime.funcline1"
"runtime.traceback2" "(*runtime.inlineUnwinder).fileLine"
"runtime.funcNamePiecesForPrint" "internal/bytealg.IndexByteString"
"runtime.printFuncName" "runtime.funcNamePiecesForPrint"
"runtime.traceback2" "runtime.printFuncName"
"runtime.traceback2" "(*runtime.inlineUnwinder).isInlined"
"runtime.traceback2" "(*runtime.inlineUnwinder).isInlined"
"runtime.traceback2" "(*runtime.unwinder).symPC"
"runtime.printArgs" "runtime.funcdata"
"runtime.printArgs" "runtime.funcdata"
"runtime.pcdatavalue" "runtime.pcdatastart"
"runtime.pcdatavalue" "runtime.pcvalue"
"runtime.printArgs" "runtime.pcdatavalue"
"runtime.printArgs" "runtime.printArgs$3"
"runtime.printArgs" "runtime.printArgs$3"
"runtime.printArgs" "runtime.printArgs$3"
"runtime.printArgs" "runtime.printArgs$3"
"runtime.printArgs$2" "runtime.add"
"runtime.printArgs$2" "runtime.readUnaligned64"
"runtime.printArgs$1" "runtime.add"
"runtime.printArgs$2" "runtime.printArgs$1"
"runtime.printArgs" "runtime.printArgs$2"
"runtime.traceback2" "runtime.printArgs"
"runtime.traceback2" "(runtime.funcInfo).entry"
"runtime.traceback2" "(runtime.funcInfo).entry"
"runtime.traceback2" "(*runtime.unwinder).next"
"runtime.traceback2" "runtime.traceback2$1"
"runtime.traceback2" "runtime.printOneCgoTraceback"
"runtime.traceback2" "runtime.callCgoSymbolizer"
"runtime.traceback1$1" "runtime.traceback2"
"runtime.traceback1$1" "runtime.traceback2"
"runtime.traceback1$1" "runtime.traceback2"
"runtime.traceback1$1" "runtime.traceback2"
"runtime.traceback1" "runtime.traceback1$1"
"runtime.traceback1" "runtime.traceback1$1"
"runtime.printcreatedby" "runtime.findfunc"
"runtime.printcreatedby" "(runtime.funcInfo).valid"
"runtime.printcreatedby1" "runtime.funcname"
"runtime.printcreatedby1" "runtime.printFuncName"
"runtime.printcreatedby1" "(runtime.funcInfo).entry"
"runtime.funcline" "runtime.funcline1"
"runtime.printcreatedby1" "runtime.funcline"
"runtime.printcreatedby1" "(runtime.funcInfo).entry"
"runtime.printcreatedby1" "(runtime.funcInfo).entry"
"runtime.printcreatedby" "runtime.printcreatedby1"
"runtime.printcreatedby" "(runtime.funcInfo).srcFunc"
"runtime.printcreatedby" "runtime.showframe"
"runtime.traceback1" "runtime.printcreatedby"
"runtime.printAncestorTraceback" "runtime.findfunc"
"runtime.printAncestorTraceback" "(runtime.funcInfo).srcFunc"
"runtime.printAncestorTraceback" "runtime.showfuncinfo"
"runtime.printAncestorTracebackFuncInfo" "runtime.newInlineUnwinder"
"runtime.printAncestorTracebackFuncInfo" "(*runtime.inlineUnwinder).fileLine"
"runtime.printAncestorTracebackFuncInfo" "(*runtime.inlineUnwinder).srcFunc"
"runtime.printAncestorTracebackFuncInfo" "(runtime.srcFunc).name"
"runtime.printAncestorTracebackFuncInfo" "runtime.printFuncName"
"runtime.printAncestorTracebackFuncInfo" "(runtime.funcInfo).entry"
"runtime.printAncestorTracebackFuncInfo" "(runtime.funcInfo).entry"
"runtime.printAncestorTraceback" "runtime.printAncestorTracebackFuncInfo"
"runtime.printAncestorTraceback" "runtime.findfunc"
"runtime.printAncestorTraceback" "(runtime.funcInfo).valid"
"runtime.printAncestorTraceback" "runtime.printcreatedby1"
"runtime.printAncestorTraceback" "(runtime.funcInfo).srcFunc"
"runtime.printAncestorTraceback" "runtime.showfuncinfo"
"runtime.traceback1" "runtime.printAncestorTraceback"
"runtime.traceback" "runtime.traceback1"
"runtime.tracealloc" "runtime.traceback"
"runtime.mallocgc" "runtime.tracealloc"
"runtime.mallocgc" "runtime.getg"
"(runtime.gcTrigger).test" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.gcControllerState).trigger" "(*runtime.gcControllerState).heapGoalInternal"
"(*runtime.gcControllerState).trigger" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).trigger" "runtime.throw"
"(runtime.gcTrigger).test" "(*runtime.gcControllerState).trigger"
"(runtime.gcTrigger).test" "(*runtime/internal/atomic.Uint64).Load"
"(runtime.gcTrigger).test" "(*runtime/internal/atomic.Int32).Load"
"(runtime.gcTrigger).test" "(*runtime/internal/atomic.Uint32).Load"
"(runtime.gcTrigger).test" "runtime/internal/atomic.Load64"
"runtime.mallocgc" "(runtime.gcTrigger).test"
"runtime.gcStart" "runtime.acquirem"
"runtime.gcStart" "runtime.getg"
"runtime.gcStart" "runtime.releasem"
"runtime.gcStart" "runtime.releasem"
"runtime.gcStart" "runtime.semacquire"
"runtime.gcStart" "(runtime.gcTrigger).test"
"runtime.gcStart" "(runtime.gcTrigger).test"
"runtime.gcStart" "runtime.sweepone"
"runtime.gcStart" "runtime.semrelease"
"runtime.gcStart" "runtime.semacquire"
"runtime.gcStart" "runtime.semacquire"
"runtime.gcStart" "runtime.traceAcquire"
"runtime.gcStart" "(runtime.traceLocker).ok"
"(runtime.traceLocker).GCStart" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).GCStart" "(runtime.traceLocker).stack"
"(runtime.traceLocker).GCStart" "(runtime.traceEventWriter).commit"
"runtime.gcStart" "(runtime.traceLocker).GCStart"
"runtime.gcStart" "runtime.traceRelease"
"runtime.gcStart" "(*runtime/internal/atomic.Uint32).Load"
"runtime.gcBgMarkWorker" "runtime.getg"
"runtime.gcBgMarkWorker" "(*runtime.guintptr).set"
"runtime.gcBgMarkWorker" "runtime.acquirem"
"runtime.gcBgMarkWorker" "(*runtime.muintptr).set"
"runtime.gcBgMarkWorker" "runtime.notewakeup"
"runtime.gcBgMarkWorker" "runtime.gopark"
"runtime.gcBgMarkWorker" "runtime.acquirem"
"runtime.gcBgMarkWorker" "(*runtime.muintptr).set"
"runtime.gcBgMarkWorker" "(runtime.puintptr).ptr"
"runtime.gcBgMarkWorker" "runtime.throw"
"runtime.gcBgMarkWorker" "runtime.throw"
"runtime.gcBgMarkWorker" "runtime.nanotime"
"(*runtime.limiterEvent).start" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.limiterEvent).start" "(runtime.limiterEventStamp).typ"
"(*runtime.limiterEvent).start" "runtime.makeLimiterEventStamp"
"(*runtime.limiterEvent).start" "(*runtime/internal/atomic.Uint64).Store"
"runtime.gcBgMarkWorker" "(*runtime.limiterEvent).start"
"runtime.gcBgMarkWorker" "runtime/internal/atomic.Xadd"
"runtime.gcBgMarkWorker" "runtime.throw"
"runtime.gcBgMarkWorker" "runtime.systemstack"
"runtime.gcBgMarkWorker" "runtime.nanotime"
"(*runtime.gcControllerState).markWorkerStop" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.gcControllerState).markWorkerStop" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.gcControllerState).markWorkerStop" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.gcControllerState).markWorkerStop" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.gcControllerState).removeIdleMarkWorker" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).removeIdleMarkWorker" "runtime.throw"
"(*runtime.gcControllerState).removeIdleMarkWorker" "(*runtime/internal/atomic.Uint64).CompareAndSwap"
"(*runtime.gcControllerState).markWorkerStop" "(*runtime.gcControllerState).removeIdleMarkWorker"
"(*runtime.gcControllerState).markWorkerStop" "runtime.throw"
"runtime.gcBgMarkWorker" "(*runtime.gcControllerState).markWorkerStop"
"runtime.gcBgMarkWorker" "(*runtime.limiterEvent).stop"
"runtime.gcBgMarkWorker" "runtime/internal/atomic.Xaddint64"
"runtime.gcBgMarkWorker" "runtime/internal/atomic.Xadd"
"runtime.gcBgMarkWorker" "runtime.throw"
"runtime.gcBgMarkWorker" "(runtime.muintptr).ptr"
"runtime.gcBgMarkWorker" "runtime.releasem"
"runtime.gcBgMarkWorker" "(*runtime.muintptr).set"
"runtime.gcBgMarkWorker" "runtime.gcMarkDone"
"runtime.gcBgMarkWorker" "runtime.gcMarkWorkAvailable"
"runtime.gcBgMarkStartWorkers" "runtime.gcBgMarkWorker"
"runtime.notetsleepg" "runtime.getg"
"runtime.notetsleepg" "runtime.throw"
"runtime.notetsleepg" "runtime.semacreate"
"runtime.entersyscallblock" "runtime.getg"
"runtime.entersyscallblock" "(runtime.puintptr).ptr"
"runtime.entersyscallblock" "(runtime.puintptr).ptr"
"runtime.entersyscallblock" "runtime.getcallerpc"
"runtime.entersyscallblock" "runtime.getcallersp"
"runtime.entersyscallblock" "runtime.save"
"runtime.entersyscallblock" "runtime.systemstack"
"runtime.entersyscallblock" "runtime.casgstatus"
"runtime.entersyscallblock" "runtime.systemstack"
"runtime.entersyscallblock" "runtime.systemstack"
"runtime.entersyscallblock" "runtime.getcallerpc"
"runtime.entersyscallblock" "runtime.getcallersp"
"runtime.entersyscallblock" "runtime.save"
"runtime.notetsleepg" "runtime.entersyscallblock"
"runtime.notetsleep_internal" "runtime.getg"
"runtime.notetsleep_internal" "runtime/internal/atomic.Casuintptr"
"runtime.notetsleep_internal" "runtime.throw"
"runtime.notetsleep_internal" "runtime.nanotime"
"runtime.notetsleep_internal" "runtime.semasleep"
"runtime.notetsleep_internal" "runtime.asmcgocall"
"runtime.notetsleep_internal" "runtime.semasleep"
"runtime.notetsleep_internal" "runtime.semasleep"
"runtime.notetsleep_internal" "runtime.asmcgocall"
"runtime.notetsleep_internal" "runtime.nanotime"
"runtime.notetsleep_internal" "runtime/internal/atomic.Loaduintptr"
"runtime.notetsleep_internal" "runtime/internal/atomic.Casuintptr"
"runtime.notetsleep_internal" "runtime.semasleep"
"runtime.notetsleep_internal" "runtime.throw"
"runtime.notetsleep_internal" "runtime.throw"
"runtime.notetsleepg" "runtime.notetsleep_internal"
"runtime.notetsleepg" "runtime.exitsyscall"
"runtime.gcBgMarkStartWorkers" "runtime.notetsleepg"
"runtime.gcBgMarkStartWorkers" "runtime.noteclear"
"runtime.gcStart" "runtime.gcBgMarkStartWorkers"
"runtime.gcStart" "runtime.systemstack"
"runtime.gcStart" "runtime.throw"
"runtime.gcStart" "(*runtime/internal/atomic.Uint64).Load"
"runtime.gcStart" "runtime.nanotime"
"runtime.gcStart" "runtime.systemstack"
"runtime.gcStart" "runtime.systemstack"
"(*log/slog.Level).parse$1" "fmt.Errorf"
"runtime.clearpools" "(*log/slog.Level).parse$1"
"runtime.finishsweep_m" "runtime.assertWorldStopped"
"(*runtime.activeSweep).sweepers" "(*runtime/internal/atomic.Uint32).Load"
"runtime.finishsweep_m" "(*runtime.activeSweep).sweepers"
"runtime.finishsweep_m" "runtime.sweepone"
"runtime.finishsweep_m" "runtime.throw"
"runtime.finishsweep_m" "(*runtime.mcentral).partialUnswept"
"(*runtime.spanSet).reset" "(*runtime.atomicHeadTailIndex).load"
"(*runtime.spanSet).reset" "(runtime.headTailIndex).split"
"(*runtime.spanSet).reset" "runtime.throw"
"(*runtime.spanSet).reset" "(*runtime/internal/atomic.Uintptr).Load"
"(*runtime.spanSet).reset" "(*runtime.atomicSpanSetSpinePointer).Load"
"(*runtime.spanSet).reset" "(runtime.spanSetSpinePointer).lookup"
"(*runtime.spanSet).reset" "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).Load[runtime.spanSetBlock]"
"(*runtime.atomicHeadTailIndex).reset" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.spanSet).reset" "(*runtime.atomicHeadTailIndex).reset"
"(*runtime.spanSet).reset" "(*runtime/internal/atomic.Uintptr).Store"
"(*runtime.spanSet).reset" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.spanSet).reset" "runtime.throw"
"(*runtime.spanSet).reset" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.spanSet).reset" "runtime.throw"
"(*runtime.spanSet).reset" "(*runtime/internal/atomic.Pointer[runtime.spanSetBlock]).StoreNoWB[runtime.spanSetBlock]"
"(*runtime.spanSet).reset" "(*runtime.spanSetBlockAlloc).free"
"runtime.finishsweep_m" "(*runtime.spanSet).reset"
"runtime.finishsweep_m" "(*runtime.mcentral).fullUnswept"
"runtime.finishsweep_m" "(*runtime.spanSet).reset"
"(*runtime.scavengerState).wake" "runtime.lock"
"(*runtime.scavengerState).wake" "(*runtime/internal/atomic.Uint32).Store"
"(*runtime.gList).push" "(*runtime.guintptr).set"
"(*runtime.scavengerState).wake" "(*runtime.gList).push"
"(*runtime.scavengerState).wake" "runtime.injectglist"
"(*runtime.scavengerState).wake" "runtime.unlock"
"runtime.finishsweep_m" "(*runtime.scavengerState).wake"
"runtime.nextMarkBitArenaEpoch" "runtime.lock"
"runtime.nextMarkBitArenaEpoch" "runtime/internal/atomic.StorepNoWB"
"runtime.nextMarkBitArenaEpoch" "runtime.unlock"
"runtime.finishsweep_m" "runtime.nextMarkBitArenaEpoch"
"runtime.gcStart$2" "runtime.finishsweep_m"
"runtime.clearpools" "runtime.gcStart$2"
"(*internal/godebug.Setting).Value$1" "(*internal/godebug.Setting).Name"
"internal/godebug.lookup" "(*sync.Map).Load"
"internal/godebug.lookup" "internal/godebugs.Lookup"
"(*sync/atomic.Pointer[internal/godebug.value]).Store[internal/godebug.value]" "sync/atomic.StorePointer"
"internal/godebug.lookup" "(*sync/atomic.Pointer[internal/godebug.value]).Store[internal/godebug.value]"
"internal/godebug.lookup" "(*sync.Map).LoadOrStore"
"(*internal/godebug.Setting).Value$1" "internal/godebug.lookup"
"(*internal/godebug.Setting).Value$1" "(*internal/godebug.Setting).Undocumented"
"runtime.clearpools" "(*internal/godebug.Setting).Value$1"
"runtime.clearpools" "syscall.libc_read_trampoline"
"runtime.clearpools" "syscall.libc_recvmsg_trampoline"
"runtime.clearpools" "syscall.libc_open_trampoline"
"golang.org/x/tools/go/packages.goListDriver$1" "(*golang.org/x/tools/go/packages.golistState).cfgInvocation"
"(*golang.org/x/tools/internal/event/keys.String).Of" "golang.org/x/tools/internal/event/label.OfString"
"golang.org/x/tools/internal/gocommand.invLabels" "(*golang.org/x/tools/internal/event/keys.String).Of"
"(*golang.org/x/tools/internal/event/keys.Value).Of" "golang.org/x/tools/internal/event/label.OfValue"
"golang.org/x/tools/internal/gocommand.invLabels" "(*golang.org/x/tools/internal/event/keys.Value).Of"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/gocommand.invLabels"
"golang.org/x/tools/internal/event.Start" "(*golang.org/x/tools/internal/event/keys.String).Of"
"golang.org/x/tools/internal/event.Start" "golang.org/x/tools/internal/event/core.MakeEvent"
"(*golang.org/x/tools/internal/event/keys.Tag).New" "golang.org/x/tools/internal/event/label.OfValue"
"golang.org/x/tools/internal/event.Start" "(*golang.org/x/tools/internal/event/keys.Tag).New"
"golang.org/x/tools/internal/event.Start" "golang.org/x/tools/internal/event/core.MakeEvent"
"golang.org/x/tools/internal/event/core.ExportPair" "sync/atomic.LoadPointer"
"time.Now" "time.now"
"golang.org/x/tools/internal/event/core.deliver" "time.Now"
"golang.org/x/tools/internal/event/core.ExportPair" "golang.org/x/tools/internal/event/core.deliver"
"golang.org/x/tools/internal/event.Start" "golang.org/x/tools/internal/event/core.ExportPair"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/event.Start"
"(*go/types.gcSizes).Alignof$1" "go/types.assert"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.gcSizes).Alignof$1"
"runtime.ready" "runtime.readgstatus"
"runtime.ready" "runtime.acquirem"
"runtime.dumpgstatus" "runtime.getg"
"runtime.dumpgstatus" "runtime.readgstatus"
"runtime.dumpgstatus" "runtime.readgstatus"
"runtime.ready" "runtime.dumpgstatus"
"runtime.ready" "runtime.throw"
"runtime.ready" "runtime.traceAcquire"
"runtime.ready" "runtime.casgstatus"
"runtime.ready" "(runtime.traceLocker).ok"
"runtime.ready" "(runtime.traceLocker).GoUnpark"
"runtime.ready" "runtime.traceRelease"
"runtime.ready" "(runtime.puintptr).ptr"
"runtime.randn" "runtime.rand"
"runtime.runqput" "runtime.randn"
"(*runtime.guintptr).cas" "runtime/internal/atomic.Casuintptr"
"runtime.runqput" "(*runtime.guintptr).cas"
"runtime.runqput" "(runtime.guintptr).ptr"
"runtime.runqput" "runtime/internal/atomic.LoadAcq"
"runtime.runqput" "(*runtime.guintptr).set"
"runtime.runqput" "runtime/internal/atomic.StoreRel"
"runtime.runqputslow" "runtime.throw"
"runtime.runqputslow" "(runtime.guintptr).ptr"
"runtime.runqputslow" "runtime/internal/atomic.CasRel"
"runtime.runqputslow" "runtime.cheaprandn"
"runtime.runqputslow" "(*runtime.guintptr).set"
"runtime.runqputslow" "(*runtime.guintptr).set"
"runtime.runqputslow" "(*runtime.guintptr).set"
"runtime.runqputslow" "runtime.lock"
"runtime.runqputslow" "runtime.globrunqputbatch"
"runtime.runqputslow" "runtime.unlock"
"runtime.runqput" "runtime.runqputslow"
"runtime.ready" "runtime.runqput"
"runtime.wakep" "(*runtime/internal/atomic.Int32).Load"
"runtime.wakep" "runtime.acquirem"
"runtime.wakep" "runtime.lock"
"runtime.wakep" "runtime.pidlegetSpinning"
"(*runtime/internal/atomic.Int32).CompareAndSwap" "runtime/internal/atomic.Casint32"
"runtime.wakep" "(*runtime/internal/atomic.Int32).CompareAndSwap"
"runtime.wakep" "(*runtime/internal/atomic.Int32).Add"
"runtime.wakep" "runtime.unlock"
"runtime.wakep" "runtime.startm"
"runtime.wakep" "runtime.releasem"
"runtime.wakep" "runtime.throw"
"runtime.wakep" "runtime.unlock"
"runtime.wakep" "runtime.releasem"
"runtime.ready" "runtime.wakep"
"runtime.ready" "runtime.releasem"
"runtime.goready$1" "runtime.ready"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.goready$1"
"go/types.computeInterfaceTypeSet" "(go/token.Pos).IsValid"
"(*go/types.Checker).trace" "(*go/token.FileSet).Position"
"strings.Repeat" "(*strings.Builder).Grow"
"strings.Repeat" "(*strings.Builder).WriteString"
"strings.Repeat" "(*strings.Builder).Len"
"strings.Repeat" "(*strings.Builder).Len"
"strings.Repeat" "(*strings.Builder).String"
"strings.Repeat" "(*strings.Builder).Len"
"strings.Repeat" "(*strings.Builder).Len"
"strings.Repeat" "(*strings.Builder).String"
"strings.Repeat" "(*strings.Builder).WriteString"
"(*go/types.Checker).trace" "strings.Repeat"
"go/types.sprintf" "fmt.Sprintf"
"(*bytes.Buffer).WriteString" "(*bytes.Buffer).tryGrowByReslice"
"(*bytes.Buffer).WriteString" "(*bytes.Buffer).grow"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"(*bytes.Buffer).WriteByte" "(*bytes.Buffer).tryGrowByReslice"
"(*bytes.Buffer).WriteByte" "(*bytes.Buffer).grow"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "go/internal/typeparams.UnpackIndexExpr"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.writeExprList" "(*bytes.Buffer).WriteString"
"go/types.writeExprList" "go/types.WriteExpr"
"go/types.WriteExpr" "go/types.writeExprList"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.writeExprList"
"go/types.WriteExpr" "(go/token.Pos).IsValid"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"(go/token.Token).String" "strconv.Itoa"
"go/types.WriteExpr" "(go/token.Token).String"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "(go/token.Token).String"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.writeFieldList" "(*bytes.Buffer).WriteString"
"go/types.writeIdentList" "(*bytes.Buffer).WriteString"
"go/types.writeIdentList" "(*bytes.Buffer).WriteString"
"go/types.writeFieldList" "go/types.writeIdentList"
"go/types.writeSigExpr" "(*bytes.Buffer).WriteByte"
"go/types.writeSigExpr" "go/types.writeFieldList"
"go/types.writeSigExpr" "(*bytes.Buffer).WriteByte"
"go/types.writeSigExpr" "(*go/ast.FieldList).NumFields"
"go/types.writeSigExpr" "(*bytes.Buffer).WriteByte"
"go/types.writeSigExpr" "go/types.WriteExpr"
"go/types.writeSigExpr" "(*bytes.Buffer).WriteByte"
"go/types.writeSigExpr" "go/types.writeFieldList"
"go/types.writeSigExpr" "(*bytes.Buffer).WriteByte"
"go/types.writeFieldList" "go/types.writeSigExpr"
"go/types.writeFieldList" "(*bytes.Buffer).WriteByte"
"go/types.writeFieldList" "go/types.WriteExpr"
"go/types.WriteExpr" "go/types.writeFieldList"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "go/types.writeSigExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "go/types.writeFieldList"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "(*bytes.Buffer).WriteByte"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.WriteExpr" "fmt.Fprintf"
"go/types.WriteExpr" "(*bytes.Buffer).WriteString"
"go/types.WriteExpr" "go/types.WriteExpr"
"go/types.ExprString" "go/types.WriteExpr"
"go/types.ExprString" "(*bytes.Buffer).String"
"go/types.operandString" "go/types.ExprString"
"go/types.WriteType" "go/types.newTypeWriter"
"go/types.goTypeName" "fmt.Sprintf"
"go/types.goTypeName" "strings.ReplaceAll"
"(*go/types.typeWriter).typ" "go/types.goTypeName"
"(*go/types.typeWriter).error" "(*bytes.Buffer).WriteString"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).error"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).error"
"go/token.IsExported" "unicode/utf8.DecodeRuneInString"
"go/token.IsExported" "unicode.IsUpper"
"(*go/types.typeWriter).typ" "go/token.IsExported"
"go/types.resolve" "(*sync.Once).Do"
"(*go/types.Scope).Lookup" "go/types.resolve"
"(*go/types.typeWriter).typ" "(*go/types.Scope).Lookup"
"(*go/types.typeWriter).string" "(*bytes.Buffer).WriteString"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"go/types.packagePrefix" "(*go/types.Package).Path"
"(*go/types.Checker).markImports" "(*go/types.Checker).markImports"
"(*go/types.Checker).qualifier" "(*go/types.Checker).markImports"
"(*go/types.Checker).qualifier" "strconv.Quote"
"go/types.packagePrefix" "(*go/types.Checker).qualifier"
"go/types.RelativeTo$1" "(*go/types.Package).Path"
"go/types.packagePrefix" "go/types.RelativeTo$1"
"(*go/types.typeWriter).typeName" "go/types.packagePrefix"
"(*go/types.typeWriter).typeName" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typeName" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typeName"
"(*go/types.typeWriter).byte" "(*bytes.Buffer).WriteByte"
"(*go/types.typeWriter).byte" "(*bytes.Buffer).WriteByte"
"(*go/types.typeWriter).byte" "(*bytes.Buffer).WriteByte"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "strconv.FormatInt"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "go/token.IsExported"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.Package).Path"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.Struct).Tag"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "strconv.Quote"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).tuple" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).tuple" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).tuple" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).tuple" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).tuple" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).tuple" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).tuple" "(*go/types.typeWriter).string"
"go/types.unalias" "fmt.Sprintf"
"go/types.Unalias" "go/types.unalias"
"go/types.asNamed" "go/types.Unalias"
"go/types.under" "go/types.asNamed"
"(*go/types.Named).state" "sync/atomic.LoadUint32"
"(*go/types.Named).resolve" "(*go/types.Named).state"
"(*go/types.Named).resolve" "(*sync.Mutex).Lock"
"(*go/types.Named).resolve" "(*sync.Mutex).Unlock"
"(*go/types.Named).resolve" "(*go/types.Named).state"
"(*go/types.Named).resolve" "go/types.assert"
"(*go/types.Named).resolve" "go/types.assert"
"(*go/types.Named).resolve" "(*go/types.Named).resolve"
"(*go/types.Named).expandUnderlying" "(*go/types.Checker).trace"
"(*go/types.Named).expandUnderlying$1" "(*go/types.TypeParamList).list"
"(*go/types.Named).expandUnderlying$1" "(*go/types.Checker).trace"
"(*go/types.Named).expandUnderlying" "(*go/types.Named).expandUnderlying$1"
"(*go/types.Named).expandUnderlying" "go/types.assert"
"(*go/types.Named).expandUnderlying" "go/types.NewContext"
"(*go/types.Named).expandUnderlying" "go/types.asNamed"
"(*go/types.Named).expandUnderlying" "go/types.assert"
"(*go/types.TypeParamList).Len" "(*go/types.TypeParamList).list"
"(*go/types.Named).expandUnderlying" "(*go/types.TypeParamList).Len"
"(*go/types.TypeList).Len" "(*go/types.TypeList).list"
"(*go/types.Named).expandUnderlying" "(*go/types.TypeList).Len"
"(*go/types.Named).expandUnderlying" "(*go/types.TypeList).list"
"(*go/types.Context).instanceHash" "go/types.assert"
"(*go/types.Context).instanceHash" "go/types.assert"
"go/types.newTypeHasher" "go/types.assert"
"(*go/types.Context).instanceHash" "go/types.newTypeHasher"
"(*go/types.Context).getID" "(*sync.Mutex).Lock"
"(*go/types.Context).getID" "(*sync.Mutex).Unlock"
"(*go/types.Context).instanceHash" "(*go/types.Context).getID"
"(*go/types.Context).instanceHash" "strconv.Itoa"
"(*go/types.Context).instanceHash" "(*go/types.typeWriter).string"
"(*go/types.Context).instanceHash" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).typeList" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typeList" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typeList" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typeList" "(*go/types.typeWriter).typ"
"(*go/types.Context).instanceHash" "(*go/types.typeWriter).typeList"
"(*go/types.Context).instanceHash" "(*bytes.Buffer).String"
"(*go/types.Context).instanceHash" "strings.ReplaceAll"
"(*go/types.Named).expandUnderlying" "(*go/types.Context).instanceHash"
"(*go/types.Named).expandUnderlying" "(*go/types.Named).TypeArgs"
"(*go/types.Named).expandUnderlying" "(*go/types.TypeList).list"
"(*go/types.Context).update" "go/types.assert"
"(*go/types.Context).update" "(*sync.Mutex).Lock"
"(*go/types.Context).update" "(*sync.Mutex).Unlock"
"(*go/types.comparer).identical" "go/types.Unalias"
"(*go/types.comparer).identical" "go/types.Unalias"
"go/types.isValid" "go/types.Unalias"
"(*go/types.comparer).identical" "go/types.isValid"
"(*go/types.comparer).identical" "go/types.isValid"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"(*go/types.comparer).identical" "(*go/types.Struct).NumFields"
"(*go/types.comparer).identical" "(*go/types.Struct).NumFields"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"(*go/types.object).Exported" "go/types.isExported"
"(*go/types.object).sameId" "(*go/types.object).Exported"
"(*go/types.comparer).identical" "(*go/types.object).sameId"
"(*go/types.comparer).identical" "(*go/types.Struct).Tag"
"(*go/types.comparer).identical" "(*go/types.Struct).Tag"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"(*go/types.comparer).identical" "(*go/types.Tuple).Len"
"(*go/types.comparer).identical" "(*go/types.Tuple).Len"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"(*go/types.comparer).identical" "(*go/types.Signature).TypeParams"
"(*go/types.comparer).identical" "(*go/types.TypeParamList).Len"
"(*go/types.comparer).identical" "(*go/types.Signature).TypeParams"
"(*go/types.comparer).identical" "(*go/types.TypeParamList).Len"
"(*go/types.comparer).identical" "(*go/types.Signature).TypeParams"
"(*go/types.comparer).identical" "(*go/types.TypeParamList).Len"
"(*go/types.comparer).identical" "(*go/types.Signature).TypeParams"
"(*go/types.comparer).identical" "(*go/types.TypeParamList).list"
"(*go/types.comparer).identical" "(*go/types.Signature).TypeParams"
"(*go/types.comparer).identical" "(*go/types.TypeParamList).list"
"(*go/types.comparer).identical" "(*go/types.Signature).TypeParams"
"(*go/types.comparer).identical" "(*go/types.TypeParamList).At"
"go/types.makeSubstMap" "go/types.assert"
"(*go/types.comparer).identical" "go/types.makeSubstMap"
"(*go/types.comparer).identical" "go/types.NewContext"
"(*go/types.Checker).subst" "go/types.assert"
"(*go/types.Checker).subst" "(go/types.substMap).empty"
"(*go/types.Checker).subst" "(go/types.substMap).lookup"
"(*go/types.subster).typOrNil" "(*go/types.subster).typ"
"(*go/types.subster).typ" "(*go/types.subster).typOrNil"
"(*go/types.subster).typ" "(*go/types.subster).typOrNil"
"(*go/types.subster).var_" "(*go/types.subster).typ"
"go/types.substVar" "(*go/types.Var).Origin"
"(*go/types.subster).var_" "go/types.substVar"
"(*go/types.subster).varList" "(*go/types.subster).var_"
"(*go/types.subster).typ" "(*go/types.subster).varList"
"(*go/types.subster).typ" "(*go/types.Struct).markComplete"
"(*go/types.subster).typ" "(*go/types.subster).typ"
"(*go/types.subster).tuple" "(*go/types.subster).varList"
"(*go/types.subster).typ" "(*go/types.subster).tuple"
"(*go/types.subster).typ" "(*go/types.subster).tuple"
"(*go/types.subster).typ" "(*go/types.subster).tuple"
"(*go/types.subster).termlist" "(*go/types.subster).typ"
"(*go/types.subster).termlist" "go/types.NewTerm"
"(*go/types.subster).typ" "(*go/types.subster).termlist"
"(*go/types.subster).func_" "(*go/types.subster).typ"
"go/types.substFunc" "(*go/types.Func).Origin"
"(*go/types.subster).func_" "go/types.substFunc"
"(*go/types.subster).funcList" "(*go/types.subster).func_"
"(*go/types.subster).typ" "(*go/types.subster).funcList"
"(*go/types.subster).typeList" "(*go/types.subster).typ"
"(*go/types.subster).typ" "(*go/types.subster).typeList"
"(*go/types.Checker).newInterface" "(*go/types.Checker).needsCleanup"
"(*go/types.subster).typ" "(*go/types.Checker).newInterface"
"(*go/types.subster).typ" "go/types.assert"
"go/types.replaceRecvType" "(*go/types.object).Type"
"go/types.replaceRecvType" "(*go/types.object).Type"
"go/types.replaceRecvType" "go/types.substVar"
"go/types.replaceRecvType" "go/types.substFunc"
"(*go/types.subster).typ" "go/types.replaceRecvType"
"(*go/types.subster).typ" "(*go/types.Interface).typeSet"
"(*go/types.subster).typ" "(*go/types.subster).typ"
"(*go/types.subster).typ" "(*go/types.subster).typ"
"(*go/types.subster).typ" "(*go/types.subster).typ"
"(*go/types.subster).typ" "(*go/types.subster).typ$2"
"(*go/types.subster).typ" "(*go/types.Named).Origin"
"(*go/types.Named).TypeParams" "(*go/types.Named).resolve"
"(*go/types.subster).typ" "(*go/types.Named).TypeParams"
"(*go/types.subster).typ" "(*go/types.TypeParamList).Len"
"(*go/types.subster).typ$3" "(*go/types.Checker).trace"
"(*go/types.subster).typ" "(*go/types.subster).typ$3"
"(*go/types.subster).typ" "(*go/types.subster).typ$1"
"(*sync/atomic.Bool).Load" "sync/atomic.LoadUint32"
"(*log.Logger).output" "(*sync/atomic.Bool).Load"
"(*log.Logger).output" "time.Now"
"(*sync/atomic.Pointer[string]).Load[string]" "sync/atomic.LoadPointer"
"(*log.Logger).Prefix" "(*sync/atomic.Pointer[string]).Load[string]"
"(*log.Logger).output" "(*log.Logger).Prefix"
"(*sync/atomic.Int32).Load" "sync/atomic.LoadInt32"
"(*log.Logger).Flags" "(*sync/atomic.Int32).Load"
"(*log.Logger).output" "(*log.Logger).Flags"
"log.getBuffer" "(*sync.Pool).Get"
"(*log.Logger).output" "log.getBuffer"
"log.putBuffer" "(*sync.Pool).Put"
"(*log.Logger).output" "log.putBuffer"
"(*time.Time).stripMono" "(*time.Time).sec"
"(*time.Time).setLoc" "(*time.Time).stripMono"
"(time.Time).UTC" "(*time.Time).setLoc"
"log.formatHeader" "(time.Time).UTC"
"(time.Time).date" "(time.Time).abs"
"time.absDate" "time.isLeap"
"(time.Time).date" "time.absDate"
"(time.Time).Date" "(time.Time).date"
"log.formatHeader" "(time.Time).Date"
"log.formatHeader" "log.itoa"
"log.formatHeader" "log.itoa"
"log.formatHeader" "log.itoa"
"(time.Time).Clock" "(time.Time).abs"
"(time.Time).Clock" "time.absClock"
"log.formatHeader" "(time.Time).Clock"
"log.formatHeader" "log.itoa"
"log.formatHeader" "log.itoa"
"log.formatHeader" "log.itoa"
"(time.Time).Nanosecond" "(*time.Time).nsec"
"log.formatHeader" "(time.Time).Nanosecond"
"log.formatHeader" "log.itoa"
"log.formatHeader" "log.itoa"
"(*log.Logger).output" "log.formatHeader"
"(*log.Logger).output" "(*log.Logger).Output$1"
"(*log.Logger).output" "log.init#1$1$1"
"(*log.Logger).output" "runtime.Caller"
"(*log.Logger).output" "runtime.CallersFrames"
"(*log.Logger).output" "(*runtime.Frames).Next"
"(*log.Logger).output" "(*sync.Mutex).Lock"
"(*log.Logger).output" "(*sync.Mutex).Unlock"
"(*log.Logger).output" "(*internal/poll.FD).Write"
"(*log.Logger).output" "(io.discard).Write"
"(*log.Logger).output" "(*internal/godebug.runtimeStderr).Write"
"(*log.Logger).output" "(*fmt.pp).Write"
"(*log.Logger).output" "(*os.File).Write"
"(*log.Logger).output" "(*crypto/md5.digest).Write"
"(*log.Logger).output" "(*os/exec.prefixSuffixSaver).Write"
"(*log.Logger).output" "(*bytes.Buffer).Write"
"(*log.Logger).output" "(*strings.Builder).Write"
"(*log.Logger).output" "(*go/ast.printer).Write"
"fmt.Appendf" "fmt.newPrinter"
"fmt.Appendf" "(*fmt.pp).doPrintf"
"fmt.Appendf" "(*fmt.pp).free"
"log.Printf$1" "fmt.Appendf"
"(*log.Logger).output" "log.Printf$1"
"(*log.Logger).output" "(*log/slog/internal/buffer.Buffer).Write"
"log.Printf" "(*log.Logger).output"
"(*go/types.subster).typ" "log.Printf"
"(*go/types.subster).typ" "golang.org/x/tools/go/packages.newLoader$1"
"(*go/types.subster).typ" "(*go/types.Named).TypeArgs"
"(*go/types.subster).typ" "(*go/types.TypeList).Len"
"(*go/types.subster).typ" "log.Printf"
"(*go/types.subster).typ" "golang.org/x/tools/go/packages.newLoader$1"
"(*go/types.subster).typ" "(*go/types.subster).typ$3"
"(*go/types.subster).typ" "(*go/types.subster).typ$1"
"(*go/types.subster).typ" "(*go/types.Named).TypeArgs"
"(*go/types.subster).typ" "(*go/types.TypeList).list"
"(*go/types.subster).typ" "log.Printf"
"(*go/types.subster).typ" "golang.org/x/tools/go/packages.newLoader$1"
"(*go/types.subster).typ" "(*go/types.subster).typ$3"
"(*go/types.subster).typ" "(*go/types.subster).typ$1"
"(*go/types.subster).typ" "(*go/types.subster).typ"
"(*go/types.subster).typ" "log.Printf"
"(*go/types.subster).typ" "golang.org/x/tools/go/packages.newLoader$1"
"(*go/types.subster).typ" "(*go/types.subster).typ$3"
"(*go/types.subster).typ" "(*go/types.subster).typ$1"
"(*go/types.subster).typ" "(*go/types.Named).TypeArgs"
"(*go/types.subster).typ" "(*go/types.TypeList).list"
"(*go/types.subster).typ" "golang.org/x/tools/go/packages.newLoader$1"
"(*go/types.subster).typ" "(*go/types.subster).typ$3"
"(*go/types.subster).typ" "(*go/types.subster).typ$1"
"(*go/types.subster).typ" "log.Printf"
"(*go/types.Checker).instance" "go/types.assert"
"(*go/types.Checker).instance" "(*go/types.Context).instanceHash"
"(*go/types.Context).lookup" "(*sync.Mutex).Lock"
"(*go/types.Context).lookup" "(*sync.Mutex).Unlock"
"go/types.identicalInstance" "go/types.Identical"
"go/types.identicalInstance" "go/types.Identical"
"(*go/types.Context).lookup" "go/types.identicalInstance"
"(*go/types.Context).lookup" "fmt.Sprintf"
"(*go/types.Checker).instance" "(*go/types.Context).lookup"
"(*go/types.Checker).instance$1" "(*go/types.Context).update"
"(*go/types.Checker).instance" "(*go/types.Checker).instance$1"
"(*go/types.Checker).instance" "(*go/types.Checker).instance$1"
"(*go/types.Checker).newNamedInstance" "go/types.assert"
"go/types.NewTypeName" "go/types.colorFor"
"(*go/types.Checker).newNamedInstance" "go/types.NewTypeName"
"(*go/types.Checker).newNamedInstance" "go/types.newTypeList"
"(*go/types.Checker).newNamedInstance" "(*go/types.Named).Obj"
"(*go/types.Checker).newNamedInstance" "(*go/types.Checker).needsCleanup"
"(*go/types.Checker).instance" "(*go/types.Checker).newNamedInstance"
"(*go/types.Checker).instance" "go/types.assert"
"(*go/types.Checker).instance" "(*go/types.Signature).TypeParams"
"(*go/types.Signature).String" "go/types.TypeString"
"(*go/types.Checker).instance" "(*go/types.Signature).String"
"(*go/types.Checker).instance" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).sprintf" "go/types.sprintf"
"(*go/types.Checker).validateTArgLen" "(*go/types.Checker).sprintf"
"(*go/types.Checker).error" "go/types.newErrorf"
"(*go/types.Checker).report" "(*go/types.error_).empty"
"(*go/types.error_).msg" "(*go/types.error_).empty"
"(*go/types.error_).msg" "(*strings.Builder).String"
"(*go/types.error_).msg" "fmt.Fprint"
"(*go/types.error_).msg" "(*go/ast.StarExpr).Pos"
"(*go/ast.CommentGroup).Pos" "(*go/ast.Comment).Pos"
"(*go/types.error_).msg" "(*go/ast.CommentGroup).Pos"
"(*go/types.error_).msg" "(*go/ast.EmptyStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.Ident).Pos"
"(*go/types.error_).msg" "(*go/ast.BasicLit).Pos"
"(*go/types.error_).msg" "(*go/ast.BlockStmt).Pos"
"(*go/ast.ImportSpec).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.ImportSpec).Pos" "(*go/ast.BasicLit).Pos"
"(*go/types.error_).msg" "(*go/ast.ImportSpec).Pos"
"(*go/ast.FuncType).Pos" "(go/token.Pos).IsValid"
"(*go/ast.FieldList).Pos" "(go/token.Pos).IsValid"
"(*go/ast.Field).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.Field).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.Field).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.Field).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.FuncLit).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.SliceExpr).Pos" "(*go/ast.StructType).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.BinaryExpr).Pos" "(*go/ast.StructType).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.TypeAssertExpr).Pos" "(*go/ast.StructType).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.KeyValueExpr).Pos" "(*go/ast.StructType).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.CompositeLit).Pos" "(*go/ast.StructType).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.IndexListExpr).Pos" "(*go/ast.StructType).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.IndexExpr).Pos" "(*go/ast.StructType).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.CallExpr).Pos" "(*go/ast.StructType).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.SelectorExpr).Pos" "(*go/ast.StructType).Pos"
"(*go/ast.Field).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.Field).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.Field).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.Field).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.Field).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.Field).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.Field).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.Field).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.Field).Pos" "(*go/ast.StructType).Pos"
"(*go/ast.FieldList).Pos" "(*go/ast.Field).Pos"
"(*go/ast.FuncType).Pos" "(*go/ast.FieldList).Pos"
"(*go/types.error_).msg" "(*go/ast.FuncType).Pos"
"(*go/types.error_).msg" "(*go/types.Scope).Pos"
"(*go/types.error_).msg" "(*go/ast.BadStmt).Pos"
"(*go/types.error_).msg" "(go/types.atPos).Pos"
"(*go/types.error_).msg" "(*go/ast.GoStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.Field).Pos"
"(*go/types.error_).msg" "(*go/types.object).Pos"
"(*go/ast.TypeSpec).Pos" "(*go/ast.Ident).Pos"
"(*go/types.error_).msg" "(*go/ast.TypeSpec).Pos"
"(*go/types.error_).msg" "(*go/ast.File).Pos"
"(*go/types.error_).msg" "(*go/ast.SelectorExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.DeferStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.BadExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.Comment).Pos"
"(*go/types.error_).msg" "(*go/ast.FieldList).Pos"
"(*go/ast.FuncDecl).Pos" "(*go/ast.FuncType).Pos"
"(*go/types.error_).msg" "(*go/ast.FuncDecl).Pos"
"(*go/types.error_).msg" "(*go/ast.RangeStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.CallExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.SelectStmt).Pos"
"(*go/ast.Object).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.Object).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.Object).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.Object).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.Object).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.Object).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.Object).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.Object).Pos" "(*go/ast.Ident).Pos"
"(*go/types.error_).msg" "(*go/ast.Object).Pos"
"(*go/types.error_).msg" "(*go/ast.IndexExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.IndexListExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.GenDecl).Pos"
"(*go/types.operand).Pos" "(*go/ast.Ident).Pos"
"(*go/types.operand).Pos" "(*go/ast.BasicLit).Pos"
"(*go/types.operand).Pos" "(*go/ast.FuncType).Pos"
"(*go/types.operand).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.CallExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/types.operand).Pos" "(*go/ast.ChanType).Pos"
"(*go/types.operand).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/types.operand).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.FuncLit).Pos"
"(*go/types.operand).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/types.operand).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.StarExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.MapType).Pos"
"(*go/types.operand).Pos" "(*go/ast.BadExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.ArrayType).Pos"
"(*go/types.operand).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/types.operand).Pos" "(*go/ast.StructType).Pos"
"(*go/types.error_).msg" "(*go/types.operand).Pos"
"(*go/ast.ValueSpec).Pos" "(*go/ast.Ident).Pos"
"(*go/types.error_).msg" "(*go/ast.ValueSpec).Pos"
"(*go/types.error_).msg" "(*go/ast.BadDecl).Pos"
"(*go/types.error_).msg" "(go/types.posSpan).Pos"
"(*go/types.error_).msg" "(*go/ast.MapType).Pos"
"(*go/types.error_).msg" "(*go/ast.Ellipsis).Pos"
"(*go/types.error_).msg" "(*go/ast.ChanType).Pos"
"(*go/types.error_).msg" "(*go/ast.InterfaceType).Pos"
"(*go/types.error_).msg" "(go/token.Pos).IsValid"
"(*go/types.error_).msg" "go/types.sprintf"
"(*go/types.error_).msg" "(*strings.Builder).WriteString"
"(*go/types.error_).msg" "(*go/ast.StarExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.CommentGroup).Pos"
"(*go/types.error_).msg" "(*go/ast.EmptyStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.Ident).Pos"
"(*go/types.error_).msg" "(*go/ast.BasicLit).Pos"
"(*go/types.error_).msg" "(*go/ast.BlockStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.ImportSpec).Pos"
"(*go/types.error_).msg" "(*go/ast.FuncType).Pos"
"(*go/types.error_).msg" "(*go/types.Scope).Pos"
"(*go/types.error_).msg" "(*go/ast.BadStmt).Pos"
"(*go/types.error_).msg" "(go/types.atPos).Pos"
"(*go/types.error_).msg" "(*go/ast.GoStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.Field).Pos"
"(*go/types.error_).msg" "(*go/types.object).Pos"
"(*go/types.error_).msg" "(*go/ast.TypeSpec).Pos"
"(*go/types.error_).msg" "(*go/ast.File).Pos"
"(*go/types.error_).msg" "(*go/ast.SelectorExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.DeferStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.BadExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.Comment).Pos"
"(*go/types.error_).msg" "(*go/ast.FieldList).Pos"
"(*go/types.error_).msg" "(*go/ast.FuncDecl).Pos"
"(*go/types.error_).msg" "(*go/ast.RangeStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.CallExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.SelectStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.Object).Pos"
"(*go/types.error_).msg" "(*go/ast.IndexExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.IndexListExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.GenDecl).Pos"
"(*go/types.error_).msg" "(*go/types.operand).Pos"
"(*go/types.error_).msg" "(*go/ast.ValueSpec).Pos"
"(*go/types.error_).msg" "(*go/ast.BadDecl).Pos"
"(*go/types.error_).msg" "(go/types.posSpan).Pos"
"(*go/types.error_).msg" "(*go/ast.MapType).Pos"
"(*go/types.error_).msg" "(*go/ast.Ellipsis).Pos"
"(*go/types.error_).msg" "(*go/ast.ChanType).Pos"
"(*go/types.error_).msg" "(*go/ast.InterfaceType).Pos"
"(*go/types.error_).msg" "(*go/token.FileSet).Position"
"(*go/types.error_).msg" "fmt.Fprintf"
"(*go/ast.LabeledStmt).Pos" "(*go/ast.Ident).Pos"
"(*go/types.error_).msg" "(*go/ast.LabeledStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.LabeledStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.UnaryExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.UnaryExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.FuncLit).Pos"
"(*go/types.error_).msg" "(*go/ast.FuncLit).Pos"
"(*go/types.error_).msg" "(*go/ast.CompositeLit).Pos"
"(*go/types.error_).msg" "(*go/ast.CompositeLit).Pos"
"(*go/types.error_).msg" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.ParenExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.ParenExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.BinaryExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.BinaryExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.StructType).Pos"
"(*go/types.error_).msg" "(*go/ast.StructType).Pos"
"(*go/ast.DeclStmt).Pos" "(*go/ast.FuncDecl).Pos"
"(*go/ast.DeclStmt).Pos" "(*go/ast.GenDecl).Pos"
"(*go/ast.DeclStmt).Pos" "(*go/ast.BadDecl).Pos"
"(*go/types.error_).msg" "(*go/ast.DeclStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.DeclStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.CommClause).Pos"
"(*go/types.error_).msg" "(*go/ast.CommClause).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.ExprStmt).Pos" "(*go/ast.StructType).Pos"
"(*go/types.error_).msg" "(*go/ast.ExprStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.ExprStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.ArrayType).Pos"
"(*go/types.error_).msg" "(*go/ast.ArrayType).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.AssignStmt).Pos" "(*go/ast.StructType).Pos"
"(*go/types.error_).msg" "(*go/ast.AssignStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.AssignStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.SliceExpr).Pos"
"(*go/types.error_).msg" "(*go/ast.SliceExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.SendStmt).Pos" "(*go/ast.StructType).Pos"
"(*go/types.error_).msg" "(*go/ast.SendStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.SendStmt).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.Ident).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.BasicLit).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.FuncType).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.SelectorExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.CallExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.IndexExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.IndexListExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.Ellipsis).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.ChanType).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.InterfaceType).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.UnaryExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.FuncLit).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.CompositeLit).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.KeyValueExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.ParenExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.TypeAssertExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.BinaryExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.StarExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.MapType).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.BadExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.ArrayType).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.SliceExpr).Pos"
"(*go/ast.IncDecStmt).Pos" "(*go/ast.StructType).Pos"
"(*go/types.error_).msg" "(*go/ast.IncDecStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.IncDecStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.ReturnStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.ReturnStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.BranchStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.BranchStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.IfStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.IfStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.SwitchStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.SwitchStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.CaseClause).Pos"
"(*go/types.error_).msg" "(*go/ast.CaseClause).Pos"
"(*go/types.error_).msg" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.ForStmt).Pos"
"(*go/types.error_).msg" "(*go/ast.ForStmt).Pos"
"(*go/types.Checker).report" "(*go/types.error_).msg"
"(*go/types.Checker).report" "fmt.Sprintf"
"(*go/types.Checker).report" "strings.Index"
"go/types.spanOf" "(*go/ast.Ident).Pos"
"go/types.spanOf" "(*go/ast.IndexListExpr).Pos"
"go/types.spanOf" "(*go/ast.GenDecl).Pos"
"go/types.spanOf" "(*go/ast.BasicLit).Pos"
"go/types.spanOf" "(*go/ast.BlockStmt).Pos"
"go/types.spanOf" "(*go/ast.ImportSpec).Pos"
"go/types.spanOf" "(*go/ast.FuncType).Pos"
"go/types.spanOf" "(*go/types.Scope).Pos"
"go/types.spanOf" "(*go/ast.IndexExpr).Pos"
"go/types.spanOf" "(*go/ast.Field).Pos"
"go/types.spanOf" "(*go/ast.TypeSpec).Pos"
"go/types.spanOf" "(*go/ast.File).Pos"
"go/types.spanOf" "(*go/ast.SelectorExpr).Pos"
"go/types.spanOf" "(*go/ast.Comment).Pos"
"go/types.spanOf" "(*go/ast.FieldList).Pos"
"go/types.spanOf" "(*go/ast.FuncDecl).Pos"
"go/types.spanOf" "(*go/ast.CallExpr).Pos"
"go/types.spanOf" "(*go/ast.CommentGroup).Pos"
"go/types.spanOf" "(*go/ast.ValueSpec).Pos"
"go/types.spanOf" "(*go/ast.BadDecl).Pos"
"go/types.spanOf" "(*go/ast.Ellipsis).Pos"
"go/types.spanOf" "(*go/ast.ChanType).Pos"
"go/types.spanOf" "(*go/ast.InterfaceType).Pos"
"go/types.spanOf" "(*go/ast.Ident).End"
"go/types.spanOf" "(*go/ast.IndexListExpr).End"
"(*go/ast.GenDecl).End" "(go/token.Pos).IsValid"
"(*go/ast.ImportSpec).End" "(*go/ast.BasicLit).End"
"(*go/ast.GenDecl).End" "(*go/ast.ImportSpec).End"
"(*go/ast.ValueSpec).End" "(*go/ast.Ident).End"
"(*go/ast.ValueSpec).End" "(*go/ast.BasicLit).End"
"(*go/ast.FieldList).End" "(go/token.Pos).IsValid"
"(*go/ast.Field).End" "(*go/ast.BasicLit).End"
"(*go/ast.Field).End" "(*go/ast.Ident).End"
"(*go/ast.Field).End" "(*go/ast.BasicLit).End"
"(*go/ast.Field).End" "(*go/ast.FuncType).End"
"(*go/ast.SelectorExpr).End" "(*go/ast.Ident).End"
"(*go/ast.Field).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.Field).End" "(*go/ast.CallExpr).End"
"(*go/ast.Field).End" "(*go/ast.Ident).End"
"(*go/ast.Field).End" "(*go/ast.IndexExpr).End"
"(*go/ast.Field).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.Ident).End"
"(*go/ast.Ellipsis).End" "(*go/ast.BasicLit).End"
"(*go/ast.Ellipsis).End" "(*go/ast.FuncType).End"
"(*go/ast.Ellipsis).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.CallExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.IndexExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.Ellipsis).End"
"(*go/ast.ChanType).End" "(*go/ast.Ident).End"
"(*go/ast.ChanType).End" "(*go/ast.BasicLit).End"
"(*go/ast.ChanType).End" "(*go/ast.FuncType).End"
"(*go/ast.ChanType).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.CallExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.IndexExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.Ellipsis).End"
"(*go/ast.ChanType).End" "(*go/ast.ChanType).End"
"(*go/ast.InterfaceType).End" "(*go/ast.FieldList).End"
"(*go/ast.ChanType).End" "(*go/ast.InterfaceType).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.Ident).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.BasicLit).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.FuncType).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.CallExpr).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.IndexExpr).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.Ellipsis).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.ChanType).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.InterfaceType).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.BlockStmt).End" "(go/token.Pos).IsValid"
"(*go/ast.BlockStmt).End" "(*go/ast.BlockStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.BlockStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.LabeledStmt).End"
"(*go/ast.AssignStmt).End" "(*go/ast.Ident).End"
"(*go/ast.AssignStmt).End" "(*go/ast.BasicLit).End"
"(*go/ast.AssignStmt).End" "(*go/ast.FuncType).End"
"(*go/ast.AssignStmt).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.CallExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.IndexExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.Ellipsis).End"
"(*go/ast.AssignStmt).End" "(*go/ast.ChanType).End"
"(*go/ast.AssignStmt).End" "(*go/ast.InterfaceType).End"
"(*go/ast.AssignStmt).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.FuncLit).End"
"(*go/ast.AssignStmt).End" "(*go/ast.CompositeLit).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.Ident).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.BasicLit).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.FuncType).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.CallExpr).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.IndexExpr).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.Ellipsis).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.ChanType).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.InterfaceType).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.FuncLit).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.CompositeLit).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.ParenExpr).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.Ident).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.BasicLit).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.FuncType).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.CallExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.IndexExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.Ellipsis).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.ChanType).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.InterfaceType).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.FuncLit).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.CompositeLit).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.ParenExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.BadExpr).End"
"(*go/ast.MapType).End" "(*go/ast.Ident).End"
"(*go/ast.MapType).End" "(*go/ast.BasicLit).End"
"(*go/ast.MapType).End" "(*go/ast.FuncType).End"
"(*go/ast.MapType).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.MapType).End" "(*go/ast.CallExpr).End"
"(*go/ast.MapType).End" "(*go/ast.IndexExpr).End"
"(*go/ast.MapType).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.MapType).End" "(*go/ast.Ellipsis).End"
"(*go/ast.MapType).End" "(*go/ast.ChanType).End"
"(*go/ast.MapType).End" "(*go/ast.InterfaceType).End"
"(*go/ast.MapType).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.MapType).End" "(*go/ast.FuncLit).End"
"(*go/ast.MapType).End" "(*go/ast.CompositeLit).End"
"(*go/ast.MapType).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.MapType).End" "(*go/ast.ParenExpr).End"
"(*go/ast.MapType).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.MapType).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.MapType).End" "(*go/ast.BadExpr).End"
"(*go/ast.MapType).End" "(*go/ast.MapType).End"
"(*go/ast.StarExpr).End" "(*go/ast.Ident).End"
"(*go/ast.StarExpr).End" "(*go/ast.BasicLit).End"
"(*go/ast.StarExpr).End" "(*go/ast.FuncType).End"
"(*go/ast.StarExpr).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.StarExpr).End" "(*go/ast.CallExpr).End"
"(*go/ast.StarExpr).End" "(*go/ast.IndexExpr).End"
"(*go/ast.StarExpr).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.StarExpr).End" "(*go/ast.Ellipsis).End"
"(*go/ast.StarExpr).End" "(*go/ast.ChanType).End"
"(*go/ast.StarExpr).End" "(*go/ast.InterfaceType).End"
"(*go/ast.StarExpr).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.StarExpr).End" "(*go/ast.FuncLit).End"
"(*go/ast.StarExpr).End" "(*go/ast.CompositeLit).End"
"(*go/ast.StarExpr).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.StarExpr).End" "(*go/ast.ParenExpr).End"
"(*go/ast.StarExpr).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.StarExpr).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.StarExpr).End" "(*go/ast.BadExpr).End"
"(*go/ast.StarExpr).End" "(*go/ast.MapType).End"
"(*go/ast.StarExpr).End" "(*go/ast.StarExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.Ident).End"
"(*go/ast.ArrayType).End" "(*go/ast.BasicLit).End"
"(*go/ast.ArrayType).End" "(*go/ast.FuncType).End"
"(*go/ast.ArrayType).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.CallExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.IndexExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.Ellipsis).End"
"(*go/ast.ArrayType).End" "(*go/ast.ChanType).End"
"(*go/ast.ArrayType).End" "(*go/ast.InterfaceType).End"
"(*go/ast.ArrayType).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.FuncLit).End"
"(*go/ast.ArrayType).End" "(*go/ast.CompositeLit).End"
"(*go/ast.ArrayType).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.ParenExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.BadExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.MapType).End"
"(*go/ast.ArrayType).End" "(*go/ast.StarExpr).End"
"(*go/ast.ArrayType).End" "(*go/ast.ArrayType).End"
"(*go/ast.ArrayType).End" "(*go/ast.SliceExpr).End"
"(*go/ast.StructType).End" "(*go/ast.FieldList).End"
"(*go/ast.ArrayType).End" "(*go/ast.StructType).End"
"(*go/ast.StarExpr).End" "(*go/ast.ArrayType).End"
"(*go/ast.StarExpr).End" "(*go/ast.SliceExpr).End"
"(*go/ast.StarExpr).End" "(*go/ast.StructType).End"
"(*go/ast.MapType).End" "(*go/ast.StarExpr).End"
"(*go/ast.MapType).End" "(*go/ast.ArrayType).End"
"(*go/ast.MapType).End" "(*go/ast.SliceExpr).End"
"(*go/ast.MapType).End" "(*go/ast.StructType).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.MapType).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.StarExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.ArrayType).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.SliceExpr).End"
"(*go/ast.BinaryExpr).End" "(*go/ast.StructType).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.BadExpr).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.MapType).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.StarExpr).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.ArrayType).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.SliceExpr).End"
"(*go/ast.KeyValueExpr).End" "(*go/ast.StructType).End"
"(*go/ast.AssignStmt).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.ParenExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.BadExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.MapType).End"
"(*go/ast.AssignStmt).End" "(*go/ast.StarExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.ArrayType).End"
"(*go/ast.AssignStmt).End" "(*go/ast.SliceExpr).End"
"(*go/ast.AssignStmt).End" "(*go/ast.StructType).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.AssignStmt).End"
"(*go/ast.SendStmt).End" "(*go/ast.Ident).End"
"(*go/ast.SendStmt).End" "(*go/ast.BasicLit).End"
"(*go/ast.SendStmt).End" "(*go/ast.FuncType).End"
"(*go/ast.SendStmt).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.CallExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.IndexExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.Ellipsis).End"
"(*go/ast.SendStmt).End" "(*go/ast.ChanType).End"
"(*go/ast.SendStmt).End" "(*go/ast.InterfaceType).End"
"(*go/ast.SendStmt).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.FuncLit).End"
"(*go/ast.SendStmt).End" "(*go/ast.CompositeLit).End"
"(*go/ast.SendStmt).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.ParenExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.BadExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.MapType).End"
"(*go/ast.SendStmt).End" "(*go/ast.StarExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.ArrayType).End"
"(*go/ast.SendStmt).End" "(*go/ast.SliceExpr).End"
"(*go/ast.SendStmt).End" "(*go/ast.StructType).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.SendStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.IncDecStmt).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.Ident).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.BasicLit).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.FuncType).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.CallExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.IndexExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.Ellipsis).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.ChanType).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.InterfaceType).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.FuncLit).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.CompositeLit).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.ParenExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.BadExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.MapType).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.StarExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.ArrayType).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.SliceExpr).End"
"(*go/ast.ReturnStmt).End" "(*go/ast.StructType).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.ReturnStmt).End"
"(*go/ast.BranchStmt).End" "(*go/ast.Ident).End"
"(*go/ast.BranchStmt).End" "(go/token.Token).String"
"(*go/ast.LabeledStmt).End" "(*go/ast.BranchStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.BlockStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.LabeledStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.AssignStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.SendStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.IncDecStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.ReturnStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.BranchStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.IfStmt).End"
"(*go/ast.SwitchStmt).End" "(*go/ast.BlockStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.SwitchStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.BlockStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.LabeledStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.AssignStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.SendStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.IncDecStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.ReturnStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.BranchStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.IfStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.SwitchStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.CaseClause).End"
"(*go/ast.TypeSwitchStmt).End" "(*go/ast.BlockStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.TypeSwitchStmt).End"
"(*go/ast.ForStmt).End" "(*go/ast.BlockStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.ForStmt).End"
"(*go/ast.RangeStmt).End" "(*go/ast.BlockStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.RangeStmt).End"
"(*go/ast.FuncDecl).End" "(*go/ast.BlockStmt).End"
"(*go/ast.FuncDecl).End" "(*go/ast.FuncType).End"
"(*go/ast.DeclStmt).End" "(*go/ast.FuncDecl).End"
"(*go/ast.DeclStmt).End" "(*go/ast.GenDecl).End"
"(*go/ast.DeclStmt).End" "(*go/ast.BadDecl).End"
"(*go/ast.CaseClause).End" "(*go/ast.DeclStmt).End"
"(*go/ast.SelectStmt).End" "(*go/ast.BlockStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.SelectStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.EmptyStmt).End"
"(*go/ast.CaseClause).End" "(*go/ast.BadStmt).End"
"(*go/ast.ExprStmt).End" "(*go/ast.Ident).End"
"(*go/ast.ExprStmt).End" "(*go/ast.BasicLit).End"
"(*go/ast.ExprStmt).End" "(*go/ast.FuncType).End"
"(*go/ast.ExprStmt).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.CallExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.IndexExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.Ellipsis).End"
"(*go/ast.ExprStmt).End" "(*go/ast.ChanType).End"
"(*go/ast.ExprStmt).End" "(*go/ast.InterfaceType).End"
"(*go/ast.ExprStmt).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.FuncLit).End"
"(*go/ast.ExprStmt).End" "(*go/ast.CompositeLit).End"
"(*go/ast.ExprStmt).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.ParenExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.BadExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.MapType).End"
"(*go/ast.ExprStmt).End" "(*go/ast.StarExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.ArrayType).End"
"(*go/ast.ExprStmt).End" "(*go/ast.SliceExpr).End"
"(*go/ast.ExprStmt).End" "(*go/ast.StructType).End"
"(*go/ast.CaseClause).End" "(*go/ast.ExprStmt).End"
"(*go/ast.GoStmt).End" "(*go/ast.CallExpr).End"
"(*go/ast.CaseClause).End" "(*go/ast.GoStmt).End"
"(*go/ast.DeferStmt).End" "(*go/ast.CallExpr).End"
"(*go/ast.CaseClause).End" "(*go/ast.DeferStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.BlockStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.LabeledStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.AssignStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.SendStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.IncDecStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.ReturnStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.BranchStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.IfStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.SwitchStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.CaseClause).End"
"(*go/ast.CommClause).End" "(*go/ast.TypeSwitchStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.ForStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.RangeStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.DeclStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.SelectStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.EmptyStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.BadStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.ExprStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.GoStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.DeferStmt).End"
"(*go/ast.CommClause).End" "(*go/ast.CommClause).End"
"(*go/ast.CaseClause).End" "(*go/ast.CommClause).End"
"(*go/ast.IfStmt).End" "(*go/ast.CaseClause).End"
"(*go/ast.IfStmt).End" "(*go/ast.TypeSwitchStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.ForStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.BlockStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.RangeStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.DeclStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.SelectStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.EmptyStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.BadStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.ExprStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.GoStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.DeferStmt).End"
"(*go/ast.IfStmt).End" "(*go/ast.CommClause).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.IfStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.SwitchStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.CaseClause).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.TypeSwitchStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.ForStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.RangeStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.DeclStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.SelectStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.EmptyStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.BadStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.ExprStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.GoStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.DeferStmt).End"
"(*go/ast.LabeledStmt).End" "(*go/ast.CommClause).End"
"(*go/ast.BlockStmt).End" "(*go/ast.LabeledStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.AssignStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.SendStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.IncDecStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.ReturnStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.BranchStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.IfStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.SwitchStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.CaseClause).End"
"(*go/ast.BlockStmt).End" "(*go/ast.TypeSwitchStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.ForStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.RangeStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.DeclStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.SelectStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.EmptyStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.BadStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.ExprStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.GoStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.DeferStmt).End"
"(*go/ast.BlockStmt).End" "(*go/ast.CommClause).End"
"(*go/ast.FuncLit).End" "(*go/ast.BlockStmt).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.FuncLit).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.CompositeLit).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.ParenExpr).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.BadExpr).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.MapType).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.StarExpr).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.ArrayType).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.SliceExpr).End"
"(*go/ast.UnaryExpr).End" "(*go/ast.StructType).End"
"(*go/ast.ChanType).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.FuncLit).End"
"(*go/ast.ChanType).End" "(*go/ast.CompositeLit).End"
"(*go/ast.ChanType).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.ParenExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.BadExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.MapType).End"
"(*go/ast.ChanType).End" "(*go/ast.StarExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.ArrayType).End"
"(*go/ast.ChanType).End" "(*go/ast.SliceExpr).End"
"(*go/ast.ChanType).End" "(*go/ast.StructType).End"
"(*go/ast.Ellipsis).End" "(*go/ast.ChanType).End"
"(*go/ast.Ellipsis).End" "(*go/ast.InterfaceType).End"
"(*go/ast.Ellipsis).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.FuncLit).End"
"(*go/ast.Ellipsis).End" "(*go/ast.CompositeLit).End"
"(*go/ast.Ellipsis).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.ParenExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.BadExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.MapType).End"
"(*go/ast.Ellipsis).End" "(*go/ast.StarExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.ArrayType).End"
"(*go/ast.Ellipsis).End" "(*go/ast.SliceExpr).End"
"(*go/ast.Ellipsis).End" "(*go/ast.StructType).End"
"(*go/ast.Field).End" "(*go/ast.Ellipsis).End"
"(*go/ast.Field).End" "(*go/ast.ChanType).End"
"(*go/ast.Field).End" "(*go/ast.InterfaceType).End"
"(*go/ast.Field).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.Field).End" "(*go/ast.FuncLit).End"
"(*go/ast.Field).End" "(*go/ast.CompositeLit).End"
"(*go/ast.Field).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.Field).End" "(*go/ast.ParenExpr).End"
"(*go/ast.Field).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.Field).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.Field).End" "(*go/ast.BadExpr).End"
"(*go/ast.Field).End" "(*go/ast.MapType).End"
"(*go/ast.Field).End" "(*go/ast.StarExpr).End"
"(*go/ast.Field).End" "(*go/ast.ArrayType).End"
"(*go/ast.Field).End" "(*go/ast.SliceExpr).End"
"(*go/ast.Field).End" "(*go/ast.StructType).End"
"(*go/ast.FieldList).End" "(*go/ast.Field).End"
"(*go/ast.FuncType).End" "(*go/ast.FieldList).End"
"(*go/ast.FuncType).End" "(*go/ast.FieldList).End"
"(*go/ast.ValueSpec).End" "(*go/ast.FuncType).End"
"(*go/ast.ValueSpec).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.CallExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.IndexExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.Ellipsis).End"
"(*go/ast.ValueSpec).End" "(*go/ast.ChanType).End"
"(*go/ast.ValueSpec).End" "(*go/ast.InterfaceType).End"
"(*go/ast.ValueSpec).End" "(*go/ast.Ident).End"
"(*go/ast.ValueSpec).End" "(*go/ast.BasicLit).End"
"(*go/ast.ValueSpec).End" "(*go/ast.FuncType).End"
"(*go/ast.ValueSpec).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.CallExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.IndexExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.Ellipsis).End"
"(*go/ast.ValueSpec).End" "(*go/ast.ChanType).End"
"(*go/ast.ValueSpec).End" "(*go/ast.InterfaceType).End"
"(*go/ast.ValueSpec).End" "(*go/ast.Ident).End"
"(*go/ast.ValueSpec).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.FuncLit).End"
"(*go/ast.ValueSpec).End" "(*go/ast.FuncLit).End"
"(*go/ast.ValueSpec).End" "(*go/ast.CompositeLit).End"
"(*go/ast.ValueSpec).End" "(*go/ast.CompositeLit).End"
"(*go/ast.ValueSpec).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.ParenExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.ParenExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.BadExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.BadExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.MapType).End"
"(*go/ast.ValueSpec).End" "(*go/ast.MapType).End"
"(*go/ast.ValueSpec).End" "(*go/ast.StarExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.StarExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.ArrayType).End"
"(*go/ast.ValueSpec).End" "(*go/ast.ArrayType).End"
"(*go/ast.ValueSpec).End" "(*go/ast.SliceExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.SliceExpr).End"
"(*go/ast.ValueSpec).End" "(*go/ast.StructType).End"
"(*go/ast.ValueSpec).End" "(*go/ast.StructType).End"
"(*go/ast.GenDecl).End" "(*go/ast.ValueSpec).End"
"(*go/ast.TypeSpec).End" "(*go/ast.Ident).End"
"(*go/ast.TypeSpec).End" "(*go/ast.BasicLit).End"
"(*go/ast.TypeSpec).End" "(*go/ast.FuncType).End"
"(*go/ast.TypeSpec).End" "(*go/ast.SelectorExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.CallExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.IndexExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.IndexListExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.Ellipsis).End"
"(*go/ast.TypeSpec).End" "(*go/ast.ChanType).End"
"(*go/ast.TypeSpec).End" "(*go/ast.InterfaceType).End"
"(*go/ast.TypeSpec).End" "(*go/ast.UnaryExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.FuncLit).End"
"(*go/ast.TypeSpec).End" "(*go/ast.CompositeLit).End"
"(*go/ast.TypeSpec).End" "(*go/ast.KeyValueExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.ParenExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.TypeAssertExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.BinaryExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.BadExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.MapType).End"
"(*go/ast.TypeSpec).End" "(*go/ast.StarExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.ArrayType).End"
"(*go/ast.TypeSpec).End" "(*go/ast.SliceExpr).End"
"(*go/ast.TypeSpec).End" "(*go/ast.StructType).End"
"(*go/ast.GenDecl).End" "(*go/ast.TypeSpec).End"
"go/types.spanOf" "(*go/ast.GenDecl).End"
"go/types.spanOf" "(*go/ast.BasicLit).End"
"go/types.spanOf" "(*go/ast.BlockStmt).End"
"go/types.spanOf" "(*go/ast.ImportSpec).End"
"go/types.spanOf" "(*go/ast.FuncType).End"
"go/types.spanOf" "(*go/types.Scope).End"
"go/types.spanOf" "(*go/ast.IndexExpr).End"
"go/types.spanOf" "(*go/ast.Field).End"
"go/types.spanOf" "(*go/ast.TypeSpec).End"
"(*go/ast.File).End" "(*go/ast.FuncDecl).End"
"(*go/ast.File).End" "(*go/ast.Ident).End"
"(*go/ast.File).End" "(*go/ast.GenDecl).End"
"(*go/ast.File).End" "(*go/ast.BadDecl).End"
"go/types.spanOf" "(*go/ast.File).End"
"go/types.spanOf" "(*go/ast.SelectorExpr).End"
"go/types.spanOf" "(*go/ast.Comment).End"
"go/types.spanOf" "(*go/ast.FieldList).End"
"go/types.spanOf" "(*go/ast.FuncDecl).End"
"go/types.spanOf" "(*go/ast.CallExpr).End"
"(*go/ast.CommentGroup).End" "(*go/ast.Comment).End"
"go/types.spanOf" "(*go/ast.CommentGroup).End"
"go/types.spanOf" "(*go/ast.ValueSpec).End"
"go/types.spanOf" "(*go/ast.BadDecl).End"
"go/types.spanOf" "(*go/ast.Ellipsis).End"
"go/types.spanOf" "(*go/ast.ChanType).End"
"go/types.spanOf" "(*go/ast.InterfaceType).End"
"go/types.spanOf" "(*go/ast.EmptyStmt).Pos"
"go/types.spanOf" "(*go/ast.CommentGroup).Pos"
"go/types.spanOf" "(*go/ast.GoStmt).Pos"
"go/types.spanOf" "(*go/ast.Ident).Pos"
"go/types.spanOf" "(*go/ast.BasicLit).Pos"
"go/types.spanOf" "(*go/ast.BlockStmt).Pos"
"go/types.spanOf" "(*go/ast.ImportSpec).Pos"
"go/types.spanOf" "(*go/ast.FuncType).Pos"
"go/types.spanOf" "(*go/types.Scope).Pos"
"go/types.spanOf" "(*go/ast.GoStmt).End"
"go/types.spanOf" "(go/types.atPos).Pos"
"go/types.spanOf" "(*go/ast.DeferStmt).Pos"
"go/types.spanOf" "(*go/ast.Field).Pos"
"go/types.spanOf" "(*go/types.object).Pos"
"go/types.spanOf" "(*go/ast.TypeSpec).Pos"
"go/types.spanOf" "(*go/ast.File).Pos"
"go/types.spanOf" "(*go/ast.SelectorExpr).Pos"
"go/types.spanOf" "(*go/ast.CommClause).Pos"
"go/types.spanOf" "(*go/ast.BadStmt).Pos"
"go/types.spanOf" "(*go/ast.Comment).Pos"
"go/types.spanOf" "(*go/ast.FieldList).Pos"
"go/types.spanOf" "(*go/ast.FuncDecl).Pos"
"go/types.spanOf" "(*go/ast.BadStmt).End"
"go/types.spanOf" "(*go/ast.CallExpr).Pos"
"go/types.spanOf" "(*go/ast.ExprStmt).End"
"go/types.spanOf" "(*go/ast.Object).Pos"
"go/types.spanOf" "(*go/ast.IndexExpr).Pos"
"go/types.spanOf" "(*go/ast.IndexListExpr).Pos"
"go/types.spanOf" "(*go/ast.GenDecl).Pos"
"go/types.spanOf" "(*go/types.operand).Pos"
"go/types.spanOf" "(*go/ast.ValueSpec).Pos"
"go/types.spanOf" "(*go/ast.BadDecl).Pos"
"go/types.spanOf" "(go/types.posSpan).Pos"
"go/types.spanOf" "(*go/ast.EmptyStmt).End"
"go/types.spanOf" "(*go/ast.Ellipsis).Pos"
"go/types.spanOf" "(*go/ast.ChanType).Pos"
"go/types.spanOf" "(*go/ast.InterfaceType).Pos"
"go/types.spanOf" "(*go/types.operand).Pos"
"go/types.spanOf" "(*go/ast.Ident).End"
"go/types.spanOf" "(*go/ast.BasicLit).End"
"go/types.spanOf" "(*go/ast.FuncType).End"
"go/types.spanOf" "(*go/ast.SelectorExpr).End"
"go/types.spanOf" "(*go/ast.CallExpr).End"
"go/types.spanOf" "(*go/ast.IndexExpr).End"
"go/types.spanOf" "(*go/ast.IndexListExpr).End"
"go/types.spanOf" "(*go/ast.Ellipsis).End"
"go/types.spanOf" "(*go/ast.ChanType).End"
"go/types.spanOf" "(*go/ast.InterfaceType).End"
"go/types.spanOf" "(*go/ast.LabeledStmt).Pos"
"go/types.spanOf" "(*go/ast.LabeledStmt).End"
"go/types.spanOf" "(*go/ast.LabeledStmt).Pos"
"go/types.spanOf" "(*go/ast.UnaryExpr).Pos"
"go/types.spanOf" "(*go/ast.UnaryExpr).Pos"
"go/types.spanOf" "(*go/ast.UnaryExpr).End"
"go/types.spanOf" "(*go/ast.UnaryExpr).End"
"go/types.spanOf" "(*go/ast.FuncLit).End"
"go/types.spanOf" "(*go/ast.FuncLit).Pos"
"go/types.spanOf" "(*go/ast.FuncLit).Pos"
"go/types.spanOf" "(*go/ast.FuncLit).End"
"go/types.spanOf" "(*go/ast.CompositeLit).Pos"
"go/types.spanOf" "(*go/ast.CompositeLit).Pos"
"go/types.spanOf" "(*go/ast.CompositeLit).End"
"go/types.spanOf" "(*go/ast.CompositeLit).End"
"go/types.spanOf" "(*go/ast.KeyValueExpr).Pos"
"go/types.spanOf" "(*go/ast.KeyValueExpr).End"
"go/types.spanOf" "(*go/ast.KeyValueExpr).End"
"go/types.spanOf" "(*go/ast.KeyValueExpr).Pos"
"go/types.spanOf" "(*go/ast.ParenExpr).End"
"go/types.spanOf" "(*go/ast.ParenExpr).Pos"
"go/types.spanOf" "(*go/ast.ParenExpr).Pos"
"go/types.spanOf" "(*go/ast.ParenExpr).End"
"go/types.spanOf" "(*go/ast.TypeAssertExpr).Pos"
"go/types.spanOf" "(*go/ast.TypeAssertExpr).Pos"
"go/types.spanOf" "(*go/ast.TypeAssertExpr).End"
"go/types.spanOf" "(*go/ast.TypeAssertExpr).End"
"go/types.spanOf" "(*go/ast.BinaryExpr).Pos"
"go/types.spanOf" "(*go/ast.BinaryExpr).End"
"go/types.spanOf" "(*go/ast.BinaryExpr).End"
"go/types.spanOf" "(*go/ast.BinaryExpr).Pos"
"go/types.spanOf" "(*go/ast.SelectStmt).Pos"
"go/types.spanOf" "(*go/ast.DeclStmt).End"
"go/types.spanOf" "(*go/ast.DeferStmt).Pos"
"go/types.spanOf" "(*go/ast.DeferStmt).End"
"go/types.spanOf" "(*go/ast.ExprStmt).Pos"
"go/types.spanOf" "(*go/ast.ExprStmt).Pos"
"go/types.spanOf" "(*go/ast.BadStmt).Pos"
"go/types.spanOf" "(*go/ast.EmptyStmt).Pos"
"go/types.spanOf" "(*go/ast.SelectStmt).End"
"go/types.spanOf" "(*go/ast.CommClause).Pos"
"go/types.spanOf" "(*go/ast.CommClause).End"
"go/types.spanOf" "(*go/ast.SelectStmt).Pos"
"go/types.spanOf" "(*go/ast.GoStmt).Pos"
"go/types.spanOf" "(*go/ast.ArrayType).Pos"
"go/types.spanOf" "(*go/ast.ArrayType).End"
"go/types.spanOf" "(*go/ast.ArrayType).End"
"go/types.spanOf" "(*go/ast.ArrayType).Pos"
"go/types.spanOf" "(*go/ast.AssignStmt).Pos"
"go/types.spanOf" "(*go/ast.AssignStmt).Pos"
"go/types.spanOf" "(*go/ast.AssignStmt).End"
"go/types.spanOf" "(*go/ast.SliceExpr).End"
"go/types.spanOf" "(*go/ast.SliceExpr).Pos"
"go/types.spanOf" "(*go/ast.SliceExpr).Pos"
"go/types.spanOf" "(*go/ast.SliceExpr).End"
"go/types.spanOf" "(*go/ast.SendStmt).Pos"
"go/types.spanOf" "(*go/ast.SendStmt).Pos"
"go/types.spanOf" "(*go/ast.SendStmt).End"
"go/types.spanOf" "(*go/ast.IncDecStmt).Pos"
"go/types.spanOf" "(*go/ast.IncDecStmt).End"
"go/types.spanOf" "(*go/ast.IncDecStmt).Pos"
"go/types.spanOf" "(*go/ast.ReturnStmt).Pos"
"go/types.spanOf" "(*go/ast.ReturnStmt).End"
"go/types.spanOf" "(*go/ast.ReturnStmt).Pos"
"go/types.spanOf" "(*go/ast.BranchStmt).Pos"
"go/types.spanOf" "(*go/ast.BranchStmt).Pos"
"go/types.spanOf" "(*go/ast.BranchStmt).End"
"go/types.spanOf" "(*go/ast.IfStmt).Pos"
"go/types.spanOf" "(*go/ast.IfStmt).End"
"go/types.spanOf" "(*go/ast.IfStmt).Pos"
"go/types.spanOf" "(*go/ast.SwitchStmt).Pos"
"go/types.spanOf" "(*go/ast.SwitchStmt).Pos"
"go/types.spanOf" "(*go/ast.SwitchStmt).End"
"go/types.spanOf" "(*go/ast.CaseClause).Pos"
"go/types.spanOf" "(*go/ast.CaseClause).Pos"
"go/types.spanOf" "(*go/ast.CaseClause).End"
"go/types.spanOf" "(*go/ast.TypeSwitchStmt).Pos"
"go/types.spanOf" "(*go/ast.TypeSwitchStmt).Pos"
"go/types.spanOf" "(*go/ast.TypeSwitchStmt).End"
"go/types.spanOf" "(*go/ast.ForStmt).Pos"
"go/types.spanOf" "(*go/ast.ForStmt).End"
"go/types.spanOf" "(*go/ast.ForStmt).Pos"
"go/types.spanOf" "(*go/ast.StructType).Pos"
"go/types.spanOf" "(*go/ast.StructType).End"
"go/types.spanOf" "(*go/ast.StructType).End"
"go/types.spanOf" "(*go/ast.StructType).Pos"
"go/types.spanOf" "(*go/ast.StarExpr).Pos"
"go/types.spanOf" "(*go/ast.StarExpr).End"
"go/types.spanOf" "(*go/ast.StarExpr).End"
"go/types.spanOf" "(*go/ast.StarExpr).Pos"
"go/types.spanOf" "(*go/ast.MapType).Pos"
"go/types.spanOf" "(*go/ast.MapType).End"
"go/types.spanOf" "(*go/ast.MapType).End"
"go/types.spanOf" "(*go/ast.MapType).Pos"
"go/types.spanOf" "(*go/ast.BadExpr).Pos"
"go/types.spanOf" "(*go/ast.BadExpr).Pos"
"go/types.spanOf" "(*go/ast.BadExpr).End"
"go/types.spanOf" "(*go/ast.BadExpr).End"
"go/types.spanOf" "(*go/ast.RangeStmt).Pos"
"go/types.spanOf" "(*go/ast.RangeStmt).Pos"
"go/types.spanOf" "(*go/ast.RangeStmt).End"
"go/types.spanOf" "(*go/ast.DeclStmt).Pos"
"go/types.spanOf" "(*go/ast.DeclStmt).Pos"
"(*go/types.Checker).report" "go/types.spanOf"
"(*go/types.Checker).report" "strings.Index"
"(*go/types.Checker).report" "strings.Index"
"go/types.stripAnnotations" "(*strings.Builder).Len"
"(*strings.Builder).WriteRune" "(*strings.Builder).copyCheck"
"(*strings.Builder).WriteRune" "unicode/utf8.AppendRune"
"go/types.stripAnnotations" "(*strings.Builder).WriteRune"
"go/types.stripAnnotations" "(*strings.Builder).String"
"(*go/types.Checker).report" "go/types.stripAnnotations"
"(*go/types.Checker).report" "go/types.spanOf"
"(*go/types.Checker).report" "(*go/types.Checker).trace"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*errors.errorString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(runtime.errorString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(time.fileSizeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*io/fs.PathError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(syscall.Errno).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.UnmarshalTypeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(context.deadlineExceededError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*os/exec.ExitError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*internal/poll.DeadlineExceededError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*fmt.wrapError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*fmt.wrapErrors).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(runtime.plainError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*go/build/constraint.SyntaxError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*reflect.ValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*strconv.NumError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*time.ParseError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(internal/poll.errNetClosing).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*go/types.ArgumentError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*os.SyscallError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.UnsupportedValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.UnsupportedTypeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.SyntaxError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.MarshalerError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(golang.org/x/tools/go/packages.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*internal/reflectlite.ValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(go/types.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(runtime.errorAddressString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*regexp/syntax.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*runtime.TypeAssertionError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*os/exec.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.SyntaxError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*internal/bisect.parseError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*os/exec.ExitError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(os/exec.wrappedError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(math/big.ErrNaN).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(encoding/base64.CorruptInputError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*internal/reflectlite.ValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(time.fileSizeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(go/scanner.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(go/scanner.ErrorList).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(math/big.ErrNaN).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(go/scanner.ErrorList).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(go/scanner.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.InvalidUnmarshalError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(os/exec.wrappedError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(encoding/base64.CorruptInputError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(go/token.Position).String"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*go/token.FileSet).Position"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(go/token.Position).String"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*errors.errorString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(runtime.errorString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.InvalidUnmarshalError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*io/fs.PathError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(syscall.Errno).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.UnmarshalTypeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(context.deadlineExceededError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*internal/bisect.parseError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*internal/poll.DeadlineExceededError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*fmt.wrapError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*fmt.wrapErrors).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(runtime.plainError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*go/build/constraint.SyntaxError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*reflect.ValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*strconv.NumError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*time.ParseError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(internal/poll.errNetClosing).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*go/types.ArgumentError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*os.SyscallError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.UnsupportedValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.UnsupportedTypeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*os/exec.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*encoding/json.MarshalerError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(golang.org/x/tools/go/packages.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "log.Printf"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(go/types.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(runtime.errorAddressString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*regexp/syntax.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage$1" "(*runtime.TypeAssertionError).Error"
"(*go/types.Checker).report" "(*golang.org/x/tools/go/packages.loader).loadPackage$1"
"(*go/types.Checker).error" "(*go/types.Checker).report"
"(*go/types.Checker).validateTArgLen" "(*go/types.Checker).error"
"(*go/types.Checker).validateTArgLen" "fmt.Sprintf"
"(*go/types.Checker).instance" "(*go/types.Checker).validateTArgLen"
"(*go/types.Checker).instance" "fmt.Sprintf"
"(*go/types.Checker).instance" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).instance" "(*go/types.TypeParamList).list"
"(*go/types.Checker).instance" "go/types.makeSubstMap"
"(*go/types.Checker).instance" "(*go/types.Checker).subst"
"(*go/types.subster).typ" "(*go/types.Checker).instance"
"(*go/types.subster).typ" "(go/types.substMap).lookup"
"(*go/types.subster).typ" "go/types.unreachable"
"(*go/types.operand).assignableTo$2" "(*go/types.Checker).sprintf"
"(*go/types.subster).typ" "(*go/types.operand).assignableTo$2"
"(*go/types.subster).typ" "(*go/types.operand).assignableTo$2"
"(*go/types.subster).typ" "(*go/types.operand).assignableTo$2"
"(*go/types.subster).typ" "(*go/types.operand).assignableTo$2"
"(*go/types.subster).typ" "(*go/types.operand).assignableTo$2"
"(*go/types.subster).typ" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*go/types.subster).typ" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*go/types.subster).typ" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*go/types.subster).typ" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*go/types.subster).typ" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*go/types.operand).convertibleTo$1" "(*go/types.Checker).sprintf"
"(*go/types.subster).typ" "(*go/types.operand).convertibleTo$1"
"(*go/types.subster).typ" "(*go/types.operand).convertibleTo$1"
"(*go/types.subster).typ" "(*go/types.operand).convertibleTo$1"
"(*go/types.subster).typ" "(*go/types.operand).convertibleTo$1"
"(*go/types.subster).typ" "(*go/types.operand).convertibleTo$1"
"(*go/types.Checker).incomparableCause$1" "(*go/types.Checker).sprintf"
"(*go/types.subster).typ" "(*go/types.Checker).incomparableCause$1"
"(*go/types.subster).typ" "(*go/types.Checker).incomparableCause$1"
"(*go/types.subster).typ" "(*go/types.Checker).incomparableCause$1"
"(*go/types.subster).typ" "(*go/types.Checker).incomparableCause$1"
"(*go/types.subster).typ" "(*go/types.Checker).incomparableCause$1"
"(*go/types.Checker).subst" "(*go/types.subster).typ"
"(*go/types.comparer).identical" "(*go/types.Checker).subst"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"(*go/types.comparer).identical" "(*go/types.Checker).subst"
"(*go/types.comparer).identical" "(*go/types.Checker).subst"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"go/types.computeUnionTypeSet" "go/types.under"
"go/types.isTypeParam" "go/types.Unalias"
"go/types.computeUnionTypeSet" "go/types.isTypeParam"
"go/types.computeUnionTypeSet" "go/types.assert"
"go/types.computeUnionTypeSet" "go/types.computeInterfaceTypeSet"
"(*go/types.term).disjoint" "go/types.under"
"(*go/types.term).disjoint" "go/types.under"
"(*go/types.term).disjoint" "go/types.Identical"
"(*go/types.term).union" "(*go/types.term).disjoint"
"(go/types.termlist).norm" "(*go/types.term).union"
"(go/types.termlist).union" "(go/types.termlist).norm"
"go/types.computeUnionTypeSet" "(go/types.termlist).union"
"go/types.computeUnionTypeSet" "go/types.isValid"
"go/types.computeUnionTypeSet" "go/types.Identical"
"(*go/types.Checker).errorf" "go/types.newErrorf"
"(*go/types.Checker).errorf" "(*go/types.Checker).report"
"go/types.computeUnionTypeSet" "(*go/types.Checker).errorf"
"(*go/types.comparer).identical" "go/types.computeUnionTypeSet"
"(*go/types.comparer).identical" "go/types.computeUnionTypeSet"
"(go/types.termlist).subsetOf" "(go/types.termlist).isEmpty"
"(go/types.termlist).subsetOf" "(go/types.termlist).isEmpty"
"(*go/types.term).subsetOf" "(*go/types.term).disjoint"
"(go/types.termlist).supersetOf" "(*go/types.term).subsetOf"
"(go/types.termlist).subsetOf" "(go/types.termlist).supersetOf"
"(go/types.termlist).equal" "(go/types.termlist).subsetOf"
"(go/types.termlist).equal" "(go/types.termlist).subsetOf"
"(*go/types.comparer).identical" "(go/types.termlist).equal"
"(*go/types.comparer).identical" "(*go/types.Interface).typeSet"
"(*go/types.comparer).identical" "(*go/types.Interface).typeSet"
"(*go/types.comparer).identical" "(go/types.termlist).equal"
"(*go/types.comparer).identical" "(*go/types.ifacePair).identical"
"sort.IsSorted" "(go/types.nodeQueue).Len"
"sort.IsSorted" "(go/scanner.ErrorList).Less"
"sort.IsSorted" "(go/types.byUniqueMethodName).Len"
"sort.IsSorted" "(*internal/fmtsort.SortedMap).Len"
"sort.IsSorted" "(encoding/json.byIndex).Less"
"sort.IsSorted" "(go/types.inSourceOrder).Len"
"(golang.org/x/tools/internal/gcimporter.byPath).Less" "(*go/types.Package).Path"
"(golang.org/x/tools/internal/gcimporter.byPath).Less" "(*go/types.Package).Path"
"sort.IsSorted" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.IsSorted" "(regexp.runeSlice).Len"
"sort.IsSorted" "(regexp/syntax.ranges).Less"
"sort.IsSorted" "(regexp/syntax.ranges).Len"
"sort.IsSorted" "(encoding/json.byIndex).Len"
"sort.IsSorted" "(go/scanner.ErrorList).Len"
"(go/types.inSourceOrder).Less" "(*go/types.object).order"
"(go/types.inSourceOrder).Less" "(*go/types.object).order"
"sort.IsSorted" "(go/types.inSourceOrder).Less"
"(go/types.nodeQueue).Less" "(*go/types.object).order"
"(go/types.nodeQueue).Less" "(*go/types.object).order"
"sort.IsSorted" "(go/types.nodeQueue).Less"
"sort.IsSorted" "(golang.org/x/tools/internal/gcimporter.byPath).Len"
"(*go/types.object).less" "go/types.isExported"
"(*go/types.object).less" "go/types.isExported"
"(go/types.byUniqueMethodName).Less" "(*go/types.object).less"
"sort.IsSorted" "(go/types.byUniqueMethodName).Less"
"internal/fmtsort.compare" "(reflect.Value).Type"
"internal/fmtsort.compare" "(reflect.Value).Type"
"internal/fmtsort.compare" "(reflect.Value).Kind"
"(reflect.Value).Int" "(reflect.flag).kind"
"(reflect.Value).Int" "(reflect.flag).kind"
"internal/fmtsort.compare" "(reflect.Value).Int"
"internal/fmtsort.compare" "(reflect.Value).Int"
"(reflect.Value).Uint" "(reflect.flag).kind"
"(reflect.Value).Uint" "(reflect.flag).kind"
"internal/fmtsort.compare" "(reflect.Value).Uint"
"internal/fmtsort.compare" "(reflect.Value).Uint"
"(reflect.Value).String" "(reflect.flag).kind"
"(reflect.Value).stringNonString" "(reflect.flag).kind"
"(reflect.Value).stringNonString" "(reflect.Value).Type"
"(reflect.Value).stringNonString" "(*reflect.rtype).String"
"(reflect.Value).String" "(reflect.Value).stringNonString"
"internal/fmtsort.compare" "(reflect.Value).String"
"internal/fmtsort.compare" "(reflect.Value).String"
"(reflect.Value).Float" "(reflect.flag).kind"
"(reflect.Value).Float" "(reflect.flag).kind"
"internal/fmtsort.compare" "(reflect.Value).Float"
"internal/fmtsort.compare" "(reflect.Value).Float"
"internal/fmtsort.floatCompare" "internal/fmtsort.isNaN"
"internal/fmtsort.floatCompare" "internal/fmtsort.isNaN"
"internal/fmtsort.compare" "internal/fmtsort.floatCompare"
"(reflect.Value).Complex" "(reflect.flag).kind"
"(reflect.Value).Complex" "(reflect.flag).kind"
"internal/fmtsort.compare" "(reflect.Value).Complex"
"internal/fmtsort.compare" "(reflect.Value).Complex"
"internal/fmtsort.compare" "internal/fmtsort.floatCompare"
"(reflect.Value).Bool" "(reflect.flag).kind"
"runtime.Callers" "runtime.callers"
"reflect.valueMethodName" "runtime.Callers"
"reflect.valueMethodName" "runtime.CallersFrames"
"reflect.valueMethodName" "(*runtime.Frames).Next"
"(reflect.flag).mustBe" "reflect.valueMethodName"
"(reflect.flag).mustBe" "(reflect.flag).kind"
"(reflect.Value).panicNotBool" "(reflect.flag).mustBe"
"(reflect.Value).Bool" "(reflect.Value).panicNotBool"
"internal/fmtsort.compare" "(reflect.Value).Bool"
"internal/fmtsort.compare" "(reflect.Value).Bool"
"internal/fmtsort.compare" "internal/fmtsort.floatCompare"
"(reflect.Value).Pointer" "reflect.escapes"
"(reflect.Value).Pointer" "(reflect.flag).kind"
"(reflect.Value).Pointer" "(reflect.Value).typ"
"(reflect.Value).pointer" "(reflect.Value).typ"
"(reflect.Value).pointer" "(*internal/abi.Type).Size"
"(reflect.Value).pointer" "(reflect.Value).typ"
"(reflect.Value).pointer" "(*internal/abi.Type).Pointers"
"(reflect.Value).Pointer" "(reflect.Value).pointer"
"(reflect.Value).Pointer" "reflect.verifyNotInHeapPtr"
"(reflect.Value).Pointer" "reflect.methodValueCallCodePtr"
"(reflect.Value).Pointer" "(reflect.Value).pointer"
"(reflect.Value).Pointer" "(reflect.flag).kind"
"internal/fmtsort.compare" "(reflect.Value).Pointer"
"internal/fmtsort.compare" "(reflect.Value).Pointer"
"internal/fmtsort.nilCompare" "(reflect.Value).IsNil"
"internal/fmtsort.nilCompare" "(reflect.Value).IsNil"
"internal/fmtsort.nilCompare" "(reflect.Value).IsNil"
"internal/fmtsort.compare" "internal/fmtsort.nilCompare"
"internal/fmtsort.compare" "(reflect.Value).Pointer"
"internal/fmtsort.compare" "(reflect.Value).Pointer"
"(reflect.Value).NumField" "(reflect.flag).mustBe"
"(reflect.Value).NumField" "(reflect.Value).typ"
"internal/fmtsort.compare" "(reflect.Value).NumField"
"(reflect.Value).Field" "(reflect.flag).kind"
"(reflect.Value).Field" "(reflect.flag).kind"
"(reflect.Value).Field" "(reflect.Value).typ"
"(reflect.Value).Field" "(*internal/abi.Type).Kind"
"(reflect.Value).Field" "(internal/abi.Name).IsExported"
"(*internal/abi.StructField).Embedded" "(internal/abi.Name).IsEmbedded"
"(reflect.Value).Field" "(*internal/abi.StructField).Embedded"
"(reflect.Value).Field" "reflect.add"
"internal/fmtsort.compare" "(reflect.Value).Field"
"internal/fmtsort.compare" "(reflect.Value).Field"
"internal/fmtsort.compare" "internal/fmtsort.compare"
"internal/fmtsort.compare" "internal/fmtsort.nilCompare"
"(reflect.Value).Len" "(reflect.flag).kind"
"(reflect.Value).lenNonSlice" "(reflect.flag).kind"
"(reflect.Value).lenNonSlice" "(reflect.Value).typ"
"(reflect.Value).lenNonSlice" "(reflect.Value).pointer"
"(reflect.Value).lenNonSlice" "reflect.chanlen"
"(reflect.Value).lenNonSlice" "(reflect.Value).pointer"
"(reflect.Value).lenNonSlice" "reflect.maplen"
"(reflect.Value).lenNonSlice" "(reflect.Value).typ"
"(reflect.Value).lenNonSlice" "(*internal/abi.Type).Elem"
"(reflect.Value).lenNonSlice" "(*internal/abi.Type).Kind"
"(reflect.Value).lenNonSlice" "(reflect.flag).kind"
"(reflect.Value).lenNonSlice" "(reflect.Value).typ"
"(reflect.Value).lenNonSlice" "(*internal/abi.Type).Elem"
"(*internal/abi.Type).Len" "(*internal/abi.Type).Kind"
"(reflect.Value).lenNonSlice" "(*internal/abi.Type).Len"
"(reflect.Value).Len" "(reflect.Value).lenNonSlice"
"internal/fmtsort.compare" "(reflect.Value).Len"
"(reflect.Value).Index" "(reflect.flag).kind"
"(reflect.Value).Index" "(reflect.Value).typ"
"(reflect.Value).Index" "(*internal/abi.Type).Size"
"(reflect.Value).Index" "reflect.add"
"(reflect.Value).Index" "(reflect.flag).ro"
"(reflect.Value).Index" "(*internal/abi.Type).Kind"
"(reflect.Value).Index" "(reflect.Value).typ"
"(reflect.Value).Index" "(*internal/abi.Type).Size"
"reflect.arrayAt" "reflect.add"
"(reflect.Value).Index" "reflect.arrayAt"
"(reflect.Value).Index" "(reflect.flag).ro"
"(reflect.Value).Index" "(*internal/abi.Type).Kind"
"(reflect.Value).Index" "(reflect.flag).kind"
"(reflect.Value).Index" "reflect.arrayAt"
"(reflect.Value).Index" "(reflect.flag).ro"
"internal/fmtsort.compare" "(reflect.Value).Index"
"internal/fmtsort.compare" "(reflect.Value).Index"
"internal/fmtsort.compare" "internal/fmtsort.compare"
"internal/fmtsort.compare" "(*reflect.rtype).String"
"(reflect.Value).Elem" "(reflect.flag).kind"
"(reflect.Value).Elem" "(reflect.Value).typ"
"(*internal/abi.Type).NumMethod" "(*internal/abi.Type).Kind"
"(*internal/abi.Type).NumMethod" "(*internal/abi.InterfaceType).NumMethod"
"(*internal/abi.Type).NumMethod" "(*internal/abi.Type).ExportedMethods"
"(reflect.Value).Elem" "(*internal/abi.Type).NumMethod"
"(reflect.Value).Elem" "reflect.unpackEface"
"(reflect.Value).Elem" "(reflect.flag).ro"
"(reflect.Value).Elem" "(reflect.flag).kind"
"(reflect.Value).Elem" "(reflect.Value).typ"
"(reflect.Value).Elem" "reflect.ifaceIndir"
"(reflect.Value).Elem" "reflect.verifyNotInHeapPtr"
"(reflect.Value).Elem" "(reflect.Value).typ"
"(reflect.Value).Elem" "(*internal/abi.Type).Kind"
"internal/fmtsort.compare" "(reflect.Value).Elem"
"internal/fmtsort.compare" "(reflect.Value).Type"
"internal/fmtsort.compare" "reflect.ValueOf"
"internal/fmtsort.compare" "(reflect.Value).Elem"
"internal/fmtsort.compare" "(reflect.Value).Type"
"internal/fmtsort.compare" "reflect.ValueOf"
"internal/fmtsort.compare" "internal/fmtsort.compare"
"internal/fmtsort.compare" "(reflect.Value).Elem"
"internal/fmtsort.compare" "(reflect.Value).Elem"
"internal/fmtsort.compare" "internal/fmtsort.compare"
"(*internal/fmtsort.SortedMap).Less" "internal/fmtsort.compare"
"sort.IsSorted" "(*internal/fmtsort.SortedMap).Less"
"sort.IsSorted" "(regexp.runeSlice).Less"
"go/types.assertSortedMethods" "sort.IsSorted"
"(*go/types.comparer).identical" "go/types.assertSortedMethods"
"(*go/types.comparer).identical" "go/types.assertSortedMethods"
"(*go/types.comparer).identical" "(*go/types.object).Id"
"(*go/types.comparer).identical" "(*go/types.object).Id"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"(*go/types.comparer).identical" "(*go/types.comparer).identical"
"(*go/types.comparer).identical" "go/types.asNamed"
"(*go/types.comparer).identical" "(*go/types.Named).TypeArgs"
"(*go/types.comparer).identical" "(*go/types.TypeList).list"
"(*go/types.comparer).identical" "(*go/types.Named).TypeArgs"
"(*go/types.comparer).identical" "(*go/types.TypeList).list"
"(*go/types.comparer).identical" "go/types.Identical"
"go/types.identicalOrigin" "(*go/types.Named).Origin"
"go/types.identicalOrigin" "(*go/types.Named).Origin"
"(*go/types.comparer).identical" "go/types.identicalOrigin"
"(*go/types.comparer).identical" "go/types.unreachable"
"go/types.Identical" "(*go/types.comparer).identical"
"(*go/types.Context).update" "go/types.Identical"
"(*go/types.Context).update" "fmt.Sprintf"
"(*go/types.Named).expandUnderlying" "(*go/types.Context).update"
"(*go/types.Named).expandUnderlying" "go/types.assert"
"(*go/types.Named).expandUnderlying" "(*go/types.TypeParamList).list"
"(*go/types.Named).expandUnderlying" "(*go/types.TypeList).list"
"(*go/types.Named).expandUnderlying" "go/types.makeSubstMap"
"(*go/types.Checker).context" "go/types.NewContext"
"(*go/types.Named).expandUnderlying" "(*go/types.Checker).context"
"(*go/types.Named).expandUnderlying" "(*go/types.Checker).subst"
"(*go/types.Named).expandUnderlying" "go/types.replaceRecvType"
"(*go/types.Named).expandUnderlying" "(*go/types.Checker).newInterface"
"(*go/types.Named).expandUnderlying" "go/types.assert"
"(*go/types.Named).expandUnderlying" "(*go/types.Interface).typeSet"
"(*go/types.Named).resolve" "(*go/types.Named).expandUnderlying"
"(*go/types.Named).setState" "sync/atomic.StoreUint32"
"(*go/types.Named).resolve" "(*go/types.Named).setState"
"(*go/types.Named).resolve" "(*go/types.Named).setState"
"(*go/types.Named).resolve" "go/types.assert"
"(*go/types.Named).resolve" "(*go/types.Named).TypeArgs"
"(*go/types.Named).resolve" "(*go/types.TypeList).Len"
"(*go/types.Named).resolve" "go/types.assert"
"(*go/types.Named).resolve" "go/types.bindTParams"
"(*go/types.Named).resolve" "(*go/types.Named).setState"
"(*go/types.Named).Underlying" "(*go/types.Named).resolve"
"(*go/types.Named).Underlying" "go/types.Unalias"
"(*go/types.Named).under" "(*go/types.Named).Underlying"
"go/types.firstInSrc" "(*go/types.object).Pos"
"go/types.firstInSrc" "(*go/types.object).Pos"
"go/types.firstInSrc" "go/types.cmpPos"
"go/types.firstInSrc" "(*go/types.object).Pos"
"(*go/types.Checker).cycleError" "go/types.firstInSrc"
"(*go/types.Func).Pkg" "(*go/types.object).Pkg"
"(*go/types.Checker).cycleError$1" "(*go/types.Func).Pkg"
"(*go/types.Checker).cycleError$1" "(*go/types.object).Pkg"
"(*go/types.Checker).cycleError$1" "go/types.packagePrefix"
"(*go/types.Checker).cycleError$1" "(*go/types.object).Name"
"(*go/types.Checker).cycleError" "(*go/types.Checker).cycleError$1"
"(*go/types.Checker).cycleError" "(*go/types.TypeName).IsAlias"
"(*go/types.Checker).validAlias" "go/types.assert"
"(*go/types.Checker).cycleError" "(*go/types.Checker).validAlias"
"(*go/types.Checker).cycleError" "(*go/types.Checker).errorf"
"(*go/types.Checker).cycleError" "(*go/types.Checker).errorf"
"(*go/types.Checker).cycleError" "(*go/types.Checker).errorf"
"(*go/types.Checker).cycleError" "(*go/types.Checker).errorf"
"(*go/types.Checker).cycleError" "(*go/types.Checker).errorf"
"(*go/types.Checker).cycleError" "(*go/types.Checker).errorf"
"(*go/types.Checker).cycleError" "(*go/types.Checker).cycleError$1"
"(*go/types.Named).under" "(*go/types.Checker).cycleError"
"(*go/types.Named).under" "(*go/types.Named).Underlying"
"go/types.under" "(*go/types.Named).under"
"(*go/types.TypeParam).iface" "go/types.under"
"(*go/types.TypeParam).iface" "go/types.isValid"
"(*go/types.TypeParam).iface" "go/types.isTypeParam"
"go/types.NewInterfaceType" "(*go/types.Checker).newInterface"
"sort.Sort" "(go/types.nodeQueue).Len"
"sort.Sort" "(encoding/json.byIndex).Len"
"sort.Sort" "(go/types.byUniqueMethodName).Len"
"sort.Sort" "(*internal/fmtsort.SortedMap).Len"
"sort.Sort" "(regexp/syntax.ranges).Len"
"sort.Sort" "(go/types.inSourceOrder).Len"
"sort.Sort" "(golang.org/x/tools/internal/gcimporter.byPath).Len"
"sort.Sort" "math/bits.Len"
"sort.insertionSort" "(go/types.nodeQueue).Swap"
"sort.insertionSort" "(go/types.inSourceOrder).Less"
"sort.insertionSort" "(go/types.byUniqueMethodName).Swap"
"sort.insertionSort" "(*internal/fmtsort.SortedMap).Swap"
"sort.insertionSort" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.insertionSort" "(go/types.inSourceOrder).Swap"
"sort.insertionSort" "(go/scanner.ErrorList).Less"
"sort.insertionSort" "(regexp.runeSlice).Swap"
"sort.insertionSort" "(encoding/json.byIndex).Swap"
"sort.insertionSort" "(regexp/syntax.ranges).Swap"
"sort.insertionSort" "(encoding/json.byIndex).Less"
"sort.insertionSort" "(go/scanner.ErrorList).Swap"
"sort.insertionSort" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.insertionSort" "(go/types.nodeQueue).Less"
"sort.insertionSort" "(regexp/syntax.ranges).Less"
"sort.insertionSort" "(go/types.byUniqueMethodName).Less"
"sort.insertionSort" "(*internal/fmtsort.SortedMap).Less"
"sort.insertionSort" "(regexp.runeSlice).Less"
"sort.pdqsort" "sort.insertionSort"
"sort.siftDown" "(go/types.nodeQueue).Less"
"sort.siftDown" "(regexp/syntax.ranges).Swap"
"sort.siftDown" "(go/types.byUniqueMethodName).Less"
"sort.siftDown" "(*internal/fmtsort.SortedMap).Less"
"sort.siftDown" "(encoding/json.byIndex).Less"
"sort.siftDown" "(go/types.inSourceOrder).Less"
"sort.siftDown" "(go/types.byUniqueMethodName).Swap"
"sort.siftDown" "(regexp.runeSlice).Less"
"sort.siftDown" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.siftDown" "(regexp/syntax.ranges).Less"
"sort.siftDown" "(encoding/json.byIndex).Less"
"sort.siftDown" "(go/scanner.ErrorList).Less"
"sort.siftDown" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.siftDown" "(go/types.nodeQueue).Less"
"sort.siftDown" "(regexp.runeSlice).Swap"
"sort.siftDown" "(go/types.byUniqueMethodName).Less"
"sort.siftDown" "(*internal/fmtsort.SortedMap).Less"
"sort.siftDown" "(go/scanner.ErrorList).Swap"
"sort.siftDown" "(go/types.inSourceOrder).Less"
"sort.siftDown" "(go/types.inSourceOrder).Swap"
"sort.siftDown" "(regexp.runeSlice).Less"
"sort.siftDown" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.siftDown" "(regexp/syntax.ranges).Less"
"sort.siftDown" "(encoding/json.byIndex).Swap"
"sort.siftDown" "(go/scanner.ErrorList).Less"
"sort.siftDown" "(*internal/fmtsort.SortedMap).Swap"
"sort.siftDown" "(go/types.nodeQueue).Swap"
"sort.heapSort" "sort.siftDown"
"sort.heapSort" "(go/types.nodeQueue).Swap"
"sort.heapSort" "sort.siftDown"
"sort.heapSort" "(go/types.byUniqueMethodName).Swap"
"sort.heapSort" "(*internal/fmtsort.SortedMap).Swap"
"sort.heapSort" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.heapSort" "(go/types.inSourceOrder).Swap"
"sort.heapSort" "(go/scanner.ErrorList).Swap"
"sort.heapSort" "(regexp.runeSlice).Swap"
"sort.heapSort" "(encoding/json.byIndex).Swap"
"sort.heapSort" "(regexp/syntax.ranges).Swap"
"sort.pdqsort" "sort.heapSort"
"sort.breakPatterns" "sort.nextPowerOfTwo"
"sort.breakPatterns" "(*sort.xorshift).Next"
"sort.breakPatterns" "(go/types.nodeQueue).Swap"
"sort.breakPatterns" "(regexp/syntax.ranges).Swap"
"sort.breakPatterns" "(go/types.byUniqueMethodName).Swap"
"sort.breakPatterns" "(*internal/fmtsort.SortedMap).Swap"
"sort.breakPatterns" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.breakPatterns" "(go/types.inSourceOrder).Swap"
"sort.breakPatterns" "(encoding/json.byIndex).Swap"
"sort.breakPatterns" "(regexp.runeSlice).Swap"
"sort.breakPatterns" "(go/scanner.ErrorList).Swap"
"sort.pdqsort" "sort.breakPatterns"
"sort.order2" "(go/types.nodeQueue).Less"
"sort.order2" "(go/scanner.ErrorList).Less"
"sort.order2" "(go/types.byUniqueMethodName).Less"
"sort.order2" "(*internal/fmtsort.SortedMap).Less"
"sort.order2" "(encoding/json.byIndex).Less"
"sort.order2" "(go/types.inSourceOrder).Less"
"sort.order2" "(regexp/syntax.ranges).Less"
"sort.order2" "(regexp.runeSlice).Less"
"sort.order2" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.median" "sort.order2"
"sort.median" "sort.order2"
"sort.median" "sort.order2"
"sort.medianAdjacent" "sort.median"
"sort.choosePivot" "sort.medianAdjacent"
"sort.choosePivot" "sort.medianAdjacent"
"sort.choosePivot" "sort.medianAdjacent"
"sort.choosePivot" "sort.median"
"sort.pdqsort" "sort.choosePivot"
"sort.reverseRange" "(go/types.nodeQueue).Swap"
"sort.reverseRange" "(regexp/syntax.ranges).Swap"
"sort.reverseRange" "(go/types.byUniqueMethodName).Swap"
"sort.reverseRange" "(*internal/fmtsort.SortedMap).Swap"
"sort.reverseRange" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.reverseRange" "(go/types.inSourceOrder).Swap"
"sort.reverseRange" "(encoding/json.byIndex).Swap"
"sort.reverseRange" "(regexp.runeSlice).Swap"
"sort.reverseRange" "(go/scanner.ErrorList).Swap"
"sort.pdqsort" "sort.reverseRange"
"sort.partialInsertionSort" "(go/types.nodeQueue).Less"
"sort.partialInsertionSort" "(*internal/fmtsort.SortedMap).Swap"
"sort.partialInsertionSort" "(go/types.byUniqueMethodName).Less"
"sort.partialInsertionSort" "(*internal/fmtsort.SortedMap).Less"
"sort.partialInsertionSort" "(regexp/syntax.ranges).Swap"
"sort.partialInsertionSort" "(go/types.inSourceOrder).Less"
"sort.partialInsertionSort" "(go/types.nodeQueue).Swap"
"sort.partialInsertionSort" "(regexp.runeSlice).Less"
"sort.partialInsertionSort" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.partialInsertionSort" "(regexp/syntax.ranges).Less"
"sort.partialInsertionSort" "(encoding/json.byIndex).Swap"
"sort.partialInsertionSort" "(go/scanner.ErrorList).Less"
"sort.partialInsertionSort" "(encoding/json.byIndex).Less"
"sort.partialInsertionSort" "(go/types.nodeQueue).Swap"
"sort.partialInsertionSort" "(encoding/json.byIndex).Swap"
"sort.partialInsertionSort" "(go/types.byUniqueMethodName).Swap"
"sort.partialInsertionSort" "(*internal/fmtsort.SortedMap).Swap"
"sort.partialInsertionSort" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.partialInsertionSort" "(go/types.inSourceOrder).Swap"
"sort.partialInsertionSort" "(regexp.runeSlice).Less"
"sort.partialInsertionSort" "(regexp.runeSlice).Swap"
"sort.partialInsertionSort" "(go/types.inSourceOrder).Less"
"sort.partialInsertionSort" "(regexp/syntax.ranges).Swap"
"sort.partialInsertionSort" "(encoding/json.byIndex).Swap"
"sort.partialInsertionSort" "(go/scanner.ErrorList).Swap"
"sort.partialInsertionSort" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.partialInsertionSort" "(go/types.nodeQueue).Less"
"sort.partialInsertionSort" "(go/types.byUniqueMethodName).Swap"
"sort.partialInsertionSort" "(go/types.byUniqueMethodName).Less"
"sort.partialInsertionSort" "(*internal/fmtsort.SortedMap).Less"
"sort.partialInsertionSort" "(go/scanner.ErrorList).Swap"
"sort.partialInsertionSort" "(go/types.inSourceOrder).Less"
"sort.partialInsertionSort" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.partialInsertionSort" "(regexp.runeSlice).Less"
"sort.partialInsertionSort" "(regexp.runeSlice).Swap"
"sort.partialInsertionSort" "(regexp/syntax.ranges).Less"
"sort.partialInsertionSort" "(encoding/json.byIndex).Less"
"sort.partialInsertionSort" "(go/scanner.ErrorList).Less"
"sort.partialInsertionSort" "(regexp/syntax.ranges).Less"
"sort.partialInsertionSort" "(go/types.nodeQueue).Swap"
"sort.partialInsertionSort" "(*internal/fmtsort.SortedMap).Less"
"sort.partialInsertionSort" "(go/types.byUniqueMethodName).Swap"
"sort.partialInsertionSort" "(*internal/fmtsort.SortedMap).Swap"
"sort.partialInsertionSort" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.partialInsertionSort" "(go/types.inSourceOrder).Swap"
"sort.partialInsertionSort" "(go/scanner.ErrorList).Less"
"sort.partialInsertionSort" "(regexp.runeSlice).Swap"
"sort.partialInsertionSort" "(go/types.inSourceOrder).Swap"
"sort.partialInsertionSort" "(regexp/syntax.ranges).Swap"
"sort.partialInsertionSort" "(encoding/json.byIndex).Less"
"sort.partialInsertionSort" "(go/scanner.ErrorList).Swap"
"sort.partialInsertionSort" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.partialInsertionSort" "(go/types.nodeQueue).Less"
"sort.partialInsertionSort" "(go/types.byUniqueMethodName).Less"
"sort.pdqsort" "sort.partialInsertionSort"
"sort.partitionEqual" "(go/types.nodeQueue).Swap"
"sort.partitionEqual" "(go/scanner.ErrorList).Less"
"sort.partitionEqual" "(go/types.byUniqueMethodName).Swap"
"sort.partitionEqual" "(*internal/fmtsort.SortedMap).Swap"
"sort.partitionEqual" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.partitionEqual" "(go/types.inSourceOrder).Swap"
"sort.partitionEqual" "(go/types.nodeQueue).Swap"
"sort.partitionEqual" "(regexp.runeSlice).Swap"
"sort.partitionEqual" "(regexp.runeSlice).Swap"
"sort.partitionEqual" "(regexp/syntax.ranges).Swap"
"sort.partitionEqual" "(encoding/json.byIndex).Swap"
"sort.partitionEqual" "(go/scanner.ErrorList).Swap"
"sort.partitionEqual" "(encoding/json.byIndex).Less"
"sort.partitionEqual" "(go/types.nodeQueue).Less"
"sort.partitionEqual" "(encoding/json.byIndex).Swap"
"sort.partitionEqual" "(go/types.byUniqueMethodName).Less"
"sort.partitionEqual" "(*internal/fmtsort.SortedMap).Less"
"sort.partitionEqual" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.partitionEqual" "(go/types.inSourceOrder).Less"
"sort.partitionEqual" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.partitionEqual" "(regexp.runeSlice).Less"
"sort.partitionEqual" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.partitionEqual" "(regexp/syntax.ranges).Less"
"sort.partitionEqual" "(encoding/json.byIndex).Less"
"sort.partitionEqual" "(go/scanner.ErrorList).Less"
"sort.partitionEqual" "(go/types.byUniqueMethodName).Swap"
"sort.partitionEqual" "(go/types.nodeQueue).Less"
"sort.partitionEqual" "(go/types.inSourceOrder).Swap"
"sort.partitionEqual" "(go/types.byUniqueMethodName).Less"
"sort.partitionEqual" "(*internal/fmtsort.SortedMap).Less"
"sort.partitionEqual" "(go/scanner.ErrorList).Swap"
"sort.partitionEqual" "(go/types.inSourceOrder).Less"
"sort.partitionEqual" "(*internal/fmtsort.SortedMap).Swap"
"sort.partitionEqual" "(regexp.runeSlice).Less"
"sort.partitionEqual" "(regexp/syntax.ranges).Swap"
"sort.partitionEqual" "(regexp/syntax.ranges).Less"
"sort.pdqsort" "sort.partitionEqual"
"sort.partition" "(go/types.nodeQueue).Swap"
"sort.partition" "(regexp.runeSlice).Less"
"sort.partition" "(go/types.byUniqueMethodName).Swap"
"sort.partition" "(*internal/fmtsort.SortedMap).Swap"
"sort.partition" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.partition" "(go/types.inSourceOrder).Swap"
"sort.partition" "(go/types.nodeQueue).Swap"
"sort.partition" "(regexp.runeSlice).Swap"
"sort.partition" "(*internal/fmtsort.SortedMap).Swap"
"sort.partition" "(regexp/syntax.ranges).Swap"
"sort.partition" "(encoding/json.byIndex).Swap"
"sort.partition" "(go/scanner.ErrorList).Swap"
"sort.partition" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.partition" "(go/types.nodeQueue).Less"
"sort.partition" "(go/scanner.ErrorList).Swap"
"sort.partition" "(go/types.byUniqueMethodName).Less"
"sort.partition" "(*internal/fmtsort.SortedMap).Less"
"sort.partition" "(go/scanner.ErrorList).Swap"
"sort.partition" "(go/types.inSourceOrder).Less"
"sort.partition" "(regexp.runeSlice).Swap"
"sort.partition" "(regexp.runeSlice).Less"
"sort.partition" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.partition" "(regexp/syntax.ranges).Less"
"sort.partition" "(encoding/json.byIndex).Swap"
"sort.partition" "(go/scanner.ErrorList).Less"
"sort.partition" "(*internal/fmtsort.SortedMap).Swap"
"sort.partition" "(go/types.nodeQueue).Less"
"sort.partition" "(encoding/json.byIndex).Swap"
"sort.partition" "(go/types.byUniqueMethodName).Less"
"sort.partition" "(*internal/fmtsort.SortedMap).Less"
"sort.partition" "(encoding/json.byIndex).Swap"
"sort.partition" "(go/types.inSourceOrder).Less"
"sort.partition" "(regexp/syntax.ranges).Less"
"sort.partition" "(regexp.runeSlice).Less"
"sort.partition" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.partition" "(regexp/syntax.ranges).Less"
"sort.partition" "(encoding/json.byIndex).Less"
"sort.partition" "(go/scanner.ErrorList).Less"
"sort.partition" "(go/types.byUniqueMethodName).Swap"
"sort.partition" "(go/types.nodeQueue).Swap"
"sort.partition" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.partition" "(go/types.byUniqueMethodName).Swap"
"sort.partition" "(*internal/fmtsort.SortedMap).Swap"
"sort.partition" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.partition" "(go/types.inSourceOrder).Swap"
"sort.partition" "(go/scanner.ErrorList).Less"
"sort.partition" "(regexp.runeSlice).Swap"
"sort.partition" "(go/types.byUniqueMethodName).Swap"
"sort.partition" "(regexp/syntax.ranges).Swap"
"sort.partition" "(encoding/json.byIndex).Less"
"sort.partition" "(go/scanner.ErrorList).Swap"
"sort.partition" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.partition" "(go/types.nodeQueue).Swap"
"sort.partition" "(go/types.inSourceOrder).Less"
"sort.partition" "(go/types.byUniqueMethodName).Swap"
"sort.partition" "(*internal/fmtsort.SortedMap).Swap"
"sort.partition" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.partition" "(go/types.inSourceOrder).Swap"
"sort.partition" "(encoding/json.byIndex).Swap"
"sort.partition" "(regexp.runeSlice).Swap"
"sort.partition" "(*internal/fmtsort.SortedMap).Less"
"sort.partition" "(regexp/syntax.ranges).Swap"
"sort.partition" "(encoding/json.byIndex).Less"
"sort.partition" "(go/scanner.ErrorList).Swap"
"sort.partition" "(regexp.runeSlice).Swap"
"sort.partition" "(go/types.nodeQueue).Less"
"sort.partition" "(regexp/syntax.ranges).Swap"
"sort.partition" "(go/types.byUniqueMethodName).Less"
"sort.partition" "(*internal/fmtsort.SortedMap).Less"
"sort.partition" "(regexp/syntax.ranges).Swap"
"sort.partition" "(go/types.inSourceOrder).Less"
"sort.partition" "(go/types.inSourceOrder).Swap"
"sort.partition" "(regexp.runeSlice).Less"
"sort.partition" "(go/types.inSourceOrder).Swap"
"sort.partition" "(regexp/syntax.ranges).Less"
"sort.partition" "(encoding/json.byIndex).Less"
"sort.partition" "(go/scanner.ErrorList).Less"
"sort.partition" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.partition" "(go/types.nodeQueue).Less"
"sort.partition" "(go/types.nodeQueue).Swap"
"sort.partition" "(go/types.byUniqueMethodName).Less"
"sort.pdqsort" "sort.partition"
"sort.pdqsort" "(go/types.nodeQueue).Less"
"sort.pdqsort" "(go/scanner.ErrorList).Less"
"sort.pdqsort" "(go/types.byUniqueMethodName).Less"
"sort.pdqsort" "(*internal/fmtsort.SortedMap).Less"
"sort.pdqsort" "(encoding/json.byIndex).Less"
"sort.pdqsort" "(go/types.inSourceOrder).Less"
"sort.pdqsort" "(regexp/syntax.ranges).Less"
"sort.pdqsort" "(regexp.runeSlice).Less"
"sort.pdqsort" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.pdqsort" "sort.pdqsort"
"sort.pdqsort" "sort.pdqsort"
"sort.Sort" "sort.pdqsort"
"sort.Sort" "(regexp.runeSlice).Len"
"sort.Sort" "(go/scanner.ErrorList).Len"
"go/types.sortMethods" "sort.Sort"
"go/types.NewInterfaceType" "go/types.sortMethods"
"go/types.NewVar" "go/types.colorFor"
"go/types.NewInterfaceType" "go/types.NewVar"
"(*go/types.TypeParam).iface" "go/types.NewInterfaceType"
"(*go/types.TypeParam).iface" "go/types.asNamed"
"(*go/types.TypeParam).iface" "go/types.computeInterfaceTypeSet"
"(*go/types.TypeParam).Underlying" "(*go/types.TypeParam).iface"
"go/types.under" "(*go/types.TypeParam).Underlying"
"go/types.under" "(*go/types.Tuple).Underlying"
"go/types.under" "(*go/types.Basic).Underlying"
"go/types.under" "(*go/types.Signature).Underlying"
"go/types.under" "(*go/types.Named).Underlying"
"go/types.under" "(*go/types.Union).Underlying"
"go/types.under" "(*go/types.Interface).Underlying"
"go/types.under" "(*go/types.Struct).Underlying"
"go/types.under" "(*go/types.Pointer).Underlying"
"go/types.under" "(*go/types.Array).Underlying"
"(*go/types.Alias).Underlying" "go/types.unalias"
"(*go/types.Alias).Underlying" "(*go/types.TypeParam).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Tuple).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Basic).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Signature).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Named).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Union).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Interface).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Struct).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Pointer).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Array).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Alias).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Slice).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Map).Underlying"
"(*go/types.Alias).Underlying" "(*go/types.Chan).Underlying"
"(*go/types.Alias).Underlying" "(golang.org/x/tools/internal/gcimporter.anyType).Underlying"
"go/types.under" "(*go/types.Alias).Underlying"
"go/types.under" "(*go/types.Slice).Underlying"
"go/types.under" "(*go/types.Map).Underlying"
"go/types.under" "(*go/types.Chan).Underlying"
"go/types.under" "(golang.org/x/tools/internal/gcimporter.anyType).Underlying"
"(*go/types.typeWriter).tuple" "go/types.under"
"(*go/types.typeWriter).tuple" "(*go/types.typeWriter).error"
"(*go/types.typeWriter).tuple" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).tuple" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).tuple"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).signature" "(*go/types.Signature).TypeParams"
"(*go/types.typeWriter).signature" "(*go/types.TypeParamList).Len"
"(*go/types.typeWriter).signature" "(*go/types.typeWriter).tuple"
"(*go/types.typeWriter).signature" "(*go/types.Tuple).Len"
"(*go/types.typeWriter).signature" "go/types.assert"
"(*go/types.typeWriter).signature" "(*go/types.Signature).TypeParams"
"(*go/types.typeWriter).signature" "(*go/types.typeWriter).signature$1"
"(*go/types.typeWriter).signature" "(*go/types.Signature).TypeParams"
"(*go/types.typeWriter).signature" "(*go/types.TypeParamList).list"
"(*go/types.typeWriter).tParamList" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).tParamList" "(*go/types.typeWriter).error"
"(*go/types.typeWriter).tParamList" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).tParamList" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).tParamList" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).tParamList" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).tParamList" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).tParamList" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).tParamList" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).signature" "(*go/types.typeWriter).tParamList"
"(*go/types.typeWriter).signature" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).signature" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).signature" "(*go/types.typeWriter).tuple"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).signature"
"(*go/types.typeWriter).typ" "(*go/types.Union).Len"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).error"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typ"
"(*go/types.Map).String" "go/types.TypeString"
"(*go/types.typeWriter).typ" "(*go/types.Map).String"
"(*go/types.typeWriter).typ" "(*go/types.object).Type"
"(*go/types.Pointer).String" "go/types.TypeString"
"(*go/types.typeWriter).typ" "(*go/types.Pointer).String"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "go/types.Unalias"
"(*go/types.Named).String" "go/types.TypeString"
"(*go/types.typeWriter).typ" "(*go/types.Named).String"
"(*go/types.Alias).String" "go/types.TypeString"
"(*go/types.typeWriter).typ" "(*go/types.Alias).String"
"(*go/types.Interface).String" "go/types.TypeString"
"(*go/types.typeWriter).typ" "(*go/types.Interface).String"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.Slice).String" "go/types.TypeString"
"(*go/types.typeWriter).typ" "(*go/types.Slice).String"
"(*go/types.typeWriter).typ" "(*go/types.object).Type"
"(*go/types.Struct).String" "go/types.TypeString"
"(*go/types.typeWriter).typ" "(*go/types.Struct).String"
"(*go/types.Chan).String" "go/types.TypeString"
"(*go/types.typeWriter).typ" "(*go/types.Chan).String"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).typ" "(golang.org/x/tools/internal/gcimporter.anyType).String"
"(*go/types.Array).String" "go/types.TypeString"
"(*go/types.typeWriter).typ" "(*go/types.Array).String"
"(*go/types.Union).String" "go/types.TypeString"
"(*go/types.typeWriter).typ" "(*go/types.Union).String"
"(*go/types.typeWriter).typ" "go/types.asNamed"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.Interface).typeSet"
"(*go/types.typeWriter).typeSet" "go/types.assert"
"(*go/types.typeWriter).typeSet" "(go/types.termlist).isAll"
"(*go/types.typeWriter).typeSet" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typeSet" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typeSet" "(*go/types.typeWriter).signature"
"(go/types.termlist).String" "(*strings.Builder).String"
"(go/types.termlist).String" "(*strings.Builder).WriteString"
"(*go/types.TypeParam).String" "go/types.TypeString"
"(*go/types.term).String" "(*go/types.TypeParam).String"
"(*go/types.Tuple).String" "go/types.TypeString"
"(*go/types.term).String" "(*go/types.Tuple).String"
"(*go/types.Basic).String" "go/types.TypeString"
"(*go/types.term).String" "(*go/types.Basic).String"
"(*go/types.term).String" "(*go/types.Signature).String"
"(*go/types.term).String" "(*go/types.Named).String"
"(*go/types.term).String" "(*go/types.Union).String"
"(*go/types.term).String" "(*go/types.Interface).String"
"(*go/types.term).String" "(*go/types.TypeParam).String"
"(*go/types.term).String" "(*go/types.Tuple).String"
"(*go/types.term).String" "(*go/types.Basic).String"
"(*go/types.term).String" "(*go/types.Signature).String"
"(*go/types.term).String" "(*go/types.Named).String"
"(*go/types.term).String" "(*go/types.Union).String"
"(*go/types.term).String" "(*go/types.Interface).String"
"(*go/types.term).String" "(*go/types.Struct).String"
"(*go/types.term).String" "(*go/types.Struct).String"
"(*go/types.term).String" "(*go/types.Pointer).String"
"(*go/types.term).String" "(*go/types.Pointer).String"
"(*go/types.term).String" "(*go/types.Array).String"
"(*go/types.term).String" "(*go/types.Array).String"
"(*go/types.term).String" "(*go/types.Alias).String"
"(*go/types.term).String" "(*go/types.Alias).String"
"(*go/types.term).String" "(*go/types.Slice).String"
"(*go/types.term).String" "(*go/types.Slice).String"
"(*go/types.term).String" "(*go/types.Map).String"
"(*go/types.term).String" "(*go/types.Map).String"
"(*go/types.term).String" "(*go/types.Chan).String"
"(*go/types.term).String" "(*go/types.Chan).String"
"(*go/types.term).String" "(golang.org/x/tools/internal/gcimporter.anyType).String"
"(*go/types.term).String" "(golang.org/x/tools/internal/gcimporter.anyType).String"
"(go/types.termlist).String" "(*go/types.term).String"
"(go/types.termlist).String" "(*strings.Builder).WriteString"
"(*go/types.typeWriter).typeSet" "(go/types.termlist).String"
"(*go/types.typeWriter).typeSet" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typeSet" "(go/types.termlist).isEmpty"
"slices.Sort[[]string string]" "math/bits.Len"
"cmp.Less[string]" "cmp.isNaN[string]"
"cmp.Less[string]" "cmp.isNaN[string]"
"slices.insertionSortOrdered[string]" "cmp.Less[string]"
"slices.pdqsortOrdered[string]" "slices.insertionSortOrdered[string]"
"slices.siftDownOrdered[string]" "cmp.Less[string]"
"slices.siftDownOrdered[string]" "cmp.Less[string]"
"slices.heapSortOrdered[string]" "slices.siftDownOrdered[string]"
"slices.heapSortOrdered[string]" "slices.siftDownOrdered[string]"
"slices.pdqsortOrdered[string]" "slices.heapSortOrdered[string]"
"slices.breakPatternsOrdered[string]" "slices.nextPowerOfTwo"
"slices.breakPatternsOrdered[string]" "(*slices.xorshift).Next"
"slices.pdqsortOrdered[string]" "slices.breakPatternsOrdered[string]"
"slices.order2Ordered[string]" "cmp.Less[string]"
"slices.medianOrdered[string]" "slices.order2Ordered[string]"
"slices.medianOrdered[string]" "slices.order2Ordered[string]"
"slices.medianOrdered[string]" "slices.order2Ordered[string]"
"slices.medianAdjacentOrdered[string]" "slices.medianOrdered[string]"
"slices.choosePivotOrdered[string]" "slices.medianAdjacentOrdered[string]"
"slices.choosePivotOrdered[string]" "slices.medianAdjacentOrdered[string]"
"slices.choosePivotOrdered[string]" "slices.medianAdjacentOrdered[string]"
"slices.choosePivotOrdered[string]" "slices.medianOrdered[string]"
"slices.pdqsortOrdered[string]" "slices.choosePivotOrdered[string]"
"slices.pdqsortOrdered[string]" "slices.reverseRangeOrdered[string]"
"slices.partialInsertionSortOrdered[string]" "cmp.Less[string]"
"slices.partialInsertionSortOrdered[string]" "cmp.Less[string]"
"slices.partialInsertionSortOrdered[string]" "cmp.Less[string]"
"slices.pdqsortOrdered[string]" "slices.partialInsertionSortOrdered[string]"
"slices.partitionEqualOrdered[string]" "cmp.Less[string]"
"slices.partitionEqualOrdered[string]" "cmp.Less[string]"
"slices.pdqsortOrdered[string]" "slices.partitionEqualOrdered[string]"
"slices.partitionOrdered[string]" "cmp.Less[string]"
"slices.partitionOrdered[string]" "cmp.Less[string]"
"slices.partitionOrdered[string]" "cmp.Less[string]"
"slices.partitionOrdered[string]" "cmp.Less[string]"
"slices.pdqsortOrdered[string]" "slices.partitionOrdered[string]"
"slices.pdqsortOrdered[string]" "cmp.Less[string]"
"slices.pdqsortOrdered[string]" "slices.pdqsortOrdered[string]"
"slices.pdqsortOrdered[string]" "slices.pdqsortOrdered[string]"
"slices.Sort[[]string string]" "slices.pdqsortOrdered[string]"
"sort.stringsImpl" "slices.Sort[[]string string]"
"sort.Strings" "sort.stringsImpl"
"(*go/types.typeWriter).typeSet" "sort.Strings"
"(*go/types.typeWriter).typeSet" "(*bytes.Buffer).WriteByte"
"(*go/types.typeWriter).typeSet" "go/types.newTypeHasher"
"(*go/types.typeWriter).typeSet" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).typeSet" "(*bytes.Buffer).String"
"(*go/types.typeWriter).typeSet" "(*go/types.typeWriter).byte"
"strings.Join" "(*strings.Builder).Grow"
"strings.Join" "(*strings.Builder).WriteString"
"strings.Join" "(*strings.Builder).WriteString"
"strings.Join" "(*strings.Builder).WriteString"
"strings.Join" "(*strings.Builder).String"
"(*go/types.typeWriter).typeSet" "strings.Join"
"(*go/types.typeWriter).typeSet" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typeSet"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).signature"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).error"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typ"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).byte"
"(*go/types.typeWriter).typ" "(*go/types.Context).getID"
"(*go/types.typeWriter).typ" "strconv.Itoa"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typeName"
"(*go/types.typeWriter).typ" "(*go/types.TypeList).list"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typeList"
"(*go/types.typeWriter).typ" "(*go/types.Named).TypeParams"
"(*go/types.typeWriter).typ" "(*go/types.TypeParamList).list"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).tParamList"
"(*go/types.typeWriter).typ" "(*go/types.Named).TypeParams"
"(*go/types.typeWriter).typ" "(*go/types.TypeParamList).Len"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).error"
"(*go/types.typeWriter).typ" "(*go/types.TypeParamList).list"
"(*go/types.typeWriter).typ" "go/types.tparamIndex"
"(*go/types.typeWriter).typ" "fmt.Sprintf"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"go/types.subscript" "unicode/utf8.EncodeRune"
"(*go/types.typeWriter).typ" "go/types.subscript"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).string"
"(*go/types.typeWriter).typ" "(*go/types.Scope).Lookup"
"(*go/types.typeWriter).typ" "(*go/types.typeWriter).typeName"
"(*go/types.typeWriter).typ" "(*go/types.TypeParam).String"
"(*go/types.typeWriter).typ" "(*go/types.Tuple).String"
"(*go/types.typeWriter).typ" "(*go/types.Basic).String"
"(*go/types.typeWriter).typ" "(*go/types.Signature).String"
"go/types.WriteType" "(*go/types.typeWriter).typ"
"go/types.TypeString" "go/types.WriteType"
"go/types.TypeString" "(*bytes.Buffer).String"
"go/types.operandString" "go/types.TypeString"
"(*math/big.Float).SetPrec" "math/big.makeAcc"
"(math/big.nat).bitLen" "math/bits.Len"
"(math/big.nat).itoa" "(math/big.nat).bitLen"
"math.Log2" "math.archLog2"
"math.Frexp" "math.archFrexp"
"math.frexp" "math.IsInf"
"math.Abs" "math.Float64bits"
"math.Abs" "math.Float64frombits"
"math.normalize" "math.Abs"
"math.frexp" "math.normalize"
"math.frexp" "math.Float64bits"
"math.frexp" "math.Float64frombits"
"math.frexp" "math.IsNaN"
"math.Frexp" "math.frexp"
"math.log2" "math.Frexp"
"math.Log" "math.archLog"
"math.log" "math.IsNaN"
"math.NaN" "math.Float64frombits"
"math.log" "math.NaN"
"math.log" "math.IsInf"
"math.Inf" "math.Float64frombits"
"math.log" "math.Inf"
"math.log" "math.Frexp"
"math.Log" "math.log"
"math.log2" "math.Log"
"math.Log2" "math.log2"
"(math/big.nat).itoa" "math.Log2"
"(math/big.nat).itoa" "math/bits.TrailingZeros"
"(math/big.nat).itoa" "math/big.maxPow"
"math/big.divisors" "(*sync.Mutex).Lock"
"(math/big.nat).setWord" "(math/big.nat).make"
"(math/big.nat).expWW" "(math/big.nat).setWord"
"(math/big.nat).expWW" "(math/big.nat).setWord"
"(math/big.nat).expNN" "math/big.alias"
"(math/big.nat).expNN" "math/big.alias"
"(math/big.nat).expNN" "(math/big.nat).setWord"
"(math/big.nat).expNN" "(math/big.nat).setWord"
"(math/big.nat).expNN" "(math/big.nat).setWord"
"(math/big.nat).expNN" "(math/big.nat).setWord"
"(math/big.nat).rem" "math/big.alias"
"math/big.getNat" "(*sync.Pool).Get"
"math/big.getNat" "(math/big.nat).make"
"(math/big.nat).rem" "math/big.getNat"
"(math/big.nat).div" "(math/big.nat).cmp"
"(math/big.nat).set" "(math/big.nat).make"
"(math/big.nat).div" "(math/big.nat).set"
"(math/big.nat).divW" "(math/big.nat).set"
"(math/big.nat).divW" "(math/big.nat).make"
"math/bits.Div" "math/bits.Div32"
"math/bits.LeadingZeros64" "math/bits.Len64"
"math/bits.Div64" "math/bits.LeadingZeros64"
"math/bits.Div" "math/bits.Div64"
"math/big.divWVW" "math/bits.Div"
"math/bits.LeadingZeros" "math/bits.Len"
"math/big.nlz" "math/bits.LeadingZeros"
"math/big.reciprocalWord" "math/big.nlz"
"math/big.reciprocalWord" "math/bits.Div"
"math/big.divWVW" "math/big.reciprocalWord"
"math/big.divWW" "math/big.nlz"
"math/bits.Mul" "math/bits.Mul32"
"math/bits.Mul" "math/bits.Mul64"
"math/big.divWW" "math/bits.Mul"
"math/bits.Add" "math/bits.Add32"
"math/bits.Add" "math/bits.Add64"
"math/big.divWW" "math/bits.Add"
"math/big.divWW" "math/bits.Add"
"math/big.divWW" "math/bits.Mul"
"math/bits.Sub" "math/bits.Sub32"
"math/bits.Sub" "math/bits.Sub64"
"math/big.divWW" "math/bits.Sub"
"math/big.divWW" "math/bits.Sub"
"math/big.divWVW" "math/big.divWW"
"(math/big.nat).divW" "math/big.divWVW"
"(math/big.nat).divW" "(math/big.nat).norm"
"(math/big.nat).div" "(math/big.nat).divW"
"(math/big.nat).div" "(math/big.nat).setWord"
"(math/big.nat).divLarge" "math/big.nlz"
"(math/big.nat).divLarge" "math/big.getNat"
"(math/big.nat).divLarge" "math/big.shlVU"
"(math/big.nat).divLarge" "(math/big.nat).make"
"(math/big.nat).divLarge" "math/big.shlVU"
"(math/big.nat).divLarge" "math/big.alias"
"(math/big.nat).divLarge" "(math/big.nat).make"
"(math/big.nat).divBasic" "math/big.getNat"
"(math/big.nat).divBasic" "math/big.reciprocalWord"
"math/big.putNat" "(*sync.Pool).Put"
"(math/big.nat).divBasic" "math/big.putNat"
"(math/big.nat).divBasic" "math/big.divWW"
"math/big.mulWW" "math/bits.Mul"
"(math/big.nat).divBasic" "math/big.mulWW"
"(math/big.nat).divBasic" "math/big.mulAddVWW"
"(math/big.nat).divBasic" "math/big.greaterThan"
"(math/big.nat).divBasic" "math/big.mulWW"
"(math/big.nat).divBasic" "math/big.subVV"
"(math/big.nat).divBasic" "math/big.addVV"
"(math/big.nat).divLarge" "(math/big.nat).divBasic"
"(math/big.nat).divLarge" "math/big.putNat"
"(math/big.nat).divLarge" "(math/big.nat).norm"
"(math/big.nat).divLarge" "math/big.shrVU"
"(math/big.nat).divLarge" "(math/big.nat).norm"
"(math/big.nat).divRecursive" "math/bits.Len"
"(math/big.nat).divRecursive" "math/big.getNat"
"(math/big.nat).divRecursive" "(math/big.nat).clear"
"(math/big.nat).divRecursiveStep" "(math/big.nat).norm"
"(math/big.nat).divRecursiveStep" "(math/big.nat).norm"
"(math/big.nat).divRecursiveStep" "(math/big.nat).clear"
"(math/big.nat).divRecursiveStep" "(math/big.nat).divBasic"
"(math/big.nat).divRecursiveStep" "math/big.getNat"
"(math/big.nat).divRecursiveStep" "(math/big.nat).make"
"(math/big.nat).divRecursiveStep" "(math/big.nat).clear"
"(math/big.nat).divRecursiveStep" "(math/big.nat).divRecursiveStep"
"(math/big.nat).divRecursiveStep" "(math/big.nat).norm"
"(math/big.nat).divRecursiveStep" "(math/big.nat).make"
"(math/big.nat).divRecursiveStep" "(math/big.nat).clear"
"(math/big.nat).mul" "(math/big.nat).mul"
"(math/big.nat).mulAddWW" "(math/big.nat).setWord"
"(math/big.nat).mulAddWW" "(math/big.nat).make"
"(math/big.nat).mulAddWW" "math/big.mulAddVWW"
"(math/big.nat).mulAddWW" "(math/big.nat).norm"
"(math/big.nat).mul" "(math/big.nat).mulAddWW"
"(math/big.nat).mul" "math/big.alias"
"(math/big.nat).mul" "math/big.alias"
"(math/big.nat).mul" "(math/big.nat).make"
"math/big.basicMul" "(math/big.nat).clear"
"math/big.basicMul" "math/big.addMulVVW"
"(math/big.nat).mul" "math/big.basicMul"
"(math/big.nat).mul" "(math/big.nat).norm"
"(math/big.nat).mul" "math/big.karatsubaLen"
"(math/big.nat).mul" "(math/big.nat).make"
"math/big.karatsuba" "math/big.basicMul"
"math/big.karatsuba" "math/big.karatsuba"
"math/big.karatsuba" "math/big.karatsuba"
"math/big.karatsuba" "math/big.subVV"
"math/big.karatsuba" "math/big.subVV"
"math/big.karatsuba" "math/big.subVV"
"math/big.karatsuba" "math/big.subVV"
"math/big.karatsuba" "math/big.karatsuba"
"math/big.karatsubaAdd" "math/big.addVV"
"math/big.karatsubaAdd" "math/big.addVW"
"math/big.karatsuba" "math/big.karatsubaAdd"
"math/big.karatsuba" "math/big.karatsubaAdd"
"math/big.karatsuba" "math/big.karatsubaAdd"
"math/big.karatsubaSub" "math/big.subVV"
"math/big.karatsubaSub" "math/big.subVW"
"math/big.karatsuba" "math/big.karatsubaSub"
"(math/big.nat).mul" "math/big.karatsuba"
"(math/big.nat).mul" "(math/big.nat).clear"
"(math/big.nat).mul" "math/big.getNat"
"(math/big.nat).mul" "(math/big.nat).norm"
"(math/big.nat).mul" "(math/big.nat).mul"
"math/big.addAt" "math/big.addVV"
"math/big.addAt" "math/big.addVW"
"(math/big.nat).mul" "math/big.addAt"
"(math/big.nat).mul" "(math/big.nat).norm"
"(math/big.nat).mul" "(math/big.nat).norm"
"(math/big.nat).mul" "math/big.putNat"
"(math/big.nat).mul" "(math/big.nat).norm"
"(math/big.nat).mul" "(math/big.nat).mul"
"(math/big.nat).mul" "math/big.addAt"
"(math/big.nat).mul" "(math/big.nat).mul"
"(math/big.nat).mul" "math/big.addAt"
"(math/big.nat).divRecursiveStep" "(math/big.nat).mul"
"(math/big.nat).divRecursiveStep" "(math/big.nat).clear"
"(math/big.nat).divRecursiveStep" "(math/big.nat).norm"
"(math/big.nat).divRecursiveStep" "(math/big.nat).divRecursiveStep"
"(math/big.nat).divRecursiveStep" "(math/big.nat).norm"
"(math/big.nat).divRecursiveStep" "(math/big.nat).make"
"(math/big.nat).divRecursiveStep" "(math/big.nat).clear"
"(math/big.nat).divRecursiveStep" "(math/big.nat).mul"
"(math/big.nat).divRecursiveStep" "(math/big.nat).norm"
"(math/big.nat).divRecursiveStep" "(math/big.nat).cmp"
"(math/big.nat).divRecursiveStep" "(math/big.nat).norm"
"(math/big.nat).divRecursiveStep" "(math/big.nat).cmp"
"(math/big.nat).divRecursiveStep" "math/big.subVW"
"(math/big.nat).divRecursiveStep" "math/big.subVV"
"(math/big.nat).divRecursiveStep" "math/big.subVW"
"(math/big.nat).divRecursiveStep" "math/big.addAt"
"(math/big.nat).divRecursiveStep" "math/big.subVV"
"(math/big.nat).divRecursiveStep" "math/big.subVW"
"(math/big.nat).divRecursiveStep" "math/big.addAt"
"(math/big.nat).divRecursiveStep" "(math/big.nat).norm"
"(math/big.nat).divRecursiveStep" "(math/big.nat).cmp"
"(math/big.nat).divRecursiveStep" "(math/big.nat).norm"
"(math/big.nat).divRecursiveStep" "(math/big.nat).cmp"
"(math/big.nat).divRecursiveStep" "math/big.subVW"
"(math/big.nat).divRecursiveStep" "math/big.subVV"
"(math/big.nat).divRecursiveStep" "math/big.subVW"
"(math/big.nat).divRecursiveStep" "math/big.addAt"
"(math/big.nat).divRecursiveStep" "math/big.subVV"
"(math/big.nat).divRecursiveStep" "math/big.subVW"
"(math/big.nat).divRecursiveStep" "(math/big.nat).norm"
"(math/big.nat).divRecursiveStep" "math/big.addAt"
"(math/big.nat).divRecursive" "(math/big.nat).divRecursiveStep"
"(math/big.nat).divRecursive" "math/big.putNat"
"(math/big.nat).divRecursive" "math/big.putNat"
"(math/big.nat).divLarge" "(math/big.nat).divRecursive"
"(math/big.nat).div" "(math/big.nat).divLarge"
"(math/big.nat).rem" "(math/big.nat).div"
"(math/big.nat).rem" "math/big.putNat"
"(math/big.nat).expNN" "(math/big.nat).rem"
"(math/big.nat).expNN" "(math/big.nat).set"
"(math/big.nat).expNN" "(math/big.nat).make"
"(math/big.nat).expNN" "(math/big.nat).set"
"(math/big.nat).expNN" "math/big.nlz"
"(math/big.nat).expNNMontgomery" "(math/big.nat).div"
"(math/big.nat).expNNMontgomery" "(math/big.nat).setWord"
"(math/big.nat).shl" "math/big.same"
"(math/big.nat).shl" "math/big.alias"
"(math/big.nat).shl" "(math/big.nat).set"
"(math/big.nat).shl" "(math/big.nat).make"
"(math/big.nat).shl" "math/big.shlVU"
"(math/big.nat).shl" "(math/big.nat).clear"
"(math/big.nat).shl" "(math/big.nat).norm"
"(math/big.nat).expNNMontgomery" "(math/big.nat).shl"
"(math/big.nat).expNNMontgomery" "(math/big.nat).div"
"(math/big.nat).expNNMontgomery" "(math/big.nat).make"
"(math/big.nat).montgomery" "(math/big.nat).make"
"(math/big.nat).montgomery" "(math/big.nat).clear"
"(math/big.nat).montgomery" "math/big.addMulVVW"
"(math/big.nat).montgomery" "math/big.addMulVVW"
"(math/big.nat).montgomery" "math/big.subVV"
"(math/big.nat).expNNMontgomery" "(math/big.nat).montgomery"
"(math/big.nat).expNNMontgomery" "(math/big.nat).montgomery"
"(math/big.nat).expNNMontgomery" "(math/big.nat).montgomery"
"(math/big.nat).expNNMontgomery" "(math/big.nat).make"
"(math/big.nat).expNNMontgomery" "(math/big.nat).make"
"(math/big.nat).expNNMontgomery" "(math/big.nat).montgomery"
"(math/big.nat).expNNMontgomery" "(math/big.nat).cmp"
"(math/big.nat).expNNMontgomery" "(math/big.nat).montgomery"
"(math/big.nat).expNNMontgomery" "(math/big.nat).montgomery"
"(math/big.nat).expNNMontgomery" "(math/big.nat).montgomery"
"(math/big.nat).expNNMontgomery" "(math/big.nat).montgomery"
"(math/big.nat).expNNMontgomery" "(math/big.nat).montgomery"
"(math/big.nat).sub" "(math/big.nat).set"
"(math/big.nat).sub" "(math/big.nat).make"
"(math/big.nat).sub" "math/big.subVV"
"(math/big.nat).sub" "math/big.subVW"
"(math/big.nat).sub" "(math/big.nat).norm"
"(math/big.nat).expNNMontgomery" "(math/big.nat).sub"
"(math/big.nat).expNNMontgomery" "(math/big.nat).cmp"
"(math/big.nat).expNNMontgomery" "(math/big.nat).norm"
"(math/big.nat).expNNMontgomery" "(math/big.nat).div"
"(math/big.nat).expNN" "(math/big.nat).expNNMontgomery"
"(math/big.nat).isPow2" "math/bits.TrailingZeros"
"(math/big.nat).expNN" "(math/big.nat).isPow2"
"(math/big.nat).expNNWindowed" "(math/big.nat).setWord"
"(math/big.nat).expNNWindowed" "(math/big.nat).setWord"
"(math/big.nat).expNNWindowed" "math/big.getNat"
"(math/big.nat).expNNWindowed" "math/big.getNat"
"(math/big.nat).expNNWindowed" "(math/big.nat).set"
"(math/big.nat).trunc" "(math/big.nat).set"
"(math/big.nat).trunc" "(math/big.nat).make"
"(math/big.nat).trunc" "(math/big.nat).norm"
"(math/big.nat).expNNWindowed" "(math/big.nat).trunc"
"(math/big.nat).sqr" "(math/big.nat).make"
"(math/big.nat).sqr" "math/big.mulWW"
"(math/big.nat).sqr" "(math/big.nat).norm"
"(math/big.nat).sqr" "math/big.alias"
"(math/big.nat).sqr" "(math/big.nat).make"
"(math/big.nat).sqr" "math/big.basicMul"
"(math/big.nat).sqr" "(math/big.nat).norm"
"(math/big.nat).sqr" "(math/big.nat).make"
"math/big.basicSqr" "math/big.getNat"
"math/big.basicSqr" "(math/big.nat).clear"
"math/big.basicSqr" "math/big.mulWW"
"math/big.basicSqr" "math/big.mulWW"
"math/big.basicSqr" "math/big.addMulVVW"
"math/big.basicSqr" "math/big.shlVU"
"math/big.basicSqr" "math/big.addVV"
"math/big.basicSqr" "math/big.putNat"
"(math/big.nat).sqr" "math/big.basicSqr"
"(math/big.nat).sqr" "(math/big.nat).norm"
"(math/big.nat).sqr" "math/big.karatsubaLen"
"(math/big.nat).sqr" "(math/big.nat).make"
"math/big.karatsubaSqr" "math/big.basicSqr"
"math/big.karatsubaSqr" "math/big.karatsubaSqr"
"math/big.karatsubaSqr" "math/big.karatsubaSqr"
"math/big.karatsubaSqr" "math/big.subVV"
"math/big.karatsubaSqr" "math/big.subVV"
"math/big.karatsubaSqr" "math/big.karatsubaSqr"
"math/big.karatsubaSqr" "math/big.karatsubaAdd"
"math/big.karatsubaSqr" "math/big.karatsubaAdd"
"math/big.karatsubaSqr" "math/big.karatsubaSub"
"(math/big.nat).sqr" "math/big.karatsubaSqr"
"(math/big.nat).sqr" "(math/big.nat).clear"
"(math/big.nat).sqr" "math/big.getNat"
"(math/big.nat).sqr" "(math/big.nat).norm"
"(math/big.nat).sqr" "(math/big.nat).mul"
"(math/big.nat).sqr" "math/big.addAt"
"(math/big.nat).sqr" "math/big.addAt"
"(math/big.nat).sqr" "(math/big.nat).sqr"
"(math/big.nat).sqr" "math/big.addAt"
"(math/big.nat).sqr" "math/big.putNat"
"(math/big.nat).sqr" "(math/big.nat).norm"
"(math/big.nat).expNNWindowed" "(math/big.nat).sqr"
"(math/big.nat).expNNWindowed" "(math/big.nat).trunc"
"(math/big.nat).expNNWindowed" "(math/big.nat).mul"
"(math/big.nat).expNNWindowed" "(math/big.nat).trunc"
"(math/big.nat).expNNWindowed" "(math/big.nat).setWord"
"(math/big.nat).expNNWindowed" "math/big.putNat"
"(math/big.nat).expNNWindowed" "(math/big.nat).sqr"
"(math/big.nat).expNNWindowed" "(math/big.nat).trunc"
"(math/big.nat).expNNWindowed" "(math/big.nat).sqr"
"(math/big.nat).expNNWindowed" "(math/big.nat).trunc"
"(math/big.nat).expNNWindowed" "(math/big.nat).sqr"
"(math/big.nat).expNNWindowed" "(math/big.nat).trunc"
"(math/big.nat).expNNWindowed" "(math/big.nat).sqr"
"(math/big.nat).expNNWindowed" "(math/big.nat).trunc"
"(math/big.nat).expNNWindowed" "(math/big.nat).mul"
"(math/big.nat).expNNWindowed" "(math/big.nat).trunc"
"(math/big.nat).expNNWindowed" "math/big.putNat"
"(math/big.nat).expNNWindowed" "(math/big.nat).norm"
"(math/big.nat).expNN" "(math/big.nat).expNNWindowed"
"(math/big.nat).trailingZeroBits" "math/bits.TrailingZeros"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).trailingZeroBits"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).shl"
"(math/big.nat).shr" "math/big.same"
"(math/big.nat).shr" "math/big.alias"
"(math/big.nat).shr" "(math/big.nat).set"
"(math/big.nat).shr" "(math/big.nat).make"
"(math/big.nat).shr" "math/big.shrVU"
"(math/big.nat).shr" "(math/big.nat).norm"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).shr"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).expNN"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).expNN"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).set"
"(math/big.nat).subMod2N" "(math/big.nat).bitLen"
"(math/big.nat).subMod2N" "math/big.alias"
"(math/big.nat).subMod2N" "(math/big.nat).bitLen"
"(math/big.nat).subMod2N" "(math/big.nat).trunc"
"(math/big.nat).subMod2N" "(math/big.nat).trunc"
"(math/big.nat).subMod2N" "math/big.alias"
"(math/big.nat).subMod2N" "(math/big.nat).cmp"
"(math/big.nat).subMod2N" "(math/big.nat).trunc"
"(math/big.nat).subMod2N" "(math/big.nat).trunc"
"(math/big.nat).subMod2N" "(math/big.nat).sub"
"(math/big.nat).subMod2N" "(math/big.nat).sub"
"(math/big.nat).subMod2N" "(math/big.nat).trunc"
"(math/big.nat).add" "(math/big.nat).add"
"(math/big.nat).add" "(math/big.nat).set"
"(math/big.nat).add" "(math/big.nat).make"
"(math/big.nat).add" "math/big.addVV"
"(math/big.nat).add" "math/big.addVW"
"(math/big.nat).add" "(math/big.nat).norm"
"(math/big.nat).subMod2N" "(math/big.nat).add"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).subMod2N"
"(*math/big.Int).Set" "(math/big.nat).set"
"(*math/big.Int).Neg" "(*math/big.Int).Set"
"(*math/big.Int).ModInverse" "(*math/big.Int).Neg"
"(*math/big.Int).Mod" "(*math/big.Int).Set"
"(*math/big.Int).QuoRem" "(math/big.nat).div"
"(*math/big.Int).Mod" "(*math/big.Int).QuoRem"
"(*math/big.Int).Mod" "math/big.alias"
"(*math/big.Int).Sub" "(math/big.nat).add"
"(*math/big.Int).Sub" "(math/big.nat).cmp"
"(*math/big.Int).Sub" "(math/big.nat).sub"
"(*math/big.Int).Sub" "(math/big.nat).sub"
"(*math/big.Int).Mod" "(*math/big.Int).Sub"
"(*math/big.Int).Add" "(math/big.nat).add"
"(*math/big.Int).Add" "(math/big.nat).cmp"
"(*math/big.Int).Add" "(math/big.nat).sub"
"(*math/big.Int).Add" "(math/big.nat).sub"
"(*math/big.Int).Mod" "(*math/big.Int).Add"
"(*math/big.Int).ModInverse" "(*math/big.Int).Mod"
"(*math/big.Int).Abs" "(*math/big.Int).Set"
"(*math/big.Int).lehmerGCD" "(*math/big.Int).Abs"
"(*math/big.Int).lehmerGCD" "(*math/big.Int).Abs"
"(math/big.nat).setUint64" "(math/big.nat).setWord"
"(math/big.nat).setUint64" "(math/big.nat).make"
"(*math/big.Int).SetInt64" "(math/big.nat).setUint64"
"(*math/big.Int).lehmerGCD" "(*math/big.Int).SetInt64"
"(*math/big.Int).lehmerGCD" "(math/big.nat).cmp"
"math/big.lehmerSimulate" "math/big.nlz"
"(*math/big.Int).lehmerGCD" "math/big.lehmerSimulate"
"math/big.lehmerUpdate" "(math/big.nat).setWord"
"math/big.lehmerUpdate" "(math/big.nat).setWord"
"(*math/big.Int).Mul" "(math/big.nat).sqr"
"(*math/big.Int).Mul" "(math/big.nat).mul"
"math/big.lehmerUpdate" "(*math/big.Int).Mul"
"math/big.lehmerUpdate" "(*math/big.Int).Mul"
"math/big.lehmerUpdate" "(math/big.nat).setWord"
"math/big.lehmerUpdate" "(math/big.nat).setWord"
"math/big.lehmerUpdate" "(*math/big.Int).Mul"
"math/big.lehmerUpdate" "(*math/big.Int).Mul"
"math/big.lehmerUpdate" "(*math/big.Int).Add"
"math/big.lehmerUpdate" "(*math/big.Int).Add"
"(*math/big.Int).lehmerGCD" "math/big.lehmerUpdate"
"math/big.euclidUpdate" "(*math/big.Int).QuoRem"
"math/big.euclidUpdate" "(*math/big.Int).Set"
"math/big.euclidUpdate" "(*math/big.Int).Mul"
"math/big.euclidUpdate" "(*math/big.Int).Sub"
"math/big.euclidUpdate" "(*math/big.Int).Set"
"(*math/big.Int).lehmerGCD" "math/big.euclidUpdate"
"(*math/big.Int).lehmerGCD" "math/big.lehmerUpdate"
"(*math/big.Int).lehmerGCD" "math/big.euclidUpdate"
"(*math/big.Int).lehmerGCD" "(math/big.nat).setWord"
"(*math/big.Int).lehmerGCD" "(math/big.nat).setWord"
"(*math/big.Int).lehmerGCD" "(*math/big.Int).Mul"
"(*math/big.Int).lehmerGCD" "(*math/big.Int).Mul"
"(*math/big.Int).lehmerGCD" "(*math/big.Int).Add"
"(*math/big.Int).lehmerGCD" "(*math/big.Int).Set"
"(*math/big.Int).lehmerGCD" "(*math/big.Int).Mul"
"(*math/big.Int).lehmerGCD" "(*math/big.Int).Sub"
"(*math/big.Int).Div" "(*math/big.Int).QuoRem"
"(*math/big.Int).Div" "(*math/big.Int).Add"
"(*math/big.Int).Div" "(*math/big.Int).Sub"
"(*math/big.Int).lehmerGCD" "(*math/big.Int).Div"
"(*math/big.Int).GCD" "(*math/big.Int).lehmerGCD"
"(*math/big.Int).GCD" "(*math/big.Int).Set"
"(*math/big.Int).GCD" "(*math/big.Int).Set"
"(*math/big.Int).SetUint64" "(math/big.nat).setUint64"
"(*math/big.Int).GCD" "(*math/big.Int).SetUint64"
"(*math/big.Int).GCD" "(*math/big.Int).SetUint64"
"(*math/big.Int).GCD" "(*math/big.Int).SetUint64"
"(*math/big.Int).GCD" "(*math/big.Int).SetUint64"
"(*math/big.Int).ModInverse" "(*math/big.Int).GCD"
"(*math/big.Int).Cmp" "(math/big.nat).cmp"
"(*math/big.Int).ModInverse" "(*math/big.Int).Cmp"
"(*math/big.Int).ModInverse" "(*math/big.Int).Add"
"(*math/big.Int).ModInverse" "(*math/big.Int).Set"
"(math/big.nat).modInverse" "(*math/big.Int).ModInverse"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).modInverse"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).mul"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).trunc"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).mul"
"(math/big.nat).expNNMontgomeryEven" "(math/big.nat).add"
"(math/big.nat).expNN" "(math/big.nat).expNNMontgomeryEven"
"(math/big.nat).expNN" "(math/big.nat).sqr"
"(math/big.nat).expNN" "(math/big.nat).mul"
"(math/big.nat).expNN" "(math/big.nat).div"
"(math/big.nat).expNN" "(math/big.nat).norm"
"(math/big.nat).expNN" "(math/big.nat).sqr"
"(math/big.nat).expNN" "(math/big.nat).mul"
"(math/big.nat).expNN" "(math/big.nat).div"
"(math/big.nat).expWW" "(math/big.nat).expNN"
"math/big.divisors" "(math/big.nat).expWW"
"math/big.divisors" "(math/big.nat).set"
"math/big.divisors" "(math/big.nat).sqr"
"math/big.divisors" "(math/big.nat).set"
"math/big.divisors" "(math/big.nat).bitLen"
"math/big.divisors" "math/big.mulAddVWW"
"math/big.divisors" "(*sync.Mutex).Unlock"
"(math/big.nat).itoa" "math/big.divisors"
"(math/big.nat).itoa" "(math/big.nat).set"
"(math/big.nat).convertWords" "(math/big.nat).bitLen"
"(math/big.nat).convertWords" "(math/big.nat).div"
"(math/big.nat).convertWords" "(math/big.nat).convertWords"
"(math/big.nat).convertWords" "(math/big.nat).cmp"
"(math/big.nat).convertWords" "(math/big.nat).divW"
"(math/big.nat).convertWords" "(math/big.nat).divW"
"(math/big.nat).itoa" "(math/big.nat).convertWords"
"(math/big.nat).utoa" "(math/big.nat).itoa"
"(*math/big.Float).fmtB" "(math/big.nat).utoa"
"(*math/big.Float).fmtB" "(math/big.nat).shl"
"(*math/big.Float).fmtB" "(math/big.nat).shr"
"strconv.AppendInt" "strconv.small"
"strconv.AppendInt" "strconv.formatBits"
"(*math/big.Float).fmtB" "strconv.AppendInt"
"(*math/big.Float).Append" "(*math/big.Float).fmtB"
"(*math/big.Float).fmtP" "(math/big.nat).utoa"
"bytes.TrimRight" "bytes.trimRightByte"
"bytes.TrimRight" "bytes.makeASCIISet"
"bytes.trimRightASCII" "(*bytes.asciiSet).contains"
"bytes.TrimRight" "bytes.trimRightASCII"
"unicode/utf8.DecodeLastRune" "unicode/utf8.RuneStart"
"unicode/utf8.DecodeLastRune" "unicode/utf8.DecodeRune"
"bytes.trimRightUnicode" "unicode/utf8.DecodeLastRune"
"bytes.trimRightUnicode" "bytes.containsRune"
"bytes.TrimRight" "bytes.trimRightUnicode"
"(*math/big.Float).fmtP" "bytes.TrimRight"
"(*math/big.Float).fmtP" "strconv.AppendInt"
"(*math/big.Float).Append" "(*math/big.Float).fmtP"
"(*math/big.Float).MinPrec" "(math/big.nat).trailingZeroBits"
"(*math/big.Float).fmtX" "(*math/big.Float).MinPrec"
"(*math/big.Float).fmtX" "(*math/big.Float).SetPrec"
"(*math/big.Float).fmtX" "(*math/big.Float).SetMode"
"(*math/big.Float).Set" "(*math/big.Float).validate"
"(*math/big.Float).Set" "(math/big.nat).set"
"(*math/big.Float).Set" "(*math/big.Float).round"
"(*math/big.Float).fmtX" "(*math/big.Float).Set"
"(*math/big.Float).fmtX" "(math/big.nat).utoa"
"(*math/big.Float).fmtX" "(math/big.nat).shl"
"(*math/big.Float).fmtX" "(math/big.nat).shr"
"(*math/big.Float).fmtX" "strconv.AppendInt"
"(*math/big.Float).Append" "(*math/big.Float).fmtX"
"(*math/big.Float).Append" "(math/big.nat).bitLen"
"(*math/big.decimal).init" "(math/big.nat).trailingZeroBits"
"(*math/big.decimal).init" "(math/big.nat).shr"
"(*math/big.decimal).init" "(math/big.nat).shl"
"(*math/big.decimal).init" "(math/big.nat).utoa"
"math/big.shr" "math/big.trim"
"(*math/big.decimal).init" "math/big.shr"
"(*math/big.decimal).init" "math/big.shr"
"(*math/big.Float).Append" "(*math/big.decimal).init"
"math/big.roundShortest" "(math/big.nat).set"
"math/big.roundShortest" "(math/big.nat).bitLen"
"math/big.roundShortest" "(math/big.nat).bitLen"
"math/big.roundShortest" "(math/big.nat).sub"
"math/big.roundShortest" "(*math/big.decimal).init"
"math/big.roundShortest" "(math/big.nat).add"
"math/big.roundShortest" "(*math/big.decimal).init"
"math/big.roundShortest" "(math/big.nat).shl"
"math/big.roundShortest" "(math/big.nat).shr"
"math/big.roundShortest" "(*math/big.decimal).at"
"math/big.roundShortest" "(*math/big.decimal).at"
"(*math/big.decimal).round" "math/big.shouldRoundUp"
"(*math/big.decimal).round" "(*math/big.decimal).roundUp"
"(*math/big.decimal).roundDown" "math/big.trim"
"(*math/big.decimal).round" "(*math/big.decimal).roundDown"
"math/big.roundShortest" "(*math/big.decimal).round"
"math/big.roundShortest" "(*math/big.decimal).roundDown"
"math/big.roundShortest" "(*math/big.decimal).roundUp"
"(*math/big.Float).Append" "math/big.roundShortest"
"(*math/big.Float).Append" "(*math/big.decimal).round"
"(*math/big.Float).Append" "(*math/big.decimal).round"
"(*math/big.Float).Append" "(*math/big.decimal).round"
"math/big.fmtE" "strconv.AppendInt"
"(*math/big.Float).Append" "math/big.fmtE"
"math/big.fmtF" "(*math/big.decimal).at"
"(*math/big.Float).Append" "math/big.fmtF"
"(*math/big.Float).Append" "math/big.fmtE"
"(*math/big.Float).Append" "math/big.fmtF"
"(*math/big.Float).Text" "(*math/big.Float).Append"
"(*math/big.Float).validate0" "(*math/big.Float).Text"
"(*math/big.Float).validate0" "fmt.Sprintf"
"(*math/big.Float).validate" "(*math/big.Float).validate0"
"(*math/big.Float).round" "(*math/big.Float).validate"
"(*math/big.Float).round" "(math/big.nat).bit"
"(*math/big.Float).round" "(math/big.nat).sticky"
"(*math/big.Float).round" "math/big.makeAcc"
"(*math/big.Float).round" "math/big.addVW"
"(*math/big.Float).round" "math/big.shrVU"
"(*math/big.Float).round" "(*math/big.Float).validate"
"(*math/big.Float).SetPrec" "(*math/big.Float).round"
"go/constant.newFloat" "(*math/big.Float).SetPrec"
"go/constant.rtof" "go/constant.newFloat"
"(*math/big.Rat).IsInt" "(math/big.nat).cmp"
"(*math/big.Float).SetRat" "(*math/big.Rat).IsInt"
"(*math/big.Float).SetRat" "(*math/big.Rat).Num"
"(*math/big.Int).BitLen" "(math/big.nat).bitLen"
"(*math/big.Float).SetInt" "(*math/big.Int).BitLen"
"(*math/big.Float).SetInt" "math/big.umax32"
"(*math/big.Float).SetInt" "(math/big.nat).set"
"math/big.fnorm" "math/big.nlz"
"math/big.fnorm" "math/big.shlVU"
"(*math/big.Float).SetInt" "math/big.fnorm"
"(*math/big.Float).setExpAndRound" "math/big.makeAcc"
"(*math/big.Float).setExpAndRound" "math/big.makeAcc"
"(*math/big.Float).setExpAndRound" "(*math/big.Float).round"
"(*math/big.Float).SetInt" "(*math/big.Float).setExpAndRound"
"(*math/big.Float).SetRat" "(*math/big.Float).SetInt"
"(*math/big.Float).SetRat" "(*math/big.Rat).Num"
"(*math/big.Float).SetRat" "(*math/big.Float).SetInt"
"(*math/big.Float).SetRat" "(*math/big.Rat).Denom"
"(*math/big.Float).SetRat" "(*math/big.Float).SetInt"
"(*math/big.Float).SetRat" "math/big.umax32"
"(*math/big.Float).Quo" "(*math/big.Float).validate"
"(*math/big.Float).Quo" "(*math/big.Float).validate"
"(*math/big.Float).Quo" "math/big.umax32"
"(*math/big.Float).uquo" "math/big.validateBinaryOperands"
"(*math/big.Float).uquo" "(math/big.nat).div"
"(*math/big.Float).uquo" "math/big.fnorm"
"(*math/big.Float).uquo" "(*math/big.Float).setExpAndRound"
"(*math/big.Float).Quo" "(*math/big.Float).uquo"
"(*math/big.Float).SetRat" "(*math/big.Float).Quo"
"go/constant.rtof" "(*math/big.Float).SetRat"
"(go/constant.ratVal).String" "go/constant.rtof"
"(go/constant.floatVal).String" "(*math/big.Float).IsInf"
"(*math/big.Float).String" "(*math/big.Float).Text"
"(go/constant.floatVal).String" "(*math/big.Float).String"
"(*math/big.Float).Float64" "(*math/big.Float).validate"
"(*math/big.Float).Float64" "(*math/big.Float).Set"
"(*math/big.Float).Float64" "(math/big.nat).sticky"
"(*math/big.Float).Float64" "math.Inf"
"(*math/big.Float).Float64" "math.Inf"
"(*math/big.Float).Float64" "math/big.msb64"
"(*math/big.Float).Float64" "math.Float64frombits"
"(*math/big.Float).Float64" "math/big.msb64"
"(*math/big.Float).Float64" "math.Inf"
"(*math/big.Float).Float64" "math.Inf"
"(go/constant.floatVal).String" "(*math/big.Float).Float64"
"(*math/big.Float).Sign" "(*math/big.Float).validate"
"(go/constant.floatVal).String" "(*math/big.Float).Sign"
"(go/constant.floatVal).String" "fmt.Sprintf"
"(*math/big.Float).IsInt" "(*math/big.Float).validate"
"(*math/big.Float).IsInt" "(*math/big.Float).MinPrec"
"(go/constant.floatVal).String" "(*math/big.Float).IsInt"
"(*math/big.Float).MantExp" "(*math/big.Float).validate"
"(*math/big.Float).Copy" "(*math/big.Float).validate"
"(*math/big.Float).Copy" "(math/big.nat).set"
"(*math/big.Float).MantExp" "(*math/big.Float).Copy"
"(go/constant.floatVal).String" "(*math/big.Float).MantExp"
"(go/constant.floatVal).String" "(*math/big.Float).Float64"
"math.Pow" "math.archPow"
"math.pow" "math.Abs"
"math.Modf" "math.archModf"
"math.modf" "math.Float64bits"
"math.modf" "math.Modf"
"math.modf" "math.Float64frombits"
"math.Modf" "math.modf"
"math.pow" "math.Modf"
"math.pow" "math.NaN"
"math.pow" "math.IsNaN"
"math.pow" "math.IsNaN"
"math.pow" "math.IsInf"
"math.Signbit" "math.Float64bits"
"math.pow" "math.Signbit"
"math.pow" "math.Signbit"
"math.pow" "math.Inf"
"math.pow" "math.Inf"
"math.isOddInt" "math.Abs"
"math.isOddInt" "math.Modf"
"math.pow" "math.isOddInt"
"math.pow" "math.isOddInt"
"math.pow" "math.IsInf"
"math.pow" "math.IsInf"
"math.pow" "math.Abs"
"math.pow" "math.IsInf"
"math.pow" "math.Inf"
"math.sqrt" "math.NaN"
"math.sqrt" "math.IsInf"
"math.sqrt" "math.IsNaN"
"math.sqrt" "math.Float64bits"
"math.sqrt" "math.Float64frombits"
"math.Sqrt" "math.sqrt"
"math.pow" "math.Sqrt"
"math.pow" "math.Pow"
"math.pow" "math.Inf"
"math.pow" "math.Sqrt"
"math.pow" "math.NaN"
"math.pow" "math.Abs"
"math.pow" "math.Inf"
"math.pow" "math.Frexp"
"math.pow" "math.Log"
"math.Exp" "math.archExp"
"math.exp" "math.IsNaN"
"math.exp" "math.IsInf"
"math.exp" "math.IsInf"
"math.exp" "math.Inf"
"math.Ldexp" "math.archLdexp"
"math.ldexp" "math.IsInf"
"math.ldexp" "math.normalize"
"math.ldexp" "math.Float64bits"
"math.ldexp" "math.IsNaN"
"math.Copysign" "math.Float64bits"
"math.Copysign" "math.Float64bits"
"math.Copysign" "math.Float64frombits"
"math.ldexp" "math.Copysign"
"math.ldexp" "math.Inf"
"math.ldexp" "math.Inf"
"math.ldexp" "math.Float64frombits"
"math.Ldexp" "math.ldexp"
"math.expmulti" "math.Ldexp"
"math.exp" "math.expmulti"
"math.Exp" "math.exp"
"math.pow" "math.Exp"
"math.pow" "math.Ldexp"
"math.Pow" "math.pow"
"(go/constant.floatVal).String" "math.Pow"
"(go/constant.floatVal).String" "math.Abs"
"(go/constant.floatVal).String" "math.IsInf"
"(go/constant.floatVal).String" "fmt.Sprintf"
"(go/constant.floatVal).String" "strings.IndexByte"
"(go/constant.floatVal).String" "fmt.Sprintf"
"(go/constant.ratVal).String" "(go/constant.floatVal).String"
"go/types.operandString" "(go/constant.ratVal).String"
"(*go/constant.stringVal).string" "(*sync.Mutex).Lock"
"(*go/constant.stringVal).appendReverse" "(*sync.Mutex).Lock"
"(*go/constant.stringVal).appendReverse" "(*go/constant.stringVal).appendReverse"
"(*go/constant.stringVal).appendReverse" "(*sync.Mutex).Unlock"
"(*go/constant.stringVal).appendReverse" "(*sync.Mutex).Unlock"
"(*go/constant.stringVal).appendReverse" "(*sync.Mutex).Lock"
"(*go/constant.stringVal).appendReverse" "(*sync.Mutex).Unlock"
"(*go/constant.stringVal).string" "(*go/constant.stringVal).appendReverse"
"(*go/constant.stringVal).string" "go/constant.reverse"
"(*go/constant.stringVal).string" "strings.Join"
"(*go/constant.stringVal).string" "(*sync.Mutex).Unlock"
"(*go/constant.stringVal).String" "(*go/constant.stringVal).string"
"(*go/constant.stringVal).String" "strconv.Quote"
"(*go/constant.stringVal).String" "unicode/utf8.RuneCountInString"
"(*go/constant.stringVal).String" "unicode/utf8.DecodeRuneInString"
"go/types.operandString" "(*go/constant.stringVal).String"
"go/types.operandString" "(go/constant.floatVal).String"
"go/types.operandString" "(go/constant.unknownVal).String"
"(go/constant.int64Val).String" "strconv.FormatInt"
"go/types.operandString" "(go/constant.int64Val).String"
"(go/constant.boolVal).String" "strconv.FormatBool"
"go/types.operandString" "(go/constant.boolVal).String"
"go/types.operandString" "(*bytes.Buffer).WriteString"
"go/types.operandString" "(*bytes.Buffer).WriteString"
"go/types.operandString" "(*bytes.Buffer).WriteString"
"go/types.isUntyped" "go/types.isTyped"
"go/types.operandString" "go/types.isUntyped"
"go/types.operandString" "(*bytes.Buffer).WriteString"
"go/types.operandString" "(*bytes.Buffer).WriteByte"
"go/types.operandString" "(go/constant.ratVal).String"
"go/types.operandString" "(*go/constant.stringVal).String"
"go/types.operandString" "(go/constant.floatVal).String"
"go/types.operandString" "(go/constant.unknownVal).String"
"go/types.operandString" "(go/constant.int64Val).String"
"go/types.operandString" "(go/constant.boolVal).String"
"go/types.operandString" "(*bytes.Buffer).WriteByte"
"go/types.operandString" "(*bytes.Buffer).WriteString"
"go/types.operandString" "go/types.isValid"
"go/types.isGeneric" "go/types.asNamed"
"go/types.isGeneric" "(*go/types.Named).TypeParams"
"go/types.isGeneric" "(*go/types.TypeParamList).Len"
"go/types.operandString" "go/types.isGeneric"
"go/types.operandString" "(*bytes.Buffer).WriteString"
"go/types.operandString" "(*bytes.Buffer).WriteString"
"go/types.operandString" "go/types.WriteType"
"go/types.operandString" "(*bytes.Buffer).WriteString"
"go/types.operandString" "go/types.WriteType"
"go/types.hasEmptyTypeset" "go/types.Unalias"
"go/types.safeUnderlying" "go/types.asNamed"
"go/types.safeUnderlying" "(*go/types.TypeParam).Underlying"
"go/types.safeUnderlying" "(*go/types.Tuple).Underlying"
"go/types.safeUnderlying" "(*go/types.Basic).Underlying"
"go/types.safeUnderlying" "(*go/types.Signature).Underlying"
"go/types.safeUnderlying" "(*go/types.Named).Underlying"
"go/types.safeUnderlying" "(*go/types.Union).Underlying"
"go/types.safeUnderlying" "(*go/types.Interface).Underlying"
"go/types.safeUnderlying" "(*go/types.Struct).Underlying"
"go/types.safeUnderlying" "(*go/types.Pointer).Underlying"
"go/types.safeUnderlying" "(*go/types.Array).Underlying"
"go/types.safeUnderlying" "(*go/types.Alias).Underlying"
"go/types.safeUnderlying" "(*go/types.Slice).Underlying"
"go/types.safeUnderlying" "(*go/types.Map).Underlying"
"go/types.safeUnderlying" "(*go/types.Chan).Underlying"
"go/types.safeUnderlying" "(golang.org/x/tools/internal/gcimporter.anyType).Underlying"
"go/types.hasEmptyTypeset" "go/types.safeUnderlying"
"(*go/types._TypeSet).IsEmpty" "(go/types.termlist).isEmpty"
"go/types.hasEmptyTypeset" "(*go/types._TypeSet).IsEmpty"
"go/types.operandString" "go/types.hasEmptyTypeset"
"go/types.operandString" "(*bytes.Buffer).WriteString"
"go/types.operandString" "(*bytes.Buffer).WriteByte"
"go/types.operandString" "(*bytes.Buffer).String"
"(go/constant.complexVal).String" "fmt.Sprintf"
"go/types.operandString" "(go/constant.complexVal).String"
"go/types.operandString" "(go/constant.complexVal).String"
"(*math/big.Int).Text" "(math/big.nat).itoa"
"(*math/big.Int).String" "(*math/big.Int).Text"
"(go/constant.intVal).String" "(*math/big.Int).String"
"go/types.operandString" "(go/constant.intVal).String"
"go/types.operandString" "(go/constant.intVal).String"
"go/types.sprintf" "go/types.operandString"
"go/types.sprintf" "(*go/token.FileSet).Position"
"go/types.sprintf" "(go/token.Position).String"
"go/types.sprintf" "go/types.ExprString"
"go/types.sprintf" "(*bytes.Buffer).WriteByte"
"go/types.sprintf" "go/types.writeExprList"
"go/types.sprintf" "(*bytes.Buffer).WriteByte"
"go/types.sprintf" "(*bytes.Buffer).String"
"go/types.writeObject" "(*go/types.TypeParamList).list"
"go/types.writeObject" "(*go/types.object).Type"
"go/types.writeObject" "(*go/types.TypeName).IsAlias"
"go/types.writeObject" "(*go/types.typeWriter).tParamList"
"go/types.writeObject" "(*go/types.TypeParamList).Len"
"go/types.writeObject" "(*go/types.object).Name"
"go/types.writeObject" "go/types.newTypeWriter"
"go/types.writeObject" "(*go/types.Named).TypeParams"
"go/types.writeObject" "(*bytes.Buffer).WriteByte"
"go/types.writeObject" "(*go/types.Func).Pkg"
"go/types.writeObject" "(*go/types.object).Pkg"
"go/types.writeObject" "go/types.Identical"
"go/types.writeObject" "(*go/types.Scope).Lookup"
"go/types.writeObject" "(*go/types.Named).TypeParams"
"go/types.writeObject" "go/types.WriteType"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.writeObject" "go/types.assert"
"go/types.writeObject" "(*go/types.object).Name"
"go/types.writeObject" "fmt.Fprintf"
"go/types.writeObject" "fmt.Fprintf"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.writeObject" "go/types.isTypeParam"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.writeFuncName" "(*go/types.Signature).Recv"
"go/types.writeFuncName" "(*bytes.Buffer).WriteString"
"go/types.writeFuncName" "(*bytes.Buffer).WriteByte"
"go/types.writeFuncName" "(*go/types.object).Type"
"go/types.writeFuncName" "(*bytes.Buffer).WriteString"
"go/types.writeFuncName" "(*bytes.Buffer).WriteByte"
"go/types.writeFuncName" "(*bytes.Buffer).WriteByte"
"go/types.writeFuncName" "(*go/types.object).Type"
"go/types.writeFuncName" "go/types.WriteType"
"go/types.writeFuncName" "go/types.packagePrefix"
"go/types.writeFuncName" "(*bytes.Buffer).WriteString"
"go/types.writeObject" "go/types.writeFuncName"
"go/types.WriteSignature" "go/types.newTypeWriter"
"go/types.WriteSignature" "(*go/types.typeWriter).signature"
"go/types.writeObject" "go/types.WriteSignature"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.writeObject" "fmt.Sprintf"
"go/types.writeObject" "(*go/types.Func).Pkg"
"go/types.writeObject" "(*go/types.object).Pkg"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.writeObject" "go/types.under"
"go/types.writeObject" "(*go/types.object).Pkg"
"go/types.writeObject" "(*bytes.Buffer).WriteByte"
"go/types.writeObject" "(*go/types.object).Name"
"go/types.writeObject" "(*go/types.Func).Pkg"
"go/types.writeObject" "go/types.packagePrefix"
"go/types.writeObject" "(*bytes.Buffer).WriteString"
"go/types.ObjectString" "go/types.writeObject"
"go/types.ObjectString" "(*bytes.Buffer).String"
"go/types.sprintf" "go/types.ObjectString"
"go/types.sprintf" "go/types.newTypeWriter"
"go/types.sprintf" "(*go/types.typeWriter).typ"
"go/types.sprintf" "(*bytes.Buffer).String"
"go/types.sprintf" "go/types.newTypeWriter"
"go/types.sprintf" "(*bytes.Buffer).WriteByte"
"go/types.sprintf" "(*bytes.Buffer).WriteByte"
"go/types.sprintf" "(*bytes.Buffer).String"
"go/types.sprintf" "(*bytes.Buffer).WriteString"
"go/types.sprintf" "(*go/types.typeWriter).typ"
"go/types.sprintf" "go/types.newTypeWriter"
"go/types.sprintf" "(*bytes.Buffer).WriteByte"
"go/types.sprintf" "(*bytes.Buffer).WriteByte"
"go/types.sprintf" "(*bytes.Buffer).String"
"go/types.sprintf" "(*bytes.Buffer).WriteString"
"go/types.sprintf" "(*go/types.typeWriter).typ"
"(*go/types.Checker).trace" "go/types.sprintf"
"(*go/types.Checker).trace" "fmt.Printf"
"go/types.computeInterfaceTypeSet" "(*go/types.Checker).trace"
"go/types.computeInterfaceTypeSet" "go/types.computeInterfaceTypeSet$1"
"(*go/types.objset).insert" "(*go/types.object).Id"
"go/types.computeInterfaceTypeSet$2" "(*go/types.objset).insert"
"go/types.computeInterfaceTypeSet$2" "(*go/types.Checker).errorf"
"go/types.computeInterfaceTypeSet$2" "(*go/types.Checker).errorf"
"go/types.computeInterfaceTypeSet$2" "(*go/types.Checker).later"
"go/types.computeInterfaceTypeSet$2" "(*go/types.action).describef"
"go/types.computeInterfaceTypeSet" "go/types.computeInterfaceTypeSet$2"
"go/types.computeInterfaceTypeSet" "go/types.under"
"(go/types.termlist).intersect" "(go/types.termlist).isEmpty"
"(go/types.termlist).intersect" "(go/types.termlist).isEmpty"
"(go/types.termlist).intersect" "(go/types.termlist).norm"
"(*go/types.term).intersect" "(*go/types.term).disjoint"
"(go/types.termlist).intersect" "(*go/types.term).intersect"
"go/types.intersectTermLists" "(go/types.termlist).intersect"
"go/types.intersectTermLists" "(go/types.termlist).isAll"
"go/types.intersectTermLists" "go/types.assert"
"go/types.comparable" "go/types.under"
"go/types.comparable" "go/types.comparable"
"go/types.comparable" "log.Printf"
"go/types.comparable" "golang.org/x/tools/go/packages.newLoader$1"
"go/types.comparable" "go/types.comparable"
"go/types.comparable" "log.Printf"
"go/types.comparable" "golang.org/x/tools/go/packages.newLoader$1"
"go/types.comparable" "(*go/types.Interface).typeSet"
"(*go/types._TypeSet).IsComparable" "(go/types.termlist).isAll"
"(*go/types._TypeSet).hasTerms" "(go/types.termlist).isEmpty"
"(*go/types._TypeSet).hasTerms" "(go/types.termlist).isAll"
"(*go/types._TypeSet).is" "(*go/types._TypeSet).hasTerms"
"(*go/types._TypeSet).IsComparable$1" "go/types.comparable"
"(*go/types._TypeSet).is" "(*go/types._TypeSet).IsComparable$1"
"(*go/types._TypeSet).is" "go/types.assert"
"(*go/types._TypeSet).is" "(*go/types._TypeSet).IsComparable$1"
"go/types.isBasic" "go/types.under"
"go/types.allBasic$1" "go/types.isBasic"
"(*go/types._TypeSet).is" "go/types.allBasic$1"
"(*go/types._TypeSet).is" "go/types.allBasic$1"
"(*go/types.Checker).implicitTypeAndValue" "go/types.isUntyped"
"(*go/types.Checker).implicitTypeAndValue" "go/types.isValid"
"(*go/types.Checker).implicitTypeAndValue" "go/types.isTyped"
"go/types.maxType" "go/types.isUntyped"
"go/types.isNumeric" "go/types.isBasic"
"go/types.maxType" "go/types.isNumeric"
"go/types.maxType" "go/types.isNumeric"
"go/types.maxType" "go/types.isUntyped"
"(*go/types.Checker).implicitTypeAndValue" "go/types.maxType"
"(*go/types.Checker).implicitTypeAndValue" "go/types.under"
"(*go/types.Checker).representation" "go/types.assert"
"go/types.representableConst" "(go/constant.floatVal).Kind"
"go/types.representableConst" "(go/constant.intVal).Kind"
"go/types.representableConst" "(*go/constant.stringVal).Kind"
"go/types.representableConst" "(go/constant.unknownVal).Kind"
"go/types.representableConst" "(go/constant.int64Val).Kind"
"go/types.representableConst" "(go/constant.boolVal).Kind"
"go/types.representableConst" "(go/constant.complexVal).Kind"
"go/types.representableConst" "(go/constant.ratVal).Kind"
"go/types.isInteger" "go/types.isBasic"
"go/types.representableConst" "go/types.isInteger"
"go/constant.ToInt" "(*math/big.Rat).IsInt"
"go/constant.ToInt" "(*math/big.Rat).Num"
"(*math/big.Int).IsInt64" "math/big.low64"
"go/constant.makeInt" "(*math/big.Int).IsInt64"
"(*math/big.Int).Int64" "math/big.low64"
"go/constant.makeInt" "(*math/big.Int).Int64"
"go/constant.ToInt" "go/constant.makeInt"
"go/constant.smallFloat" "(*math/big.Float).IsInf"
"go/constant.smallFloat" "(*math/big.Float).MantExp"
"go/constant.ToInt" "go/constant.smallFloat"
"go/constant.ToInt" "go/constant.newInt"
"(*math/big.Float).Int" "(*math/big.Float).validate"
"(*math/big.Float).Int" "math/big.makeAcc"
"(*math/big.Float).Int" "(*math/big.Int).SetInt64"
"(*math/big.Float).Int" "(*math/big.Int).SetInt64"
"(*math/big.Float).Int" "(*math/big.Float).MinPrec"
"(*math/big.Float).Int" "(math/big.nat).shl"
"(*math/big.Float).Int" "(math/big.nat).shr"
"(*math/big.Float).Int" "(math/big.nat).set"
"(*math/big.Float).Int" "math/big.makeAcc"
"go/constant.ToInt" "(*math/big.Float).Int"
"go/constant.ToInt" "go/constant.makeInt"
"go/constant.ToInt" "(*math/big.Float).SetPrec"
"go/constant.ToInt" "(*math/big.Float).SetMode"
"go/constant.ToInt" "(*math/big.Float).Set"
"go/constant.ToInt" "(*math/big.Float).Int"
"go/constant.ToInt" "go/constant.makeInt"
"go/constant.ToInt" "(*math/big.Float).SetMode"
"go/constant.ToInt" "(*math/big.Float).Set"
"go/constant.ToInt" "(*math/big.Float).Int"
"go/constant.ToInt" "go/constant.makeInt"
"go/constant.i64tor" "go/constant.newRat"
"(*math/big.Rat).SetInt64" "(*math/big.Int).SetInt64"
"(*math/big.Rat).SetInt64" "(math/big.nat).setWord"
"go/constant.i64tor" "(*math/big.Rat).SetInt64"
"go/constant.ToFloat" "go/constant.i64tor"
"go/constant.smallInt" "(*math/big.Int).BitLen"
"go/constant.ToFloat" "go/constant.smallInt"
"go/constant.itor" "go/constant.newRat"
"(*math/big.Rat).SetInt" "(*math/big.Int).Set"
"(*math/big.Rat).SetInt" "(math/big.nat).setWord"
"go/constant.itor" "(*math/big.Rat).SetInt"
"go/constant.ToFloat" "go/constant.itor"
"go/constant.itof" "go/constant.newFloat"
"go/constant.itof" "(*math/big.Float).SetInt"
"go/constant.ToFloat" "go/constant.itof"
"go/constant.Sign" "(*math/big.Int).Sign"
"(*math/big.Rat).Sign" "(*math/big.Int).Sign"
"go/constant.Sign" "(*math/big.Rat).Sign"
"go/constant.Sign" "(*math/big.Float).Sign"
"go/constant.Sign" "go/constant.Sign"
"go/constant.Sign" "go/constant.Sign"
"go/constant.Sign" "fmt.Sprintf"
"go/constant.ToFloat" "go/constant.Sign"
"go/constant.ToFloat" "go/constant.ToFloat"
"go/constant.ToInt" "go/constant.ToFloat"
"go/constant.ToInt" "(go/constant.floatVal).Kind"
"go/constant.ToInt" "(go/constant.intVal).Kind"
"go/constant.ToInt" "(*go/constant.stringVal).Kind"
"go/constant.ToInt" "(go/constant.unknownVal).Kind"
"go/constant.ToInt" "(go/constant.int64Val).Kind"
"go/constant.ToInt" "(go/constant.boolVal).Kind"
"go/constant.ToInt" "(go/constant.complexVal).Kind"
"go/constant.ToInt" "(go/constant.ratVal).Kind"
"go/constant.ToInt" "go/constant.ToInt"
"go/types.representableConst" "go/constant.ToInt"
"go/types.representableConst" "(go/constant.floatVal).Kind"
"go/types.representableConst" "(go/constant.intVal).Kind"
"go/types.representableConst" "(*go/constant.stringVal).Kind"
"go/types.representableConst" "(go/constant.unknownVal).Kind"
"go/types.representableConst" "(go/constant.int64Val).Kind"
"go/types.representableConst" "(go/constant.boolVal).Kind"
"go/types.representableConst" "(go/constant.complexVal).Kind"
"go/types.representableConst" "(go/constant.ratVal).Kind"
"go/types.representableConst" "go/constant.ToFloat"
"go/types.representableConst" "(go/constant.floatVal).Kind"
"go/types.representableConst" "(go/constant.intVal).Kind"
"go/types.representableConst" "(*go/constant.stringVal).Kind"
"go/types.representableConst" "(go/constant.unknownVal).Kind"
"go/types.representableConst" "(go/constant.int64Val).Kind"
"go/types.representableConst" "(go/constant.boolVal).Kind"
"go/types.representableConst" "(go/constant.complexVal).Kind"
"go/types.representableConst" "(go/constant.ratVal).Kind"
"go/types.isFloat" "go/types.isBasic"
"go/types.representableConst" "go/types.isFloat"
"go/constant.Int64Val" "(*math/big.Int).Int64"
"go/constant.Int64Val" "fmt.Sprintf"
"go/types.representableConst" "go/constant.Int64Val"
"go/constant.BitLen" "math/bits.LeadingZeros64"
"go/constant.BitLen" "(*math/big.Int).BitLen"
"go/constant.BitLen" "fmt.Sprintf"
"go/types.representableConst" "go/constant.BitLen"
"(*go/types.Config).sizeof" "go/types.representableConst$1"
"(*go/types.StdSizes).Alignof" "(*go/types.StdSizes).Alignof$1"
"(*go/types.StdSizes).Alignof" "go/types.under"
"(*go/types.StdSizes).Sizeof" "go/types.under"
"(*go/types.StdSizes).Sizeof" "go/types.isTyped"
"(*go/types.StdSizes).Sizeof" "go/types.assert"
"(*go/types.StdSizes).Sizeof" "(*go/types.StdSizes).Sizeof"
"(*go/types.StdSizes).Sizeof" "(*go/types.StdSizes).Alignof"
"go/types.align" "go/types.assert"
"(*go/types.StdSizes).Sizeof" "go/types.align"
"(*go/types.StdSizes).Sizeof" "(*go/types.Struct).NumFields"
"(*go/types.StdSizes).Offsetsof" "(*go/types.StdSizes).Alignof"
"(*go/types.StdSizes).Offsetsof" "go/types.align"
"(*go/types.StdSizes).Offsetsof" "(*go/types.StdSizes).Sizeof"
"(*go/types.StdSizes).Sizeof" "(*go/types.StdSizes).Offsetsof"
"(*go/types.StdSizes).Sizeof" "(*go/types.StdSizes).Sizeof"
"(*go/types.StdSizes).Sizeof" "go/types.isTypeParam"
"(*go/types.StdSizes).Sizeof" "go/types.assert"
"(*go/types.StdSizes).Sizeof" "go/types.unreachable"
"(*go/types.StdSizes).Alignof" "(*go/types.StdSizes).Sizeof"
"(*go/types.StdSizes).Alignof" "(*go/types.StdSizes).Alignof"
"go/types._IsSyncAtomicAlign64" "go/types.asNamed"
"go/types._IsSyncAtomicAlign64" "(*go/types.Named).Obj"
"go/types._IsSyncAtomicAlign64" "(*go/types.object).Name"
"go/types._IsSyncAtomicAlign64" "(*go/types.object).Pkg"
"go/types._IsSyncAtomicAlign64" "(*go/types.Package).Path"
"go/types._IsSyncAtomicAlign64" "(*go/types.object).Pkg"
"go/types._IsSyncAtomicAlign64" "(*go/types.object).Pkg"
"go/types._IsSyncAtomicAlign64" "(*go/types.Package).Path"
"(*go/types.StdSizes).Alignof" "go/types._IsSyncAtomicAlign64"
"(*go/types.StdSizes).Alignof" "(*go/types.StdSizes).Alignof"
"(*go/types.StdSizes).Alignof" "go/types.isTypeParam"
"(*go/types.StdSizes).Alignof" "go/types.assert"
"(*go/types.StdSizes).Alignof" "(*go/types.Basic).Info"
"(*go/types.StdSizes).Alignof" "go/types.unreachable"
"go/types.isComplex" "go/types.isBasic"
"(*go/types.StdSizes).Alignof" "go/types.isComplex"
"(*go/types.Config).sizeof" "(*go/types.StdSizes).Alignof"
"(*go/types.gcSizes).Sizeof" "go/types.under"
"(*go/types.gcSizes).Sizeof" "go/types.isTyped"
"(*go/types.gcSizes).Sizeof" "go/types.assert"
"(*go/types.gcSizes).Sizeof" "(*go/types.gcSizes).Sizeof"
"(*go/types.gcSizes).Sizeof" "(*go/types.Struct).NumFields"
"(*go/types.gcSizes).Alignof" "(*go/types.gcSizes).Alignof$1"
"(*go/types.gcSizes).Alignof" "go/types.under"
"(*go/types.gcSizes).Alignof" "(*go/types.gcSizes).Sizeof"
"(*go/types.gcSizes).Alignof" "(*go/types.gcSizes).Alignof"
"(*go/types.gcSizes).Alignof" "go/types._IsSyncAtomicAlign64"
"(*go/types.gcSizes).Alignof" "(*go/types.gcSizes).Alignof"
"(*go/types.gcSizes).Alignof" "go/types.isTypeParam"
"(*go/types.gcSizes).Alignof" "go/types.assert"
"(*go/types.gcSizes).Alignof" "(*go/types.Basic).Info"
"(*go/types.gcSizes).Alignof" "go/types.unreachable"
"(*go/types.gcSizes).Alignof" "go/types.isComplex"
"(*go/types.gcSizes).Offsetsof" "(*go/types.gcSizes).Alignof"
"(*go/types.gcSizes).Offsetsof" "go/types.align"
"(*go/types.gcSizes).Offsetsof" "(*go/types.gcSizes).Sizeof"
"(*go/types.gcSizes).Sizeof" "(*go/types.gcSizes).Offsetsof"
"(*go/types.gcSizes).Sizeof" "(*go/types.gcSizes).Sizeof"
"(*go/types.gcSizes).Sizeof" "(*go/types.gcSizes).Alignof"
"(*go/types.gcSizes).Sizeof" "go/types.align"
"(*go/types.gcSizes).Sizeof" "go/types.isTypeParam"
"(*go/types.gcSizes).Sizeof" "go/types.assert"
"(*go/types.gcSizes).Sizeof" "go/types.unreachable"
"(*go/types.Config).sizeof" "(*go/types.gcSizes).Sizeof"
"(*go/types.Config).sizeof" "(*go/types.StdSizes).Sizeof"
"(*go/types.Config).sizeof" "(*go/types.gcSizes).Alignof"
"go/types.representableConst$1" "(*go/types.Config).sizeof"
"go/types.representableConst" "go/types.representableConst$1"
"go/types.representableConst" "go/types.representableConst$1"
"go/types.representableConst" "go/types.unreachable"
"go/types.representableConst" "go/types.representableConst$1"
"go/types.representableConst" "go/constant.Sign"
"go/types.representableConst" "go/constant.Sign"
"go/constant.ToComplex" "go/constant.vtoc"
"go/types.representableConst" "go/constant.ToComplex"
"go/types.representableConst" "(go/constant.floatVal).Kind"
"go/types.representableConst" "(go/constant.intVal).Kind"
"go/types.representableConst" "(*go/constant.stringVal).Kind"
"go/types.representableConst" "(go/constant.unknownVal).Kind"
"go/types.representableConst" "(go/constant.int64Val).Kind"
"go/types.representableConst" "(go/constant.boolVal).Kind"
"go/types.representableConst" "(go/constant.complexVal).Kind"
"go/types.representableConst" "(go/constant.ratVal).Kind"
"go/types.representableConst" "go/types.isComplex"
"go/constant.Float32Val" "go/constant.newFloat"
"go/constant.Float32Val" "(*math/big.Float).SetInt"
"(*math/big.Float).Float32" "(*math/big.Float).validate"
"(*math/big.Float).Float32" "(*math/big.Float).Set"
"(*math/big.Float).Float32" "(math/big.nat).sticky"
"(*math/big.Float).Float32" "math.Inf"
"(*math/big.Float).Float32" "math.Inf"
"(*math/big.Float).Float32" "math/big.msb32"
"(*math/big.Float).Float32" "math.Float32frombits"
"(*math/big.Float).Float32" "math/big.msb32"
"(*math/big.Float).Float32" "math.Inf"
"(*math/big.Float).Float32" "math.Inf"
"go/constant.Float32Val" "(*math/big.Float).Float32"
"math/big.quotToFloat32" "(math/big.nat).bitLen"
"math/big.quotToFloat32" "(math/big.nat).bitLen"
"math/big.quotToFloat32" "(math/big.nat).set"
"math/big.quotToFloat32" "(math/big.nat).set"
"math/big.quotToFloat32" "(math/big.nat).shl"
"math/big.quotToFloat32" "(math/big.nat).div"
"math/big.quotToFloat32" "math/big.low32"
"math/big.quotToFloat32" "(math/big.nat).shl"
"math/big.quotToFloat32" "fmt.Sprintf"
"math/big.quotToFloat32" "math.Ldexp"
"math/big.quotToFloat32" "math.IsInf"
"(*math/big.Rat).Float32" "math/big.quotToFloat32"
"go/constant.Float32Val" "(*math/big.Rat).Float32"
"go/constant.Float32Val" "(*math/big.Float).Float32"
"go/constant.Float32Val" "fmt.Sprintf"
"go/types.fitsFloat32" "go/constant.Float32Val"
"go/types.fitsFloat32" "math.IsInf"
"go/types.representableConst" "go/types.fitsFloat32"
"go/types.roundFloat32" "go/constant.Float32Val"
"go/types.roundFloat32" "math.IsInf"
"go/constant.MakeFloat64" "math.IsInf"
"go/constant.smallFloat64" "math.IsInf"
"go/constant.smallFloat64" "math.Frexp"
"go/constant.MakeFloat64" "go/constant.smallFloat64"
"go/constant.MakeFloat64" "math.IsNaN"
"go/constant.MakeFloat64" "go/constant.newRat"
"(*math/big.Rat).SetFloat64" "math.Float64bits"
"(*math/big.Rat).SetFloat64" "(*math/big.Int).SetUint64"
"(*math/big.Rat).SetFloat64" "(*math/big.Int).Set"
"(*math/big.Int).Lsh" "(math/big.nat).shl"
"(*math/big.Rat).SetFloat64" "(*math/big.Int).Lsh"
"(*math/big.Rat).norm" "(math/big.nat).setWord"
"(*math/big.Rat).norm" "math/big.NewInt"
"(*math/big.Rat).norm" "(*math/big.Int).lehmerGCD"
"(*math/big.Rat).norm" "(*math/big.Int).Cmp"
"(*math/big.Rat).norm" "(math/big.nat).div"
"(*math/big.Rat).norm" "(math/big.nat).div"
"(*math/big.Rat).SetFloat64" "(*math/big.Rat).norm"
"(*math/big.Rat).SetFloat64" "(*math/big.Int).Lsh"
"go/constant.MakeFloat64" "(*math/big.Rat).SetFloat64"
"go/constant.MakeFloat64" "go/constant.newFloat"
"(*math/big.Float).SetFloat64" "math.IsNaN"
"(*math/big.Float).SetFloat64" "math.Signbit"
"(*math/big.Float).SetFloat64" "math.IsInf"
"(*math/big.Float).SetFloat64" "math.Frexp"
"(*math/big.Float).SetFloat64" "math.Float64bits"
"(*math/big.Float).SetFloat64" "(math/big.nat).setUint64"
"(*math/big.Float).SetFloat64" "(*math/big.Float).round"
"go/constant.MakeFloat64" "(*math/big.Float).SetFloat64"
"go/types.roundFloat32" "go/constant.MakeFloat64"
"go/types.representableConst" "go/types.roundFloat32"
"go/constant.Float64Val" "go/constant.newFloat"
"go/constant.Float64Val" "(*math/big.Float).SetInt"
"go/constant.Float64Val" "(*math/big.Float).Float64"
"math/big.quotToFloat64" "(math/big.nat).bitLen"
"math/big.quotToFloat64" "(math/big.nat).bitLen"
"math/big.quotToFloat64" "(math/big.nat).set"
"math/big.quotToFloat64" "(math/big.nat).set"
"math/big.quotToFloat64" "(math/big.nat).shl"
"math/big.quotToFloat64" "(math/big.nat).div"
"math/big.quotToFloat64" "math/big.low64"
"math/big.quotToFloat64" "(math/big.nat).shl"
"math/big.quotToFloat64" "fmt.Sprintf"
"math/big.quotToFloat64" "math.Ldexp"
"math/big.quotToFloat64" "math.IsInf"
"(*math/big.Rat).Float64" "math/big.quotToFloat64"
"go/constant.Float64Val" "(*math/big.Rat).Float64"
"go/constant.Float64Val" "(*math/big.Float).Float64"
"go/constant.Float64Val" "fmt.Sprintf"
"go/types.fitsFloat64" "go/constant.Float64Val"
"go/types.fitsFloat64" "math.IsInf"
"go/types.representableConst" "go/types.fitsFloat64"
"go/types.roundFloat64" "go/constant.Float64Val"
"go/types.roundFloat64" "math.IsInf"
"go/types.roundFloat64" "go/constant.MakeFloat64"
"go/types.representableConst" "go/types.roundFloat64"
"go/types.representableConst" "go/types.unreachable"
"go/types.representableConst" "(go/constant.floatVal).Kind"
"go/types.representableConst" "(go/constant.intVal).Kind"
"go/types.representableConst" "(*go/constant.stringVal).Kind"
"go/types.representableConst" "(go/constant.unknownVal).Kind"
"go/types.representableConst" "(go/constant.int64Val).Kind"
"go/types.representableConst" "(go/constant.boolVal).Kind"
"go/types.representableConst" "(go/constant.complexVal).Kind"
"go/types.representableConst" "(go/constant.ratVal).Kind"
"go/types.isString" "go/types.isBasic"
"go/types.representableConst" "go/types.isString"
"go/constant.Real" "fmt.Sprintf"
"go/types.representableConst" "go/constant.Real"
"go/types.representableConst" "go/types.fitsFloat32"
"go/types.representableConst" "go/constant.Real"
"go/types.representableConst" "go/types.roundFloat32"
"go/constant.Imag" "fmt.Sprintf"
"go/types.representableConst" "go/constant.Imag"
"go/types.representableConst" "go/types.roundFloat32"
"go/types.representableConst" "go/constant.Imag"
"go/types.representableConst" "go/types.fitsFloat32"
"go/constant.makeComplex" "(go/constant.ratVal).Kind"
"go/constant.makeComplex" "(go/constant.boolVal).Kind"
"go/constant.makeComplex" "(*go/constant.stringVal).Kind"
"go/constant.makeComplex" "(go/constant.unknownVal).Kind"
"go/constant.makeComplex" "(go/constant.int64Val).Kind"
"go/constant.makeComplex" "(go/constant.boolVal).Kind"
"go/constant.makeComplex" "(go/constant.complexVal).Kind"
"go/constant.makeComplex" "(go/constant.intVal).Kind"
"go/constant.makeComplex" "(go/constant.intVal).Kind"
"go/constant.makeComplex" "(go/constant.floatVal).Kind"
"go/constant.makeComplex" "(go/constant.ratVal).Kind"
"go/constant.makeComplex" "(go/constant.int64Val).Kind"
"go/constant.makeComplex" "(go/constant.floatVal).Kind"
"go/constant.makeComplex" "(go/constant.complexVal).Kind"
"go/constant.makeComplex" "(*go/constant.stringVal).Kind"
"go/constant.makeComplex" "(go/constant.unknownVal).Kind"
"go/constant.MakeImag" "go/constant.makeComplex"
"go/constant.MakeImag" "fmt.Sprintf"
"go/types.representableConst" "go/constant.MakeImag"
"go/constant.match" "go/constant.ord"
"go/constant.match" "go/constant.ord"
"go/constant.i64toi" "go/constant.newInt"
"go/constant.i64toi" "(*math/big.Int).SetInt64"
"go/constant.match0" "go/constant.i64toi"
"go/constant.match0" "go/constant.i64tor"
"go/constant.match0" "go/constant.itor"
"go/constant.i64tof" "go/constant.newFloat"
"(*math/big.Float).setBits64" "math/bits.LeadingZeros64"
"(*math/big.Float).setBits64" "(math/big.nat).setUint64"
"(*math/big.Float).setBits64" "(*math/big.Float).round"
"(*math/big.Float).SetInt64" "(*math/big.Float).setBits64"
"go/constant.i64tof" "(*math/big.Float).SetInt64"
"go/constant.match0" "go/constant.i64tof"
"go/constant.match0" "go/constant.itof"
"go/constant.match0" "go/constant.rtof"
"go/constant.match0" "go/constant.vtoc"
"go/constant.match" "go/constant.match0"
"go/constant.match" "go/constant.match0"
"go/constant.BinaryOp" "go/constant.match"
"go/constant.BinaryOp" "go/constant.is63bit"
"go/constant.BinaryOp" "go/constant.is63bit"
"go/constant.BinaryOp" "go/constant.newInt"
"go/constant.BinaryOp" "math/big.NewInt"
"go/constant.BinaryOp" "math/big.NewInt"
"go/constant.BinaryOp" "(*math/big.Int).Add"
"go/constant.BinaryOp" "go/constant.makeInt"
"go/constant.BinaryOp" "go/constant.is63bit"
"go/constant.BinaryOp" "go/constant.is32bit"
"go/constant.BinaryOp" "go/constant.newInt"
"go/constant.BinaryOp" "math/big.NewInt"
"go/constant.BinaryOp" "math/big.NewInt"
"go/constant.BinaryOp" "(*math/big.Int).Sub"
"go/constant.BinaryOp" "go/constant.makeInt"
"go/constant.BinaryOp" "go/constant.is63bit"
"(*math/big.Rat).SetFrac64" "(*math/big.Int).SetInt64"
"(*math/big.Rat).SetFrac64" "(math/big.nat).setUint64"
"(*math/big.Rat).SetFrac64" "(*math/big.Rat).norm"
"math/big.NewRat" "(*math/big.Rat).SetFrac64"
"go/constant.BinaryOp" "math/big.NewRat"
"go/constant.makeRat" "(*math/big.Rat).Num"
"go/constant.makeRat" "(*math/big.Rat).Denom"
"go/constant.makeRat" "go/constant.smallInt"
"go/constant.makeRat" "go/constant.newFloat"
"go/constant.makeRat" "(*math/big.Float).SetRat"
"go/constant.makeRat" "go/constant.smallInt"
"go/constant.BinaryOp" "go/constant.makeRat"
"go/constant.BinaryOp" "go/constant.newInt"
"go/constant.BinaryOp" "math/big.NewInt"
"go/constant.BinaryOp" "math/big.NewInt"
"go/constant.BinaryOp" "(*math/big.Int).Mul"
"go/constant.BinaryOp" "go/constant.makeInt"
"go/constant.BinaryOp" "go/constant.is32bit"
"go/constant.BinaryOp" "fmt.Sprintf"
"go/constant.BinaryOp" "go/constant.newInt"
"go/constant.BinaryOp" "go/constant.makeInt"
"go/constant.BinaryOp" "(*math/big.Int).Add"
"go/constant.BinaryOp" "(*math/big.Int).Sub"
"go/constant.BinaryOp" "(*math/big.Int).Mul"
"go/constant.BinaryOp" "go/constant.newRat"
"(*math/big.Rat).SetFrac" "(math/big.nat).set"
"(*math/big.Rat).SetFrac" "(math/big.nat).set"
"(*math/big.Rat).SetFrac" "(math/big.nat).set"
"(*math/big.Rat).SetFrac" "(*math/big.Rat).norm"
"(*math/big.Rat).SetFrac" "math/big.alias"
"go/constant.BinaryOp" "(*math/big.Rat).SetFrac"
"go/constant.BinaryOp" "go/constant.makeRat"
"(*math/big.Int).Quo" "(math/big.nat).div"
"go/constant.BinaryOp" "(*math/big.Int).Quo"
"(*math/big.Int).Rem" "(math/big.nat).div"
"go/constant.BinaryOp" "(*math/big.Int).Rem"
"(*math/big.Int).And" "(math/big.nat).sub"
"(*math/big.Int).And" "(math/big.nat).sub"
"(math/big.nat).or" "(math/big.nat).make"
"(math/big.nat).or" "(math/big.nat).norm"
"(*math/big.Int).And" "(math/big.nat).or"
"(*math/big.Int).And" "(math/big.nat).add"
"(math/big.nat).and" "(math/big.nat).make"
"(math/big.nat).and" "(math/big.nat).norm"
"(*math/big.Int).And" "(math/big.nat).and"
"(*math/big.Int).And" "(math/big.nat).sub"
"(math/big.nat).andNot" "(math/big.nat).make"
"(math/big.nat).andNot" "(math/big.nat).norm"
"(*math/big.Int).And" "(math/big.nat).andNot"
"go/constant.BinaryOp" "(*math/big.Int).And"
"(*math/big.Int).Or" "(math/big.nat).sub"
"(*math/big.Int).Or" "(math/big.nat).sub"
"(*math/big.Int).Or" "(math/big.nat).and"
"(*math/big.Int).Or" "(math/big.nat).add"
"(*math/big.Int).Or" "(math/big.nat).or"
"(*math/big.Int).Or" "(math/big.nat).sub"
"(*math/big.Int).Or" "(math/big.nat).andNot"
"(*math/big.Int).Or" "(math/big.nat).add"
"go/constant.BinaryOp" "(*math/big.Int).Or"
"(*math/big.Int).Xor" "(math/big.nat).sub"
"(*math/big.Int).Xor" "(math/big.nat).sub"
"(math/big.nat).xor" "(math/big.nat).make"
"(math/big.nat).xor" "(math/big.nat).norm"
"(*math/big.Int).Xor" "(math/big.nat).xor"
"(*math/big.Int).Xor" "(math/big.nat).xor"
"(*math/big.Int).Xor" "(math/big.nat).sub"
"(*math/big.Int).Xor" "(math/big.nat).xor"
"(*math/big.Int).Xor" "(math/big.nat).add"
"go/constant.BinaryOp" "(*math/big.Int).Xor"
"(*math/big.Int).AndNot" "(math/big.nat).sub"
"(*math/big.Int).AndNot" "(math/big.nat).sub"
"(*math/big.Int).AndNot" "(math/big.nat).andNot"
"(*math/big.Int).AndNot" "(math/big.nat).andNot"
"(*math/big.Int).AndNot" "(math/big.nat).sub"
"(*math/big.Int).AndNot" "(math/big.nat).or"
"(*math/big.Int).AndNot" "(math/big.nat).add"
"(*math/big.Int).AndNot" "(math/big.nat).sub"
"(*math/big.Int).AndNot" "(math/big.nat).and"
"go/constant.BinaryOp" "(*math/big.Int).AndNot"
"go/constant.BinaryOp" "go/constant.newRat"
"go/constant.BinaryOp" "go/constant.makeRat"
"(*math/big.Int).scaleDenom" "(*math/big.Int).Set"
"(*math/big.Int).scaleDenom" "(math/big.nat).mul"
"(*math/big.Rat).Add" "(*math/big.Int).scaleDenom"
"(*math/big.Rat).Add" "(*math/big.Int).scaleDenom"
"(*math/big.Rat).Add" "(*math/big.Int).Add"
"math/big.mulDenom" "(math/big.nat).setWord"
"math/big.mulDenom" "(math/big.nat).set"
"math/big.mulDenom" "(math/big.nat).set"
"math/big.mulDenom" "(math/big.nat).mul"
"(*math/big.Rat).Add" "math/big.mulDenom"
"(*math/big.Rat).Add" "(*math/big.Rat).norm"
"go/constant.BinaryOp" "(*math/big.Rat).Add"
"(*math/big.Rat).Sub" "(*math/big.Int).scaleDenom"
"(*math/big.Rat).Sub" "(*math/big.Int).scaleDenom"
"(*math/big.Rat).Sub" "(*math/big.Int).Sub"
"(*math/big.Rat).Sub" "math/big.mulDenom"
"(*math/big.Rat).Sub" "(*math/big.Rat).norm"
"go/constant.BinaryOp" "(*math/big.Rat).Sub"
"(*math/big.Rat).Mul" "(math/big.nat).sqr"
"(*math/big.Rat).Mul" "(*math/big.Int).Mul"
"(*math/big.Rat).Mul" "math/big.mulDenom"
"(*math/big.Rat).Mul" "(*math/big.Rat).norm"
"(*math/big.Rat).Mul" "(math/big.nat).setWord"
"(*math/big.Rat).Mul" "(math/big.nat).sqr"
"go/constant.BinaryOp" "(*math/big.Rat).Mul"
"(*math/big.Rat).Quo" "(*math/big.Int).scaleDenom"
"(*math/big.Rat).Quo" "(*math/big.Int).scaleDenom"
"(*math/big.Rat).Quo" "(*math/big.Rat).norm"
"go/constant.BinaryOp" "(*math/big.Rat).Quo"
"go/constant.BinaryOp" "go/constant.newFloat"
"go/constant.makeFloat" "(*math/big.Float).Sign"
"go/constant.makeFloat" "(*math/big.Float).IsInf"
"go/constant.BinaryOp" "go/constant.makeFloat"
"(*math/big.Float).Add" "(*math/big.Float).validate"
"(*math/big.Float).Add" "(*math/big.Float).validate"
"(*math/big.Float).Add" "math/big.umax32"
"(*math/big.Float).uadd" "math/big.validateBinaryOperands"
"(*math/big.Float).uadd" "math/big.alias"
"(*math/big.Float).uadd" "math/big.alias"
"(*math/big.Float).uadd" "math/big.fnorm"
"(*math/big.Float).uadd" "(*math/big.Float).setExpAndRound"
"(*math/big.Float).uadd" "(math/big.nat).shl"
"(*math/big.Float).uadd" "(math/big.nat).add"
"(*math/big.Float).uadd" "(math/big.nat).shl"
"(*math/big.Float).uadd" "(math/big.nat).add"
"(*math/big.Float).uadd" "(math/big.nat).add"
"(*math/big.Float).uadd" "(math/big.nat).shl"
"(*math/big.Float).uadd" "(math/big.nat).add"
"(*math/big.Float).uadd" "(math/big.nat).shl"
"(*math/big.Float).uadd" "(math/big.nat).add"
"(*math/big.Float).Add" "(*math/big.Float).uadd"
"(*math/big.Float).ucmp" "math/big.validateBinaryOperands"
"(*math/big.Float).Add" "(*math/big.Float).ucmp"
"(*math/big.Float).usub" "math/big.validateBinaryOperands"
"(*math/big.Float).usub" "math/big.alias"
"(*math/big.Float).usub" "math/big.alias"
"(*math/big.Float).usub" "(math/big.nat).shl"
"(*math/big.Float).usub" "(math/big.nat).sub"
"(*math/big.Float).usub" "(math/big.nat).shl"
"(*math/big.Float).usub" "(math/big.nat).sub"
"(*math/big.Float).usub" "(math/big.nat).sub"
"(*math/big.Float).usub" "(math/big.nat).shl"
"(*math/big.Float).usub" "(math/big.nat).sub"
"(*math/big.Float).usub" "(math/big.nat).shl"
"(*math/big.Float).usub" "(math/big.nat).sub"
"(*math/big.Float).usub" "math/big.fnorm"
"(*math/big.Float).usub" "(*math/big.Float).setExpAndRound"
"(*math/big.Float).Add" "(*math/big.Float).usub"
"(*math/big.Float).Add" "(*math/big.Float).usub"
"(*math/big.Float).Add" "(*math/big.Float).Set"
"(*math/big.Float).Add" "(*math/big.Float).Set"
"go/constant.BinaryOp" "(*math/big.Float).Add"
"(*math/big.Float).Sub" "(*math/big.Float).validate"
"(*math/big.Float).Sub" "(*math/big.Float).validate"
"(*math/big.Float).Sub" "math/big.umax32"
"(*math/big.Float).Sub" "(*math/big.Float).uadd"
"(*math/big.Float).Sub" "(*math/big.Float).ucmp"
"(*math/big.Float).Sub" "(*math/big.Float).usub"
"(*math/big.Float).Sub" "(*math/big.Float).usub"
"(*math/big.Float).Sub" "(*math/big.Float).Set"
"(*math/big.Float).Neg" "(*math/big.Float).Set"
"(*math/big.Float).Sub" "(*math/big.Float).Neg"
"go/constant.BinaryOp" "(*math/big.Float).Sub"
"(*math/big.Float).Mul" "(*math/big.Float).validate"
"(*math/big.Float).Mul" "(*math/big.Float).validate"
"(*math/big.Float).Mul" "math/big.umax32"
"(*math/big.Float).umul" "math/big.validateBinaryOperands"
"(*math/big.Float).umul" "(math/big.nat).sqr"
"(*math/big.Float).umul" "math/big.fnorm"
"(*math/big.Float).umul" "(*math/big.Float).setExpAndRound"
"(*math/big.Float).umul" "(math/big.nat).mul"
"(*math/big.Float).Mul" "(*math/big.Float).umul"
"go/constant.BinaryOp" "(*math/big.Float).Mul"
"go/constant.BinaryOp" "(*math/big.Float).Quo"
"go/constant.BinaryOp" "go/constant.makeComplex"
"go/constant.add" "go/constant.BinaryOp"
"go/constant.BinaryOp" "go/constant.add"
"go/constant.BinaryOp" "go/constant.add"
"go/constant.sub" "go/constant.BinaryOp"
"go/constant.BinaryOp" "go/constant.sub"
"go/constant.BinaryOp" "go/constant.sub"
"go/constant.mul" "go/constant.BinaryOp"
"go/constant.BinaryOp" "go/constant.mul"
"go/constant.BinaryOp" "go/constant.mul"
"go/constant.BinaryOp" "go/constant.mul"
"go/constant.BinaryOp" "go/constant.mul"
"go/constant.BinaryOp" "go/constant.sub"
"go/constant.BinaryOp" "go/constant.add"
"go/constant.BinaryOp" "go/constant.mul"
"go/constant.BinaryOp" "go/constant.mul"
"go/constant.BinaryOp" "go/constant.mul"
"go/constant.BinaryOp" "go/constant.mul"
"go/constant.BinaryOp" "go/constant.mul"
"go/constant.BinaryOp" "go/constant.mul"
"go/constant.BinaryOp" "go/constant.add"
"go/constant.BinaryOp" "go/constant.add"
"go/constant.quo" "go/constant.BinaryOp"
"go/constant.BinaryOp" "go/constant.quo"
"go/constant.BinaryOp" "go/constant.sub"
"go/constant.BinaryOp" "go/constant.quo"
"go/types.representableConst" "go/constant.BinaryOp"
"go/types.representableConst" "go/constant.Real"
"go/types.representableConst" "go/types.fitsFloat64"
"go/types.representableConst" "go/constant.Real"
"go/types.representableConst" "go/types.roundFloat64"
"go/types.representableConst" "go/constant.Imag"
"go/types.representableConst" "go/types.roundFloat64"
"go/types.representableConst" "go/constant.Imag"
"go/types.representableConst" "go/types.fitsFloat64"
"go/types.representableConst" "go/constant.MakeImag"
"go/types.representableConst" "go/constant.BinaryOp"
"go/types.representableConst" "go/types.unreachable"
"go/types.representableConst" "(go/constant.floatVal).Kind"
"go/types.representableConst" "(go/constant.intVal).Kind"
"go/types.representableConst" "(*go/constant.stringVal).Kind"
"go/types.representableConst" "(go/constant.unknownVal).Kind"
"go/types.representableConst" "(go/constant.int64Val).Kind"
"go/types.representableConst" "(go/constant.boolVal).Kind"
"go/types.representableConst" "(go/constant.complexVal).Kind"
"go/types.representableConst" "(go/constant.ratVal).Kind"
"go/types.isBoolean" "go/types.isBasic"
"go/types.representableConst" "go/types.isBoolean"
"(*go/types.Checker).representation" "go/types.representableConst"
"(*go/types.Checker).representation" "go/types.isNumeric"
"(*go/types.Checker).representation" "go/types.isInteger"
"(*go/types.Checker).representation" "go/types.isNumeric"
"(*go/types.Checker).representation" "go/types.isInteger"
"(*go/types.Checker).implicitTypeAndValue" "(*go/types.Checker).representation"
"(*go/types.Checker).implicitTypeAndValue" "go/types.isBoolean"
"(*go/types.Checker).implicitTypeAndValue" "go/types.isNumeric"
"(*go/types.Checker).implicitTypeAndValue" "go/types.isString"
"go/types.hasNil" "go/types.under"
"go/types.hasNil" "go/types.isTypeParam"
"go/types.hasNil" "(*go/types.Interface).typeSet"
"(*go/types._TypeSet).underIs" "(*go/types._TypeSet).hasTerms"
"go/types.allBasic" "go/types.Unalias"
"(*go/types.TypeParam).is" "(*go/types.TypeParam).iface"
"(*go/types.TypeParam).is" "(*go/types.Interface).typeSet"
"(*go/types.TypeParam).is" "(*go/types._TypeSet).is"
"go/types.allBasic" "(*go/types.TypeParam).is"
"go/types.allBasic" "go/types.isBasic"
"go/types.allNumeric" "go/types.allBasic"
"(*go/types._TypeSet).underIs" "go/types.allNumeric"
"go/types.allInteger" "go/types.allBasic"
"(*go/types._TypeSet).underIs" "go/types.allInteger"
"go/types.allBoolean" "go/types.allBasic"
"(*go/types._TypeSet).underIs" "go/types.allBoolean"
"go/types.allNumericOrString" "go/types.allBasic"
"(*go/types._TypeSet).underIs" "go/types.allNumericOrString"
"go/types.coreString$1" "go/types.isString"
"go/types.coreString$1" "go/types.NewSlice"
"go/types.match" "go/types.Identical"
"go/types.match" "go/types.Identical"
"go/types.coreString$1" "go/types.match"
"(*go/types._TypeSet).underIs" "go/types.coreString$1"
"(*go/types._TypeSet).underIs" "go/types.assert"
"(*go/types._TypeSet).underIs" "go/types.under"
"(*go/types._TypeSet).underIs" "go/types.under"
"(*go/types._TypeSet).underIs" "go/types.Identical"
"(*go/types._TypeSet).underIs" "go/types.assert"
"(*go/types._TypeSet).underIs" "go/types.coreString$1"
"(*go/types._TypeSet).underIs" "go/types.allNumeric"
"(*go/types._TypeSet).underIs" "go/types.allInteger"
"(*go/types._TypeSet).underIs" "go/types.allBoolean"
"(*go/types._TypeSet).underIs" "go/types.allNumericOrString"
"(*go/types.Checker).implicitTypeAndValue$1" "(*go/types.Checker).implicitTypeAndValue"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).implicitTypeAndValue$1"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).implicitTypeAndValue$1"
"(*go/types.Checker).exprInternal$2" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal$2" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal$2" "go/types.Identical"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).exprInternal$2"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).exprInternal$2"
"go/types.hasNil$1" "go/types.hasNil"
"(*go/types._TypeSet).underIs" "go/types.hasNil$1"
"(*go/types._TypeSet).underIs" "go/types.hasNil$1"
"go/types.coreType$1" "go/types.match"
"(*go/types._TypeSet).underIs" "go/types.coreType$1"
"(*go/types._TypeSet).underIs" "go/types.coreType$1"
"(*go/types.Checker).indexExpr$1" "go/types.isString"
"(*go/types.Checker).indexExpr$1" "go/types.under"
"(*go/types.Checker).indexExpr$1" "go/types.Identical"
"(*go/types.Checker).indexExpr$1" "go/types.Identical"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).indexExpr$1"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).indexExpr$1"
"(*go/types.Checker).builtin$3" "(*go/types.Checker).errorf"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).builtin$3"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).builtin$3"
"go/types.arrayPtrDeref" "go/types.under"
"(*go/types.Checker).builtin$2" "go/types.arrayPtrDeref"
"(*go/types.Checker).builtin$2" "go/types.isString"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).builtin$2"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).builtin$2"
"(*go/types.Checker).builtin$4" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin$4" "(*go/types.Checker).errorf"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).builtin$4"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).builtin$4"
"(*go/types.Checker).builtin$7" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin$7" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin$7" "go/types.Identical"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).builtin$7"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).builtin$7"
"(*go/types.Checker).conversion$2" "(*go/types.Checker).sprintf"
"(*go/types.Checker).conversion$2" "go/types.isString"
"(*go/types.Checker).conversion$1" "go/types.under"
"(*go/types.Checker).conversion$1" "go/types.representableConst"
"(*math/big.Int).Uint64" "math/big.low64"
"go/constant.Uint64Val" "(*math/big.Int).Uint64"
"go/constant.Uint64Val" "(*math/big.Int).IsUint64"
"go/constant.Uint64Val" "fmt.Sprintf"
"(*go/types.Checker).conversion$1" "go/constant.Uint64Val"
"(*go/types.Checker).conversion$1" "go/types.isInteger"
"(*go/types.Checker).conversion$1" "go/types.isString"
"(*go/types.Checker).conversion$1" "go/constant.MakeString"
"(*go/types.Checker).conversion$2" "(*go/types.Checker).conversion$1"
"go/types.isBytesOrRunes" "go/types.under"
"go/types.isBytesOrRunes" "go/types.under"
"(*go/types.Checker).conversion$2" "go/types.isBytesOrRunes"
"(*go/types.Checker).conversion$2" "go/types.isInteger"
"(*go/types.Checker).conversion$2" "(*go/types.Checker).sprintf"
"(*go/types.Checker).conversion$2" "(*go/types.Checker).sprintf"
"(*go/types.Checker).conversion$2" "go/types.isInteger"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).conversion$2"
"(*go/types._TypeSet).underIs" "(*go/types.Checker).conversion$2"
"go/types.hasNil" "(*go/types._TypeSet).underIs"
"(*go/types.Checker).implicitTypeAndValue" "go/types.hasNil"
"(*go/types.Checker).implicitTypeAndValue" "go/types.isTypeParam"
"(*go/types.Checker).implicitTypeAndValue" "(*go/types.Interface).typeSet"
"(*go/types.Checker).implicitTypeAndValue" "(*go/types._TypeSet).underIs"
"(*go/types.Checker).implicitTypeAndValue" "(*go/types.operand).isNil"
"(*go/types.Checker).implicitTypeAndValue" "(*go/types.operand).isNil"
"(*go/types.Interface).Empty" "(*go/types.Interface).typeSet"
"(*go/types._TypeSet).IsMethodSet" "(go/types.termlist).isAll"
"(*go/types._TypeSet).IsAll" "(*go/types._TypeSet).IsMethodSet"
"(*go/types.Interface).Empty" "(*go/types._TypeSet).IsAll"
"(*go/types.Checker).implicitTypeAndValue" "(*go/types.Interface).Empty"
"go/types.Default" "go/types.Unalias"
"(*go/types.Checker).implicitTypeAndValue" "go/types.Default"
"(*go/types.Checker).implicitTypeAndValue" "(*go/types.operand).isNil"
"(*go/types.operand).assignableTo$1" "(*go/types.Checker).implicitTypeAndValue"
"(*go/types._TypeSet).is" "(*go/types.operand).assignableTo$1"
"(*go/types._TypeSet).is" "(*go/types.operand).assignableTo$1"
"(*go/types.operand).assignableTo" "go/types.Identical"
"(*go/types.operand).assignableTo" "go/types.isValid"
"(*go/types.operand).assignableTo" "go/types.under"
"(*go/types.operand).assignableTo" "go/types.under"
"(*go/types.operand).assignableTo" "go/types.isUntyped"
"(*go/types.operand).assignableTo" "go/types.assert"
"(*go/types.operand).assignableTo" "go/types.Identical"
"(*go/types.operand).assignableTo" "(*go/types.TypeParam).is"
"(*go/types.operand).assignableTo" "(*go/types.Checker).implicitTypeAndValue"
"go/types.hasName" "go/types.Unalias"
"(*go/types.operand).assignableTo" "go/types.hasName"
"(*go/types.operand).assignableTo" "go/types.hasName"
"(*go/types.operand).assignableTo" "(*go/types.operand).Pos"
"(*go/types.Checker).implements" "go/types.under"
"(*go/types.Checker).implements" "go/types.under"
"(*go/types.Checker).implements" "go/types.isValid"
"(*go/types.Checker).implements" "go/types.isValid"
"(*go/types.Checker).implements" "go/types.under"
"(*go/types.Checker).implements" "go/types.isValid"
"(*go/types.Checker).implements" "(*go/types.Interface).Empty"
"go/types.isInterfacePtr" "go/types.under"
"go/types.IsInterface" "go/types.under"
"go/types.isInterfacePtr" "go/types.IsInterface"
"(*go/types.Checker).implements" "go/types.isInterfacePtr"
"(*go/types.Checker).implements" "(*go/types.Checker).sprintf"
"(*go/types.Checker).implements" "(*go/types.Checker).sprintf"
"(*go/types.Checker).implements" "(*go/types.Checker).sprintf"
"(*go/types.Checker).implements" "(*go/types.Interface).typeSet"
"(*go/types.Checker).implements" "(*go/types._TypeSet).IsEmpty"
"(*go/types.Checker).implements" "(*go/types.Interface).typeSet"
"(*go/types.Checker).implements" "(*go/types._TypeSet).IsEmpty"
"(*go/types.Checker).missingMethod" "go/types.under"
"(*go/types.Checker).missingMethod" "(*go/types.Interface).typeSet"
"(*go/types.Checker).missingMethod" "go/types.under"
"(*go/types.Checker).missingMethod" "(*go/types.Interface).typeSet"
"go/types.lookupMethod" "(*go/types.object).sameId"
"strings.EqualFold" "unicode/utf8.DecodeRuneInString"
"unicode.To" "unicode.to"
"unicode.ToLower" "unicode.To"
"unicode.SimpleFold" "unicode.ToLower"
"unicode.ToUpper" "unicode.To"
"unicode.SimpleFold" "unicode.ToUpper"
"strings.EqualFold" "unicode.SimpleFold"
"strings.EqualFold" "unicode.SimpleFold"
"go/types.lookupMethod" "strings.EqualFold"
"(*go/types._TypeSet).LookupMethod" "go/types.lookupMethod"
"(*go/types.Checker).missingMethod" "(*go/types._TypeSet).LookupMethod"
"(*go/types.Checker).missingMethod" "go/types.Identical"
"go/types.deref" "go/types.Unalias"
"go/types.lookupFieldOrMethodImpl" "go/types.deref"
"go/types.lookupFieldOrMethodImpl" "go/types.under"
"go/types.lookupFieldOrMethodImpl" "go/types.asNamed"
"(*go/types.instanceLookup).lookup" "(*go/types.Named).Origin"
"(*go/types.instanceLookup).lookup" "go/types.Identical"
"(*go/types.instanceLookup).lookup" "go/types.Identical"
"go/types.lookupFieldOrMethodImpl" "(*go/types.instanceLookup).lookup"
"go/types.lookupFieldOrMethodImpl" "go/types.under"
"(*go/types.instanceLookup).add" "(*go/types.Named).Origin"
"(*go/types.instanceLookup).add" "(*go/types.Named).Origin"
"go/types.lookupFieldOrMethodImpl" "(*go/types.instanceLookup).add"
"(*go/types.Named).lookupMethod" "(*go/types.Named).resolve"
"(*go/types.Named).lookupMethod" "(*go/types.Named).Origin"
"(*go/types.Named).lookupMethod" "go/types.lookupMethod"
"(*go/types.Named).Method" "(*go/types.Named).resolve"
"(*go/types.Named).Method" "(*go/types.Named).state"
"(*go/types.Named).Method" "go/types.assert"
"(*go/types.Named).Method" "(*sync.Mutex).Lock"
"(*go/types.Named).Method" "(*sync.Mutex).Unlock"
"(*go/types.Named).Method" "go/types.assert"
"(*go/types.Named).Method" "go/types.assert"
"(*go/types.Named).expandMethod" "(*go/types.Named).Method"
"(*go/types.Named).expandMethod" "go/types.assert"
"(*go/types.Checker).objDecl" "go/types.assert"
"(*go/types.Checker).objDecl" "(*go/types.object).color"
"(*go/types.object).setColor" "go/types.assert"
"(*go/types.Checker).objDecl" "(*go/types.object).setColor"
"(*go/types.Checker).validCycle" "(*go/types.TypeName).IsAlias"
"(*go/types.Checker).validCycle" "(*go/types.object).color"
"go/types.pathString" "(*go/types.object).Name"
"(*go/types.Checker).validCycle" "go/types.pathString"
"(*go/types.Checker).validCycle" "(*go/types.Checker).trace"
"(*go/types.Checker).dump" "go/types.sprintf"
"fmt.Println" "fmt.Fprintln"
"(*go/types.Checker).dump" "fmt.Println"
"(*go/types.Checker).validCycle" "(*go/types.Checker).dump"
"(*go/types.Checker).validCycle" "go/types.unreachable"
"(*go/types.Checker).validCycle" "(*go/types.object).Pos"
"(*go/types.Checker).validCycle" "(*go/types.TypeName).IsAlias"
"(*go/types.Checker).validCycle" "go/types.assert"
"(*go/types.Checker).validCycle" "go/types.isGeneric"
"(*go/types.Checker).validCycle" "(*go/types.object).color"
"(*go/types.Checker).validCycle" "(*go/types.Checker).cycleError"
"(*go/types.Checker).validCycle" "go/types.unreachable"
"(*go/types.Checker).validCycle" "(*go/types.Checker).trace"
"(*go/types.Checker).validCycle" "(*go/types.object).Pos"
"(*go/types.Checker).validCycle" "(*go/types.object).Pos"
"(*go/types.Checker).validCycle" "(go/token.Pos).IsValid"
"(*go/types.Checker).validCycle$1" "(*go/types.Checker).trace"
"(*go/types.Checker).validCycle$1" "(*go/types.object).Pos"
"(*go/types.Checker).validCycle$1" "(*go/types.object).Pos"
"(*go/types.Checker).validCycle$1" "(*go/types.Checker).trace"
"(*go/types.Checker).validCycle" "(*go/types.Checker).validCycle$1"
"(*go/types.Checker).validCycle" "(*go/types.object).Parent"
"(*go/types.Checker).validCycle" "(*go/types.object).Name"
"(*go/types.Checker).validCycle" "(*go/types.Checker).trace"
"(*go/types.Checker).validCycle" "(*go/types.object).Pos"
"(*go/types.Checker).objDecl" "(*go/types.Checker).validCycle"
"(*go/types.Checker).objDecl" "go/types.unreachable"
"(*go/types.Checker).objDecl" "go/types.unreachable"
"(*go/types.Checker).funcDecl" "go/types.assert"
"(*go/types.Checker).funcDecl" "go/types.assert"
"(*go/types.Checker).openScope" "(*go/ast.Ident).Pos"
"(*go/types.Checker).openScope" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.GenDecl).Pos"
"(*go/types.Checker).openScope" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).openScope" "(*go/ast.BlockStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.ImportSpec).Pos"
"(*go/types.Checker).openScope" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).openScope" "(*go/types.Scope).Pos"
"(*go/types.Checker).openScope" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.Field).Pos"
"(*go/types.Checker).openScope" "(*go/ast.TypeSpec).Pos"
"(*go/types.Checker).openScope" "(*go/ast.File).Pos"
"(*go/types.Checker).openScope" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.Comment).Pos"
"(*go/types.Checker).openScope" "(*go/ast.FieldList).Pos"
"(*go/types.Checker).openScope" "(*go/ast.FuncDecl).Pos"
"(*go/types.Checker).openScope" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.CommentGroup).Pos"
"(*go/types.Checker).openScope" "(*go/ast.Ident).End"
"(*go/types.Checker).openScope" "(*go/ast.IndexListExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.GenDecl).End"
"(*go/types.Checker).openScope" "(*go/ast.BasicLit).End"
"(*go/types.Checker).openScope" "(*go/ast.BlockStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.ImportSpec).End"
"(*go/types.Checker).openScope" "(*go/ast.FuncType).End"
"(*go/types.Checker).openScope" "(*go/types.Scope).End"
"(*go/types.Checker).openScope" "(*go/ast.IndexExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.Field).End"
"(*go/types.Checker).openScope" "(*go/ast.TypeSpec).End"
"(*go/types.Checker).openScope" "(*go/ast.File).End"
"(*go/types.Checker).openScope" "(*go/ast.SelectorExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.Comment).End"
"(*go/types.Checker).openScope" "(*go/ast.FieldList).End"
"(*go/types.Checker).openScope" "(*go/ast.FuncDecl).End"
"(*go/types.Checker).openScope" "(*go/ast.CallExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.CommentGroup).End"
"(*go/types.Checker).openScope" "go/types.NewScope"
"(*go/types.Checker).recordScope" "go/types.assert"
"(*go/types.Checker).recordScope" "go/types.assert"
"(*go/types.Checker).openScope" "(*go/types.Checker).recordScope"
"(*go/types.Checker).openScope" "(*go/ast.ValueSpec).Pos"
"(*go/types.Checker).openScope" "(*go/ast.ValueSpec).End"
"(*go/types.Checker).openScope" "(*go/ast.BadDecl).Pos"
"(*go/types.Checker).openScope" "(*go/ast.BadDecl).End"
"(*go/types.Checker).openScope" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).openScope" "(*go/ast.Ellipsis).End"
"(*go/types.Checker).openScope" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).openScope" "(*go/ast.ChanType).End"
"(*go/types.Checker).openScope" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).openScope" "(*go/ast.InterfaceType).End"
"(*go/types.Checker).openScope" "(*go/ast.LabeledStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.LabeledStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.UnaryExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).openScope" "(*go/ast.FuncLit).End"
"(*go/types.Checker).openScope" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).openScope" "(*go/ast.CompositeLit).End"
"(*go/types.Checker).openScope" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.KeyValueExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.ParenExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.TypeAssertExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.BinaryExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.GoStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.CommClause).Pos"
"(*go/types.Checker).openScope" "(*go/ast.DeferStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.DeferStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.CommClause).End"
"(*go/types.Checker).openScope" "(*go/ast.GoStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).openScope" "(*go/ast.ArrayType).End"
"(*go/types.Checker).openScope" "(*go/ast.AssignStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.AssignStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.SliceExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.SendStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.SendStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.IncDecStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.IncDecStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.ReturnStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.ReturnStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.BranchStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.BranchStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.IfStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.IfStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.SwitchStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.SwitchStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.CaseClause).Pos"
"(*go/types.Checker).openScope" "(*go/ast.CaseClause).End"
"(*go/types.Checker).openScope" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.TypeSwitchStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.ForStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.ForStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.StructType).Pos"
"(*go/types.Checker).openScope" "(*go/ast.StructType).End"
"(*go/types.Checker).openScope" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.StarExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.MapType).Pos"
"(*go/types.Checker).openScope" "(*go/ast.MapType).End"
"(*go/types.Checker).openScope" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).openScope" "(*go/ast.BadExpr).End"
"(*go/types.Checker).openScope" "(*go/ast.RangeStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.RangeStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.DeclStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.DeclStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.SelectStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.SelectStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.EmptyStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.EmptyStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.BadStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.BadStmt).End"
"(*go/types.Checker).openScope" "(*go/ast.ExprStmt).Pos"
"(*go/types.Checker).openScope" "(*go/ast.ExprStmt).End"
"(*go/types.Checker).funcType" "(*go/types.Checker).openScope"
"(*go/types.Checker).funcType" "(*go/types.Checker).recordScope"
"(*go/types.Checker).closeScope" "(*go/types.Scope).Parent"
"(*go/types.Checker).funcType" "(*go/types.Checker).closeScope"
"(*go/types.Checker).unpackRecv" "go/internal/typeparams.UnpackIndexExpr"
"(*go/types.Checker).unpackRecv" "(*go/types.Checker).error"
"(*go/types.Checker).unpackRecv" "(*go/types.Checker).errorf"
"(*go/types.Checker).unpackRecv" "(*go/ast.Ident).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.MapType).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).unpackRecv" "(*go/ast.StructType).Pos"
"(*go/types.Checker).funcType" "(*go/types.Checker).unpackRecv"
"(*go/types.Checker).funcType" "(*go/ast.FieldList).Pos"
"(*go/types.Checker).declareTypeParams" "(*go/ast.Ident).Pos"
"(*go/types.Checker).declareTypeParams" "go/types.NewTypeName"
"(*sync/atomic.Uint32).Add" "sync/atomic.AddUint32"
"go/types.nextID" "(*sync/atomic.Uint32).Add"
"(*go/types.Checker).newTypeParam" "go/types.nextID"
"(*go/types.Checker).newTypeParam" "(*go/types.Checker).needsCleanup"
"(*go/types.Checker).newTypeParam" "(*go/types.TypeParam).iface"
"(*go/types.Checker).declareTypeParams" "(*go/types.Checker).newTypeParam"
"(*go/types.Checker).recordDef" "go/types.assert"
"(*go/types.Checker).declare" "(*go/types.Checker).recordDef"
"(*go/types.Checker).declare" "(*go/types.object).Name"
"(*go/types.Scope).Insert" "(*go/types.Scope).insert"
"(*go/types.Scope).Insert" "(*go/types.object).Name"
"(*go/types.Scope).Insert" "(*go/types.Scope).Lookup"
"(*go/types.Scope).Insert" "(*go/types.object).setParent"
"(*go/types.Scope).Insert" "(*go/types.object).Parent"
"(*go/types.Checker).declare" "(*go/types.Scope).Insert"
"(*go/types.Checker).declare" "(*go/types.object).setScopePos"
"(*go/types.Checker).reportAltDecl" "(go/token.Pos).IsValid"
"(*go/types.Checker).reportAltDecl" "(*go/types.object).Pos"
"(*go/types.Checker).reportAltDecl" "(*go/types.object).Name"
"(*go/types.Checker).reportAltDecl" "(*go/types.Checker).errorf"
"(*go/types.Checker).declare" "(*go/types.Checker).reportAltDecl"
"(*go/types.Checker).declare" "(*go/types.object).Name"
"(*go/types.Checker).declare" "(*go/types.Checker).errorf"
"(*go/types.Checker).declareTypeParams" "(*go/types.Checker).declare"
"(*go/types.Checker).declareTypeParams" "(*go/ast.Ident).Pos"
"(*go/types.Checker).declareTypeParams" "(*go/types.Checker).trace"
"(*go/types.Checker).funcType" "(*go/types.Checker).declareTypeParams"
"(*go/types.Checker).funcType" "go/types.bindTParams"
"(*go/types.Checker).typInternal" "(*go/ast.Ident).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/types.Checker).trace"
"(*go/types.Checker).typInternal$1" "go/types.safeUnderlying"
"(*go/types.Checker).typInternal$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).typInternal$1" "go/types.goTypeName"
"(*go/types.Checker).typInternal$1" "(*go/types.Checker).trace"
"(*go/types.Checker).typInternal$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).typInternal$1" "go/types.goTypeName"
"(*go/types.Checker).typInternal$1" "(*go/types.Checker).trace"
"(*go/types.Checker).typInternal$1" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.MapType).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.MapType).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.StructType).Pos"
"(*go/types.Checker).typInternal$1" "(*go/ast.StructType).Pos"
"(*go/types.Checker).typInternal" "(*go/types.Checker).typInternal$1"
"go/types.setDefType" "go/types.sprintf"
"go/types.setDefType" "go/types.assert"
"go/types.setDefType" "fmt.Sprintf"
"(*go/types.Checker).typInternal" "go/types.setDefType"
"(*go/types.Scope).LookupParent" "(*go/types.Scope).Lookup"
"(*go/types.Scope).LookupParent" "(go/token.Pos).IsValid"
"(*go/types.Scope).LookupParent" "go/types.cmpPos"
"(*go/types.Scope).LookupParent" "(*go/types.object).scopePos"
"(*go/types.Checker).ident" "(*go/types.Scope).LookupParent"
"(*go/types.Checker).recordUse" "go/types.assert"
"(*go/types.Checker).recordUse" "go/types.assert"
"(*go/types.Checker).ident" "(*go/types.Checker).recordUse"
"(*go/types.Checker).ident" "go/types.isValid"
"(*go/types.Checker).ident" "(*go/types.object).Type"
"(*go/types.Checker).ident" "(*go/types.object).Name"
"(*go/types.Checker).ident" "(*go/types.Checker).error"
"(*go/types.Checker).addDeclDep" "(*go/types.declInfo).addDep"
"(*go/types.Checker).ident" "(*go/types.Checker).addDeclDep"
"(*go/types.Checker).ident" "(*go/types.Checker).errorf"
"(*go/types.Checker).ident" "(*go/types.Checker).addDeclDep"
"(*go/types.Checker).ident" "go/types.assert"
"(*go/types.Checker).allowVersion" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.CommentGroup).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.EmptyStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.Ident).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.BlockStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.ImportSpec).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).allowVersion" "(*go/types.Scope).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.BadStmt).Pos"
"(*go/types.Checker).allowVersion" "(go/types.atPos).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.GoStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.Field).Pos"
"(*go/types.Checker).allowVersion" "(*go/types.object).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.TypeSpec).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.File).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.DeferStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.Comment).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.FieldList).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.FuncDecl).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.RangeStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.SelectStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.Object).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).allowVersion" "(go/token.Pos).IsValid"
"(*go/types.Checker).fileFor" "(go/token.Pos).IsValid"
"(*go/types.Checker).fileFor" "go/types.assert"
"(*go/types.Checker).fileFor" "(*go/token.FileSet).Position"
"(*go/types.Checker).fileFor" "(*go/types.Checker).sprintf"
"(*go/types.Checker).allowVersion" "(*go/types.Checker).fileFor"
"strings.Cut" "strings.Index"
"go/version.stripGo" "strings.Cut"
"go/version.Lang" "go/version.stripGo"
"internal/gover.Parse" "internal/gover.cutInt"
"internal/gover.Parse" "internal/gover.cutInt"
"internal/gover.Parse" "internal/gover.CmpInt"
"internal/gover.Parse" "internal/gover.cutInt"
"internal/gover.Parse" "internal/gover.cutInt"
"internal/gover.Lang" "internal/gover.Parse"
"go/version.Lang" "internal/gover.Lang"
"go/version.Lang" "strings.HasPrefix"
"go/types.asGoVersion" "go/version.Lang"
"(*go/types.Checker).allowVersion" "go/types.asGoVersion"
"(*go/types.Checker).allowVersion" "(go/types.goVersion).isValid"
"go/version.Compare" "go/version.stripGo"
"go/version.Compare" "go/version.stripGo"
"internal/gover.Compare" "internal/gover.Parse"
"internal/gover.Compare" "internal/gover.Parse"
"internal/gover.Compare" "internal/gover.CmpInt"
"internal/gover.Compare" "internal/gover.CmpInt"
"internal/gover.Compare" "internal/gover.CmpInt"
"cmp.Compare[string]" "cmp.isNaN[string]"
"cmp.Compare[string]" "cmp.isNaN[string]"
"internal/gover.Compare" "cmp.Compare[string]"
"internal/gover.Compare" "internal/gover.CmpInt"
"go/version.Compare" "internal/gover.Compare"
"(go/types.goVersion).cmp" "go/version.Compare"
"(*go/types.Checker).allowVersion" "(go/types.goVersion).cmp"
"(*go/types.Checker).allowVersion" "(*go/ast.GenDecl).Pos"
"(*go/types.Checker).allowVersion" "(*go/types.operand).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.ValueSpec).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.BadDecl).Pos"
"(*go/types.Checker).allowVersion" "(go/types.posSpan).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.MapType).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.LabeledStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.StructType).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.DeclStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.CommClause).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.ExprStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.AssignStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.SendStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.IncDecStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.ReturnStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.BranchStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.IfStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.SwitchStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.CaseClause).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/types.Checker).allowVersion" "(*go/ast.ForStmt).Pos"
"(*go/types.Checker).verifyVersionf" "(*go/types.Checker).allowVersion"
"(*go/types.Checker).versionErrorf" "(*go/types.Checker).sprintf"
"(*go/types.Checker).versionErrorf" "go/types.newErrorf"
"(*go/types.Checker).versionErrorf" "(*go/types.Checker).report"
"(*go/types.Checker).verifyVersionf" "(*go/types.Checker).versionErrorf"
"(*go/types.Checker).ident" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).ident" "(*go/types.Checker).errorf"
"(*go/types.Checker).ident" "(*go/types.Checker).error"
"(*go/types.Checker).ident" "(*go/types.Checker).objDecl"
"(*go/types.Checker).ident" "(*go/types.Checker).addDeclDep"
"(*go/types.Checker).ident" "(*go/types.object).Type"
"(*go/types.Checker).ident" "(*go/types.Checker).errorf"
"(*go/types.Checker).ident" "go/types.assert"
"(*go/types.Checker).ident" "go/types.unreachable"
"(*go/types.Checker).isBrokenAlias" "go/types.assert"
"(*go/types.Checker).ident" "(*go/types.Checker).isBrokenAlias"
"(*go/types.Checker).ident" "go/types.isValid"
"(*go/types.Checker).typInternal" "(*go/types.Checker).ident"
"(*go/types.Checker).typInternal" "go/types.setDefType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).typInternal" "(*go/types.Checker).errorf"
"(*go/types.environment).lookup" "(*go/types.Scope).LookupParent"
"(*go/types.Checker).selector" "(*go/types.environment).lookup"
"(*go/types.Checker).rawExpr" "(*go/ast.Ident).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/types.Checker).trace"
"(*go/types.Checker).rawExpr$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/types.Checker).trace"
"(*go/types.Checker).rawExpr$1" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.MapType).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).rawExpr$1" "(*go/ast.StructType).Pos"
"(*go/types.Checker).rawExpr" "(*go/types.Checker).rawExpr$1"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).ident"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).error"
"strconv.syntaxError" "strconv.cloneString"
"strconv.ParseInt" "strconv.syntaxError"
"strconv.ParseUint" "strconv.syntaxError"
"strconv.baseError" "strconv.cloneString"
"strconv.baseError" "strconv.Itoa"
"strconv.baseError" "errors.New"
"strconv.ParseUint" "strconv.baseError"
"strconv.ParseUint" "strconv.lower"
"strconv.ParseUint" "strconv.lower"
"strconv.ParseUint" "strconv.lower"
"strconv.bitSizeError" "strconv.cloneString"
"strconv.bitSizeError" "strconv.Itoa"
"strconv.bitSizeError" "errors.New"
"strconv.ParseUint" "strconv.bitSizeError"
"strconv.ParseUint" "strconv.lower"
"strconv.ParseUint" "strconv.lower"
"strconv.ParseUint" "strconv.syntaxError"
"strconv.ParseUint" "strconv.lower"
"strconv.ParseUint" "strconv.syntaxError"
"strconv.rangeError" "strconv.cloneString"
"strconv.ParseUint" "strconv.rangeError"
"strconv.ParseUint" "strconv.rangeError"
"strconv.ParseUint" "strconv.syntaxError"
"strconv.underscoreOK" "strconv.lower"
"strconv.underscoreOK" "strconv.lower"
"strconv.underscoreOK" "strconv.lower"
"strconv.underscoreOK" "strconv.lower"
"strconv.underscoreOK" "strconv.lower"
"strconv.underscoreOK" "strconv.lower"
"strconv.ParseUint" "strconv.underscoreOK"
"strconv.ParseInt" "strconv.ParseUint"
"strconv.ParseInt" "strconv.cloneString"
"strconv.ParseInt" "strconv.rangeError"
"strconv.ParseInt" "strconv.rangeError"
"go/constant.MakeFromLiteral" "strconv.ParseInt"
"go/constant.makeFloatFromLiteral" "go/constant.newFloat"
"(*math/big.Float).Parse" "(*math/big.Float).SetInf"
"(*math/big.Float).Parse" "(*math/big.Float).SetInf"
"(*math/big.Float).Parse" "strings.NewReader"
"(*fmt.ss).ReadRune" "(*fmt.ss).ReadRune"
"(*bytes.Buffer).ReadRune" "(*bytes.Buffer).empty"
"(*bytes.Buffer).ReadRune" "(*bytes.Buffer).Reset"
"(*bytes.Buffer).ReadRune" "unicode/utf8.DecodeRune"
"(*fmt.ss).ReadRune" "(*bytes.Buffer).ReadRune"
"(*strings.Reader).ReadRune" "unicode/utf8.DecodeRuneInString"
"(*fmt.ss).ReadRune" "(*strings.Reader).ReadRune"
"(*bytes.Reader).ReadRune" "unicode/utf8.DecodeRune"
"(*fmt.ss).ReadRune" "(*bytes.Reader).ReadRune"
"(*fmt.ss).Read" "errors.New"
"(*bufio.Reader).fill" "(*fmt.ss).Read"
"(*os.File).Read" "(*os.File).checkValid"
"(*internal/poll.FD).readLock" "(*internal/poll.fdMutex).rwlock"
"(*internal/poll.FD).readLock" "internal/poll.errClosing"
"(*internal/poll.FD).Read" "(*internal/poll.FD).readLock"
"(*internal/poll.FD).readUnlock" "(*internal/poll.fdMutex).rwunlock"
"(*internal/poll.FD).readUnlock" "(*internal/poll.FD).destroy"
"(*internal/poll.FD).Read" "(*internal/poll.FD).readUnlock"
"(*internal/poll.pollDesc).prepareRead" "(*internal/poll.pollDesc).prepare"
"(*internal/poll.FD).Read" "(*internal/poll.pollDesc).prepareRead"
"(*internal/poll.FD).Read" "internal/poll.ignoringEINTRIO"
"(*internal/poll.FD).Read" "(*internal/poll.FD).eofError"
"(*internal/poll.pollDesc).waitRead" "(*internal/poll.pollDesc).wait"
"(*internal/poll.FD).Read" "(*internal/poll.pollDesc).waitRead"
"(*internal/poll.FD).Read" "(*internal/poll.pollDesc).pollable"
"(*os.File).read" "(*internal/poll.FD).Read"
"(*os.File).read" "runtime.KeepAlive"
"(*os.File).Read" "(*os.File).read"
"(*os.File).Read" "(*os.File).wrapErr"
"(*bufio.Reader).fill" "(*os.File).Read"
"(*bufio.Reader).fill" "(*internal/poll.FD).Read"
"(*io.LimitedReader).Read" "(*fmt.ss).Read"
"(*io.LimitedReader).Read" "(*os.File).Read"
"(*io.LimitedReader).Read" "(*internal/poll.FD).Read"
"(*io.LimitedReader).Read" "(*io.LimitedReader).Read"
"(*bufio.Reader).Read" "(*bufio.Reader).Buffered"
"(*bufio.Reader).Read" "(*bufio.Reader).readErr"
"(*bufio.Reader).Read" "(*bufio.Reader).readErr"
"(*bufio.Reader).Read" "(*fmt.ss).Read"
"(*bufio.Reader).Read" "(*os.File).Read"
"(*bufio.Reader).Read" "(*internal/poll.FD).Read"
"(*bufio.Reader).Read" "(*bufio.Reader).readErr"
"(*bufio.Reader).Read" "(*bufio.Reader).Read"
"(*bufio.Reader).Read" "(*strings.Reader).Read"
"(*bufio.Reader).Read" "(*bytes.Reader).Read"
"(*math/rand.lockedSource).read" "(*sync.Mutex).Lock"
"(*math/rand.rngSource).Int63" "(*math/rand.rngSource).Uint64"
"math/rand.read" "(*math/rand.rngSource).Int63"
"(*math/rand.Rand).Int63" "(*math/rand.Rand).Int63"
"(*math/rand.Rand).Int63" "(*math/rand.rngSource).Int63"
"(*math/rand.runtimeSource).Int63" "math/rand.runtime_rand"
"(*math/rand.Rand).Int63" "(*math/rand.runtimeSource).Int63"
"math/rand.read" "(*math/rand.Rand).Int63"
"math/rand.read" "(*math/rand.rngSource).Int63"
"math/rand.read" "(*math/rand.runtimeSource).Int63"
"(*math/rand.lockedSource).read" "math/rand.read"
"(*math/rand.lockedSource).read" "(*sync.Mutex).Unlock"
"(*math/rand.Rand).Read" "(*math/rand.lockedSource).read"
"(*math/rand.runtimeSource).read" "(*sync.Mutex).Lock"
"(*math/rand.runtimeSource).read" "math/rand.read"
"(*math/rand.runtimeSource).read" "(*sync.Mutex).Unlock"
"(*math/rand.Rand).Read" "(*math/rand.runtimeSource).read"
"(*math/rand.Rand).Read" "math/rand.read"
"(*bufio.Reader).Read" "(*math/rand.Rand).Read"
"(*bufio.Reader).Read" "(*strings.Reader).Read"
"(*bytes.Buffer).Read" "(*bytes.Buffer).empty"
"(*bytes.Buffer).Read" "(*bytes.Buffer).Reset"
"(*bufio.Reader).Read" "(*bytes.Buffer).Read"
"(*bufio.Reader).Read" "(*math/rand.Rand).Read"
"(*bufio.Reader).Read" "(*bytes.Reader).Read"
"(*bufio.Reader).Read" "(*fmt.stringReader).Read"
"(*bufio.Reader).Read" "(*bufio.Reader).Read"
"(*bufio.Reader).Read" "(*io.LimitedReader).Read"
"(*bufio.Reader).Read" "(*fmt.ss).Read"
"(*bufio.Reader).Read" "(*os.File).Read"
"(*bufio.Reader).Read" "(*internal/poll.FD).Read"
"(*bufio.Reader).Read" "(*bufio.Reader).readErr"
"(*bufio.Reader).Read" "(*io.LimitedReader).Read"
"(*bufio.Reader).Read" "(*bytes.Buffer).Read"
"(*bufio.Reader).Read" "(*fmt.stringReader).Read"
"(*io.LimitedReader).Read" "(*bufio.Reader).Read"
"(*io.LimitedReader).Read" "(*math/rand.Rand).Read"
"(*io.LimitedReader).Read" "(*fmt.stringReader).Read"
"(*io.LimitedReader).Read" "(*bytes.Reader).Read"
"(*io.LimitedReader).Read" "(*strings.Reader).Read"
"(*io.LimitedReader).Read" "(*bytes.Buffer).Read"
"(*bufio.Reader).fill" "(*io.LimitedReader).Read"
"(*bufio.Reader).fill" "(*bufio.Reader).Read"
"(*bufio.Reader).fill" "(*math/rand.Rand).Read"
"(*bufio.Reader).fill" "(*fmt.stringReader).Read"
"(*bufio.Reader).fill" "(*bytes.Reader).Read"
"(*bufio.Reader).fill" "(*strings.Reader).Read"
"(*bufio.Reader).fill" "(*bytes.Buffer).Read"
"(*bufio.Reader).ReadRune" "(*bufio.Reader).fill"
"(*bufio.Reader).ReadRune" "unicode/utf8.FullRune"
"(*bufio.Reader).ReadRune" "(*bufio.Reader).readErr"
"(*bufio.Reader).ReadRune" "unicode/utf8.DecodeRune"
"(*fmt.ss).ReadRune" "(*bufio.Reader).ReadRune"
"(*fmt.readRune).ReadRune" "unicode/utf8.RuneLen"
"io.ReadAtLeast" "(*fmt.ss).Read"
"io.ReadAtLeast" "(*os.File).Read"
"io.ReadAtLeast" "(*internal/poll.FD).Read"
"io.ReadAtLeast" "(*io.LimitedReader).Read"
"io.ReadAtLeast" "(*bufio.Reader).Read"
"io.ReadAtLeast" "(*math/rand.Rand).Read"
"io.ReadAtLeast" "(*fmt.stringReader).Read"
"io.ReadAtLeast" "(*bytes.Reader).Read"
"io.ReadAtLeast" "(*strings.Reader).Read"
"io.ReadAtLeast" "(*bytes.Buffer).Read"
"io.ReadFull" "io.ReadAtLeast"
"(*fmt.readRune).readByte" "io.ReadFull"
"(*fmt.readRune).ReadRune" "(*fmt.readRune).readByte"
"(*fmt.readRune).ReadRune" "(*fmt.readRune).readByte"
"(*fmt.readRune).ReadRune" "unicode/utf8.DecodeRune"
"(*fmt.readRune).ReadRune" "unicode/utf8.FullRune"
"(*fmt.ss).ReadRune" "(*fmt.readRune).ReadRune"
"(math/big.byteReader).ReadByte" "(*fmt.ss).ReadRune"
"(math/big.byteReader).ReadByte" "fmt.Errorf"
"math/big.scanSign" "(math/big.byteReader).ReadByte"
"math/big.scanSign" "(*bufio.Reader).UnreadByte"
"math/big.scanSign" "(*bytes.Buffer).UnreadByte"
"math/big.scanSign" "(*strings.Reader).ReadByte"
"(*bufio.Reader).ReadByte" "(*bufio.Reader).readErr"
"(*bufio.Reader).ReadByte" "(*bufio.Reader).fill"
"math/big.scanSign" "(*bufio.Reader).ReadByte"
"(*bytes.Buffer).ReadByte" "(*bytes.Buffer).empty"
"(*bytes.Buffer).ReadByte" "(*bytes.Buffer).Reset"
"math/big.scanSign" "(*bytes.Buffer).ReadByte"
"math/big.scanSign" "(*bytes.Reader).ReadByte"
"(*fmt.ss).UnreadRune" "(*fmt.ss).UnreadRune"
"(*bytes.Buffer).UnreadRune" "errors.New"
"(*fmt.ss).UnreadRune" "(*bytes.Buffer).UnreadRune"
"(*strings.Reader).UnreadRune" "errors.New"
"(*strings.Reader).UnreadRune" "errors.New"
"(*fmt.ss).UnreadRune" "(*strings.Reader).UnreadRune"
"(*bytes.Reader).UnreadRune" "errors.New"
"(*bytes.Reader).UnreadRune" "errors.New"
"(*fmt.ss).UnreadRune" "(*bytes.Reader).UnreadRune"
"(*fmt.ss).UnreadRune" "(*bufio.Reader).UnreadRune"
"(*fmt.readRune).UnreadRune" "errors.New"
"(*fmt.ss).UnreadRune" "(*fmt.readRune).UnreadRune"
"(math/big.byteReader).UnreadByte" "(*fmt.ss).UnreadRune"
"math/big.scanSign" "(math/big.byteReader).UnreadByte"
"(*bytes.Reader).UnreadByte" "errors.New"
"math/big.scanSign" "(*bytes.Reader).UnreadByte"
"(*strings.Reader).UnreadByte" "errors.New"
"math/big.scanSign" "(*strings.Reader).UnreadByte"
"(*math/big.Float).scan" "math/big.scanSign"
"(math/big.nat).scan" "fmt.Sprintf"
"(math/big.nat).scan" "(math/big.byteReader).ReadByte"
"(math/big.nat).scan" "(*bytes.Buffer).UnreadByte"
"(math/big.nat).scan" "(math/big.nat).mulAddWW"
"(math/big.nat).scan" "(*strings.Reader).ReadByte"
"(math/big.nat).scan" "(*bufio.Reader).ReadByte"
"(math/big.nat).scan" "(*bytes.Buffer).ReadByte"
"(math/big.nat).scan" "(*bytes.Reader).ReadByte"
"(math/big.nat).scan" "math/big.maxPow"
"(math/big.nat).scan" "(math/big.byteReader).ReadByte"
"(math/big.nat).scan" "(*bufio.Reader).UnreadByte"
"(math/big.nat).scan" "math/big.pow"
"(math/big.nat).scan" "(*strings.Reader).ReadByte"
"(math/big.nat).scan" "(*bufio.Reader).ReadByte"
"(math/big.nat).scan" "(*bytes.Buffer).ReadByte"
"(math/big.nat).scan" "(*bytes.Reader).ReadByte"
"(math/big.nat).scan" "(math/big.byteReader).ReadByte"
"(math/big.nat).scan" "(*strings.Reader).UnreadByte"
"(math/big.nat).scan" "(math/big.nat).mulAddWW"
"(math/big.nat).scan" "(*strings.Reader).ReadByte"
"(math/big.nat).scan" "(*bufio.Reader).ReadByte"
"(math/big.nat).scan" "(*bytes.Buffer).ReadByte"
"(math/big.nat).scan" "(*bytes.Reader).ReadByte"
"(math/big.nat).scan" "(math/big.byteReader).ReadByte"
"(math/big.nat).scan" "(math/big.nat).norm"
"(math/big.nat).scan" "(*bytes.Reader).UnreadByte"
"(math/big.nat).scan" "(*strings.Reader).ReadByte"
"(math/big.nat).scan" "(*bufio.Reader).ReadByte"
"(math/big.nat).scan" "(*bytes.Buffer).ReadByte"
"(math/big.nat).scan" "(*bytes.Reader).ReadByte"
"(math/big.nat).scan" "(math/big.byteReader).UnreadByte"
"(*math/big.Float).scan" "(math/big.nat).scan"
"math/big.scanExponent" "(math/big.byteReader).ReadByte"
"math/big.scanExponent" "(*bytes.Reader).UnreadByte"
"math/big.scanExponent" "(*bytes.Buffer).UnreadByte"
"math/big.scanExponent" "(*strings.Reader).ReadByte"
"math/big.scanExponent" "(*bufio.Reader).ReadByte"
"math/big.scanExponent" "(*bytes.Buffer).ReadByte"
"math/big.scanExponent" "(*bytes.Reader).ReadByte"
"math/big.scanExponent" "(math/big.byteReader).ReadByte"
"math/big.scanExponent" "(math/big.byteReader).UnreadByte"
"math/big.scanExponent" "(*bufio.Reader).UnreadByte"
"math/big.scanExponent" "(*strings.Reader).ReadByte"
"math/big.scanExponent" "(*bufio.Reader).ReadByte"
"math/big.scanExponent" "(*bytes.Buffer).ReadByte"
"math/big.scanExponent" "(*bytes.Reader).ReadByte"
"math/big.scanExponent" "(math/big.byteReader).UnreadByte"
"math/big.scanExponent" "strconv.ParseInt"
"math/big.scanExponent" "(*bufio.Reader).ReadByte"
"math/big.scanExponent" "(*strings.Reader).UnreadByte"
"math/big.scanExponent" "(*bufio.Reader).UnreadByte"
"math/big.scanExponent" "(*bytes.Buffer).UnreadByte"
"math/big.scanExponent" "(*bytes.Reader).UnreadByte"
"math/big.scanExponent" "(math/big.byteReader).ReadByte"
"math/big.scanExponent" "(*bytes.Reader).ReadByte"
"math/big.scanExponent" "(*strings.Reader).UnreadByte"
"math/big.scanExponent" "(*strings.Reader).ReadByte"
"math/big.scanExponent" "(*bufio.Reader).ReadByte"
"math/big.scanExponent" "(*bytes.Buffer).ReadByte"
"math/big.scanExponent" "(*bytes.Reader).ReadByte"
"math/big.scanExponent" "(math/big.byteReader).ReadByte"
"math/big.scanExponent" "(*bytes.Buffer).ReadByte"
"math/big.scanExponent" "(*strings.Reader).ReadByte"
"(*math/big.Float).scan" "math/big.scanExponent"
"(*math/big.Float).scan" "math/big.fnorm"
"(*math/big.Float).scan" "fmt.Errorf"
"(*math/big.Float).scan" "(*math/big.Float).round"
"(*math/big.Float).scan" "(*math/big.Float).Prec"
"(*math/big.Float).scan" "(*math/big.Float).SetPrec"
"(*math/big.Float).SetUint64" "(*math/big.Float).setBits64"
"(*math/big.Float).pow5" "(*math/big.Float).SetUint64"
"(*math/big.Float).pow5" "(*math/big.Float).SetUint64"
"(*math/big.Float).pow5" "(*math/big.Float).Prec"
"(*math/big.Float).pow5" "(*math/big.Float).SetPrec"
"(*math/big.Float).pow5" "(*math/big.Float).SetUint64"
"(*math/big.Float).pow5" "(*math/big.Float).Mul"
"(*math/big.Float).pow5" "(*math/big.Float).Mul"
"(*math/big.Float).scan" "(*math/big.Float).pow5"
"(*math/big.Float).scan" "(*math/big.Float).Quo"
"(*math/big.Float).scan" "(*math/big.Float).pow5"
"(*math/big.Float).scan" "(*math/big.Float).Mul"
"(*math/big.Float).Parse" "(*math/big.Float).scan"
"(*math/big.Float).Parse" "(*strings.Reader).ReadByte"
"(*math/big.Float).Parse" "fmt.Errorf"
"(*math/big.Float).SetString" "(*math/big.Float).Parse"
"go/constant.makeFloatFromLiteral" "(*math/big.Float).SetString"
"go/constant.makeFloatFromLiteral" "go/constant.smallFloat"
"go/constant.makeFloatFromLiteral" "(*math/big.Float).Sign"
"go/constant.makeFloatFromLiteral" "go/constant.makeFloat"
"go/constant.makeFloatFromLiteral" "go/constant.newRat"
"(*math/big.Rat).SetString" "strings.Index"
"(*math/big.Int).SetString" "strings.NewReader"
"(*math/big.Int).scan" "math/big.scanSign"
"(*math/big.Int).scan" "(math/big.nat).scan"
"(*math/big.Int).setFromScanner" "(*math/big.Int).scan"
"(*math/big.Int).setFromScanner" "(math/big.byteReader).ReadByte"
"(*math/big.Int).setFromScanner" "(*bytes.Buffer).ReadByte"
"(*math/big.Int).setFromScanner" "(*bytes.Reader).ReadByte"
"(*math/big.Int).setFromScanner" "(*strings.Reader).ReadByte"
"(*math/big.Int).setFromScanner" "(*bufio.Reader).ReadByte"
"(*math/big.Int).SetString" "(*math/big.Int).setFromScanner"
"(*math/big.Rat).SetString" "(*math/big.Int).SetString"
"(*math/big.Rat).SetString" "strings.NewReader"
"(*math/big.Rat).SetString" "math/big.scanSign"
"(*math/big.Rat).SetString" "strings.NewReader"
"(*math/big.Rat).SetString" "(math/big.nat).scan"
"(*math/big.Rat).SetString" "(*strings.Reader).ReadByte"
"(*math/big.Rat).SetString" "(*math/big.Rat).norm"
"(*math/big.Rat).SetString" "(math/big.nat).scan"
"(*math/big.Rat).SetString" "math/big.scanExponent"
"(*math/big.Rat).SetString" "(*strings.Reader).ReadByte"
"(*math/big.Rat).SetString" "(*math/big.Rat).norm"
"(*math/big.Rat).SetString" "(math/big.nat).setWord"
"(*math/big.Rat).SetString" "(math/big.nat).setWord"
"(*math/big.Rat).SetString" "(math/big.nat).expNN"
"(*math/big.Rat).SetString" "(math/big.nat).mul"
"(*math/big.Rat).SetString" "(math/big.nat).setWord"
"(*math/big.Rat).SetString" "(math/big.nat).shl"
"(*math/big.Rat).SetString" "(math/big.nat).shl"
"(*math/big.Rat).SetString" "(*math/big.Rat).norm"
"go/constant.makeFloatFromLiteral" "(*math/big.Rat).SetString"
"go/constant.MakeFromLiteral" "go/constant.makeFloatFromLiteral"
"go/constant.MakeFromLiteral" "go/constant.newInt"
"go/constant.MakeFromLiteral" "(*math/big.Int).SetString"
"go/constant.MakeFromLiteral" "go/constant.makeFloatFromLiteral"
"go/constant.MakeFromLiteral" "go/constant.makeComplex"
"strconv.index" "internal/bytealg.IndexByteString"
"strconv.unquote" "strconv.index"
"strconv.contains" "strconv.index"
"strconv.unquote" "strconv.contains"
"strconv.unquote" "strconv.contains"
"strconv.unquote" "strconv.contains"
"strconv.unquote" "unicode/utf8.ValidString"
"strconv.unquote" "unicode/utf8.DecodeRuneInString"
"strconv.UnquoteChar" "unicode/utf8.DecodeRuneInString"
"strconv.UnquoteChar" "strconv.unhex"
"strconv.UnquoteChar" "unicode/utf8.ValidRune"
"strconv.unquote" "strconv.UnquoteChar"
"strconv.unquote" "unicode/utf8.AppendRune"
"strconv.Unquote" "strconv.unquote"
"go/constant.MakeFromLiteral" "strconv.Unquote"
"go/constant.MakeFromLiteral" "strconv.UnquoteChar"
"go/constant.MakeFromLiteral" "go/constant.MakeInt64"
"go/constant.MakeFromLiteral" "fmt.Sprintf"
"go/constant.MakeFromLiteral" "go/constant.MakeString"
"(*go/types.operand).setConst" "go/constant.MakeFromLiteral"
"(*go/types.operand).setConst" "(go/constant.floatVal).Kind"
"(*go/types.operand).setConst" "(go/constant.intVal).Kind"
"(*go/types.operand).setConst" "(*go/constant.stringVal).Kind"
"(*go/types.operand).setConst" "(go/constant.unknownVal).Kind"
"(*go/types.operand).setConst" "(go/constant.int64Val).Kind"
"(*go/types.operand).setConst" "(go/constant.boolVal).Kind"
"(*go/types.operand).setConst" "go/types.unreachable"
"(*go/types.operand).setConst" "(go/constant.complexVal).Kind"
"(*go/types.operand).setConst" "(go/constant.ratVal).Kind"
"(*go/types.Checker).exprInternal" "(*go/types.operand).setConst"
"strings.Contains" "strings.Index"
"(*go/types.Checker).langCompat" "strings.Contains"
"(*go/types.Checker).langCompat" "(*go/types.Checker).allowVersion"
"(*go/types.Checker).langCompat" "(*go/types.Checker).versionErrorf"
"(*go/types.Checker).langCompat" "(*go/types.Checker).versionErrorf"
"(*go/types.Checker).langCompat" "(*go/types.Checker).versionErrorf"
"(*go/types.Checker).langCompat" "(*go/types.Checker).versionErrorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).langCompat"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).overflow" "go/types.assert"
"(*go/types.Checker).overflow" "(go/constant.floatVal).Kind"
"(*go/types.Checker).overflow" "(go/constant.intVal).Kind"
"(*go/types.Checker).overflow" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).overflow" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).overflow" "(go/constant.int64Val).Kind"
"(*go/types.Checker).overflow" "(go/constant.boolVal).Kind"
"(*go/types.Checker).overflow" "(*go/types.Checker).error"
"(*go/types.Checker).overflow" "go/types.isTyped"
"(*go/types.Checker).overflow" "go/types.under"
"(*go/types.Checker).representable" "(*go/types.Checker).representation"
"(*go/types.Checker).invalidConversion" "(*go/types.Checker).errorf"
"(*go/types.Checker).representable" "(*go/types.Checker).invalidConversion"
"(*go/types.Checker).representable" "go/types.assert"
"(*go/types.Checker).overflow" "(*go/types.Checker).representable"
"(*go/types.Checker).overflow" "(go/constant.floatVal).Kind"
"(*go/types.Checker).overflow" "(go/constant.intVal).Kind"
"(*go/types.Checker).overflow" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).overflow" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).overflow" "(go/constant.int64Val).Kind"
"(*go/types.Checker).overflow" "(go/constant.boolVal).Kind"
"(*go/types.Checker).overflow" "go/types.opName"
"(*go/types.Checker).overflow" "go/constant.BitLen"
"(*go/types.Checker).overflow" "(*go/types.Checker).errorf"
"(*go/types.Checker).overflow" "go/constant.MakeUnknown"
"(*go/types.Checker).overflow" "(go/constant.complexVal).Kind"
"(*go/types.Checker).overflow" "(go/constant.complexVal).Kind"
"(*go/types.Checker).overflow" "(go/constant.ratVal).Kind"
"(*go/types.Checker).overflow" "(go/constant.ratVal).Kind"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).overflow"
"(*go/types.Checker).definedType" "(*go/types.Checker).typInternal"
"(*go/types.Checker).definedType" "go/types.isTyped"
"(*go/types.Checker).definedType" "go/types.assert"
"(*go/types.Checker).definedType" "go/types.isGeneric"
"(*go/types.Checker).definedType" "(*go/types.Checker).errorf"
"(*go/types.Checker).recordTypeAndValue" "go/types.assert"
"(*go/types.Checker).recordTypeAndValue" "go/types.assert"
"(*go/types.Checker).recordTypeAndValue" "go/types.assert"
"(*go/types.Checker).recordTypeAndValue" "go/types.isValid"
"(*go/types.Checker).recordTypeAndValue" "go/types.allBasic"
"(*go/types.Checker).recordTypeAndValue" "go/types.assert"
"(*go/types.Checker).definedType" "(*go/types.Checker).recordTypeAndValue"
"(*go/types.Checker).typ" "(*go/types.Checker).definedType"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).typ"
"(*go/types.Checker).exprInternal" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.FuncLit).End"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).later"
"(*go/types.Checker).exprInternal" "(*go/types.action).describef"
"go/types.coreType" "go/types.under"
"(*go/types.TypeParam).underIs" "(*go/types.TypeParam).iface"
"(*go/types.TypeParam).underIs" "(*go/types.Interface).typeSet"
"(*go/types.TypeParam).underIs" "(*go/types._TypeSet).underIs"
"go/types.coreType" "(*go/types.TypeParam).underIs"
"(*go/types.Checker).exprInternal" "go/types.coreType"
"(*go/types.Checker).exprInternal" "go/types.coreType"
"(*go/types.Checker).exprInternal" "go/types.deref"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).typ"
"(*go/types.Checker).varType" "(*go/types.Checker).definedType"
"(*go/types.Checker).validVarType" "go/types.isTypeParam"
"(*go/types.Checker).validVarType" "(*go/types.Checker).later"
"(*go/types.Checker).validVarType" "(*go/types.action).describef"
"(*go/types.Checker).varType" "(*go/types.Checker).validVarType"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).varType"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).error"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).error"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).error"
"(*go/types.Checker).expr" "(*go/types.Checker).rawExpr"
"(*go/types.Checker).exclude" "(*go/types.Checker).errorf"
"(*go/types.Checker).exclude" "go/types.unreachable"
"(*go/types.Checker).expr" "(*go/types.Checker).exclude"
"(*go/types.Checker).singleValue" "(*go/types.Tuple).Len"
"(*go/types.Checker).singleValue" "go/types.assert"
"(*go/types.Checker).singleValue" "(*go/types.Checker).errorf"
"(*go/types.Checker).expr" "(*go/types.Checker).singleValue"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).expr"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"go/types.fieldIndex" "(*go/types.object).sameId"
"(*go/types.Checker).exprInternal" "go/types.fieldIndex"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).recordUse"
"(*go/types.Checker).assignment" "(*go/types.Checker).singleValue"
"(*go/types.Checker).assignment" "go/types.isUntyped"
"(*go/types.Checker).assignment" "(*go/types.Checker).errorf"
"(*go/types.Checker).assignment" "go/types.under"
"(*go/types.Checker).assignment" "(*go/types.Checker).implicitTypeAndValue"
"go/types.isNonTypeParamInterface" "go/types.isTypeParam"
"go/types.isNonTypeParamInterface" "go/types.IsInterface"
"(*go/types.Checker).assignment" "go/types.isNonTypeParamInterface"
"(*go/types.Checker).assignment" "(*go/types.Checker).errorf"
"(*go/types.Checker).assignment" "go/types.Default"
"(*go/types.Checker).assignment" "(*go/types.Checker).sprintf"
"(*go/types.Checker).assignment" "(*go/types.Checker).error"
"(*go/types.Checker).assignment" "(*go/types.Checker).updateExprVal"
"(*go/types.Checker).updateExprType0" "(*go/ast.Ident).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.MapType).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).updateExprType0" "(*go/types.Checker).dump"
"(*go/types.Checker).updateExprType0" "go/types.unreachable"
"(*go/types.Checker).updateExprType0" "(*go/types.Checker).updateExprType0"
"(*go/types.Checker).updateExprType0" "(*go/types.Checker).updateExprType0"
"(*go/types.Checker).updateExprType0" "go/types.unreachable"
"(*go/types.Checker).updateExprType0" "go/types.isComparison"
"(*go/types.Checker).updateExprType0" "go/types.isShift"
"(*go/types.Checker).updateExprType0" "(*go/types.Checker).updateExprType0"
"(*go/types.Checker).updateExprType0" "(*go/types.Checker).updateExprType0"
"(*go/types.Checker).updateExprType0" "(*go/types.Checker).updateExprType0"
"(*go/types.Checker).updateExprType0" "go/types.under"
"(*go/types.Checker).updateExprType0" "go/types.isUntyped"
"(*go/types.Checker).updateExprType0" "go/types.allInteger"
"(*go/types.Checker).updateExprType0" "(*go/types.Checker).errorf"
"(*go/types.Checker).convertUntyped" "(*go/types.Checker).implicitTypeAndValue"
"(*go/types.Checker).convertUntyped" "go/types.isTypeParam"
"(*go/types.Checker).convertUntyped" "go/types.safeUnderlying"
"(*go/types.Checker).convertUntyped" "(*go/types.Checker).invalidConversion"
"(*go/types.Checker).convertUntyped" "(*go/types.Checker).updateExprVal"
"(*go/types.Checker).convertUntyped" "(*go/types.Checker).updateExprType"
"(*go/types.Checker).updateExprType0" "(*go/types.Checker).convertUntyped"
"(*go/types.Checker).updateExprType0" "(*go/types.Checker).recordTypeAndValue"
"(*go/types.Checker).updateExprType0" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).updateExprType0" "(*go/ast.StructType).Pos"
"(*go/types.Checker).updateExprType" "(*go/types.Checker).updateExprType0"
"(*go/types.Checker).assignment" "(*go/types.Checker).updateExprType"
"(*go/types.Checker).assignment" "(*go/types.Checker).errorf"
"(*go/types.Checker).assignment" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).assignment" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).assignment" "(*go/types.operand).assignableTo"
"(*go/types.Checker).assignment" "(*go/types.Checker).errorf"
"(*go/types.Checker).assignment" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).assignment"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).error"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).expr"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.object).Exported"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).assignment"
"go/types.inNode" "(*go/ast.Ident).Pos"
"go/types.inNode" "(*go/ast.IndexListExpr).Pos"
"go/types.inNode" "(*go/ast.GenDecl).Pos"
"go/types.inNode" "(*go/ast.BasicLit).Pos"
"go/types.inNode" "(*go/ast.BlockStmt).Pos"
"go/types.inNode" "(*go/ast.ImportSpec).Pos"
"go/types.inNode" "(*go/ast.FuncType).Pos"
"go/types.inNode" "(*go/types.Scope).Pos"
"go/types.inNode" "(*go/ast.IndexExpr).Pos"
"go/types.inNode" "(*go/ast.Field).Pos"
"go/types.inNode" "(*go/ast.TypeSpec).Pos"
"go/types.inNode" "(*go/ast.File).Pos"
"go/types.inNode" "(*go/ast.SelectorExpr).Pos"
"go/types.inNode" "(*go/ast.Comment).Pos"
"go/types.inNode" "(*go/ast.FieldList).Pos"
"go/types.inNode" "(*go/ast.FuncDecl).Pos"
"go/types.inNode" "(*go/ast.CallExpr).Pos"
"go/types.inNode" "(*go/ast.CommentGroup).Pos"
"go/types.inNode" "(*go/ast.ValueSpec).Pos"
"go/types.inNode" "(*go/ast.BadDecl).Pos"
"go/types.inNode" "(*go/ast.Ellipsis).Pos"
"go/types.inNode" "(*go/ast.ChanType).Pos"
"go/types.inNode" "(*go/ast.InterfaceType).Pos"
"go/types.inNode" "(*go/ast.LabeledStmt).Pos"
"go/types.inNode" "(*go/ast.UnaryExpr).Pos"
"go/types.inNode" "(*go/ast.FuncLit).Pos"
"go/types.inNode" "(*go/ast.CompositeLit).Pos"
"go/types.inNode" "(*go/ast.KeyValueExpr).Pos"
"go/types.inNode" "(*go/ast.ParenExpr).Pos"
"go/types.inNode" "(*go/ast.TypeAssertExpr).Pos"
"go/types.inNode" "(*go/ast.BinaryExpr).Pos"
"go/types.inNode" "(*go/ast.Ident).End"
"go/types.inNode" "(*go/ast.IndexListExpr).End"
"go/types.inNode" "(*go/ast.GenDecl).End"
"go/types.inNode" "(*go/ast.BasicLit).End"
"go/types.inNode" "(*go/ast.BlockStmt).End"
"go/types.inNode" "(*go/ast.ImportSpec).End"
"go/types.inNode" "(*go/ast.FuncType).End"
"go/types.inNode" "(*go/types.Scope).End"
"go/types.inNode" "(*go/ast.IndexExpr).End"
"go/types.inNode" "(*go/ast.Field).End"
"go/types.inNode" "(*go/ast.TypeSpec).End"
"go/types.inNode" "(*go/ast.File).End"
"go/types.inNode" "(*go/ast.SelectorExpr).End"
"go/types.inNode" "(*go/ast.Comment).End"
"go/types.inNode" "(*go/ast.FieldList).End"
"go/types.inNode" "(*go/ast.FuncDecl).End"
"go/types.inNode" "(*go/ast.CallExpr).End"
"go/types.inNode" "(*go/ast.CommentGroup).End"
"go/types.inNode" "(*go/ast.ValueSpec).End"
"go/types.inNode" "(*go/ast.BadDecl).End"
"go/types.inNode" "(*go/ast.Ellipsis).End"
"go/types.inNode" "(*go/ast.ChanType).End"
"go/types.inNode" "(*go/ast.InterfaceType).End"
"go/types.inNode" "(*go/ast.LabeledStmt).End"
"go/types.inNode" "(*go/ast.UnaryExpr).End"
"go/types.inNode" "(*go/ast.FuncLit).End"
"go/types.inNode" "(*go/ast.CompositeLit).End"
"go/types.inNode" "(*go/ast.KeyValueExpr).End"
"go/types.inNode" "(*go/ast.ParenExpr).End"
"go/types.inNode" "(*go/ast.TypeAssertExpr).End"
"go/types.inNode" "(*go/ast.BinaryExpr).End"
"go/types.inNode" "go/types.assert"
"go/types.inNode" "(*go/ast.GoStmt).Pos"
"go/types.inNode" "(*go/ast.CommClause).Pos"
"go/types.inNode" "(*go/ast.DeferStmt).End"
"go/types.inNode" "(*go/ast.DeferStmt).Pos"
"go/types.inNode" "(*go/ast.CommClause).End"
"go/types.inNode" "(*go/ast.GoStmt).End"
"go/types.inNode" "(*go/ast.ArrayType).Pos"
"go/types.inNode" "(*go/ast.ArrayType).End"
"go/types.inNode" "(*go/ast.AssignStmt).Pos"
"go/types.inNode" "(*go/ast.AssignStmt).End"
"go/types.inNode" "(*go/ast.SliceExpr).Pos"
"go/types.inNode" "(*go/ast.SliceExpr).End"
"go/types.inNode" "(*go/ast.SendStmt).Pos"
"go/types.inNode" "(*go/ast.SendStmt).End"
"go/types.inNode" "(*go/ast.IncDecStmt).Pos"
"go/types.inNode" "(*go/ast.IncDecStmt).End"
"go/types.inNode" "(*go/ast.ReturnStmt).Pos"
"go/types.inNode" "(*go/ast.ReturnStmt).End"
"go/types.inNode" "(*go/ast.BranchStmt).Pos"
"go/types.inNode" "(*go/ast.BranchStmt).End"
"go/types.inNode" "(*go/ast.IfStmt).Pos"
"go/types.inNode" "(*go/ast.IfStmt).End"
"go/types.inNode" "(*go/ast.SwitchStmt).Pos"
"go/types.inNode" "(*go/ast.SwitchStmt).End"
"go/types.inNode" "(*go/ast.CaseClause).Pos"
"go/types.inNode" "(*go/ast.CaseClause).End"
"go/types.inNode" "(*go/ast.TypeSwitchStmt).Pos"
"go/types.inNode" "(*go/ast.TypeSwitchStmt).End"
"go/types.inNode" "(*go/ast.ForStmt).Pos"
"go/types.inNode" "(*go/ast.ForStmt).End"
"go/types.inNode" "(*go/ast.StructType).Pos"
"go/types.inNode" "(*go/ast.StructType).End"
"go/types.inNode" "(*go/ast.StarExpr).Pos"
"go/types.inNode" "(*go/ast.StarExpr).End"
"go/types.inNode" "(*go/ast.MapType).Pos"
"go/types.inNode" "(*go/ast.MapType).End"
"go/types.inNode" "(*go/ast.BadExpr).Pos"
"go/types.inNode" "(*go/ast.BadExpr).End"
"go/types.inNode" "(*go/ast.RangeStmt).Pos"
"go/types.inNode" "(*go/ast.RangeStmt).End"
"go/types.inNode" "(*go/ast.DeclStmt).Pos"
"go/types.inNode" "(*go/ast.DeclStmt).End"
"go/types.inNode" "(*go/ast.SelectStmt).Pos"
"go/types.inNode" "(*go/ast.SelectStmt).End"
"go/types.inNode" "(*go/ast.EmptyStmt).Pos"
"go/types.inNode" "(*go/ast.EmptyStmt).End"
"go/types.inNode" "(*go/ast.BadStmt).Pos"
"go/types.inNode" "(*go/ast.BadStmt).End"
"go/types.inNode" "(*go/ast.ExprStmt).Pos"
"go/types.inNode" "(*go/ast.ExprStmt).End"
"(*go/types.Checker).exprInternal" "go/types.inNode"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).error"
"(*go/types.Checker).index" "(*go/types.Checker).expr"
"(*go/types.Checker).isValidIndex" "(*go/types.Checker).convertUntyped"
"(*go/types.Checker).isValidIndex" "go/types.allInteger"
"(*go/types.Checker).isValidIndex" "(*go/types.Checker).errorf"
"(*go/types.Checker).isValidIndex" "(*go/types.Checker).errorf"
"(*go/types.Checker).isValidIndex" "go/types.representableConst"
"(*go/types.Checker).isValidIndex" "go/constant.Sign"
"(*go/types.Checker).isValidIndex" "(*go/types.Checker).errorf"
"(*go/types.Checker).index" "(*go/types.Checker).isValidIndex"
"(*go/types.Checker).index" "(go/constant.floatVal).Kind"
"(*go/types.Checker).index" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).index" "(go/constant.intVal).String"
"(*go/types.Checker).index" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).index" "(go/constant.int64Val).Kind"
"(*go/types.Checker).index" "(go/constant.boolVal).Kind"
"(*go/types.Checker).index" "(go/constant.complexVal).Kind"
"(*go/types.Checker).index" "(go/constant.ratVal).String"
"(*go/types.Checker).index" "(go/constant.intVal).Kind"
"(*go/types.Checker).index" "(go/constant.ratVal).Kind"
"(*go/types.Checker).index" "go/constant.Int64Val"
"(*go/types.Checker).index" "go/types.assert"
"(*go/types.Checker).index" "(*go/types.Checker).errorf"
"(*go/types.Checker).index" "(*go/constant.stringVal).String"
"(*go/types.Checker).index" "(go/constant.floatVal).String"
"(*go/types.Checker).index" "(go/constant.unknownVal).String"
"(*go/types.Checker).index" "(go/constant.int64Val).String"
"(*go/types.Checker).index" "(go/constant.boolVal).String"
"(*go/types.Checker).index" "(go/constant.complexVal).String"
"(*go/types.Checker).indexedElts" "(*go/types.Checker).index"
"(*go/types.Checker).indexedElts" "go/types.isValid"
"(*go/types.Checker).indexedElts" "(*go/types.Checker).errorf"
"(*go/types.Checker).indexedElts" "(*go/types.Checker).errorf"
"(*go/types.Checker).indexedElts" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprWithHint" "go/types.assert"
"(*go/types.Checker).exprWithHint" "(*go/types.Checker).rawExpr"
"(*go/types.Checker).exprWithHint" "(*go/types.Checker).exclude"
"(*go/types.Checker).exprWithHint" "(*go/types.Checker).singleValue"
"(*go/types.Checker).indexedElts" "(*go/types.Checker).exprWithHint"
"(*go/types.Checker).indexedElts" "(*go/types.Checker).assignment"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).indexedElts"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).recordTypeAndValue"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).error"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).indexedElts"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).error"
"(*go/types.Checker).exprInternal" "go/types.isNonTypeParamInterface"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).error"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).exprWithHint"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).assignment"
"go/types.keyVal" "(go/constant.floatVal).Kind"
"go/types.keyVal" "(go/constant.intVal).Kind"
"go/types.keyVal" "(*go/constant.stringVal).Kind"
"go/types.keyVal" "(go/constant.unknownVal).Kind"
"go/types.keyVal" "(go/constant.int64Val).Kind"
"go/types.keyVal" "(go/constant.boolVal).Kind"
"go/types.keyVal" "go/constant.ToFloat"
"go/types.keyVal" "(go/constant.floatVal).Kind"
"go/types.keyVal" "(go/constant.intVal).Kind"
"go/types.keyVal" "(*go/constant.stringVal).Kind"
"go/types.keyVal" "(go/constant.unknownVal).Kind"
"go/types.keyVal" "(go/constant.int64Val).Kind"
"go/types.keyVal" "(go/constant.boolVal).Kind"
"go/types.keyVal" "go/constant.ToInt"
"go/types.keyVal" "(go/constant.floatVal).Kind"
"go/types.keyVal" "(go/constant.intVal).Kind"
"go/types.keyVal" "(*go/constant.stringVal).Kind"
"go/types.keyVal" "(go/constant.unknownVal).Kind"
"go/types.keyVal" "(go/constant.int64Val).Kind"
"go/types.keyVal" "(go/constant.boolVal).Kind"
"go/types.keyVal" "go/constant.Real"
"go/types.keyVal" "go/constant.Float64Val"
"go/types.keyVal" "go/constant.Imag"
"go/types.keyVal" "go/constant.Float64Val"
"go/types.keyVal" "go/constant.Int64Val"
"go/types.keyVal" "go/constant.Float64Val"
"go/constant.StringVal" "(*go/constant.stringVal).string"
"go/constant.StringVal" "fmt.Sprintf"
"go/types.keyVal" "go/constant.StringVal"
"go/types.keyVal" "go/constant.Uint64Val"
"go/constant.BoolVal" "fmt.Sprintf"
"go/types.keyVal" "go/constant.BoolVal"
"go/types.keyVal" "(go/constant.complexVal).Kind"
"go/types.keyVal" "(go/constant.complexVal).Kind"
"go/types.keyVal" "(go/constant.complexVal).Kind"
"go/types.keyVal" "(go/constant.ratVal).Kind"
"go/types.keyVal" "(go/constant.ratVal).Kind"
"go/types.keyVal" "(go/constant.ratVal).Kind"
"(*go/types.Checker).exprInternal" "go/types.keyVal"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).exprWithHint"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).assignment"
"(*go/types.Checker).exprInternal" "go/types.Identical"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "go/types.isValid"
"go/types.unparen" "go/ast.Unparen"
"(*go/types.Checker).use1" "go/types.unparen"
"(*go/types.Checker).use1" "(*go/types.Checker).rawExpr"
"(*go/types.Checker).use1" "(*go/types.Scope).LookupParent"
"(*go/types.Checker).use1" "(*go/types.Checker).exprOrType"
"(*go/types.Checker).useN" "(*go/types.Checker).use1"
"(*go/types.Checker).use" "(*go/types.Checker).useN"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).use"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).rawExpr"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).selector"
"(*go/types.Checker).exprInternal" "go/internal/typeparams.UnpackIndexExpr"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).exprOrType"
"(*go/types.Checker).nonGeneric" "go/types.isGeneric"
"(*go/types.Checker).nonGeneric" "(*go/types.operand).Pos"
"(*go/types.Checker).funcInst" "go/types.assert"
"(*go/types.Checker).funcInst" "go/types.inNode"
"(*go/types.Checker).funcInst" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).typeList" "(*go/types.Checker).varType"
"(*go/types.Checker).typeList" "go/types.isValid"
"(*go/types.Checker).funcInst" "(*go/types.Checker).typeList"
"(*go/types.Checker).funcInst" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).funcInst" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).funcInst" "go/types.assert"
"(*go/types.Checker).funcInst" "(*go/types.Checker).errorf"
"(*go/types.Checker).funcInst" "go/types.assert"
"(*go/types.Checker).funcInst" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).funcInst" "(*go/types.TypeParamList).list"
"(*go/types.Checker).funcInst" "go/types.NewTuple"
"(*go/types.Checker).renameTParams" "(*go/types.TypeParam).Obj"
"(*go/types.Checker).renameTParams" "(*go/types.object).Pos"
"(*go/types.Checker).renameTParams" "(*go/types.TypeParam).Obj"
"(*go/types.Checker).renameTParams" "(*go/types.object).Pkg"
"(*go/types.Checker).renameTParams" "(*go/types.TypeParam).Obj"
"(*go/types.Checker).renameTParams" "(*go/types.object).Name"
"(*go/types.Checker).renameTParams" "go/types.NewTypeName"
"go/types.NewTypeParam" "(*go/types.Checker).newTypeParam"
"(*go/types.Checker).renameTParams" "go/types.NewTypeParam"
"go/types.makeRenameMap" "go/types.assert"
"(*go/types.Checker).renameTParams" "go/types.makeRenameMap"
"(*go/types.Checker).renameTParams" "(*go/types.Checker).context"
"(*go/types.Checker).renameTParams" "(*go/types.Checker).subst"
"(*go/types.Checker).renameTParams" "(*go/types.Checker).context"
"(*go/types.Checker).renameTParams" "(*go/types.Checker).subst"
"(*go/types.Checker).funcInst" "(*go/types.Checker).renameTParams"
"(*go/types.Checker).infer$1" "go/types.assert"
"(*go/types.Checker).infer$1" "go/types.containsNil"
"(*go/types.Checker).infer" "(*go/types.Checker).infer$1"
"(*go/types.Checker).infer" "(*go/types.Checker).dump"
"(*go/types.Checker).infer$2" "(*go/types.Checker).dump"
"(*go/types.Checker).infer" "(*go/types.Checker).infer$2"
"(*go/types.Checker).infer" "go/types.assert"
"(*go/types.Checker).infer" "(*go/types.Tuple).Len"
"(*go/types.Checker).infer" "go/types.assert"
"(*go/types.Checker).infer" "go/types.containsNil"
"(*go/types.Checker).infer" "(*go/types.Tuple).Len"
"(*go/types.Checker).infer" "go/types.makeSubstMap"
"(*go/types.Checker).infer" "(*go/types.Checker).context"
"(*go/types.Checker).infer" "(*go/types.Checker).subst"
"(*go/types.Checker).infer" "(*go/types.Checker).allowVersion"
"go/types.newUnifier" "go/types.assert"
"(*go/types.Checker).infer" "go/types.newUnifier"
"(*go/types.unifier).tracef" "strings.Repeat"
"(*go/types.unifier).tracef" "go/types.sprintf"
"(*go/types.unifier).tracef" "fmt.Println"
"(*go/types.Checker).infer" "(*go/types.unifier).tracef"
"(*go/types.Checker).infer" "(*go/types.unifier).tracef"
"(*go/types.Checker).infer" "(*go/types.Tuple).At"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).isParameterized$1"
"(*go/types.tpWalker).isParameterized" "go/types.Unalias"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).isParameterized"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).isParameterized"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).isParameterized"
"(*go/types.tpWalker).varList" "(*go/types.tpWalker).isParameterized"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).varList"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).isParameterized"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).varList"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).varList"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).varList"
"(*go/types.tpWalker).isParameterized" "(*go/types.Interface).typeSet"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).isParameterized"
"(*go/types.tpWalker).isParameterized" "(*go/types._TypeSet).is"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).isParameterized"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).isParameterized"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).isParameterized"
"(*go/types.tpWalker).isParameterized" "(*go/types.Named).TypeArgs"
"(*go/types.tpWalker).isParameterized" "(*go/types.TypeList).list"
"(*go/types.tpWalker).isParameterized" "(*go/types.tpWalker).isParameterized"
"(*go/types.tpWalker).isParameterized" "go/types.tparamIndex"
"(*go/types.tpWalker).isParameterized" "fmt.Sprintf"
"go/types.isParameterized" "(*go/types.tpWalker).isParameterized"
"(*go/types.Checker).infer" "go/types.isParameterized"
"(*go/types.Checker).infer" "go/types.isTyped"
"(*go/types.Checker).infer" "go/types.isParameterized"
"(*go/types.unifier).nify" "(*go/types.unifier).tracef"
"(*go/types.unifier).nify$1" "(*go/types.unifier).tracef"
"(*go/types.unifier).nify" "(*go/types.unifier).nify$1"
"(*go/types.unifier).nify" "go/types.Unalias"
"(*go/types.unifier).nify" "go/types.Unalias"
"(*go/types.unifier).nify" "go/types.asNamed"
"(*go/types.unifier).nify" "(*go/types.unifier).tracef"
"(*go/types.unifier).nify" "go/types.asNamed"
"(*go/types.unifier).nify" "(*go/types.unifier).asTypeParam"
"(*go/types.unifier).nify" "(*go/types.unifier).tracef"
"(*go/types.unifier).nify" "(*go/types.unifier).asTypeParam"
"(*go/types.unifier).nify" "(*go/types.unifier).asTypeParam"
"go/types.isTypeLit" "go/types.Unalias"
"(*go/types.unifier).nify" "go/types.isTypeLit"
"(*go/types.unifier).nify" "go/types.IsInterface"
"(*go/types.unifier).nify" "(*go/types.unifier).tracef"
"(*go/types.unifier).nify" "(*go/types.Named).under"
"(*go/types.unifier).nify" "go/types.isTypeParam"
"(*go/types.unifier).nify" "go/types.assert"
"(*go/types.unifier).join" "(*go/types.unifier).tracef"
"(*go/types.unifier).setHandle" "go/types.assert"
"(*go/types.unifier).join" "(*go/types.unifier).setHandle"
"(*go/types.unifier).join" "(*go/types.unifier).setHandle"
"(*go/types.unifier).nify" "(*go/types.unifier).join"
"(*go/types.unifier).nify" "(*go/types.unifier).at"
"(*go/types.unifier).nify" "(*go/types.unifier).at"
"(*go/types.unifier).nify" "(*go/types.unifier).at"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "go/types.assert"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).set" "go/types.assert"
"(*go/types.unifier).set" "(*go/types.unifier).tracef"
"(*go/types.unifier).nify" "(*go/types.unifier).set"
"go/types.asInterface" "go/types.under"
"(*go/types.unifier).nify" "go/types.asInterface"
"(*go/types.unifier).nify" "go/types.asInterface"
"(*go/types.unifier).nify" "go/types.asNamed"
"(*go/types.unifier).nify" "go/types.asNamed"
"(*go/types.unifier).nify" "go/types.Identical"
"(*go/types.unifier).nify" "(*go/types.Interface).typeSet"
"(*go/types.unifier).nify" "(*go/types.Interface).typeSet"
"(*go/types.unifier).nify" "(*go/types.unifier).set"
"(*go/types.unifier).nify" "go/types.under"
"(*go/types.unifier).nify" "(*go/types.unifier).set"
"(*go/types.unifier).nify" "go/types.asInterface"
"(*go/types.unifier).nify" "go/types.asInterface"
"(*go/types.unifier).nify" "go/types.isTypeParam"
"(*go/types.unifier).nify" "(*go/types.Interface).typeSet"
"(*go/types.unifier).nify" "(*go/types.Interface).typeSet"
"(*go/types.unifier).nify" "(go/types.termlist).equal"
"(*go/types.unifier).nify" "(*go/types.ifacePair).identical"
"(*go/types.unifier).nify" "(*go/types.object).Id"
"(*go/types.unifier).nify" "(*go/types.object).Id"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "(*go/types.Interface).typeSet"
"go/types.LookupFieldOrMethod" "go/types.asNamed"
"go/types.LookupFieldOrMethod" "(*go/types.Named).Underlying"
"go/types.LookupFieldOrMethod" "go/types.lookupFieldOrMethodImpl"
"go/types.LookupFieldOrMethod" "go/types.lookupFieldOrMethodImpl"
"go/types.LookupFieldOrMethod" "go/types.coreType"
"go/types.LookupFieldOrMethod" "go/types.isTypeParam"
"go/types.LookupFieldOrMethod" "go/types.lookupFieldOrMethodImpl"
"(*go/types.unifier).nify" "go/types.LookupFieldOrMethod"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "(*go/types.unifier).tracef"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "(*go/types.Struct).NumFields"
"(*go/types.unifier).nify" "(*go/types.Struct).NumFields"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "(*go/types.object).sameId"
"(*go/types.unifier).nify" "(*go/types.Struct).Tag"
"(*go/types.unifier).nify" "(*go/types.Struct).Tag"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "(*go/types.Tuple).Len"
"(*go/types.unifier).nify" "(*go/types.Tuple).Len"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "go/types.assert"
"(*go/types.unifier).nify" "(*go/types.Interface).typeSet"
"(*go/types.unifier).nify" "(*go/types.Interface).typeSet"
"(*go/types.unifier).nify" "(go/types.termlist).equal"
"(*go/types.unifier).nify" "(*go/types.ifacePair).identical"
"(*go/types.unifier).nify" "go/types.assertSortedMethods"
"(*go/types.unifier).nify" "go/types.assertSortedMethods"
"(*go/types.unifier).nify" "(*go/types.object).Id"
"(*go/types.unifier).nify" "(*go/types.object).Id"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "go/types.asNamed"
"(*go/types.unifier).nify" "(*go/types.Named).TypeArgs"
"(*go/types.unifier).nify" "(*go/types.TypeList).list"
"(*go/types.unifier).nify" "(*go/types.Named).TypeArgs"
"(*go/types.unifier).nify" "(*go/types.TypeList).list"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "go/types.identicalOrigin"
"(*go/types.unifier).nify" "(*go/types.unifier).asTypeParam"
"(*go/types.unifier).nify" "go/types.assert"
"(*go/types.unifier).nify" "go/types.coreType"
"(*go/types.unifier).nify" "(*go/types.unifier).tracef"
"(*go/types.unifier).nify" "(*go/types.unifier).nify"
"(*go/types.unifier).nify" "go/types.sprintf"
"(*go/types.unifier).unify" "(*go/types.unifier).nify"
"(*go/types.Checker).infer" "(*go/types.unifier).unify"
"(*go/types.unifier).inferred" "(*go/types.unifier).at"
"(*go/types.Checker).infer$3" "(*go/types.unifier).inferred"
"(*go/types.Checker).infer$3" "go/types.makeSubstMap"
"(*go/types.Checker).infer$3" "(*go/types.operand).Pos"
"(*go/types.Checker).infer$3" "(*go/types.Checker).context"
"(*go/types.Checker).infer$3" "(*go/types.Checker).subst"
"go/types.typeParamsString" "(*strings.Builder).WriteString"
"go/types.typeParamsString" "(*strings.Builder).WriteString"
"go/types.typeParamsString" "(*strings.Builder).String"
"go/types.typeParamsString" "(*strings.Builder).WriteString"
"go/types.typeParamsString" "(*strings.Builder).WriteString"
"(*go/types.Checker).infer$3" "go/types.typeParamsString"
"(*go/types.Checker).infer$3" "(*go/types.Checker).errorf"
"(*go/types.Checker).infer$3" "(*go/types.Checker).errorf"
"(*go/types.Checker).infer$3" "(*go/types.Checker).errorf"
"(*go/types.Checker).infer$3" "(*go/types.Checker).errorf"
"(*go/types.Checker).infer" "(*go/types.Checker).infer$3"
"(*go/types.Checker).infer" "(*go/types.operand).isNil"
"(*go/types.Checker).infer" "(*go/types.unifier).inferred"
"(*go/types.Checker).infer" "(*go/types.unifier).tracef"
"(*go/types.Checker).infer" "(*go/types.unifier).tracef"
"(*go/types.Checker).infer" "(*go/types.unifier).unknowns"
"(*go/types.Checker).infer" "fmt.Println"
"(*go/types.Checker).infer" "(*go/types.unifier).tracef"
"(*go/types.Checker).infer" "(*go/types.unifier).at"
"go/types.coreTerm" "(*go/types.TypeParam).is"
"go/types.coreTerm" "go/types.coreType"
"go/types.coreTerm" "go/types.under"
"go/types.coreTerm" "go/types.coreType"
"go/types.coreTerm" "go/types.assert"
"(*go/types.Checker).infer" "go/types.coreTerm"
"(*go/types.Checker).infer" "(*go/types.unifier).unknowns"
"(*go/types.Checker).infer" "(*go/types.unifier).tracef"
"(*go/types.Checker).infer" "(*go/types.unifier).unify"
"(*go/types.Checker).infer" "(*go/types.unifier).set"
"(*go/types.Checker).infer" "(*go/types.TypeParam).Constraint"
"(*go/types.Checker).infer" "(*go/types.Checker).errorf"
"(*go/types.Checker).infer" "(*go/types.TypeParam).iface"
"(*go/types.Checker).infer" "(*go/types.Checker).missingMethod"
"(*go/types.Checker).infer" "(*go/types.TypeParam).Constraint"
"(*go/types.Checker).infer" "(*go/types.Checker).errorf"
"(*go/types.Checker).infer" "(*go/types.unifier).inferred"
"(*go/types.Checker).infer" "(*go/types.unifier).tracef"
"(*go/types.Checker).infer" "(*go/types.unifier).tracef"
"(*go/types.Checker).infer" "(*go/types.Tuple).At"
"(*go/types.Checker).infer" "(*go/types.unifier).at"
"(*go/types.Checker).infer" "go/types.maxType"
"(*go/types.Checker).infer" "(*go/types.Checker).errorf"
"(*go/types.Checker).infer" "go/types.Default"
"(*go/types.Checker).infer" "go/types.isTyped"
"(*go/types.Checker).infer" "go/types.assert"
"(*go/types.Checker).infer" "(*go/types.unifier).set"
"(*go/types.Checker).infer" "(*go/types.unifier).inferred"
"(*go/types.cycleFinder).typ" "go/types.tparamIndex"
"(*go/types.cycleFinder).typ" "go/types.Unalias"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).varList" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).varList"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).varList"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).varList"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).typ" "(*go/types.Named).TypeArgs"
"(*go/types.cycleFinder).typ" "(*go/types.TypeList).list"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"(*go/types.cycleFinder).typ" "go/types.tparamIndex"
"(*go/types.cycleFinder).typ" "fmt.Sprintf"
"(*go/types.cycleFinder).typ" "(*go/types.cycleFinder).typ"
"go/types.killCycles" "(*go/types.cycleFinder).typ"
"(*go/types.Checker).infer" "go/types.killCycles"
"(*go/types.Checker).infer" "go/types.assert"
"(*go/types.Checker).infer" "(*go/types.unifier).tracef"
"(*go/types.Checker).infer" "go/types.makeSubstMap"
"(*go/types.Checker).infer" "(*go/types.Checker).context"
"(*go/types.Checker).infer" "(*go/types.Checker).subst"
"(*go/types.Checker).infer" "go/types.isParameterized"
"(*go/types.Checker).infer" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).infer" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).infer" "(*go/types.Checker).errorf"
"(*go/types.Checker).infer" "go/types.isParameterized"
"(*go/types.Checker).funcInst" "(*go/types.Checker).infer"
"go/types.NewSignatureType" "(*go/types.Tuple).Len"
"go/types.NewSignatureType" "(*go/types.Tuple).At"
"go/types.coreString" "go/types.under"
"go/types.coreString" "(*go/types.TypeParam).underIs"
"go/types.NewSignatureType" "go/types.coreString"
"go/types.NewSignatureType" "(*go/types.TypeParam).String"
"go/types.NewSignatureType" "(*go/types.Tuple).String"
"go/types.NewSignatureType" "(*go/types.Basic).String"
"go/types.NewSignatureType" "(*go/types.Signature).String"
"go/types.NewSignatureType" "(*go/types.Named).String"
"go/types.NewSignatureType" "(*go/types.Union).String"
"go/types.NewSignatureType" "(*go/types.Interface).String"
"go/types.NewSignatureType" "(*go/types.Struct).String"
"go/types.NewSignatureType" "(*go/types.Pointer).String"
"go/types.NewSignatureType" "fmt.Sprintf"
"go/types.NewSignatureType" "go/types.isString"
"go/types.NewSignatureType" "go/types.bindTParams"
"go/types.NewSignatureType" "go/types.bindTParams"
"go/types.NewSignatureType" "(*go/types.Array).String"
"go/types.NewSignatureType" "(*go/types.Alias).String"
"go/types.NewSignatureType" "(*go/types.Slice).String"
"go/types.NewSignatureType" "(*go/types.Map).String"
"go/types.NewSignatureType" "(*go/types.Chan).String"
"go/types.NewSignatureType" "(golang.org/x/tools/internal/gcimporter.anyType).String"
"(*go/types.Checker).funcInst" "go/types.NewSignatureType"
"(*go/types.Checker).funcInst" "(*go/types.operand).Pos"
"(*go/types.Checker).funcInst" "go/types.NewVar"
"(*go/types.Checker).funcInst" "go/ast.NewIdent"
"(*go/types.Checker).funcInst" "(*go/types.operand).Pos"
"(*go/types.Checker).funcInst" "(*go/types.Checker).allowVersion"
"(*go/types.Checker).funcInst" "(*go/types.Checker).versionErrorf"
"(*go/types.Checker).funcInst" "(*go/types.Checker).versionErrorf"
"(*go/types.Checker).funcInst" "(*go/types.operand).Pos"
"(*go/types.Checker).instantiateSignature" "go/types.assert"
"(*go/types.Checker).instantiateSignature" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).instantiateSignature" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).instantiateSignature" "go/types.assert"
"(*go/types.Checker).instantiateSignature" "(*go/types.Checker).trace"
"(*go/types.Checker).instantiateSignature$1" "(*go/types.Signature).Underlying"
"(*go/types.Checker).instantiateSignature$1" "(*go/types.Checker).trace"
"(*go/types.Checker).instantiateSignature" "(*go/types.Checker).instantiateSignature$1"
"(*go/types.Checker).instantiateSignature" "(*go/types.Checker).context"
"(*go/types.Checker).instantiateSignature" "(*go/types.Checker).instance"
"(*go/types.Checker).instantiateSignature" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).instantiateSignature" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).instantiateSignature" "go/types.assert"
"go/types.instantiatedIdent" "(*strings.Builder).WriteString"
"go/types.instantiatedIdent" "go/token.NewFileSet"
"go/ast.fprint" "go/ast.fprint$1"
"(*go/ast.printer).printf" "fmt.Fprintf"
"go/ast.fprint" "(*go/ast.printer).printf"
"go/ast.fprint" "reflect.ValueOf"
"go/ast.NotNilFilter" "(reflect.Value).Kind"
"go/ast.NotNilFilter" "(reflect.Value).IsNil"
"(*go/ast.printer).print" "go/ast.NotNilFilter"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Kind"
"(*go/ast.printer).print" "(reflect.Value).Elem"
"(*go/ast.printer).print" "(*go/ast.printer).print"
"(*go/ast.printer).print" "(reflect.Value).Type"
"(*go/ast.printer).print" "(reflect.Value).Len"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Len"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Interface"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(reflect.Value).MapKeys" "(reflect.flag).mustBe"
"(reflect.Value).MapKeys" "(reflect.Value).typ"
"(reflect.Value).MapKeys" "(reflect.flag).ro"
"(reflect.Value).MapKeys" "(*internal/abi.Type).Kind"
"(reflect.Value).MapKeys" "(reflect.Value).pointer"
"(reflect.Value).MapKeys" "reflect.maplen"
"(reflect.Value).MapKeys" "(reflect.Value).typ"
"(reflect.Value).MapKeys" "reflect.mapiterinit"
"(reflect.Value).MapKeys" "reflect.mapiterkey"
"reflect.copyVal" "(*internal/abi.Type).IfaceIndir"
"reflect.copyVal" "reflect.unsafe_New"
"reflect.copyVal" "reflect.typedmemmove"
"(reflect.Value).MapKeys" "reflect.copyVal"
"(reflect.Value).MapKeys" "reflect.mapiternext"
"(*go/ast.printer).print" "(reflect.Value).MapKeys"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(*go/ast.printer).print"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(reflect.Value).MapIndex" "(reflect.flag).mustBe"
"(reflect.Value).MapIndex" "(reflect.Value).typ"
"(reflect.Value).MapIndex" "(reflect.Value).typ"
"(reflect.Value).MapIndex" "(reflect.Value).pointer"
"(reflect.Value).MapIndex" "reflect.mapaccess_faststr"
"(reflect.Value).assignTo" "reflect.makeMethodValue"
"(reflect.Value).assignTo" "(reflect.Value).typ"
"reflect.directlyAssignable" "(*internal/abi.Type).HasName"
"reflect.directlyAssignable" "(*internal/abi.Type).Kind"
"reflect.directlyAssignable" "(*internal/abi.Type).Kind"
"reflect.directlyAssignable" "(*internal/abi.Type).Kind"
"reflect.directlyAssignable" "(*internal/abi.Type).HasName"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Kind"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Kind"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Len"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Len"
"(*internal/abi.Type).ChanDir" "(*internal/abi.Type).Kind"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).ChanDir"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).ChanDir"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"reflect.nameFor" "reflect.toRType"
"(*reflect.rtype).Name" "(*internal/abi.Type).HasName"
"(*reflect.rtype).Name" "(*reflect.rtype).String"
"reflect.nameFor" "(*reflect.rtype).Name"
"reflect.haveIdenticalType" "reflect.nameFor"
"reflect.haveIdenticalType" "reflect.nameFor"
"reflect.haveIdenticalType" "reflect.haveIdenticalUnderlyingType"
"reflect.pkgPathFor" "reflect.toRType"
"(*reflect.rtype).PkgPath" "(*reflect.rtype).uncommon"
"(*reflect.rtype).PkgPath" "(*reflect.rtype).nameOff"
"(*reflect.rtype).PkgPath" "(internal/abi.Name).Name"
"reflect.pkgPathFor" "(*reflect.rtype).PkgPath"
"reflect.haveIdenticalType" "reflect.pkgPathFor"
"reflect.haveIdenticalType" "reflect.pkgPathFor"
"reflect.haveIdenticalType" "(*internal/abi.Type).Kind"
"reflect.haveIdenticalType" "(*internal/abi.Type).Kind"
"reflect.haveIdenticalUnderlyingType" "reflect.haveIdenticalType"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"reflect.haveIdenticalUnderlyingType" "reflect.haveIdenticalType"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).NumIn"
"(*internal/abi.FuncType).In" "(*internal/abi.FuncType).InSlice"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).In"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).In"
"reflect.haveIdenticalUnderlyingType" "reflect.haveIdenticalType"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).NumOut"
"(*internal/abi.FuncType).Out" "(*internal/abi.FuncType).OutSlice"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).Out"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).Out"
"reflect.haveIdenticalUnderlyingType" "reflect.haveIdenticalType"
"(*internal/abi.Type).Key" "(*internal/abi.Type).Kind"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Key"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Key"
"reflect.haveIdenticalUnderlyingType" "reflect.haveIdenticalType"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"reflect.haveIdenticalUnderlyingType" "reflect.haveIdenticalType"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"reflect.haveIdenticalUnderlyingType" "reflect.haveIdenticalType"
"reflect.haveIdenticalUnderlyingType" "(internal/abi.Name).Name"
"reflect.haveIdenticalUnderlyingType" "(internal/abi.Name).Name"
"reflect.haveIdenticalUnderlyingType" "(internal/abi.Name).Name"
"reflect.haveIdenticalUnderlyingType" "(internal/abi.Name).Name"
"reflect.haveIdenticalUnderlyingType" "reflect.haveIdenticalType"
"(internal/abi.Name).Tag" "(internal/abi.Name).HasTag"
"(internal/abi.Name).Tag" "(internal/abi.Name).ReadVarint"
"(internal/abi.Name).Tag" "(internal/abi.Name).ReadVarint"
"(internal/abi.Name).Tag" "(internal/abi.Name).DataChecked"
"reflect.haveIdenticalUnderlyingType" "(internal/abi.Name).Tag"
"reflect.haveIdenticalUnderlyingType" "(internal/abi.Name).Tag"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.StructField).Embedded"
"reflect.haveIdenticalUnderlyingType" "(*internal/abi.StructField).Embedded"
"reflect.directlyAssignable" "reflect.haveIdenticalUnderlyingType"
"reflect.specialChannelAssignability" "(*internal/abi.Type).ChanDir"
"reflect.specialChannelAssignability" "(*internal/abi.Type).Elem"
"reflect.specialChannelAssignability" "(*internal/abi.Type).Elem"
"reflect.specialChannelAssignability" "reflect.haveIdenticalType"
"reflect.specialChannelAssignability" "reflect.nameFor"
"reflect.specialChannelAssignability" "reflect.nameFor"
"reflect.directlyAssignable" "reflect.specialChannelAssignability"
"(reflect.Value).assignTo" "reflect.directlyAssignable"
"(reflect.Value).assignTo" "(reflect.flag).ro"
"(reflect.Value).assignTo" "(*internal/abi.Type).Kind"
"(reflect.Value).assignTo" "(reflect.Value).Kind"
"(reflect.Value).assignTo" "(reflect.Value).typ"
"reflect.implements" "(*internal/abi.Type).Kind"
"reflect.implements" "(*internal/abi.Type).Kind"
"reflect.implements" "(*internal/abi.Type).Uncommon"
"reflect.implements" "(*reflect.interfaceType).nameOff"
"reflect.implements" "reflect.nameOffFor"
"reflect.implements" "(internal/abi.Name).Name"
"reflect.implements" "(internal/abi.Name).Name"
"reflect.implements" "(internal/abi.Name).IsExported"
"reflect.implements" "reflect.typeOffFor"
"reflect.implements" "(*reflect.interfaceType).typeOff"
"reflect.pkgPath" "(internal/abi.Name).ReadVarint"
"reflect.pkgPath" "(internal/abi.Name).HasTag"
"reflect.pkgPath" "(internal/abi.Name).DataChecked"
"reflect.pkgPath" "(internal/abi.Name).ReadVarint"
"reflect.pkgPath" "(internal/abi.Name).DataChecked"
"reflect.pkgPath" "reflect.resolveTypeOff"
"reflect.pkgPath" "(internal/abi.Name).Name"
"reflect.implements" "reflect.pkgPath"
"reflect.implements" "(internal/abi.Name).Name"
"reflect.implements" "reflect.pkgPath"
"reflect.implements" "(internal/abi.Name).Name"
"(*internal/abi.UncommonType).Methods" "internal/abi.addChecked"
"reflect.implements" "(*internal/abi.UncommonType).Methods"
"reflect.implements" "(*reflect.interfaceType).nameOff"
"reflect.implements" "reflect.nameOffFor"
"reflect.implements" "(internal/abi.Name).Name"
"reflect.implements" "(internal/abi.Name).Name"
"reflect.implements" "(internal/abi.Name).IsExported"
"reflect.implements" "reflect.typeOffFor"
"reflect.implements" "(*reflect.interfaceType).typeOff"
"reflect.implements" "reflect.pkgPath"
"reflect.implements" "(internal/abi.Name).Name"
"reflect.implements" "reflect.pkgPath"
"reflect.implements" "reflect.nameOffFor"
"reflect.implements" "(internal/abi.Name).Name"
"(reflect.Value).assignTo" "reflect.implements"
"(reflect.Value).assignTo" "(reflect.Value).typ"
"(reflect.Value).assignTo" "reflect.stringFor"
"(reflect.Value).assignTo" "reflect.stringFor"
"(reflect.Value).assignTo" "reflect.valueInterface"
"(reflect.Value).assignTo" "(reflect.Value).IsNil"
"(reflect.Value).assignTo" "reflect.unsafe_New"
"(reflect.Value).assignTo" "(*internal/abi.Type).NumMethod"
"(reflect.Value).assignTo" "reflect.ifaceE2I"
"(reflect.Value).MapIndex" "(reflect.Value).assignTo"
"(reflect.Value).MapIndex" "(*internal/abi.Type).Size"
"(reflect.Value).MapIndex" "(reflect.Value).typ"
"(reflect.Value).MapIndex" "(reflect.flag).kind"
"(reflect.Value).MapIndex" "(reflect.Value).typ"
"(reflect.Value).MapIndex" "(reflect.Value).pointer"
"(reflect.Value).MapIndex" "reflect.mapaccess"
"(reflect.Value).MapIndex" "(reflect.flag).ro"
"(reflect.Value).MapIndex" "(*internal/abi.Type).Kind"
"(reflect.Value).MapIndex" "reflect.copyVal"
"(*go/ast.printer).print" "(reflect.Value).MapIndex"
"(*go/ast.printer).print" "(*go/ast.printer).print"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Type"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Len"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Elem"
"(*go/ast.printer).print" "(*go/ast.printer).print"
"(*go/ast.printer).print" "(reflect.Value).Interface"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Len"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Index"
"(*go/ast.printer).print" "(*go/ast.printer).print"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Type"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*reflect.rtype).NumField" "(*reflect.rtype).Kind"
"(*reflect.rtype).NumField" "(*reflect.rtype).String"
"(*go/ast.printer).print" "(*reflect.rtype).NumField"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Type"
"(*go/ast.printer).print" "(reflect.Value).Len"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Len"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Len"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Index"
"(*go/ast.printer).print" "(*go/ast.printer).print"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Interface"
"(*reflect.rtype).Field" "(*reflect.rtype).Kind"
"(*reflect.rtype).Field" "(*reflect.rtype).String"
"(*reflect.structType).Field" "reflect.toType"
"(*reflect.structType).Field" "(internal/abi.Name).Name"
"(*reflect.structType).Field" "(*internal/abi.StructField).Embedded"
"(*reflect.structType).Field" "(internal/abi.Name).IsExported"
"(*reflect.structType).Field" "(internal/abi.Name).Name"
"(*reflect.structType).Field" "(internal/abi.Name).Tag"
"(*reflect.rtype).Field" "(*reflect.structType).Field"
"(*go/ast.printer).print" "(*reflect.rtype).Field"
"go/ast.IsExported" "go/token.IsExported"
"(*go/ast.printer).print" "go/ast.IsExported"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(reflect.Value).Field"
"(*go/ast.printer).print" "go/ast.NotNilFilter"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(*go/ast.printer).print"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"(*go/ast.printer).print" "(*go/token.FileSet).Position"
"(*go/ast.printer).print" "(*go/ast.printer).printf"
"go/ast.fprint" "(*go/ast.printer).print"
"go/ast.fprint" "(*go/ast.printer).printf"
"go/ast.Fprint" "go/ast.fprint"
"go/types.instantiatedIdent" "go/ast.Fprint"
"go/types.instantiatedIdent" "(*strings.Builder).String"
"(*go/types.Checker).recordInstance" "go/types.instantiatedIdent"
"(*go/types.Checker).recordInstance" "go/types.assert"
"(*go/types.Checker).recordInstance" "go/types.assert"
"(*go/types.Checker).recordInstance" "go/types.newTypeList"
"(*go/types.Checker).instantiateSignature" "(*go/types.Checker).recordInstance"
"(*go/types.Checker).instantiateSignature" "go/types.assert"
"(*go/types.Checker).instantiateSignature" "(*go/types.Checker).later"
"(*go/types.Checker).instantiateSignature" "(*go/types.action).describef"
"(*go/types.Checker).funcInst" "(*go/types.Checker).instantiateSignature"
"(*go/types.Checker).nonGeneric" "(*go/types.Checker).funcInst"
"(*go/types.Checker).nonGeneric" "(*go/types.Checker).errorf"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).nonGeneric"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).use"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).varType"
"(*go/types.Checker).indexExpr" "go/types.isValid"
"(*go/types.Checker).indexExpr" "go/types.under"
"(*go/types.Checker).indexExpr" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).indexExpr" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).indexExpr" "go/types.under"
"(*go/types.Checker).indexExpr" "go/types.isString"
"(*go/types.Checker).indexExpr" "go/constant.StringVal"
"(*go/types.Checker).indexExpr" "go/types.under"
"(*go/types.Checker).singleIndex" "(*go/types.Checker).errorf"
"(*go/types.Checker).singleIndex" "(*go/types.Checker).error"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).singleIndex"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).expr"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).assignment"
"(*go/types.Checker).indexExpr" "go/types.isTypeParam"
"(*go/types.Checker).indexExpr" "(*go/types.Interface).typeSet"
"(*go/types.Checker).indexExpr" "(*go/types._TypeSet).underIs"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).singleIndex"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).expr"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).assignment"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).errorf"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).use"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).singleIndex"
"(*go/types.Checker).indexExpr" "(*go/types.Checker).index"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).indexExpr"
"(*go/types.Checker).exprInternal" "(*go/ast.Ident).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).funcInst"
"(*go/types.Checker).sliceExpr" "(*go/types.Checker).expr"
"(*go/types.Checker).sliceExpr" "(*go/types.Checker).use"
"(*go/types.Checker).sliceExpr" "go/types.coreString"
"(*go/types.Checker).sliceExpr" "(*go/types.Checker).errorf"
"(*go/types.Checker).sliceExpr" "go/types.isString"
"(*go/types.Checker).sliceExpr" "(*go/types.Checker).error"
"(*go/types.Checker).sliceExpr" "go/constant.StringVal"
"(*go/types.Checker).sliceExpr" "go/types.isUntyped"
"(*go/types.Checker).sliceExpr" "(*go/types.Checker).errorf"
"(*go/types.Checker).sliceExpr" "go/types.under"
"(*go/types.Checker).sliceExpr" "(*go/types.Checker).errorf"
"(*go/types.Checker).sliceExpr" "go/types.inNode"
"(*go/types.Checker).sliceExpr" "(*go/types.Checker).error"
"(*go/types.Checker).sliceExpr" "(*go/types.Checker).index"
"(*go/types.Checker).sliceExpr" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).sliceExpr"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).expr"
"(*go/types.Checker).exprInternal" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).error"
"(*go/types.Checker).exprInternal" "go/types.isTypeParam"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "go/types.under"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).varType"
"(*go/types.Checker).exprInternal" "go/types.isValid"
"(*go/types.Checker).assertableTo" "go/types.IsInterface"
"(*go/types.Checker).assertableTo" "(*go/types.Checker).missingMethod"
"(*go/types.Checker).typeAssertion" "(*go/types.Checker).assertableTo"
"(*go/types.Checker).typeAssertion" "(*go/types.Checker).errorf"
"(*go/types.Checker).typeAssertion" "(*go/types.Checker).errorf"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).typeAssertion"
"(*go/types.Checker).callExpr" "go/internal/typeparams.UnpackIndexExpr"
"(*go/types.Checker).callExpr" "(*go/types.Checker).indexExpr"
"(*go/types.Checker).callExpr" "(*go/types.Checker).exprOrType"
"(*go/types.Checker).callExpr" "go/types.assert"
"(*go/types.Checker).record" "go/types.assert"
"(*go/types.Checker).record" "go/types.isUntyped"
"(*go/types.Checker).record" "(*go/types.Checker).rememberUntyped"
"(*go/types.Checker).record" "(*go/types.Checker).recordTypeAndValue"
"(*go/types.Checker).callExpr" "(*go/types.Checker).record"
"(*go/types.Checker).callExpr" "(*go/types.Checker).use"
"(*go/types.Checker).callExpr" "(*go/types.Checker).nonGeneric"
"(*go/types.Checker).builtin" "(go/token.Pos).IsValid"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(*go/types.Checker).use"
"(*go/types.Checker).builtin" "(*go/types.Checker).builtin$1"
"(*go/types.Checker).multiExpr" "(*go/types.Checker).rawExpr"
"(*go/types.Checker).multiExpr" "(*go/types.Checker).exclude"
"(*go/types.Checker).multiExpr" "(*go/types.Tuple).Len"
"(*go/types.Checker).exprList" "(*go/types.Checker).multiExpr"
"(*go/types.Checker).exprList" "(*go/types.Checker).expr"
"(*go/types.Checker).builtin" "(*go/types.Checker).exprList"
"(*go/types.Checker).builtin" "go/types.inNode"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "go/types.assert"
"(*go/types.Checker).builtin" "go/types.coreType"
"(*go/types.Checker).builtin" "go/types.under"
"(*go/types.Checker).builtin" "go/types.arrayPtrDeref"
"(*go/types.Checker).builtin" "(*go/types.operand).isNil"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "go/types.coreType"
"(*go/types.Checker).builtin" "go/types.isTypeParam"
"(*go/types.Checker).builtin" "(*go/types.Checker).sprintf"
"(*go/types.Checker).builtin" "(*go/types.Checker).sprintf"
"(*go/types.Checker).builtin" "(*go/types.Checker).sprintf"
"(*go/types.Checker).builtin" "go/types.NewSlice"
"(*go/types.Checker).builtin" "(*go/types.operand).assignableTo"
"(*go/types.Checker).builtin" "go/types.NewSlice"
"go/types.makeSig" "go/types.Default"
"go/types.makeSig" "go/types.NewVar"
"go/types.makeSig" "go/types.NewTuple"
"go/types.makeSig" "go/types.isUntyped"
"go/types.makeSig" "go/types.assert"
"go/types.makeSig" "go/types.NewVar"
"go/types.makeSig" "go/types.NewTuple"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).arguments" "(*go/types.Tuple).Len"
"(*go/types.Checker).arguments" "(go/token.Pos).IsValid"
"(*go/types.Checker).arguments" "go/types.inNode"
"(*go/types.Checker).arguments" "(*go/types.Checker).errorf"
"go/types.NewParam" "go/types.colorFor"
"(*go/types.Checker).arguments" "go/types.NewParam"
"(*go/types.Checker).arguments" "go/types.NewTuple"
"(*go/types.Checker).arguments" "go/types.inNode"
"(*go/types.Checker).arguments" "(*go/types.Checker).errorf"
"(*go/types.Checker).arguments" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).arguments" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).arguments" "go/types.newErrorf"
"(*go/types.Checker).arguments" "go/types.operandTypes"
"(*go/types.Checker).typesSummary" "strings.Join"
"(*go/types.Checker).typesSummary" "go/types.isValid"
"(*go/types.Checker).typesSummary" "go/types.isNumeric"
"(*go/types.Checker).typesSummary" "go/types.isUntyped"
"(*go/types.Checker).typesSummary" "(*go/types.Checker).sprintf"
"(*go/types.Checker).typesSummary" "strings.Replace"
"(*go/types.Checker).typesSummary" "(*go/types.Checker).sprintf"
"(*go/types.Checker).arguments" "(*go/types.Checker).typesSummary"
"(*go/types.Checker).arguments" "(*go/types.error_).errorf"
"(*go/types.Checker).arguments" "go/types.varTypes"
"(*go/types.Checker).arguments" "(*go/types.Checker).typesSummary"
"(*go/types.Checker).arguments" "(*go/types.error_).errorf"
"(*go/types.Checker).arguments" "(*go/types.Checker).report"
"(*go/types.Checker).arguments" "(*go/types.Checker).allowVersion"
"(*go/types.Checker).arguments" "go/types.assert"
"(*go/types.Checker).arguments" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).arguments" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).arguments" "(*go/types.TypeParamList).list"
"(*go/types.Checker).arguments" "(*go/types.Checker).renameTParams"
"(*go/types.Checker).arguments" "go/internal/typeparams.UnpackIndexExpr"
"(*go/types.Checker).arguments" "go/types.inNode"
"(*go/types.Checker).arguments" "(*go/types.Checker).versionErrorf"
"(*go/types.Checker).arguments" "go/types.inNode"
"(*go/types.Checker).arguments" "(*go/types.Checker).versionErrorf"
"(*go/types.Checker).arguments" "go/types.assert"
"(*go/types.Checker).arguments" "go/types.clone[*go/types.Signature go/types.Signature]"
"(*go/types.Checker).arguments" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).arguments" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).arguments" "(*go/types.TypeParamList).list"
"(*go/types.Checker).arguments" "(*go/types.Checker).renameTParams"
"(*go/types.Checker).arguments" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).arguments" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).arguments" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).arguments" "(*go/types.Checker).infer"
"(*go/types.Checker).arguments" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).arguments" "(*go/types.Checker).instantiateSignature"
"(*go/types.Checker).arguments" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).arguments" "go/types.makeSubstMap"
"(*go/types.Checker).arguments" "(*go/types.Checker).context"
"(*go/types.Checker).arguments" "(*go/types.Checker).subst"
"(*go/types.Checker).arguments" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).arguments" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).arguments" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).arguments" "(*go/types.Checker).instantiateSignature"
"(*go/types.Checker).arguments" "(*go/types.Checker).record"
"(*go/types.Checker).arguments" "(*go/types.Checker).sprintf"
"(*go/types.Checker).arguments" "(*go/types.Checker).assignment"
"(*go/types.Checker).builtin" "(*go/types.Checker).arguments"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "(go/token.Pos).IsValid"
"(*go/types.Checker).builtin" "go/types.coreString"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.isString"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).recordBuiltinType" "(*go/types.Checker).recordTypeAndValue"
"(*go/types.Checker).recordBuiltinType" "go/types.unreachable"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).verifyVersionf"
"go/types.underIs" "(*go/types.TypeParam).underIs"
"go/types.underIs" "go/types.under"
"go/types.underIs" "go/types.allBoolean"
"go/types.underIs" "go/types.allNumericOrString"
"go/types.underIs" "go/types.coreType$1"
"go/types.underIs" "(*go/types.Checker).indexExpr$1"
"go/types.underIs" "go/types.allNumeric"
"go/types.underIs" "go/types.allInteger"
"go/types.underIs" "(*go/types.Checker).exprInternal$2"
"go/types.underIs" "go/types.hasNil$1"
"go/types.underIs" "go/types.coreString$1"
"go/types.underIs" "(*go/types.Checker).implicitTypeAndValue$1"
"go/types.underIs" "(*go/types.Checker).builtin$3"
"go/types.underIs" "(*go/types.Checker).builtin$2"
"go/types.underIs" "(*go/types.Checker).builtin$4"
"go/types.underIs" "(*go/types.Checker).builtin$7"
"go/types.underIs" "(*go/types.Checker).conversion$2"
"(*go/types.Checker).builtin" "go/types.underIs"
"(*go/types.Checker).builtin" "go/types.isString"
"(*go/types.Checker).builtin" "go/constant.StringVal"
"(*go/types.Checker).builtin" "go/constant.MakeInt64"
"(*go/types.Checker).builtin" "go/constant.MakeInt64"
"(*go/types.Checker).builtin" "go/constant.MakeUnknown"
"(*go/types.Checker).builtin" "go/types.isTypeParam"
"(*go/types.Checker).builtin" "(*go/types.Interface).typeSet"
"(*go/types.Checker).builtin" "(*go/types._TypeSet).underIs"
"(*go/types.Checker).builtin" "go/types.under"
"(*go/types.Checker).builtin" "go/types.isValid"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "go/types.underIs"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "go/types.isUntyped"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "go/types.coreType"
"(*go/types.Checker).builtin" "go/types.coreString"
"(*go/types.Checker).builtin" "go/types.isUntyped"
"(*go/types.Checker).builtin" "(*go/types.Checker).convertUntyped"
"(*go/types.Checker).builtin" "(*go/types.Checker).convertUntyped"
"(*go/types.Checker).builtin$5" "go/types.isNumeric"
"(*go/types.Checker).builtin$5" "go/constant.Imag"
"(*go/types.Checker).builtin$5" "go/constant.Sign"
"(*go/types.Checker).builtin" "(*go/types.Checker).builtin$5"
"(*go/types.Checker).builtin" "(*go/types.Checker).builtin$5"
"(*go/types.Checker).builtin" "(*go/types.Checker).convertUntyped"
"(*go/types.Checker).builtin" "(*go/types.Checker).convertUntyped"
"(*go/types.Checker).builtin" "go/types.Identical"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).applyTypeFunc" "(*go/types.TypeParam).is"
"(*go/types.Checker).applyTypeFunc" "(*go/types.Checker).instance$1"
"(*go/types.Checker).builtin$6" "go/types.isTypeParam"
"(*go/types.Checker).builtin$6" "go/types.assert"
"(*go/types.Checker).builtin$6" "go/types.under"
"(*go/types.Checker).applyTypeFunc" "(*go/types.Checker).builtin$6"
"(*go/types.Checker).builtin$8" "go/types.isTypeParam"
"(*go/types.Checker).builtin$8" "go/types.assert"
"(*go/types.Checker).builtin$8" "go/types.under"
"(*go/types.Checker).applyTypeFunc" "(*go/types.Checker).builtin$8"
"(*go/types.Checker).softErrorf" "go/types.newErrorf"
"(*go/types.Checker).softErrorf" "(*go/types.Checker).report"
"(*go/types.Checker).applyTypeFunc" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).applyTypeFunc" "go/types.NewTypeName"
"(*go/types.Checker).applyTypeFunc" "go/types.NewUnion"
"(*go/types.Checker).applyTypeFunc" "go/types.NewInterfaceType"
"(*go/types.Checker).applyTypeFunc" "(*go/types.Checker).newTypeParam"
"(*go/types.Checker).applyTypeFunc" "go/types.unreachable"
"(*go/types.Checker).builtin" "(*go/types.Checker).applyTypeFunc"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "go/constant.ToFloat"
"(*go/types.Checker).builtin" "go/constant.ToFloat"
"(*go/types.Checker).builtin" "go/constant.MakeImag"
"(*go/types.Checker).builtin" "go/constant.BinaryOp"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "go/types.underIs"
"(*go/types.Checker).builtin" "go/types.NewSlice"
"(*go/types.Checker).builtin" "go/types.isString"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "go/types.Identical"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "go/types.isUntyped"
"(*go/types.Checker).builtin" "(*go/types.Checker).assignment"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).varType"
"(*go/types.Checker).builtin" "go/types.isValid"
"(*go/types.Checker).builtin" "(*go/types.Checker).applyTypeFunc"
"(*go/types.Checker).builtin" "go/types.isNumeric"
"(*go/types.Checker).builtin" "(*go/types.Checker).convertUntyped"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/constant.Real"
"(*go/types.Checker).builtin" "go/constant.Imag"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).builtin" "go/types.coreType"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(*go/types.Checker).index"
"(*go/types.Checker).builtin" "(*go/types.Checker).error"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).varType"
"(*go/types.Checker).builtin" "go/types.isValid"
"go/types.allOrdered" "go/types.allBasic"
"(*go/types.Checker).builtin" "go/types.allOrdered"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).matchTypes$1" "go/types.isTyped"
"(*go/types.Checker).matchTypes$1" "go/types.isNonTypeParamInterface"
"(*go/types.Checker).matchTypes$1" "go/types.isTyped"
"(*go/types.Checker).matchTypes$1" "go/types.allBoolean"
"(*go/types.Checker).matchTypes$1" "go/types.allBoolean"
"(*go/types.Checker).matchTypes$1" "go/types.isNonTypeParamInterface"
"go/types.allString" "go/types.allBasic"
"(*go/types.Checker).matchTypes$1" "go/types.allString"
"(*go/types.Checker).matchTypes$1" "go/types.allString"
"(*go/types.Checker).matchTypes$1" "(*go/types.operand).isNil"
"(*go/types.Checker).matchTypes$1" "go/types.hasNil"
"(*go/types.Checker).matchTypes$1" "(*go/types.operand).isNil"
"(*go/types.Checker).matchTypes$1" "go/types.hasNil"
"go/types.isPointer" "go/types.under"
"(*go/types.Checker).matchTypes$1" "go/types.isPointer"
"(*go/types.Checker).matchTypes$1" "go/types.isPointer"
"(*go/types.Checker).matchTypes" "(*go/types.Checker).matchTypes$1"
"(*go/types.Checker).matchTypes" "(*go/types.Checker).convertUntyped"
"(*go/types.Checker).matchTypes" "(*go/types.Checker).convertUntyped"
"(*go/types.Checker).builtin" "(*go/types.Checker).matchTypes"
"(*go/types.Checker).builtin" "go/types.Identical"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"go/constant.Compare" "go/constant.match"
"go/constant.Compare" "fmt.Sprintf"
"go/constant.Compare" "(*math/big.Int).Cmp"
"go/constant.cmpZero" "fmt.Sprintf"
"go/constant.Compare" "go/constant.cmpZero"
"(*math/big.Rat).Cmp" "(*math/big.Int).scaleDenom"
"(*math/big.Rat).Cmp" "(*math/big.Int).scaleDenom"
"(*math/big.Rat).Cmp" "(*math/big.Int).Cmp"
"go/constant.Compare" "(*math/big.Rat).Cmp"
"go/constant.Compare" "go/constant.cmpZero"
"(*math/big.Float).Cmp" "(*math/big.Float).validate"
"(*math/big.Float).Cmp" "(*math/big.Float).validate"
"(*math/big.Float).Cmp" "(*math/big.Float).ord"
"(*math/big.Float).Cmp" "(*math/big.Float).ord"
"(*math/big.Float).Cmp" "(*math/big.Float).ucmp"
"(*math/big.Float).Cmp" "(*math/big.Float).ucmp"
"go/constant.Compare" "(*math/big.Float).Cmp"
"go/constant.Compare" "go/constant.cmpZero"
"go/constant.Compare" "go/constant.Compare"
"go/constant.Compare" "go/constant.Compare"
"go/constant.Compare" "(*go/constant.stringVal).string"
"go/constant.Compare" "(*go/constant.stringVal).string"
"(*go/types.Checker).builtin" "go/constant.Compare"
"(*go/types.Checker).builtin" "(*go/types.Checker).assignment"
"(*go/types.Checker).builtin" "(*go/types.Checker).updateExprType"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).assignment"
"(*go/types.Checker).builtin" "(*go/types.Tuple).Len"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "(*go/types.Checker).assignment"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).builtin" "(*go/types.Checker).assignment"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).assignment"
"(*go/types.Checker).builtin" "(*go/types.Checker).isValidIndex"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "go/types.unparen"
"go/types.hasVarSize" "go/types.asNamed"
"go/types.hasVarSize" "go/types.under"
"go/types.hasVarSize" "go/types.hasVarSize$1"
"go/types.hasVarSize" "go/types.hasVarSize"
"go/types.hasVarSize" "go/types.hasVarSize"
"go/types.hasVarSize" "go/types.isTypeParam"
"go/types.hasVarSize" "go/types.unreachable"
"(*go/types.Checker).builtin" "go/types.hasVarSize"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Config).alignof" "(*go/types.gcSizes).Sizeof"
"(*go/types.Config).alignof" "(*go/types.StdSizes).Sizeof"
"(*go/types.Config).alignof" "(*go/types.gcSizes).Alignof"
"(*go/types.Config).alignof" "go/types.representableConst$1"
"(*go/types.Config).alignof" "(*go/types.StdSizes).Alignof"
"(*go/types.Checker).builtin" "(*go/types.Config).alignof"
"(*go/types.Checker).builtin" "go/constant.MakeInt64"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).assignment"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(*go/types.Checker).use"
"(*go/types.Checker).builtin" "(*go/types.Checker).expr"
"go/types.derefStructPtr" "go/types.under"
"go/types.derefStructPtr" "go/types.under"
"(*go/types.Checker).builtin" "go/types.derefStructPtr"
"(*go/types.Checker).builtin" "go/types.LookupFieldOrMethod"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).recordSelection" "go/types.assert"
"(*go/types.Checker).recordSelection" "(*go/types.Checker).recordUse"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordSelection"
"(*go/types.Checker).builtin" "go/types.isBoolean"
"(*go/types.Checker).builtin" "(*go/types.object).Type"
"(*go/types.Checker).builtin" "(go/constant.intVal).Kind"
"(*go/types.Checker).builtin" "go/constant.BoolVal"
"(*go/types.Checker).builtin" "(*go/types.operand).Pos"
"(*go/types.Checker).builtin" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).builtin" "(go/constant.floatVal).Kind"
"(*go/types.Checker).builtin" "(go/constant.boolVal).Kind"
"(*go/types.Checker).builtin" "go/types.unreachable"
"(*go/types.Checker).builtin" "(*go/types.Checker).record"
"(*go/types.Checker).builtin" "go/types.hasVarSize"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Config).offsetof" "go/types.under"
"(*go/types.Config).offsetsof" "(*go/types.Struct).NumFields"
"(*go/types.Config).offsetsof" "(*go/types.StdSizes).Offsetsof"
"(*go/types.Config).offsetsof" "(*go/types.gcSizes).Offsetsof"
"(*go/types.Config).offsetsof" "(*go/types.Struct).NumFields"
"(*go/types.Config).offsetof" "(*go/types.Config).offsetsof"
"(*go/types.Checker).builtin" "(*go/types.Config).offsetof"
"(*go/types.Checker).builtin" "(go/constant.complexVal).Kind"
"(*go/types.Checker).builtin" "(*go/types.object).Type"
"(*go/types.Checker).builtin" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(*go/types.Checker).rawExpr"
"(*go/types.Checker).builtin" "(*go/types.Checker).dump"
"(*go/types.Checker).builtin" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).builtin" "(go/constant.int64Val).Kind"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "go/constant.MakeInt64"
"(*go/types.Checker).builtin" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).builtin" "go/types.coreType"
"(*go/types.Checker).builtin" "go/types.hasVarSize"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "(*go/types.Config).sizeof"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "go/constant.MakeInt64"
"(*go/types.Checker).builtin" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).builtin" "go/types.coreType"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(*go/types.Checker).isValidIndex"
"(*go/types.Checker).builtin" "go/types.NewSlice"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).builtin" "go/types.NewPointer"
"(*go/types.Checker).builtin" "(*go/types.Checker).assignment"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "go/types.NewPointer"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).builtin" "(*go/types.Checker).assignment"
"(*go/types.Checker).builtin" "(*go/types.Checker).isValidIndex"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.NewPointer"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "go/types.NewPointer"
"(*go/types.Checker).builtin" "(*go/types.Info).recordTypes"
"(*go/types.Checker).builtin" "go/types.makeSig"
"(*go/types.Checker).builtin" "(*go/types.Checker).recordBuiltinType"
"(*go/types.Checker).builtin" "(*go/types.Checker).errorf"
"(*go/types.Checker).builtin" "(go/constant.ratVal).Kind"
"(*go/types.Checker).builtin" "(*go/types.Checker).dump"
"(*go/types.Checker).callExpr" "(*go/types.Checker).builtin"
"(*go/types.Checker).callExpr" "go/types.inNode"
"(*go/types.Checker).callExpr" "(*go/types.Checker).errorf"
"(*go/types.Checker).callExpr" "(*go/types.Checker).expr"
"(*go/types.Checker).callExpr" "(*go/types.Checker).use"
"(*go/types.Checker).callExpr" "(*go/types.Checker).errorf"
"(*go/types.Checker).callExpr" "(go/token.Pos).IsValid"
"(*go/types.Checker).callExpr" "(*go/types.Checker).errorf"
"(*go/types.Checker).callExpr" "go/types.under"
"(*go/types.Interface).IsMethodSet" "(*go/types.Interface).typeSet"
"(*go/types.Interface).IsMethodSet" "(*go/types._TypeSet).IsMethodSet"
"(*go/types.Checker).callExpr" "(*go/types.Interface).IsMethodSet"
"(*go/types.Checker).conversion" "(*go/types.Checker).conversion$1"
"(*go/types.Checker).conversion" "(*go/types.TypeParam).underIs"
"go/types.isConstType" "go/types.isBasic"
"(*go/types.Checker).conversion" "go/types.isConstType"
"(*go/types.Checker).conversion" "(*go/types.Checker).errorf"
"(*go/types.Checker).conversion" "go/types.isInteger"
"(*go/types.Checker).conversion" "go/types.isInteger"
"(*go/types.operand).convertibleTo" "(*go/types.operand).assignableTo"
"(*go/types.operand).convertibleTo" "go/types.under"
"(*go/types.operand).convertibleTo" "go/types.under"
"go/types.IdenticalIgnoreTags" "(*go/types.comparer).identical"
"(*go/types.operand).convertibleTo" "go/types.IdenticalIgnoreTags"
"go/types.isIntegerOrFloat" "go/types.isBasic"
"(*go/types.operand).convertibleTo" "go/types.isIntegerOrFloat"
"(*go/types.operand).convertibleTo" "go/types.under"
"(*go/types.operand).convertibleTo" "go/types.under"
"(*go/types.operand).convertibleTo" "go/types.IdenticalIgnoreTags"
"(*go/types.operand).convertibleTo" "go/types.isTypeParam"
"(*go/types.operand).convertibleTo" "go/types.isTypeParam"
"(*go/types.operand).convertibleTo" "go/types.isComplex"
"(*go/types.operand).convertibleTo" "go/types.isIntegerOrFloat"
"(*go/types.operand).convertibleTo" "go/types.isInteger"
"(*go/types.operand).convertibleTo" "go/types.isComplex"
"(*go/types.operand).convertibleTo" "go/types.isString"
"(*go/types.operand).convertibleTo" "go/types.isString"
"(*go/types.operand).convertibleTo" "go/types.isBytesOrRunes"
"(*go/types.operand).convertibleTo" "go/types.isPointer"
"(*go/types.operand).convertibleTo" "go/types.isBytesOrRunes"
"go/types.isUnsafePointer" "go/types.under"
"(*go/types.operand).convertibleTo" "go/types.isUnsafePointer"
"(*go/types.operand).convertibleTo" "go/types.isUnsafePointer"
"go/types.isUintptr" "go/types.under"
"(*go/types.operand).convertibleTo" "go/types.isUintptr"
"(*go/types.operand).convertibleTo" "go/types.isPointer"
"(*go/types.operand).convertibleTo" "go/types.isUintptr"
"(*go/types.operand).convertibleTo" "(*go/types.Slice).Elem"
"(*go/types.operand).convertibleTo" "(*go/types.Array).Elem"
"(*go/types.operand).convertibleTo" "go/types.Identical"
"(*go/types.operand).convertibleTo" "(*go/types.Checker).allowVersion"
"(*go/types.operand).convertibleTo" "(*go/types.Pointer).Elem"
"(*go/types.operand).convertibleTo" "go/types.under"
"(*go/types.operand).convertibleTo" "(*go/types.Slice).Elem"
"(*go/types.operand).convertibleTo" "(*go/types.Array).Elem"
"(*go/types.operand).convertibleTo" "go/types.Identical"
"(*go/types.operand).convertibleTo" "(*go/types.Checker).allowVersion"
"(*go/types.operand).convertibleTo" "(*go/types.TypeParam).is"
"(*go/types.operand).convertibleTo" "(*go/types.TypeParam).is"
"(*go/types.operand).convertibleTo" "(*go/types.TypeParam).is"
"(*go/types.Checker).conversion" "(*go/types.operand).convertibleTo"
"(*go/types.Checker).conversion" "go/types.isTypeParam"
"(*go/types.Checker).conversion" "go/types.isUntyped"
"(*go/types.Checker).conversion" "(*go/types.Checker).errorf"
"(*go/types.Checker).conversion" "(*go/types.Checker).errorf"
"(*go/types.Checker).conversion" "go/types.isNonTypeParamInterface"
"(*go/types.Checker).conversion" "go/types.Default"
"(*go/types.Checker).conversion" "(*go/types.Checker).updateExprType"
"(*go/types.Checker).conversion" "(*go/types.operand).isNil"
"(*go/types.Checker).conversion" "go/types.isConstType"
"(*go/types.Checker).conversion" "go/types.allString"
"(*go/types.Checker).conversion" "go/types.isInteger"
"(*go/types.Checker).callExpr" "(*go/types.Checker).conversion"
"(*go/types.Checker).callExpr" "go/types.isTypeParam"
"(*go/types.Checker).callExpr" "(*go/types.Checker).errorf"
"(*go/types.Checker).callExpr" "go/types.coreType"
"(*go/types.Checker).callExpr" "(*go/types.Checker).errorf"
"(*go/types.Checker).callExpr" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).callExpr" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).callExpr" "(*go/types.Checker).typeList"
"(*go/types.Checker).genericExprList$1" "go/types.assert"
"(*go/types.Checker).genericExprList$1" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).genericExprList$1" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).genericExprList$1" "go/types.assert"
"(*go/types.Checker).genericExprList" "(*go/types.Checker).genericExprList$1"
"(*go/types.Checker).genericExprList" "(*go/types.Checker).allowVersion"
"(*go/types.Checker).genericExprList" "go/internal/typeparams.UnpackIndexExpr"
"(*go/types.Checker).genericExprList" "(*go/types.operand).Pos"
"(*go/types.Checker).genericExprList" "(*go/types.Checker).funcInst"
"(*go/types.Checker).genericExprList" "(*go/types.Checker).rawExpr"
"(*go/types.Checker).genericExprList" "(*go/types.Checker).exclude"
"(*go/types.Checker).genericExprList" "(*go/types.Checker).indexExpr"
"(*go/types.Checker).genericExprList" "(*go/types.Checker).record"
"(*go/types.Checker).genericExprList" "(*go/types.Tuple).Len"
"(*go/types.Checker).genericExprList" "go/internal/typeparams.UnpackIndexExpr"
"(*go/types.Checker).genericExprList" "(*go/types.operand).Pos"
"(*go/types.Checker).genericExprList" "(*go/types.Checker).funcInst"
"(*go/types.Checker).genericExpr" "(*go/types.Checker).rawExpr"
"(*go/types.Checker).genericExpr" "(*go/types.Checker).exclude"
"(*go/types.Checker).genericExpr" "(*go/types.Checker).singleValue"
"(*go/types.Checker).genericExprList" "(*go/types.Checker).genericExpr"
"(*go/types.Checker).genericExprList" "(*go/types.Checker).indexExpr"
"(*go/types.Checker).genericExprList" "(*go/types.Checker).record"
"(*go/types.Checker).callExpr" "(*go/types.Checker).genericExprList"
"(*go/types.Checker).callExpr" "(*go/types.Checker).arguments"
"(*go/types.Checker).callExpr" "(*go/types.Checker).use"
"(*go/types.Checker).callExpr" "go/types.assert"
"(*go/types.Checker).callExpr" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).callExpr" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).callExpr" "(*go/types.Checker).errorf"
"(*go/types.Checker).callExpr" "(*go/types.Checker).use"
"(*go/types.Checker).callExpr" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).callExpr" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).callExpr" "(*go/types.Checker).instantiateSignature"
"(*go/types.Checker).callExpr" "(*go/types.Checker).recordTypeAndValue"
"(*go/types.Checker).callExpr" "(*go/types.Tuple).Len"
"(*go/types.Checker).callExpr" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).callExpr" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).callExpr" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).callExpr" "(*go/types.TypeParamList).list"
"(*go/types.Checker).callExpr" "go/types.isParameterized"
"(*go/types.Checker).callExpr" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).callExpr" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).callExpr"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).exprOrType"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).validVarType"
"(*go/types.Checker).exprInternal" "go/types.underIs"
"(*go/types.Checker).unary" "(*go/types.Checker).expr"
"(*go/types.Checker).op" "go/types.coreString$1"
"(*go/types.Checker).op" "go/types.hasNil$1"
"(*go/types.Checker).op" "(*go/types.Checker).conversion$2"
"(*go/types.Checker).op" "(*go/types.Checker).builtin$2"
"(*go/types.Checker).op" "(*go/types.Checker).builtin$7"
"(*go/types.Checker).op" "go/types.allNumericOrString"
"(*go/types.Checker).op" "go/types.coreType$1"
"(*go/types.Checker).op" "(*go/types.Checker).indexExpr$1"
"(*go/types.Checker).op" "(*go/types.Checker).implicitTypeAndValue$1"
"(*go/types.Checker).op" "(*go/types.Checker).exprInternal$2"
"(*go/types.Checker).op" "(*go/types.Checker).builtin$3"
"(*go/types.Checker).op" "(*go/types.Checker).builtin$4"
"(*go/types.Checker).op" "go/types.allNumeric"
"(*go/types.Checker).op" "go/types.allInteger"
"(*go/types.Checker).op" "go/types.allBoolean"
"(*go/types.Checker).op" "(*go/types.Checker).errorf"
"(*go/types.Checker).op" "(*go/types.Checker).errorf"
"(*go/types.Checker).unary" "(*go/types.Checker).op"
"(*go/types.Checker).unary" "go/types.unparen"
"(*go/types.Checker).unary" "go/types.coreType"
"(*go/types.Checker).unary" "(*go/types.Checker).errorf"
"(*go/types.Checker).unary" "go/types.allInteger"
"(*go/types.Checker).unary" "(*go/types.Checker).errorf"
"(*go/types.Checker).unary" "(*go/types.Checker).errorf"
"(*go/types.Checker).unary" "(*go/types.Checker).errorf"
"(*go/types.Checker).unary" "(*go/types.Checker).error"
"(*go/types.Checker).unary" "(*go/types.Checker).error"
"(*go/types.Checker).unary" "(go/constant.floatVal).Kind"
"(*go/types.Checker).unary" "(go/constant.intVal).Kind"
"(*go/types.Checker).unary" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).unary" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).unary" "(go/constant.int64Val).Kind"
"(*go/types.Checker).unary" "(go/constant.boolVal).Kind"
"go/types.isUnsigned" "go/types.isBasic"
"(*go/types.Checker).unary" "go/types.isUnsigned"
"(*go/types.Checker).unary" "(*go/types.Config).sizeof"
"go/constant.UnaryOp" "go/constant.newInt"
"go/constant.UnaryOp" "go/constant.newInt"
"go/constant.UnaryOp" "math/big.NewInt"
"go/constant.UnaryOp" "(*math/big.Int).Neg"
"go/constant.UnaryOp" "go/constant.makeInt"
"go/constant.UnaryOp" "go/constant.newInt"
"go/constant.UnaryOp" "(*math/big.Int).Neg"
"go/constant.UnaryOp" "go/constant.makeInt"
"go/constant.UnaryOp" "go/constant.newRat"
"(*math/big.Rat).Set" "(*math/big.Int).Set"
"(*math/big.Rat).Set" "(*math/big.Int).Set"
"(*math/big.Rat).Set" "(math/big.nat).setWord"
"(*math/big.Rat).Neg" "(*math/big.Rat).Set"
"go/constant.UnaryOp" "(*math/big.Rat).Neg"
"go/constant.UnaryOp" "go/constant.makeRat"
"go/constant.UnaryOp" "go/constant.newFloat"
"go/constant.UnaryOp" "(*math/big.Float).Neg"
"go/constant.UnaryOp" "go/constant.makeFloat"
"go/constant.UnaryOp" "go/constant.UnaryOp"
"go/constant.UnaryOp" "go/constant.UnaryOp"
"go/constant.UnaryOp" "go/constant.makeComplex"
"go/constant.UnaryOp" "math/big.NewInt"
"(*math/big.Int).Not" "(math/big.nat).sub"
"(*math/big.Int).Not" "(math/big.nat).add"
"go/constant.UnaryOp" "(*math/big.Int).Not"
"go/constant.UnaryOp" "(*math/big.Int).Not"
"go/constant.UnaryOp" "fmt.Sprintf"
"go/constant.UnaryOp" "go/constant.newInt"
"go/constant.UnaryOp" "math/big.NewInt"
"go/constant.UnaryOp" "(*math/big.Int).Lsh"
"go/constant.UnaryOp" "(*math/big.Int).AndNot"
"go/constant.UnaryOp" "go/constant.makeInt"
"(*go/types.Checker).unary" "go/constant.UnaryOp"
"(*go/types.Checker).unary" "(*go/types.operand).Pos"
"(*go/types.Checker).unary" "(*go/types.Checker).overflow"
"(*go/types.Checker).unary" "(go/constant.complexVal).Kind"
"(*go/types.Checker).unary" "(go/constant.ratVal).Kind"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).unary"
"(*go/types.Checker).exprInternal" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).binary" "(*go/types.Checker).expr"
"(*go/types.Checker).binary" "(*go/types.Checker).expr"
"(*go/types.Checker).binary" "go/types.isShift"
"(*go/types.Checker).shift" "go/constant.ToInt"
"(*go/types.Checker).shift" "go/types.allInteger"
"(*go/types.Checker).shift" "(*go/types.Checker).errorf"
"(*go/types.Checker).shift" "go/types.isUntyped"
"(*go/types.Checker).shift" "go/types.isInteger"
"(*go/types.Checker).shift" "go/constant.Uint64Val"
"(*go/types.Checker).shift" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).shift" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).shift" "(go/constant.int64Val).Kind"
"(*go/types.Checker).shift" "(go/constant.boolVal).Kind"
"(*go/types.Checker).shift" "(go/constant.complexVal).Kind"
"(*go/types.Checker).shift" "(go/constant.floatVal).Kind"
"(*go/types.Checker).shift" "(go/constant.intVal).Kind"
"(*go/types.Checker).shift" "(*go/types.Checker).errorf"
"(*go/types.Checker).shift" "(go/constant.ratVal).Kind"
"(*go/types.Checker).shift" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).shift" "(go/constant.floatVal).Kind"
"(*go/types.Checker).shift" "(go/constant.intVal).Kind"
"(*go/types.Checker).shift" "go/constant.ToInt"
"(*go/types.Checker).shift" "(*go/types.Checker).errorf"
"(*go/types.Checker).shift" "go/types.isInteger"
"(*go/types.Checker).shift" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).shift" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).shift" "(go/constant.int64Val).Kind"
"(*go/types.Checker).shift" "(go/constant.boolVal).Kind"
"(*go/types.Checker).shift" "(go/constant.complexVal).Kind"
"(*go/types.Checker).shift" "(go/constant.ratVal).Kind"
"(*go/types.Checker).shift" "(go/constant.intVal).Kind"
"(*go/types.Checker).shift" "(*go/types.Checker).overflow"
"(*go/types.Checker).shift" "(go/constant.ratVal).Kind"
"(*go/types.Checker).shift" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).shift" "(go/constant.floatVal).Kind"
"(*go/types.Checker).shift" "(go/constant.complexVal).Kind"
"(*go/types.Checker).shift" "go/types.allInteger"
"(*go/types.Checker).shift" "(*go/types.Checker).errorf"
"(*go/types.Checker).shift" "go/types.isUntyped"
"(*go/types.Checker).shift" "go/constant.Sign"
"(*go/types.Checker).shift" "(*go/types.Checker).representable"
"go/types.allUnsigned" "go/types.allBasic"
"(*go/types.Checker).shift" "go/types.allUnsigned"
"(*go/types.Checker).shift" "(*go/types.Checker).convertUntyped"
"(*go/types.Checker).shift" "go/types.isUntyped"
"(*go/types.Checker).shift" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).shift" "(*go/types.Checker).errorf"
"(*go/types.Checker).shift" "go/types.allInteger"
"(*go/types.Checker).shift" "(go/constant.int64Val).Kind"
"(*go/types.Checker).shift" "go/constant.MakeUnknown"
"(*go/types.Checker).shift" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).shift" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).shift" "(go/constant.int64Val).Kind"
"(*go/types.Checker).shift" "(go/constant.boolVal).Kind"
"(*go/types.Checker).shift" "(go/constant.complexVal).Kind"
"go/constant.Shift" "fmt.Sprintf"
"go/constant.Shift" "go/constant.i64toi"
"go/constant.Shift" "(*math/big.Int).Lsh"
"go/constant.Shift" "go/constant.makeInt"
"go/constant.Shift" "go/constant.newInt"
"go/constant.Shift" "(*math/big.Int).Lsh"
"go/constant.Shift" "go/constant.makeInt"
"(*math/big.Int).Rsh" "(math/big.nat).sub"
"(*math/big.Int).Rsh" "(math/big.nat).shr"
"(*math/big.Int).Rsh" "(math/big.nat).add"
"(*math/big.Int).Rsh" "(math/big.nat).shr"
"go/constant.Shift" "(*math/big.Int).Rsh"
"go/constant.Shift" "go/constant.makeInt"
"(*go/types.Checker).shift" "go/constant.Shift"
"(*go/types.Checker).shift" "(go/constant.intVal).Kind"
"(*go/types.Checker).shift" "(*go/types.operand).Pos"
"(*go/types.Checker).shift" "(go/constant.ratVal).Kind"
"(*go/types.Checker).shift" "go/types.isUntyped"
"(*go/types.Checker).shift" "(go/constant.floatVal).Kind"
"(*go/types.Checker).shift" "(go/constant.boolVal).Kind"
"(*go/types.Checker).binary" "(*go/types.Checker).shift"
"(*go/types.Checker).binary" "(*go/types.Checker).matchTypes"
"(*go/types.Checker).binary" "go/types.isComparison"
"(*go/types.Checker).comparison" "go/types.isValid"
"(*go/types.Checker).comparison" "go/types.isValid"
"(*go/types.Checker).comparison" "(*go/types.operand).assignableTo"
"(*go/types.Checker).comparison" "(*go/types.operand).assignableTo"
"(*go/types.Checker).comparison" "(*go/types.Checker).sprintf"
"(*go/types.Checker).comparison" "(*go/types.operand).isNil"
"(*go/types.Checker).comparison" "go/types.allOrdered"
"(*go/types.Checker).comparison" "(*go/types.operand).isNil"
"(*go/types.Checker).incomparableCause" "go/types.under"
"(*go/types.Checker).kindString" "go/types.under"
"(*go/types.Checker).kindString" "go/types.isTypeParam"
"(*go/types.Checker).kindString" "(*go/types.Checker).sprintf"
"(*go/types.Checker).kindString" "(*go/types.Checker).sprintf"
"(*go/types.Checker).incomparableCause" "(*go/types.Checker).kindString"
"(*go/types.Checker).incomparableCause" "go/types.comparable"
"(*go/types.Checker).comparison" "(*go/types.Checker).incomparableCause"
"go/types.Comparable" "go/types.comparable"
"(*go/types.Checker).comparison" "go/types.Comparable"
"(*go/types.Checker).comparison" "(*go/types.operand).isNil"
"(*go/types.Checker).comparison" "go/types.hasNil"
"(*go/types.Checker).comparison" "(*go/types.Checker).incomparableCause"
"(*go/types.Checker).comparison" "go/types.Comparable"
"(*go/types.Checker).comparison" "go/types.unreachable"
"(*go/types.Checker).comparison" "go/types.allOrdered"
"(*go/types.Checker).comparison" "go/constant.Compare"
"(*go/types.Checker).comparison" "go/constant.MakeBool"
"(*go/types.Checker).comparison" "go/types.Default"
"(*go/types.Checker).comparison" "(*go/types.Checker).updateExprType"
"(*go/types.Checker).comparison" "go/types.Default"
"(*go/types.Checker).comparison" "(*go/types.Checker).updateExprType"
"(*go/types.Checker).comparison" "go/types.isTypeParam"
"(*go/types.Checker).comparison" "go/types.isTypeParam"
"(*go/types.Checker).comparison" "(*go/types.Checker).kindString"
"(*go/types.Checker).comparison" "(*go/types.Checker).sprintf"
"(*go/types.Checker).comparison" "go/types.isTypeParam"
"(*go/types.Checker).comparison" "(*go/types.Checker).sprintf"
"(*go/types.Checker).comparison" "(*go/types.Checker).errorf"
"(*go/types.Checker).comparison" "(*go/types.Checker).errorf"
"(*go/types.Checker).binary" "(*go/types.Checker).comparison"
"(*go/types.Checker).binary" "go/types.Identical"
"(*go/types.Checker).binary" "go/types.isValid"
"(*go/types.Checker).binary" "(*go/types.Checker).op"
"(*go/types.Checker).binary" "go/types.isValid"
"(*go/types.Checker).binary" "(*go/types.Checker).errorf"
"(*go/types.Checker).binary" "(*go/types.Checker).errorf"
"(*go/types.Checker).binary" "(*go/types.Checker).error"
"(*go/types.Checker).binary" "go/constant.Sign"
"(*go/types.Checker).binary" "go/types.allInteger"
"(*go/types.Checker).binary" "go/constant.Real"
"(*go/types.Checker).binary" "go/constant.Imag"
"(*go/types.Checker).binary" "go/constant.BinaryOp"
"(*go/types.Checker).binary" "go/constant.BinaryOp"
"(*go/types.Checker).binary" "go/constant.Sign"
"(*go/types.Checker).binary" "go/types.isComplex"
"(*go/types.Checker).binary" "(*go/types.Checker).error"
"(*go/types.Checker).binary" "go/constant.Sign"
"(*go/types.Checker).binary" "(go/constant.floatVal).Kind"
"(*go/types.Checker).binary" "(go/constant.intVal).Kind"
"(*go/types.Checker).binary" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).binary" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).binary" "(go/constant.int64Val).Kind"
"(*go/types.Checker).binary" "(go/constant.boolVal).Kind"
"(*go/types.Checker).binary" "go/constant.MakeUnknown"
"(*go/types.Checker).binary" "(go/constant.floatVal).Kind"
"(*go/types.Checker).binary" "(go/constant.intVal).Kind"
"(*go/types.Checker).binary" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).binary" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).binary" "(go/constant.int64Val).Kind"
"(*go/types.Checker).binary" "(go/constant.boolVal).Kind"
"(*go/types.Checker).binary" "go/constant.BinaryOp"
"(*go/types.Checker).binary" "(*go/types.Checker).overflow"
"(*go/types.Checker).binary" "go/types.isInteger"
"(*go/types.Checker).binary" "(go/constant.complexVal).Kind"
"(*go/types.Checker).binary" "(go/constant.complexVal).Kind"
"(*go/types.Checker).binary" "(go/constant.ratVal).Kind"
"(*go/types.Checker).binary" "(go/constant.ratVal).Kind"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).binary"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).error"
"(*go/types.Checker).exprInternal" "(*go/types.Checker).typ"
"(*go/types.Checker).exprInternal" "(*go/ast.Ident).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/token.FileSet).Position"
"(*go/types.Checker).exprInternal" "fmt.Sprintf"
"(*go/types.Checker).exprInternal" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.MapType).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.MapType).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.StructType).Pos"
"(*go/types.Checker).exprInternal" "(*go/ast.StructType).Pos"
"(*go/types.Checker).rawExpr" "(*go/types.Checker).exprInternal"
"(*go/types.Checker).rawExpr" "(*go/types.Checker).nonGeneric"
"(*go/types.Checker).rawExpr" "(*go/types.Checker).record"
"(*go/types.Checker).rawExpr" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.MapType).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).rawExpr" "(*go/ast.StructType).Pos"
"(*go/types.Checker).exprOrType" "(*go/types.Checker).rawExpr"
"(*go/types.Checker).exprOrType" "(*go/types.Checker).exclude"
"(*go/types.Checker).exprOrType" "(*go/types.Checker).singleValue"
"(*go/types.Checker).selector" "(*go/types.Checker).exprOrType"
"(*go/types.Checker).selector" "go/types.assert"
"(*go/types.Checker).selector" "(*go/types.Checker).recordUse"
"(*go/types.Checker).selector" "(*go/types.Checker).recordUse"
"(*go/types.Checker).selector" "(*go/types.Scope).Lookup"
"(*go/types.Checker).selector" "(*go/types.Scope).LookupParent"
"(*go/types.Checker).selector" "(*go/types.Checker).errorf"
"(*go/types.Checker).selector" "(*go/types.Checker).objDecl"
"(*go/types.MethodSet).Lookup" "(*go/types.MethodSet).Len"
"(*go/types.MethodSet).Lookup" "go/types.Id"
"(*go/types.MethodSet).Lookup" "sort.Search"
"(*go/types.MethodSet).Lookup" "(*go/types.object).Id"
"(*go/types.Checker).selector" "(*go/types.MethodSet).Lookup"
"(*go/types.Checker).selector" "(*go/types.object).Exported"
"(*go/types.Checker).selector" "(*go/types.Checker).dump"
"(*go/types.Checker).selector" "(*go/types.Checker).addDeclDep"
"go/types.NewMethodSet" "go/types.asNamed"
"go/types.NewMethodSet" "go/types.deref"
"go/types.NewMethodSet" "go/types.isPointer"
"go/types.NewMethodSet" "go/types.IsInterface"
"go/types.NewMethodSet" "go/types.asNamed"
"go/types.NewMethodSet" "(*go/types.instanceLookup).lookup"
"go/types.NewMethodSet" "go/types.under"
"go/types.NewMethodSet" "(*go/types.instanceLookup).add"
"(*go/types.Named).NumMethods" "(*go/types.Named).Origin"
"(*go/types.Named).NumMethods" "(*go/types.Named).resolve"
"go/types.NewMethodSet" "(*go/types.Named).NumMethods"
"go/types.NewMethodSet" "(*go/types.Named).Method"
"go/types.NewMethodSet" "go/types.concat"
"(go/types.methodSet).addOne" "(*go/types.object).Id"
"(*go/types.Func).hasPtrRecv" "go/types.deref"
"(go/types.methodSet).addOne" "(*go/types.Func).hasPtrRecv"
"go/types.NewMethodSet" "(go/types.methodSet).addOne"
"go/types.NewMethodSet" "(*go/types.object).Id"
"go/types.NewMethodSet" "go/types.deref"
"go/types.NewMethodSet" "go/types.concat"
"go/types.NewMethodSet" "(*go/types.Interface).typeSet"
"(go/types.methodSet).add" "go/types.concat"
"(go/types.methodSet).add" "(go/types.methodSet).addOne"
"go/types.NewMethodSet" "(go/types.methodSet).add"
"go/types.lookupType" "go/types.Identical"
"go/types.consolidateMultiples" "go/types.lookupType"
"go/types.NewMethodSet" "go/types.consolidateMultiples"
"go/types.NewMethodSet" "sort.Slice"
"(*go/types.Checker).selector" "go/types.NewMethodSet"
"(*go/types.Checker).selector" "go/types.IsInterface"
"(*go/types.Checker).selector" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).selector" "(*go/types.Checker).dump"
"(*go/types.Checker).selector" "(*go/types.Checker).errorf"
"(*go/types.Checker).selector" "(*go/types.Checker).errorf"
"(*go/types.Checker).selector" "(*go/types.Const).Val"
"(*go/types.Checker).selector" "go/types.assert"
"(*go/types.Checker).selector" "strings.HasPrefix"
"(*go/types.Checker).selector" "strings.HasPrefix"
"(*go/types.Checker).selector" "(*go/ast.Ident).Pos"
"(*go/types.Checker).selector" "(*go/types.Checker).dump"
"(*go/types.Checker).selector" "go/types.unreachable"
"(*go/types.Checker).selector" "(*go/types.Checker).errorf"
"(*go/types.Checker).selector" "(*go/types.Checker).cycleError"
"(*go/types.Checker).selector" "(*go/types.Checker).errorf"
"(*go/types.Checker).selector" "go/types.LookupFieldOrMethod"
"(*go/types.Checker).selector" "go/types.under"
"(*go/types.Checker).selector" "go/types.isValid"
"(*go/types.Checker).selector" "(*go/types.Checker).errorf"
"(*go/types.Checker).selector" "go/types.isInterfacePtr"
"(*go/types.Checker).selector" "(*go/types.Checker).errorf"
"(*go/types.Checker).selector" "(*go/types.Checker).errorf"
"(*go/types.Checker).interfacePtrError" "go/types.isInterfacePtr"
"(*go/types.Checker).interfacePtrError" "go/types.assert"
"(*go/types.Checker).interfacePtrError" "go/types.under"
"(*go/types.Checker).interfacePtrError" "go/types.isTypeParam"
"(*go/types.Checker).interfacePtrError" "(*go/types.Checker).sprintf"
"(*go/types.Checker).interfacePtrError" "(*go/types.Checker).sprintf"
"(*go/types.Checker).selector" "(*go/types.Checker).interfacePtrError"
"(*go/types.Checker).selector" "(*go/types.Checker).errorf"
"(*go/types.Checker).selector" "(*go/types.Checker).sprintf"
"(*go/types.Checker).selector" "unicode.IsUpper"
"(*go/types.Checker).selector" "unicode.ToLower"
"(*go/types.Checker).selector" "go/types.LookupFieldOrMethod"
"(*go/types.Checker).selector" "unicode.ToUpper"
"(*go/types.Checker).selector" "(*go/types.Checker).objDecl"
"(*go/types.Checker).selector" "(*go/types.Checker).errorf"
"(*go/types.Checker).selector" "(*go/types.Checker).recordSelection"
"(*go/types.Checker).selector" "(*go/types.Checker).error"
"(*go/types.Checker).selector" "go/types.NewVar"
"(*go/types.Checker).selector" "go/types.NewTuple"
"(*go/types.Checker).selector" "(*go/types.Checker).addDeclDep"
"(*go/types.Checker).selector" "(*go/types.Checker).recordSelection"
"(*go/types.Checker).selector" "(*go/types.Checker).recordSelection"
"(*go/types.Checker).selector" "go/types.unreachable"
"(*go/types.Checker).typInternal" "(*go/types.Checker).selector"
"(*go/types.Checker).typInternal" "go/types.setDefType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).typInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).typInternal" "go/internal/typeparams.UnpackIndexExpr"
"(*go/types.Checker).typInternal" "go/types.inNode"
"(*go/types.Checker).typInternal" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).instantiatedType" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).instantiatedType" "(*go/types.Checker).trace"
"(*go/types.Checker).instantiatedType$1" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).instantiatedType$1" "(*go/types.Checker).trace"
"(*go/types.Checker).instantiatedType" "(*go/types.Checker).instantiatedType$1"
"(*go/types.Checker).instantiatedType" "(*go/types.Checker).genericType"
"(*go/types.Checker).instantiatedType" "(*go/types.Checker).errorf"
"(*go/types.Checker).instantiatedType" "go/types.isValid"
"(*go/types.Checker).instantiatedType" "go/types.asNamed"
"(*go/types.Checker).instantiatedType" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).instantiatedType" "fmt.Sprintf"
"(*go/types.Checker).instantiatedType" "(*go/types.Checker).typeList"
"(*go/types.Checker).instantiatedType" "go/types.setDefType"
"(*go/types.Checker).instantiatedType" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).instantiatedType" "(*go/types.Checker).context"
"(*go/types.Checker).instantiatedType" "(*go/types.Checker).instance"
"(*go/types.Checker).instantiatedType" "go/types.asNamed"
"(*go/types.Checker).instantiatedType" "go/types.setDefType"
"(*go/types.Checker).instantiatedType" "(*go/types.Checker).later"
"(*go/types.Checker).instantiatedType" "(*go/types.action).describef"
"(*go/types.Checker).typInternal" "(*go/types.Checker).instantiatedType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).definedType"
"(*go/types.Checker).typInternal" "go/types.setDefType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).varType"
"(*go/types.Checker).typInternal" "go/types.setDefType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).error"
"(*go/types.Checker).typInternal" "(*go/types.Checker).varType"
"(*go/types.Checker).arrayLength" "(*go/types.environment).lookup"
"(*go/types.Checker).arrayLength" "(*go/types.Checker).expr"
"(*go/types.Checker).arrayLength" "(*go/types.Checker).errorf"
"(*go/types.Checker).arrayLength" "(*go/types.Checker).errorf"
"(*go/types.Checker).arrayLength" "go/types.isUntyped"
"(*go/types.Checker).arrayLength" "(*go/types.Checker).errorf"
"(*go/types.Checker).arrayLength" "go/constant.ToInt"
"(*go/types.Checker).arrayLength" "(go/constant.floatVal).Kind"
"(*go/types.Checker).arrayLength" "(go/constant.intVal).Kind"
"(*go/types.Checker).arrayLength" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).arrayLength" "(go/constant.unknownVal).Kind"
"(*go/types.Checker).arrayLength" "(go/constant.int64Val).Kind"
"(*go/types.Checker).arrayLength" "(go/constant.boolVal).Kind"
"(*go/types.Checker).arrayLength" "go/types.isInteger"
"(*go/types.Checker).arrayLength" "go/types.isInteger"
"(*go/types.Checker).arrayLength" "go/types.representableConst"
"(*go/types.Checker).arrayLength" "go/constant.Int64Val"
"(*go/types.Checker).arrayLength" "(*go/types.Checker).errorf"
"(*go/types.Checker).arrayLength" "(go/constant.complexVal).Kind"
"(*go/types.Checker).arrayLength" "(go/constant.ratVal).Kind"
"(*go/types.Checker).typInternal" "(*go/types.Checker).arrayLength"
"(*go/types.Checker).typInternal" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).typInternal" "(*go/types.Checker).error"
"(*go/types.Checker).typInternal" "(*go/types.Checker).use"
"(*go/types.Checker).typInternal" "go/types.setDefType"
"(*go/types.Checker).structType" "(*go/types.Struct).markComplete"
"(*go/types.Checker).structType" "(*go/types.Checker).varType"
"(*go/types.Checker).tag" "strconv.Unquote"
"(*go/types.Checker).tag" "(*go/types.Checker).errorf"
"(*go/types.Checker).structType" "(*go/types.Checker).tag"
"(*go/types.Checker).structType" "(*go/types.Struct).markComplete"
"(*go/types.Checker).structType" "(*go/ast.Ident).Pos"
"(*go/types.Checker).structType" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).structType" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).structType" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).structType" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).structType" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).structType" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).structType" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).structType" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).structType" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).structType" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).structType" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).structType" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).structType" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).structType" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).structType" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).structType" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).structType" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).structType" "(*go/ast.MapType).Pos"
"(*go/types.Checker).structType" "(*go/ast.BadExpr).Pos"
"go/types.embeddedFieldIdent" "go/types.embeddedFieldIdent"
"go/types.embeddedFieldIdent" "go/types.embeddedFieldIdent"
"go/types.embeddedFieldIdent" "go/types.embeddedFieldIdent"
"(*go/types.Checker).structType" "go/types.embeddedFieldIdent"
"(*go/types.Checker).structType" "(*go/ast.Ident).Pos"
"go/types.NewField" "go/types.colorFor"
"(*go/types.Checker).structType$1" "go/types.NewField"
"(*go/types.Checker).structType$1" "(*go/types.Checker).recordDef"
"(*go/types.Checker).declareInSet" "(*go/types.objset).insert"
"(*go/types.Checker).declareInSet" "(*go/types.Checker).errorf"
"(*go/types.Checker).declareInSet" "(*go/types.object).Name"
"(*go/types.Checker).declareInSet" "(*go/types.Checker).reportAltDecl"
"(*go/types.Checker).structType$1" "(*go/types.Checker).declareInSet"
"(*go/types.Checker).structType" "(*go/types.Checker).structType$1"
"(*go/types.Checker).structType" "(*go/types.Checker).errorf"
"(*go/types.Checker).structType" "go/ast.NewIdent"
"(*go/types.Checker).structType$2" "(*go/types.Checker).structType$1"
"(*go/types.Checker).structType" "(*go/types.Checker).structType$2"
"(*go/types.Checker).structType" "(*go/ast.Ident).Pos"
"(*go/types.Checker).structType" "(*go/types.Checker).structType$1"
"(*go/types.Checker).structType" "(*go/types.Checker).later"
"(*go/types.Checker).structType" "(*go/types.action).describef"
"(*go/types.Checker).structType" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).structType" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).structType" "(*go/ast.StructType).Pos"
"(*go/types.Checker).typInternal" "(*go/types.Checker).structType"
"(*go/types.Checker).typInternal" "go/types.setDefType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).varType"
"(*go/types.Checker).typInternal" "go/types.setDefType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).funcType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).newInterface"
"(*go/types.Checker).typInternal" "go/types.setDefType"
"(*go/types.Checker).interfaceType" "(*go/ast.Ident).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.MapType).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.BadExpr).Pos"
"go/types.flattenUnion" "go/types.flattenUnion"
"go/types.parseUnion" "go/types.flattenUnion"
"go/types.parseUnion" "go/types.assert"
"go/types.parseTilde" "(*go/types.Checker).typ"
"go/types.parseTilde" "go/types.isTypeParam"
"go/types.parseTilde" "go/types.NewTerm"
"go/types.parseTilde" "(*go/types.Checker).errorf"
"go/types.parseTilde" "(*go/types.Checker).error"
"go/types.parseTilde" "(*go/types.Checker).recordTypeAndValue"
"go/types.parseUnion" "go/types.parseTilde"
"go/types.parseUnion" "go/types.isValid"
"go/types.parseUnion" "go/types.isValid"
"go/types.parseUnion" "(*go/types.Checker).errorf"
"go/types.parseUnion" "(*go/types.Checker).recordTypeAndValue"
"go/types.parseUnion" "(*go/types.Checker).later"
"go/types.parseUnion" "(*go/types.action).describef"
"(*go/types.Checker).interfaceType" "go/types.parseUnion"
"(*go/types.Checker).interfaceType" "(*go/types.Checker).interfaceType$1"
"(*go/types.Checker).interfaceType" "(*go/types.Checker).error"
"(*go/types.Checker).interfaceType" "(*go/types.Checker).typ"
"(*go/types.Checker).interfaceType" "go/types.isValid"
"(*go/types.Checker).interfaceType" "(*go/types.Checker).errorf"
"(*go/types.Checker).interfaceType" "(*go/types.Checker).error"
"(*go/types.Checker).interfaceType" "go/types.asNamed"
"(*go/types.Checker).interfaceType" "(*go/ast.Ident).Pos"
"(*go/types.Checker).interfaceType" "go/types.NewVar"
"(*go/types.Checker).interfaceType" "(*go/ast.Ident).Pos"
"go/types.NewFunc" "go/types.colorFor"
"(*go/types.Checker).interfaceType" "go/types.NewFunc"
"(*go/types.Checker).interfaceType" "(*go/types.Checker).recordDef"
"(*go/types.Checker).interfaceType" "go/types.sortMethods"
"(*go/types.Checker).interfaceType" "(*go/types.Checker).later"
"(*go/types.Checker).interfaceType" "(*go/types.action).describef"
"(*go/types.Checker).interfaceType" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).interfaceType" "(*go/ast.StructType).Pos"
"(*go/types.Checker).typInternal" "(*go/types.Checker).interfaceType"
"(*go/types.Checker).typInternal" "go/types.setDefType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).varType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).varType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).later"
"(*go/types.Checker).typInternal" "(*go/types.action).describef"
"(*go/types.Checker).typInternal" "go/types.setDefType"
"(*go/types.Checker).typInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).typInternal" "(*go/types.Checker).use"
"(*go/types.Checker).typInternal" "(*go/types.Checker).varType"
"(*go/types.Checker).typInternal" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).typInternal" "(*go/types.Checker).errorf"
"(*go/types.Checker).typInternal" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.MapType).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).typInternal" "(*go/ast.StructType).Pos"
"(*go/types.Checker).genericType" "(*go/types.Checker).typInternal"
"(*go/types.Checker).genericType" "go/types.isTyped"
"(*go/types.Checker).genericType" "go/types.assert"
"(*go/types.Checker).genericType" "go/types.isValid"
"(*go/types.Checker).genericType" "(*go/types.Checker).recordTypeAndValue"
"(*go/types.Checker).genericType" "go/types.isGeneric"
"(*go/types.Checker).genericType" "(*go/types.Checker).sprintf"
"(*go/types.Checker).funcType" "(*go/types.Checker).genericType"
"(*go/types.Checker).funcType" "go/types.asNamed"
"(*go/types.Checker).funcType" "(*go/types.Named).TypeParams"
"(*go/types.Checker).funcType" "(*go/types.TypeParamList).list"
"(*go/types.Checker).funcType" "go/types.makeRenameMap"
"(*go/types.Checker).funcType" "(*go/types.monoGraph).recordCanon"
"(*go/types.Checker).funcType" "(*go/types.Checker).context"
"(*go/types.Checker).funcType" "(*go/types.Checker).subst"
"go/types.measure" "fmt.Sprintf"
"(*go/types.Checker).funcType" "go/types.measure"
"(*go/types.Checker).funcType" "(*go/types.Checker).errorf"
"(*go/types.Checker).collectTypeParams" "(*go/ast.FieldList).Pos"
"(*go/types.Checker).collectTypeParams" "(*go/types.Checker).declareTypeParams"
"(*go/types.Checker).collectTypeParams" "go/types.bindTParams"
"(*go/types.Checker).collectTypeParams" "go/types.assert"
"(*go/types.Checker).collectTypeParams" "(*go/types.Checker).collectTypeParams$1"
"(*go/types.Checker).bound" "(*go/types.Checker).typ"
"(*go/types.Checker).bound" "(*go/types.Checker).typ"
"(*go/types.Checker).collectTypeParams" "(*go/types.Checker).bound"
"(*go/types.Checker).collectTypeParams" "go/types.isTypeParam"
"(*go/types.Checker).collectTypeParams" "(*go/types.Checker).error"
"(*go/types.Checker).funcType" "(*go/types.Checker).collectTypeParams"
"(*go/types.Checker).funcType" "go/types.NewScope"
"(*go/types.Checker).funcType" "(*go/ast.FuncType).End"
"(*go/types.Checker).collectParams" "(*go/types.Checker).varType"
"(*go/types.Checker).collectParams" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).collectParams" "(*go/ast.Ident).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).collectParams" "go/types.NewParam"
"(*go/types.Checker).recordImplicit" "go/types.assert"
"(*go/types.Checker).recordImplicit" "go/types.assert"
"(*go/types.Checker).collectParams" "(*go/types.Checker).recordImplicit"
"(*go/types.Checker).collectParams" "(*go/types.Checker).error"
"(*go/types.Checker).collectParams" "(*go/ast.Ident).Pos"
"(*go/types.Checker).collectParams" "go/types.NewParam"
"(*go/types.Checker).collectParams" "(*go/types.Checker).declare"
"(*go/types.Checker).collectParams" "(*go/types.Checker).error"
"(*go/types.Checker).collectParams" "(*go/types.Checker).recordTypeAndValue"
"(*go/types.Checker).collectParams" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.MapType).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).collectParams" "(*go/ast.StructType).Pos"
"(*go/types.Checker).funcType" "(*go/types.Checker).collectParams"
"(*go/types.Checker).funcType" "(*go/types.Checker).collectParams"
"(*go/types.Checker).funcType" "(*go/types.Checker).collectParams"
"(*go/types.Scope).squash" "go/types.assert"
"(*go/types.Scope).squash" "go/types.resolve"
"(*go/types.Scope).squash" "(*go/types.Scope).Insert"
"(*go/types.Scope).squash" "(*go/types.object).setParent"
"(*go/types.Scope).squash" "go/types.assert"
"(*go/types.Checker).funcType$1" "(*go/types.Checker).reportAltDecl"
"(*go/types.Checker).funcType$1" "(*go/types.object).Name"
"(*go/types.Checker).funcType$1" "(*go/types.Checker).errorf"
"(*go/types.Scope).squash" "(*go/types.Checker).funcType$1"
"(*go/types.Checker).funcType" "(*go/types.Scope).squash"
"(*go/types.Checker).funcType" "(*go/types.Checker).error"
"(*go/types.Checker).funcType" "go/types.NewTuple"
"(*go/types.Checker).funcType" "go/types.NewTuple"
"(*go/types.Checker).funcType" "(*go/types.Checker).later"
"(*go/types.Checker).funcType" "(*go/types.action).describef"
"(*go/types.Checker).funcType" "go/types.NewParam"
"(*go/types.Checker).funcType" "(*go/types.Checker).error"
"(*go/types.Checker).funcDecl" "(*go/types.Checker).funcType"
"(*go/types.Checker).funcDecl" "(*go/ast.FuncDecl).Pos"
"(*go/types.Checker).funcDecl" "(*go/ast.FuncDecl).End"
"(*go/types.Checker).funcDecl" "(*go/ast.FieldList).NumFields"
"(*go/types.Checker).funcDecl" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).funcDecl" "(*go/types.Checker).later"
"(*go/types.Checker).funcDecl" "(*go/types.action).describef"
"(*go/types.Checker).objDecl" "(*go/types.Checker).funcDecl"
"(*go/types.Checker).objDecl" "go/types.unreachable"
"(*go/types.Checker).objDecl" "(*go/types.Checker).validCycle"
"(*go/types.Checker).objDecl" "(*go/types.object).Type"
"(*go/types.Checker).constDecl" "go/types.assert"
"(*go/types.Checker).constDecl" "(*go/types.Checker).constDecl$1"
"(*go/types.Checker).constDecl" "go/constant.MakeUnknown"
"(*go/types.Checker).constDecl" "(*go/types.Checker).typ"
"(*go/types.Checker).constDecl" "go/types.isConstType"
"(*go/types.Checker).constDecl" "go/types.under"
"(*go/types.Checker).constDecl" "go/types.isValid"
"(*go/types.Checker).constDecl" "(*go/types.Checker).errorf"
"(*go/types.Checker).initConst" "go/types.isValid"
"(*go/types.Checker).initConst" "go/types.isValid"
"(*go/types.Checker).initConst" "(*go/types.Checker).errorf"
"(*go/types.Checker).initConst" "go/types.isConstType"
"(*go/types.Checker).initConst" "go/types.assert"
"(*go/types.Checker).initConst" "(*go/types.Checker).assignment"
"(*go/types.Checker).constDecl" "(*go/types.Checker).initConst"
"(*go/types.Checker).constDecl" "(*go/types.Checker).expr"
"(*go/types.Checker).objDecl" "(*go/types.Checker).constDecl"
"(*go/types.Checker).objDecl" "(*go/types.object).Pos"
"(*go/types.Checker).typeDecl" "go/types.assert"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).later"
"(*go/types.Checker).typeDecl" "(*go/types.object).Name"
"(*go/types.Checker).typeDecl" "(*go/types.action).describef"
"(*go/types.Checker).typeDecl" "(go/token.Pos).IsValid"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).error"
"(*go/types.Checker).typeDecl" "(*go/ast.FieldList).NumFields"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).newNamed" "(*go/types.Checker).needsCleanup"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).newNamed"
"(*go/types.Checker).typeDecl" "go/types.setDefType"
"(*go/types.Checker).newAlias" "go/types.assert"
"(*go/types.Checker).newAlias" "(*go/types.Checker).needsCleanup"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).newAlias"
"(*go/types.Checker).typeDecl" "go/types.setDefType"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).definedType"
"(*go/types.Checker).typeDecl" "go/types.assert"
"(*go/types.Checker).typeDecl" "go/types.Unalias"
"(*go/types.Checker).brokenAlias" "go/types.assert"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).brokenAlias"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).typ"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).validAlias"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).openScope"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).closeScope"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).collectTypeParams"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).definedType"
"(*go/types.Checker).typeDecl" "go/types.assert"
"(*go/types.Checker).typeDecl" "go/types.isTypeParam"
"(*go/types.Checker).typeDecl" "(*go/types.Checker).error"
"(*go/types.Checker).objDecl" "(*go/types.Checker).typeDecl"
"(*go/types.Checker).objDecl" "(*go/types.object).setColor"
"(*go/types.Checker).objDecl" "go/types.assert"
"(*go/types.Checker).objDecl" "(*go/types.Checker).validCycle"
"(*go/types.Checker).objDecl" "fmt.Println"
"(*go/types.Checker).varDecl" "go/types.assert"
"(*go/types.Checker).varDecl" "(*go/types.Checker).varType"
"(*go/types.Checker).varDecl" "go/types.assert"
"go/types.newTarget" "go/types.under"
"(*go/types.Checker).varDecl" "go/types.newTarget"
"(*go/types.Checker).varDecl" "(*go/types.Checker).expr"
"(*go/types.Checker).initVar" "go/types.isValid"
"(*go/types.Checker).initVar" "go/types.isValid"
"(*go/types.Checker).initVar" "go/types.isUntyped"
"(*go/types.Checker).initVar" "(*go/types.Checker).assignment"
"(*go/types.Checker).initVar" "(*go/types.Checker).errorf"
"(*go/types.Checker).initVar" "go/types.Default"
"(*go/types.Checker).varDecl" "(*go/types.Checker).initVar"
"(*go/types.Checker).initVars" "go/types.unparen"
"(*go/types.Checker).initVars" "go/types.newTarget"
"(*go/types.Checker).initVars" "(*go/types.Checker).expr"
"(*go/types.Checker).initVars" "(*go/types.Checker).initVar"
"(*go/types.Checker).initVars" "(*go/types.Checker).use"
"(*go/types.Checker).initVars" "(*go/types.Checker).exprList"
"(*go/types.Checker).returnError" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.CommentGroup).Pos"
"(*go/types.Checker).returnError" "(*go/ast.EmptyStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.Ident).Pos"
"(*go/types.Checker).returnError" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).returnError" "(*go/ast.BlockStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.ImportSpec).Pos"
"(*go/types.Checker).returnError" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).returnError" "(*go/types.Scope).Pos"
"(*go/types.Checker).returnError" "(*go/ast.BadStmt).Pos"
"(*go/types.Checker).returnError" "(go/types.atPos).Pos"
"(*go/types.Checker).returnError" "(*go/ast.GoStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.Field).Pos"
"(*go/types.Checker).returnError" "(*go/types.object).Pos"
"(*go/types.Checker).returnError" "(*go/ast.TypeSpec).Pos"
"(*go/types.Checker).returnError" "(*go/ast.File).Pos"
"(*go/types.Checker).returnError" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.DeferStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.Comment).Pos"
"(*go/types.Checker).returnError" "(*go/ast.FieldList).Pos"
"(*go/types.Checker).returnError" "(*go/ast.FuncDecl).Pos"
"(*go/types.Checker).returnError" "(*go/ast.RangeStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.SelectStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.Object).Pos"
"(*go/types.Checker).returnError" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.GenDecl).Pos"
"(*go/types.Checker).returnError" "(*go/types.operand).Pos"
"(*go/types.Checker).returnError" "(*go/ast.ValueSpec).Pos"
"(*go/types.Checker).returnError" "(*go/ast.BadDecl).Pos"
"(*go/types.Checker).returnError" "(*go/types.error_).errorf"
"(*go/types.Checker).returnError" "go/types.operandTypes"
"(*go/types.Checker).returnError" "(*go/types.Checker).typesSummary"
"(*go/types.Checker).returnError" "(*go/types.error_).errorf"
"(*go/types.Checker).returnError" "go/types.varTypes"
"(*go/types.Checker).returnError" "(*go/types.Checker).typesSummary"
"(*go/types.Checker).returnError" "(*go/types.error_).errorf"
"(*go/types.Checker).returnError" "(*go/types.Checker).report"
"(*go/types.Checker).returnError" "(go/types.posSpan).Pos"
"(*go/types.Checker).returnError" "(*go/ast.MapType).Pos"
"(*go/types.Checker).returnError" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).returnError" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).returnError" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).returnError" "(*go/ast.LabeledStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).returnError" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).returnError" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.StructType).Pos"
"(*go/types.Checker).returnError" "(*go/ast.DeclStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.CommClause).Pos"
"(*go/types.Checker).returnError" "(*go/ast.ExprStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).returnError" "(*go/ast.AssignStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).returnError" "(*go/ast.SendStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.IncDecStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.ReturnStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.BranchStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.IfStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.SwitchStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.CaseClause).Pos"
"(*go/types.Checker).returnError" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/types.Checker).returnError" "(*go/ast.ForStmt).Pos"
"(*go/types.Checker).initVars" "(*go/types.Checker).returnError"
"(*go/types.Checker).assignError" "go/types.measure"
"(*go/types.Checker).assignError" "go/types.measure"
"(*go/types.Checker).assignError" "go/types.unparen"
"(*go/types.Checker).assignError" "(*go/types.Checker).errorf"
"(*go/types.Checker).assignError" "(*go/types.Checker).errorf"
"(*go/types.Checker).initVars" "(*go/types.Checker).assignError"
"(*go/types.Checker).initVars" "(*go/types.Checker).multiExpr"
"(*go/types.Checker).initVars" "(*go/types.Checker).initVar"
"(*go/types.Checker).recordCommaOkTypes" "go/types.assert"
"(*go/types.Checker).recordCommaOkTypes" "go/types.assert"
"(*go/types.Checker).recordCommaOkTypes" "go/types.isTyped"
"(*go/types.Checker).recordCommaOkTypes" "go/types.isBoolean"
"(*go/types.Checker).recordCommaOkTypes" "go/types.assert"
"(*go/types.Checker).recordCommaOkTypes" "go/types.isTyped"
"(*go/types.Checker).recordCommaOkTypes" "go/types.assert"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.Ident).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "go/types.NewVar"
"(*go/types.Checker).recordCommaOkTypes" "go/types.NewVar"
"(*go/types.Checker).recordCommaOkTypes" "go/types.NewTuple"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.MapType).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).recordCommaOkTypes" "(*go/ast.StructType).Pos"
"(*go/types.Checker).initVars" "(*go/types.Checker).recordCommaOkTypes"
"(*go/types.Checker).initVars" "(*go/types.Checker).returnError"
"(*go/types.Checker).initVars" "(*go/types.Checker).assignError"
"(*go/types.Checker).varDecl" "(*go/types.Checker).initVars"
"(*go/types.Checker).objDecl" "(*go/types.Checker).varDecl"
"(*go/types.Checker).objDecl" "(*go/types.object).Pos"
"(*go/types.Checker).objDecl" "(*go/types.object).Type"
"(*go/types.Checker).objDecl" "(*go/types.Checker).push"
"(*go/types.Checker).objDecl" "go/types.assert"
"(*go/types.Checker).objDecl$2" "(*go/types.Checker).pop"
"(*go/types.Checker).objDecl$2" "(*go/types.object).setColor"
"(*go/types.Checker).objDecl" "(*go/types.Checker).objDecl$2"
"(*go/types.Checker).objDecl" "(*go/types.object).Type"
"(*go/types.Checker).objDecl" "(*go/types.Checker).objDecl$3"
"(*go/types.Checker).objDecl" "(*go/types.object).Type"
"(*go/types.Checker).objDecl" "(*go/types.object).color"
"(*go/types.Checker).objDecl" "(*go/types.Checker).dump"
"(*go/types.Checker).objDecl" "(*go/types.object).Type"
"(*go/types.Checker).objDecl" "(*go/types.Checker).validCycle"
"(*go/types.Checker).objDecl$1" "(*go/types.Checker).trace"
"(*go/types.Checker).objDecl$1" "(*go/types.object).Pos"
"(*go/types.Checker).objDecl$1" "(*go/types.object).color"
"(*go/types.Checker).objDecl" "(*go/types.Checker).objDecl$1"
"(*go/types.Checker).collectMethods" "(go/token.Pos).IsValid"
"(*go/types.Checker).collectMethods" "go/types.assert"
"(*go/types.Checker).collectMethods" "go/types.asNamed"
"(*go/types.Checker).collectMethods" "(*go/types.Named).TypeArgs"
"(*go/types.Checker).collectMethods" "(*go/types.TypeList).Len"
"(*go/types.Checker).collectMethods" "go/types.assert"
"(*go/types.Checker).collectMethods" "(*go/types.Checker).later"
"(*go/types.Checker).collectMethods" "(*go/types.action).describef"
"(*go/types.Checker).collectMethods" "(*go/types.Named).NumMethods"
"(*go/types.Checker).collectMethods" "(*go/types.Named).Method"
"(*go/types.Checker).collectMethods" "go/types.assert"
"(*go/types.Checker).collectMethods" "(*go/types.objset).insert"
"(*go/types.Checker).collectMethods" "go/types.assert"
"(*go/types.Checker).collectMethods" "go/types.assert"
"(*go/types.Checker).collectMethods" "(*go/types.objset).insert"
"(*go/types.Checker).collectMethods" "(*go/types.object).Name"
"(*go/types.Checker).collectMethods" "(*go/types.object).Pos"
"(*go/types.Checker).collectMethods" "(*go/types.Checker).errorf"
"(*go/types.Checker).collectMethods" "(*go/types.object).Pos"
"(*go/types.Named).AddMethod" "go/types.assert"
"(*go/types.Named).AddMethod" "(*go/types.Named).resolve"
"(*go/types.Named).AddMethod" "go/types.lookupMethod"
"(*go/types.Checker).collectMethods" "(*go/types.Named).AddMethod"
"(*go/types.Checker).collectMethods" "(go/token.Pos).IsValid"
"(*go/types.Checker).collectMethods" "(*go/types.object).Name"
"(*go/types.Checker).collectMethods" "(*go/types.Checker).errorf"
"(*go/types.Checker).objDecl" "(*go/types.Checker).collectMethods"
"(*go/types.Checker).objDecl" "(*go/types.object).color"
"(*go/types.Checker).objDecl" "go/types.pathString"
"(*go/types.Checker).objDecl" "(*go/types.Checker).trace"
"(*go/types.Named).expandMethod" "(*go/types.Checker).objDecl"
"(*go/types.Named).expandMethod" "(*go/types.Signature).Recv"
"(*go/types.Named).expandMethod" "(*go/types.object).Type"
"(*go/types.Named).expandMethod" "go/types.deref"
"(*go/types.Named).expandMethod" "(*go/types.Signature).RecvTypeParams"
"(*go/types.Named).expandMethod" "(*go/types.TypeParamList).Len"
"(*go/types.Named).expandMethod" "(*go/types.TypeList).Len"
"(*go/types.Named).expandMethod" "(*go/types.Signature).RecvTypeParams"
"(*go/types.Named).expandMethod" "(*go/types.TypeParamList).list"
"(*go/types.Named).expandMethod" "(*go/types.TypeList).list"
"(*go/types.Named).expandMethod" "go/types.makeSubstMap"
"(*go/types.Named).expandMethod" "(*go/types.Checker).context"
"(*go/types.Named).expandMethod" "(*go/types.Checker).subst"
"(*go/types.Named).expandMethod" "(*go/types.Func).hasPtrRecv"
"(*go/types.Named).expandMethod" "go/types.NewPointer"
"(*go/types.Named).expandMethod" "go/types.substVar"
"(*go/types.Named).expandMethod" "go/types.substFunc"
"(*go/types.Named).Method" "(*go/types.Named).expandMethod"
"(*go/types.Named).Method" "(*go/types.Named).setState"
"(*go/types.Named).lookupMethod" "(*go/types.Named).Method"
"go/types.lookupFieldOrMethodImpl" "(*go/types.Named).lookupMethod"
"go/types.lookupFieldOrMethodImpl" "go/types.concat"
"go/types.lookupFieldOrMethodImpl" "(*go/types.object).sameId"
"go/types.lookupFieldOrMethodImpl" "go/types.assert"
"go/types.lookupFieldOrMethodImpl" "go/types.concat"
"go/types.lookupFieldOrMethodImpl" "go/types.deref"
"go/types.lookupFieldOrMethodImpl" "go/types.concat"
"go/types.lookupFieldOrMethodImpl" "(*go/types.Interface).typeSet"
"go/types.lookupFieldOrMethodImpl" "(*go/types._TypeSet).LookupMethod"
"go/types.lookupFieldOrMethodImpl" "go/types.assert"
"go/types.lookupFieldOrMethodImpl" "go/types.concat"
"go/types.lookupFieldOrMethodImpl" "go/types.consolidateMultiples"
"go/types.lookupFieldOrMethodImpl" "(*go/types.Func).hasPtrRecv"
"(*go/types.Checker).missingMethod" "go/types.lookupFieldOrMethodImpl"
"(*go/types.Checker).missingMethod" "go/types.lookupFieldOrMethodImpl"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).objDecl"
"(*go/types.Checker).missingMethod" "go/types.Identical"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).objDecl"
"(*go/types.Checker).missingMethod" "go/types.isInterfacePtr"
"(*go/types.Checker).funcString" "bytes.NewBufferString"
"(*go/types.Checker).funcString" "go/types.newTypeWriter"
"(*go/types.Checker).funcString" "(*go/types.typeWriter).signature"
"(*go/types.Checker).funcString" "(*bytes.Buffer).String"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).funcString"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).funcString"
"(*go/types.Checker).missingMethod" "(*go/types.object).Name"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).sprintf"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).interfacePtrError"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).interfacePtrError"
"(*go/types.Checker).missingMethod" "go/types.isInterfacePtr"
"(*go/types.Checker).missingMethod" "(*go/types.object).Name"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).sprintf"
"(*go/types.Checker).missingMethod" "(*go/types.object).Name"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).sprintf"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).funcString"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).funcString"
"(*go/types.Checker).missingMethod" "(*go/types.object).Name"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).sprintf"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).funcString"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).funcString"
"(*go/types.Checker).missingMethod" "(*go/types.object).Name"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).sprintf"
"(*go/types.Checker).missingMethod" "(*go/types.object).Name"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).sprintf"
"(*go/types.Checker).missingMethod" "(*go/types.object).Name"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).sprintf"
"(*go/types.Checker).missingMethod" "(*go/types.object).Name"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).sprintf"
"(*go/types.Checker).missingMethod" "go/types.unreachable"
"(*go/types.Checker).infer$4" "(*go/types.unifier).unify"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).infer$4"
"(*go/types.Checker).missingMethod" "(*go/types.Checker).infer$4"
"(*go/types.Checker).implements" "(*go/types.Checker).missingMethod"
"(*go/types.Checker).implements" "(*go/types.Checker).sprintf"
"(*go/types.Checker).implements" "(*go/types.Interface).typeSet"
"(*go/types.Checker).implements" "(*go/types._TypeSet).hasTerms"
"(*go/types.Checker).implements" "(*go/types.Checker).sprintf"
"(*go/types.Interface).IsComparable" "(*go/types.Interface).typeSet"
"(*go/types.Interface).IsComparable" "(*go/types._TypeSet).IsComparable"
"(*go/types.Checker).implements$1" "(*go/types.Interface).IsComparable"
"(*go/types.Checker).implements$1" "go/types.comparable"
"(*go/types.Checker).implements$1" "go/types.comparable"
"(*go/types.Checker).implements$1" "(*go/types.Checker).allowVersion"
"(*go/types.Checker).implements$1" "(*go/types.Checker).sprintf"
"(*go/types.Checker).implements$1" "(*go/types.Checker).sprintf"
"(*go/types.Checker).implements" "(*go/types.Checker).implements$1"
"(*go/types.Checker).implements" "(*go/types.Interface).typeSet"
"(*go/types.Checker).implements" "(*go/types.Interface).typeSet"
"(*go/types._TypeSet).subsetOf" "(go/types.termlist).subsetOf"
"(*go/types.Checker).implements" "(*go/types._TypeSet).subsetOf"
"(*go/types.Checker).implements" "(*go/types.Interface).typeSet"
"(*go/types.Checker).implements" "(*go/types._TypeSet).is"
"(*go/types.Checker).implements" "(*go/types.Checker).implements$1"
"(*go/types.Checker).implements" "(*go/types.Checker).sprintf"
"(*go/types.Checker).implements" "(*go/types.Checker).implements$1"
"(*go/types.Checker).implements" "(*go/types.Checker).sprintf"
"(*go/types.Checker).implements" "(*go/types.Checker).sprintf"
"(*go/types.Checker).implements" "(*go/types.Checker).sprintf"
"go/types.mentions" "go/types.mentions"
"go/types.mentions" "go/types.Identical"
"go/types.mentions" "go/types.mentions"
"(*go/types.Checker).implements" "go/types.mentions"
"(*go/types.Checker).implements" "(*go/types.Interface).typeSet"
"(*go/types.Checker).implements" "(*go/types.Checker).sprintf"
"(*go/types.operand).assignableTo" "(*go/types.Checker).implements"
"(*go/types.operand).assignableTo" "go/types.isInterfacePtr"
"(*go/types.operand).assignableTo" "(*go/types.operand).Pos"
"(*go/types.operand).assignableTo" "(*go/types.Checker).implements"
"(*go/types.operand).assignableTo" "go/types.hasName"
"(*go/types.operand).assignableTo" "go/types.Identical"
"(*go/types.operand).assignableTo" "go/types.hasName"
"(*go/types.operand).assignableTo" "go/types.hasName"
"(*go/types.operand).assignableTo" "(*go/types.TypeParam).is"
"(*go/types.operand).assignableTo" "(*go/types.TypeParam).is"
"(*go/types.operand).assignableTo" "go/types.hasName"
"(*go/types.operand).assignableTo$3" "(*go/types.operand).assignableTo"
"(*go/types.operand).assignableTo$3" "(*go/types.subster).typ$3"
"(*go/types.operand).assignableTo$3" "(*go/types.subster).typ$1"
"(*go/types.operand).assignableTo$3" "(*go/types.operand).assignableTo$2"
"(*go/types.operand).assignableTo$3" "log.Printf"
"(*go/types.operand).assignableTo$3" "golang.org/x/tools/go/packages.newLoader$1"
"(*go/types.operand).assignableTo$3" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*go/types.operand).assignableTo$3" "(*go/types.operand).convertibleTo$1"
"(*go/types.operand).assignableTo$3" "(*go/types.Checker).incomparableCause$1"
"(*go/types._TypeSet).is" "(*go/types.operand).assignableTo$3"
"(*go/types._TypeSet).is" "(*go/types.operand).assignableTo$3"
"(*go/types.operand).assignableTo$4" "(*go/types.operand).assignableTo"
"(*go/types.operand).assignableTo$4" "(*go/types.operand).assignableTo$2"
"(*go/types.operand).assignableTo$4" "log.Printf"
"(*go/types.operand).assignableTo$4" "golang.org/x/tools/go/packages.newLoader$1"
"(*go/types.operand).assignableTo$4" "(*go/types.subster).typ$3"
"(*go/types.operand).assignableTo$4" "(*go/types.subster).typ$1"
"(*go/types.operand).assignableTo$4" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*go/types.operand).assignableTo$4" "(*go/types.operand).convertibleTo$1"
"(*go/types.operand).assignableTo$4" "(*go/types.Checker).incomparableCause$1"
"(*go/types._TypeSet).is" "(*go/types.operand).assignableTo$4"
"(*go/types._TypeSet).is" "(*go/types.operand).assignableTo$4"
"(*go/types.term).includes" "go/types.under"
"(*go/types.term).includes" "go/types.Identical"
"(*go/types.Checker).implements$2" "(*go/types.term).includes"
"(*go/types.Checker).implements$2" "(*go/types.term).includes"
"(*go/types.Checker).implements$2" "go/types.under"
"(*go/types.Checker).implements$2" "go/types.Identical"
"(*go/types._TypeSet).is" "(*go/types.Checker).implements$2"
"(*go/types._TypeSet).is" "(*go/types.Checker).implements$2"
"go/types.coreTerm$1" "go/types.assert"
"(*go/types._TypeSet).is" "go/types.coreTerm$1"
"(*go/types._TypeSet).is" "go/types.coreTerm$1"
"(*go/types.Checker).applyTypeFunc$1" "(*go/types.Checker).instance$1"
"(*go/types.Checker).applyTypeFunc$1" "(*go/types.Checker).builtin$6"
"(*go/types.Checker).applyTypeFunc$1" "(*go/types.Checker).builtin$8"
"(*go/types.Checker).applyTypeFunc$1" "go/types.NewTerm"
"(*go/types._TypeSet).is" "(*go/types.Checker).applyTypeFunc$1"
"(*go/types._TypeSet).is" "(*go/types.Checker).applyTypeFunc$1"
"(*go/types.operand).convertibleTo$2" "(*go/types.TypeParam).is"
"(*go/types._TypeSet).is" "(*go/types.operand).convertibleTo$2"
"(*go/types._TypeSet).is" "(*go/types.operand).convertibleTo$2"
"(*go/types.operand).convertibleTo$3" "(*go/types.operand).convertibleTo"
"(*go/types.operand).convertibleTo$3" "golang.org/x/tools/go/packages.newLoader$1"
"(*go/types.operand).convertibleTo$3" "(*go/types.subster).typ$3"
"(*go/types.operand).convertibleTo$3" "(*go/types.subster).typ$1"
"(*go/types.operand).convertibleTo$3" "(*go/types.operand).assignableTo$2"
"(*go/types.operand).convertibleTo$3" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*go/types.operand).convertibleTo$3" "(*go/types.operand).convertibleTo$1"
"(*go/types.operand).convertibleTo$3" "(*go/types.Checker).incomparableCause$1"
"(*go/types.operand).convertibleTo$3" "log.Printf"
"(*go/types._TypeSet).is" "(*go/types.operand).convertibleTo$3"
"(*go/types._TypeSet).is" "(*go/types.operand).convertibleTo$3"
"(*go/types.operand).convertibleTo$4" "(*go/types.operand).convertibleTo"
"(*go/types.operand).convertibleTo$4" "(*go/types.operand).assignableTo$2"
"(*go/types.operand).convertibleTo$4" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*go/types.operand).convertibleTo$4" "(*go/types.operand).convertibleTo$1"
"(*go/types.operand).convertibleTo$4" "(*go/types.Checker).incomparableCause$1"
"(*go/types.operand).convertibleTo$4" "log.Printf"
"(*go/types.operand).convertibleTo$4" "golang.org/x/tools/go/packages.newLoader$1"
"(*go/types.operand).convertibleTo$4" "(*go/types.subster).typ$3"
"(*go/types.operand).convertibleTo$4" "(*go/types.subster).typ$1"
"(*go/types._TypeSet).is" "(*go/types.operand).convertibleTo$4"
"(*go/types._TypeSet).is" "(*go/types.operand).convertibleTo$4"
"(*go/types.tpWalker).isParameterized$2" "(*go/types.tpWalker).isParameterized"
"(*go/types._TypeSet).is" "(*go/types.tpWalker).isParameterized$2"
"(*go/types._TypeSet).is" "(*go/types.tpWalker).isParameterized$2"
"(*go/types.operand).convertibleTo$2$1" "(*go/types.operand).convertibleTo"
"(*go/types.operand).convertibleTo$2$1" "(*go/types.subster).typ$1"
"(*go/types.operand).convertibleTo$2$1" "(*go/types.operand).assignableTo$2"
"(*go/types.operand).convertibleTo$2$1" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*go/types.operand).convertibleTo$2$1" "(*go/types.operand).convertibleTo$1"
"(*go/types.operand).convertibleTo$2$1" "(*go/types.Checker).incomparableCause$1"
"(*go/types.operand).convertibleTo$2$1" "log.Printf"
"(*go/types.operand).convertibleTo$2$1" "golang.org/x/tools/go/packages.newLoader$1"
"(*go/types.operand).convertibleTo$2$1" "(*go/types.subster).typ$3"
"(*go/types._TypeSet).is" "(*go/types.operand).convertibleTo$2$1"
"(*go/types._TypeSet).is" "(*go/types.operand).convertibleTo$2$1"
"(*go/types._TypeSet).IsComparable" "(*go/types._TypeSet).is"
"go/types.comparable" "(*go/types._TypeSet).IsComparable"
"go/types.comparable" "go/types.isTypeParam"
"go/types.comparable" "(*go/types.Interface).typeSet"
"go/types.comparable" "(*go/types._TypeSet).IsEmpty"
"go/types.comparable" "golang.org/x/tools/go/packages.newLoader$1"
"go/types.comparable" "log.Printf"
"go/types.comparable" "log.Printf"
"go/types.comparable" "golang.org/x/tools/go/packages.newLoader$1"
"go/types.comparable" "(*go/types.subster).typ$3"
"go/types.comparable" "(*go/types.subster).typ$3"
"go/types.comparable" "(*go/types.subster).typ$3"
"go/types.comparable" "(*go/types.subster).typ$3"
"go/types.comparable" "(*go/types.subster).typ$1"
"go/types.comparable" "(*go/types.subster).typ$1"
"go/types.comparable" "(*go/types.subster).typ$1"
"go/types.comparable" "(*go/types.subster).typ$1"
"go/types.comparable" "(*go/types.operand).assignableTo$2"
"go/types.comparable" "(*go/types.operand).assignableTo$2"
"go/types.comparable" "(*go/types.operand).assignableTo$2"
"go/types.comparable" "(*go/types.operand).assignableTo$2"
"go/types.comparable" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"go/types.comparable" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"go/types.comparable" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"go/types.comparable" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"go/types.comparable" "(*go/types.operand).convertibleTo$1"
"go/types.comparable" "(*go/types.operand).convertibleTo$1"
"go/types.comparable" "(*go/types.operand).convertibleTo$1"
"go/types.comparable" "(*go/types.operand).convertibleTo$1"
"go/types.comparable" "(*go/types.Checker).incomparableCause$1"
"go/types.comparable" "(*go/types.Checker).incomparableCause$1"
"go/types.comparable" "(*go/types.Checker).incomparableCause$1"
"go/types.comparable" "(*go/types.Checker).incomparableCause$1"
"go/types.intersectTermLists" "go/types.comparable"
"go/types.intersectTermLists" "(go/types.termlist).isAll"
"go/types.intersectTermLists" "(go/types.termlist).isAll"
"go/types.intersectTermLists" "go/types.assert"
"go/types.computeInterfaceTypeSet" "go/types.intersectTermLists"
"go/types.computeInterfaceTypeSet" "go/types.isTypeParam"
"go/types.computeInterfaceTypeSet" "go/types.assert"
"go/types.computeInterfaceTypeSet" "go/types.computeInterfaceTypeSet"
"go/types.computeInterfaceTypeSet" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).isImportedConstraint" "go/types.asNamed"
"(*go/types.Checker).isImportedConstraint" "(*go/types.Named).under"
"(*go/types.Checker).isImportedConstraint" "(*go/types.Interface).IsMethodSet"
"go/types.computeInterfaceTypeSet" "(*go/types.Checker).isImportedConstraint"
"go/types.computeInterfaceTypeSet" "go/types.computeInterfaceTypeSet$2"
"go/types.computeInterfaceTypeSet" "go/types.isValid"
"go/types.computeInterfaceTypeSet" "go/types.computeUnionTypeSet"
"go/types.computeInterfaceTypeSet" "(*go/types.Checker).verifyVersionf"
"go/types.computeInterfaceTypeSet" "go/types.assert"
"go/types.computeInterfaceTypeSet" "go/types.assert"
"go/types.computeInterfaceTypeSet" "(*go/types.Checker).verifyVersionf"
"go/types.computeInterfaceTypeSet" "go/types.sortMethods"
"(*go/types.Interface).typeSet" "go/types.computeInterfaceTypeSet"
"go/types.computeInterfaceTypeSet$1" "(*go/types.Interface).typeSet"
"go/types.computeInterfaceTypeSet$1" "(*go/types.Checker).trace"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "go/types.computeInterfaceTypeSet$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Named).expandUnderlying$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.osyield"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.init$1"
"log/slog.stack" "runtime.Callers"
"log/slog.stack" "runtime.CallersFrames"
"log/slog.stack" "(*runtime.Frames).Next"
"log/slog.stack" "fmt.Fprintf"
"log/slog.stack" "(*strings.Builder).String"
"log/slog.stack" "fmt.Fprintf"
"(log/slog.Value).Resolve$1" "log/slog.stack"
"(log/slog.Value).Resolve$1" "fmt.Errorf"
"log/slog.AnyValue" "log/slog.StringValue"
"log/slog.AnyValue" "log/slog.Int64Value"
"log/slog.AnyValue" "log/slog.Uint64Value"
"log/slog.AnyValue" "log/slog.Int64Value"
"log/slog.AnyValue" "log/slog.Uint64Value"
"log/slog.AnyValue" "log/slog.BoolValue"
"log/slog.DurationValue" "(time.Duration).Nanoseconds"
"log/slog.AnyValue" "log/slog.DurationValue"
"(time.Time).IsZero" "(*time.Time).sec"
"(time.Time).IsZero" "(*time.Time).nsec"
"log/slog.TimeValue" "(time.Time).IsZero"
"(*time.Time).unixSec" "(*time.Time).sec"
"(time.Time).UnixNano" "(*time.Time).unixSec"
"(time.Time).UnixNano" "(*time.Time).nsec"
"log/slog.TimeValue" "(time.Time).UnixNano"
"log/slog.TimeValue" "(time.Time).Location"
"log/slog.AnyValue" "log/slog.TimeValue"
"log/slog.AnyValue" "log/slog.Uint64Value"
"log/slog.AnyValue" "log/slog.Uint64Value"
"log/slog.AnyValue" "log/slog.Uint64Value"
"log/slog.AnyValue" "log/slog.Uint64Value"
"log/slog.AnyValue" "log/slog.Int64Value"
"log/slog.AnyValue" "log/slog.Int64Value"
"log/slog.AnyValue" "log/slog.Int64Value"
"log/slog.Float64Value" "math.Float64bits"
"log/slog.AnyValue" "log/slog.Float64Value"
"log/slog.AnyValue" "log/slog.Float64Value"
"(log/slog.Value).isEmptyGroup" "(log/slog.Value).Kind"
"(log/slog.Value).isEmptyGroup" "(log/slog.Value).group"
"log/slog.countEmptyGroups" "(log/slog.Value).isEmptyGroup"
"log/slog.GroupValue" "log/slog.countEmptyGroups"
"log/slog.GroupValue" "(log/slog.Value).isEmptyGroup"
"log/slog.AnyValue" "log/slog.GroupValue"
"(log/slog.Value).Resolve$1" "log/slog.AnyValue"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(log/slog.Value).Resolve$1"
"time.FixedZone$1" "time.fixedZone"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "time.FixedZone$1"
"go/types.resolve$1" "(*go/types.object).Parent"
"go/types.resolve$1" "(*go/types.object).Name"
"go/types.resolve$1" "(*go/types.object).setParent"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "go/types.resolve$1"
"(runtime.traceLocker).GoSysExit" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).GoSysExit" "(runtime.traceEventWriter).commit"
"(runtime.traceLocker).GoSysExit" "(runtime.puintptr).ptr"
"runtime.exitsyscall$2" "(runtime.traceLocker).GoSysExit"
"(runtime.traceLocker).GoStart" "runtime.getg"
"(runtime.traceLocker).GoStart" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).GoStart" "(*runtime.traceSchedResourceState).nextSeq"
"(runtime.traceLocker).GoStart" "(runtime.traceEventWriter).write"
"(runtime.traceLocker).GoStart" "(runtime.puintptr).ptr"
"(runtime.traceLocker).GoStart" "(runtime.puintptr).ptr"
"(runtime.traceLocker).GoStart" "(runtime.traceEventWriter).write"
"(runtime.traceLocker).GoStart" "(runtime.traceEventWriter).end"
"runtime.exitsyscall$2" "(runtime.traceLocker).GoStart"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.exitsyscall$2"
"(*sync.WaitGroup).Add" "(*sync/atomic.Uint64).Add"
"(*sync.WaitGroup).Add" "internal/race.ReleaseMerge"
"(*sync.WaitGroup).Add" "internal/race.Disable"
"(*sync.WaitGroup).Add" "internal/race.Enable"
"(*sync.WaitGroup).Add" "internal/race.Read"
"(*sync.WaitGroup).Add" "(*sync/atomic.Uint64).Load"
"(*sync/atomic.Uint64).Store" "sync/atomic.StoreUint64"
"(*sync.WaitGroup).Add" "(*sync/atomic.Uint64).Store"
"(*sync.WaitGroup).Add" "sync.runtime_Semrelease"
"(*golang.org/x/tools/go/packages.loader).loadRecursive$1" "(*sync.WaitGroup).Add"
"(*golang.org/x/tools/go/packages.loader).loadRecursive" "(*sync.Once).Do"
"(*golang.org/x/tools/go/packages.loader).loadRecursive$1$1" "(*golang.org/x/tools/go/packages.loader).loadRecursive"
"(*sync.WaitGroup).Done" "(*sync.WaitGroup).Add"
"(*golang.org/x/tools/go/packages.loader).loadRecursive$1$1" "(*sync.WaitGroup).Done"
"(*golang.org/x/tools/go/packages.loader).loadRecursive$1" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1$1"
"(*sync.WaitGroup).Wait" "internal/race.Disable"
"(*sync.WaitGroup).Wait" "(*sync/atomic.Uint64).Load"
"(*sync.WaitGroup).Wait" "(*sync/atomic.Uint64).CompareAndSwap"
"(*sync.WaitGroup).Wait" "internal/race.Enable"
"(*sync.WaitGroup).Wait" "internal/race.Acquire"
"(*sync.WaitGroup).Wait" "internal/race.Write"
"(*sync.WaitGroup).Wait" "sync.runtime_Semacquire"
"(*sync.WaitGroup).Wait" "(*sync/atomic.Uint64).Load"
"(*sync.WaitGroup).Wait" "internal/race.Enable"
"(*sync.WaitGroup).Wait" "internal/race.Acquire"
"(*golang.org/x/tools/go/packages.loader).loadRecursive$1" "(*sync.WaitGroup).Wait"
"go/types.NewPackage" "fmt.Sprintf"
"go/types.NewPackage" "go/types.NewScope"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "go/types.NewPackage"
"log.Fatalf" "fmt.Sprintf"
"(*log.Logger).Output" "(*log.Logger).output"
"log.Fatalf" "(*log.Logger).Output"
"os.Exit" "os.runtime_beforeExit"
"os.Exit" "syscall.Exit"
"internal/testlog.PanicOnExit0" "(*sync.Mutex).Lock"
"internal/testlog.PanicOnExit0" "(*sync.Mutex).Unlock"
"os.Exit" "internal/testlog.PanicOnExit0"
"log.Fatalf" "os.Exit"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "log.Fatalf"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "(*sync.Mutex).Lock"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "(*sync.Mutex).Unlock"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "(*go/types.Package).Complete"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "fmt.Errorf"
"(*sync/atomic.Value).Load" "sync/atomic.LoadPointer"
"(*sync/atomic.Value).Load" "sync/atomic.LoadPointer"
"internal/testlog.Logger" "(*sync/atomic.Value).Load"
"internal/testlog.Open" "internal/testlog.Logger"
"os.OpenFile" "internal/testlog.Open"
"internal/testlog.Stat" "internal/testlog.Logger"
"os.Stat" "internal/testlog.Stat"
"syscall.Fchown" "internal/abi.FuncPCABI0"
"syscall.Fchown" "syscall.syscall"
"syscall.Fchown" "syscall.errnoErr"
"(*internal/poll.FD).Fchown$1" "syscall.Fchown"
"os.ignoringEINTR" "(*internal/poll.FD).Fchown$1"
"syscall.Fstat" "internal/abi.FuncPCABI0"
"syscall.Fstat" "syscall.syscall"
"syscall.Fstat" "syscall.errnoErr"
"(*internal/poll.FD).Fstat$1" "syscall.Fstat"
"os.ignoringEINTR" "(*internal/poll.FD).Fstat$1"
"internal/syscall/unix.Fcntl" "internal/syscall/unix.fcntl"
"(*internal/poll.FD).Fsync$1" "internal/syscall/unix.Fcntl"
"os.ignoringEINTR" "(*internal/poll.FD).Fsync$1"
"syscall.Ftruncate" "internal/abi.FuncPCABI0"
"syscall.Ftruncate" "syscall.syscall"
"syscall.Ftruncate" "syscall.errnoErr"
"(*internal/poll.FD).Ftruncate$1" "syscall.Ftruncate"
"os.ignoringEINTR" "(*internal/poll.FD).Ftruncate$1"
"os.newFile$1" "syscall.Fstat"
"os.ignoringEINTR" "os.newFile$1"
"syscall.Lstat" "syscall.BytePtrFromString"
"syscall.Lstat" "internal/abi.FuncPCABI0"
"syscall.Lstat" "syscall.syscall"
"syscall.Lstat" "syscall.errnoErr"
"os.lstatNolog$1" "syscall.Lstat"
"os.ignoringEINTR" "os.lstatNolog$1"
"syscall.Stat" "syscall.BytePtrFromString"
"syscall.Stat" "internal/abi.FuncPCABI0"
"syscall.Stat" "syscall.syscall"
"syscall.Stat" "syscall.errnoErr"
"os.statNolog$1" "syscall.Stat"
"os.ignoringEINTR" "os.statNolog$1"
"syscall.Fchmod" "internal/abi.FuncPCABI0"
"syscall.Fchmod" "syscall.syscall"
"syscall.Fchmod" "syscall.errnoErr"
"(*internal/poll.FD).Fchmod$1" "syscall.Fchmod"
"os.ignoringEINTR" "(*internal/poll.FD).Fchmod$1"
"golang.org/x/tools/go/packages.goListDriver" "context.Background"
"(*context.cancelCtx).cancel" "(*sync.Mutex).Lock"
"(*context.cancelCtx).cancel" "(*sync.Mutex).Unlock"
"(*context.cancelCtx).cancel" "(*sync/atomic.Value).Load"
"(*sync/atomic.Value).Store" "sync/atomic.LoadPointer"
"(*sync/atomic.Value).Store" "sync/atomic.runtime_procPin"
"(*sync/atomic.Value).Store" "sync/atomic.CompareAndSwapPointer"
"(*sync/atomic.Value).Store" "sync/atomic.runtime_procUnpin"
"(*sync/atomic.Value).Store" "sync/atomic.StorePointer"
"(*sync/atomic.Value).Store" "sync/atomic.StorePointer"
"(*sync/atomic.Value).Store" "sync/atomic.runtime_procUnpin"
"(*sync/atomic.Value).Store" "sync/atomic.StorePointer"
"(*context.cancelCtx).cancel" "(*sync/atomic.Value).Store"
"(*context.cancelCtx).cancel" "(*context.cancelCtx).cancel"
"(*context.cancelCtx).cancel" "(*sync.Mutex).Unlock"
"context.value" "(*context.cancelCtx).Value"
"context.value" "(context.emptyCtx).Value"
"(*context.cancelCtx).Value" "context.value"
"context.parentCancelCtx" "(*context.cancelCtx).Value"
"context.parentCancelCtx" "(context.emptyCtx).Done"
"context.parentCancelCtx" "(context.emptyCtx).Value"
"context.parentCancelCtx" "(*sync/atomic.Value).Load"
"(*context.cancelCtx).Done" "(*sync/atomic.Value).Load"
"(*context.cancelCtx).Done" "(*sync.Mutex).Lock"
"(*context.cancelCtx).Done" "(*sync.Mutex).Unlock"
"(*context.cancelCtx).Done" "(*sync/atomic.Value).Load"
"(*context.cancelCtx).Done" "(*sync/atomic.Value).Store"
"context.parentCancelCtx" "(*context.cancelCtx).Done"
"context.removeChild" "context.parentCancelCtx"
"context.removeChild" "(*sync.Mutex).Lock"
"context.removeChild" "(*sync.Mutex).Unlock"
"runtime.pollWork" "runtime.getg"
"runtime.pollWork" "(runtime.puintptr).ptr"
"runtime.pollWork" "runtime.runqempty"
"runtime.netpollinited" "(*runtime/internal/atomic.Uint32).Load"
"runtime.pollWork" "runtime.netpollinited"
"runtime.netpoll" "(*runtime.timespec).setNsec"
"runtime.kevent" "internal/abi.FuncPCABI0"
"runtime.kevent" "runtime.libcCall"
"runtime.kevent" "runtime.KeepAlive"
"runtime.kevent" "runtime.KeepAlive"
"runtime.kevent" "runtime.KeepAlive"
"runtime.netpoll" "runtime.kevent"
"runtime.netpoll" "runtime.throw"
"runtime.netpoll" "runtime.throw"
"runtime.netpoll" "runtime.noescape"
"runtime.read" "internal/abi.FuncPCABI0"
"runtime.read" "runtime.libcCall"
"runtime.read" "runtime.KeepAlive"
"runtime.netpoll" "runtime.read"
"runtime.netpoll" "(*runtime/internal/atomic.Uint32).Store"
"(*runtime.pollDesc).setEventErr" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.pollDesc).setEventErr" "(*runtime/internal/atomic.Uint32).Load"
"(*runtime.pollDesc).setEventErr" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.netpoll" "(*runtime.pollDesc).setEventErr"
"runtime.netpollunblock" "(*runtime/internal/atomic.Uintptr).Load"
"(*runtime/internal/atomic.Uintptr).CompareAndSwap" "runtime/internal/atomic.Casuintptr"
"runtime.netpollunblock" "(*runtime/internal/atomic.Uintptr).CompareAndSwap"
"runtime.netpollready" "runtime.netpollunblock"
"runtime.netpollready" "runtime.netpollunblock"
"runtime.netpollready" "(*runtime.gList).push"
"runtime.netpollready" "(*runtime.gList).push"
"runtime.netpoll" "runtime.netpollready"
"runtime.netpoll" "(runtime.taggedPointer).pointer"
"runtime.netpoll" "(runtime.taggedPointer).tag"
"runtime.netpoll" "(*runtime/internal/atomic.Uintptr).Load"
"runtime.pollWork" "runtime.netpoll"
"runtime.pollWork" "(*runtime.gList).empty"
"runtime.pollWork" "(*runtime/internal/atomic.Int64).Load"
"runtime.netpollAnyWaiters" "(*runtime/internal/atomic.Uint32).Load"
"runtime.pollWork" "runtime.netpollAnyWaiters"
"runtime.pollWork" "runtime.injectglist"
"runtime.netpollAdjustWaiters" "(*runtime/internal/atomic.Uint32).Add"
"runtime.pollWork" "runtime.netpollAdjustWaiters"
"context.removeChild" "runtime.pollWork"
"runtime.pollFractionalWorkerExit" "runtime.nanotime"
"runtime.pollFractionalWorkerExit" "runtime.getg"
"runtime.pollFractionalWorkerExit" "(runtime.puintptr).ptr"
"context.removeChild" "runtime.pollFractionalWorkerExit"
"context.removeChild" "(*go/types.Checker).implements$1"
"(*runtime.mheap).allocSpan$1" "(*runtime.gcCPULimiterState).limiting"
"context.removeChild" "(*runtime.mheap).allocSpan$1"
"(*context.cancelCtx).cancel" "context.removeChild"
"(*context.cancelCtx).propagateCancel" "(*context.cancelCtx).cancel"
"(*context.cancelCtx).propagateCancel" "(*sync.Mutex).Lock"
"(*context.cancelCtx).propagateCancel" "(*sync.Mutex).Lock"
"(*context.cancelCtx).propagateCancel" "(*context.cancelCtx).cancel"
"(*context.cancelCtx).propagateCancel" "(*sync.Mutex).Unlock"
"(*context.cancelCtx).propagateCancel" "(*context.cancelCtx).Done"
"(*context.cancelCtx).propagateCancel" "(context.emptyCtx).Done"
"(*context.cancelCtx).propagateCancel" "context.parentCancelCtx"
"(*context.cancelCtx).Err" "(*sync.Mutex).Lock"
"(*context.cancelCtx).Err" "(*sync.Mutex).Unlock"
"context.Cause" "(*context.cancelCtx).Err"
"context.Cause" "(context.emptyCtx).Value"
"context.Cause" "(context.emptyCtx).Err"
"context.Cause" "(*sync.Mutex).Lock"
"context.Cause" "(*sync.Mutex).Unlock"
"context.Cause" "(*context.cancelCtx).Value"
"(*context.cancelCtx).propagateCancel" "context.Cause"
"(*context.cancelCtx).propagateCancel" "(*sync.Mutex).Unlock"
"(*context.cancelCtx).propagateCancel" "(*sync/atomic.Int32).Add"
"(*context.cancelCtx).propagateCancel$2" "(*context.cancelCtx).Err"
"(*context.cancelCtx).propagateCancel$2" "context.Cause"
"(*context.cancelCtx).propagateCancel$2" "(*context.cancelCtx).Done"
"(*context.cancelCtx).propagateCancel$2" "(*context.cancelCtx).cancel"
"(*context.cancelCtx).propagateCancel$2" "(context.emptyCtx).Err"
"(*context.cancelCtx).propagateCancel$2" "(*context.cancelCtx).Done"
"(*context.cancelCtx).propagateCancel$2" "(context.emptyCtx).Done"
"(*context.cancelCtx).propagateCancel" "(*context.cancelCtx).propagateCancel$2"
"(*context.cancelCtx).propagateCancel" "(*context.cancelCtx).Err"
"(*context.cancelCtx).propagateCancel" "(context.emptyCtx).Err"
"context.withCancel" "(*context.cancelCtx).propagateCancel"
"context.WithCancel" "context.withCancel"
"golang.org/x/tools/go/packages.goListDriver" "context.WithCancel"
"golang.org/x/tools/go/packages.goListDriver" "(*flag.FlagSet).defaultUsage"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_shutdown_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_munmap_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_dup_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_readdir_r_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_sendmsg_trampoline"
"runtime.callers$1" "(*runtime.unwinder).initAt"
"runtime.callers$1" "runtime.tracebackPCs"
"golang.org/x/tools/go/packages.goListDriver" "runtime.callers$1"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_fchdir_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.SetFinalizer$2"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_ftruncate_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.StdSizes).Alignof$1"
"golang.org/x/tools/go/packages.goListDriver" "syscall.copyenv"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_fchown_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_fcntl_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_setrlimit_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_accept_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_pread_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_getcwd_trampoline"
"flag.init$1" "(*flag.FlagSet).Output"
"flag.init$1" "fmt.Fprintf"
"flag.PrintDefaults" "(*flag.FlagSet).PrintDefaults"
"flag.init$1" "flag.PrintDefaults"
"flag.commandLineUsage" "flag.init$1"
"flag.commandLineUsage" "flag.commandLineUsage"
"runtime.chansend$1" "runtime.unlock"
"flag.commandLineUsage" "runtime.chansend$1"
"runtime.chanrecv$1" "runtime.unlock"
"flag.commandLineUsage" "runtime.chanrecv$1"
"flag.commandLineUsage" "runtime.asyncPreempt"
"runtime.asyncPreempt2" "runtime.getg"
"runtime.asyncPreempt2" "runtime.mcall"
"runtime.asyncPreempt2" "runtime.mcall"
"flag.commandLineUsage" "runtime.asyncPreempt2"
"flag.commandLineUsage" "runtime.init$1"
"flag.commandLineUsage" "(*flag.FlagSet).defaultUsage"
"flag.commandLineUsage" "syscall.libc_dup2_trampoline"
"flag.commandLineUsage" "(log/slog.Value).Resolve$1"
"flag.commandLineUsage" "sync.poolCleanup"
"flag.commandLineUsage" "(*fmt.ss).Token$1"
"syscall.Getenv" "(*sync.Once).Do"
"syscall.Getenv" "(*sync.RWMutex).RLock"
"syscall.Getenv" "(*sync.RWMutex).RUnlock"
"time.initLocal" "syscall.Getenv"
"syscall.Open" "syscall.BytePtrFromString"
"syscall.Open" "internal/abi.FuncPCABI0"
"syscall.Open" "syscall.syscall"
"syscall.Open" "syscall.errnoErr"
"time.open" "syscall.Open"
"time.loadTzinfoFromZip" "time.open"
"time.closefd" "syscall.Close"
"time.loadTzinfoFromZip" "time.closefd"
"time.preadn" "syscall.Seek"
"time.preadn" "syscall.Read"
"time.preadn" "errors.New"
"time.loadTzinfoFromZip" "time.preadn"
"time.loadTzinfoFromZip" "errors.New"
"time.loadTzinfoFromZip" "time.get2"
"time.loadTzinfoFromZip" "time.get4"
"time.loadTzinfoFromZip" "time.get4"
"time.loadTzinfoFromZip" "time.preadn"
"time.loadTzinfoFromZip" "time.get4"
"time.loadTzinfoFromZip" "errors.New"
"time.loadTzinfoFromZip" "time.get4"
"time.loadTzinfoFromZip" "time.get2"
"time.loadTzinfoFromZip" "time.get4"
"time.loadTzinfoFromZip" "time.get2"
"time.loadTzinfoFromZip" "time.get2"
"time.loadTzinfoFromZip" "time.get2"
"time.loadTzinfoFromZip" "time.get4"
"time.loadTzinfoFromZip" "errors.New"
"time.loadTzinfoFromZip" "time.preadn"
"time.loadTzinfoFromZip" "errors.New"
"time.loadTzinfoFromZip" "time.get2"
"time.loadTzinfoFromZip" "time.preadn"
"time.loadTzinfoFromZip" "time.get2"
"time.loadTzinfoFromZip" "time.get2"
"time.loadTzinfoFromZip" "time.get4"
"time.loadTzinfoFromZip" "errors.New"
"time.loadTzinfoFromDirOrZip" "time.loadTzinfoFromZip"
"time.readFile" "time.open"
"time.readFile" "time.closefd"
"time.read" "syscall.Read"
"time.readFile" "time.read"
"time.loadTzinfoFromDirOrZip" "time.readFile"
"time.loadTzinfo" "time.loadTzinfoFromDirOrZip"
"time.loadLocation" "time.loadTzinfo"
"time.LoadLocationFromTZData" "(*time.dataIO).read"
"time.LoadLocationFromTZData" "(*time.dataIO).read"
"(*time.dataIO).big4" "(*time.dataIO).read"
"time.LoadLocationFromTZData" "(*time.dataIO).big4"
"time.LoadLocationFromTZData" "(*time.dataIO).read"
"time.LoadLocationFromTZData" "(*time.dataIO).big4"
"time.LoadLocationFromTZData" "(*time.dataIO).read"
"time.LoadLocationFromTZData" "(*time.dataIO).read"
"time.LoadLocationFromTZData" "(*time.dataIO).read"
"time.LoadLocationFromTZData" "(*time.dataIO).read"
"time.LoadLocationFromTZData" "(*time.dataIO).read"
"time.LoadLocationFromTZData" "(*time.dataIO).read"
"time.LoadLocationFromTZData" "(*time.dataIO).read"
"time.LoadLocationFromTZData" "(*time.dataIO).rest"
"time.LoadLocationFromTZData" "(*time.dataIO).big4"
"(*time.dataIO).byte" "(*time.dataIO).read"
"time.LoadLocationFromTZData" "(*time.dataIO).byte"
"time.LoadLocationFromTZData" "(*time.dataIO).byte"
"time.LoadLocationFromTZData" "time.byteString"
"time.LoadLocationFromTZData" "(*time.dataIO).big4"
"(*time.dataIO).big8" "(*time.dataIO).big4"
"(*time.dataIO).big8" "(*time.dataIO).big4"
"time.LoadLocationFromTZData" "(*time.dataIO).big8"
"time.LoadLocationFromTZData" "time.now"
"time.tzset" "time.tzsetName"
"time.tzsetOffset" "time.tzsetNum"
"time.tzsetOffset" "time.tzsetNum"
"time.tzsetOffset" "time.tzsetNum"
"time.tzset" "time.tzsetOffset"
"time.tzset" "time.tzsetName"
"time.tzset" "time.tzsetOffset"
"time.tzsetRule" "time.tzsetNum"
"time.tzsetRule" "time.tzsetNum"
"time.tzsetRule" "time.tzsetNum"
"time.tzsetRule" "time.tzsetNum"
"time.tzsetRule" "time.tzsetNum"
"time.tzsetRule" "time.tzsetOffset"
"time.tzset" "time.tzsetRule"
"time.tzset" "time.tzsetRule"
"time.tzset" "time.absDate"
"time.tzset" "time.daysSinceEpoch"
"time.tzruleTime" "time.isLeap"
"time.daysIn" "time.isLeap"
"time.tzruleTime" "time.daysIn"
"time.tzruleTime" "time.isLeap"
"time.tzset" "time.tzruleTime"
"time.tzset" "time.tzruleTime"
"time.LoadLocationFromTZData" "time.tzset"
"time.LoadLocationFromTZData" "time.findZone"
"time.loadLocation" "time.LoadLocationFromTZData"
"runtime.gogetenv" "runtime.environ"
"runtime.gogetenv" "runtime.throw"
"runtime.envKeyEqual" "runtime.lowerASCII"
"runtime.envKeyEqual" "runtime.lowerASCII"
"runtime.gogetenv" "runtime.envKeyEqual"
"runtime.GOROOT" "runtime.gogetenv"
"time.loadLocation" "runtime.GOROOT"
"time.loadLocation" "time.gorootZoneSource"
"time.loadLocation" "time.LoadLocationFromTZData"
"time.loadLocation" "time.loadTzinfo"
"time.loadLocation" "time.LoadLocationFromTZData"
"time.loadLocation" "errors.New"
"time.initLocal" "time.loadLocation"
"time.initLocal" "time.loadLocation"
"time.initLocal" "time.loadLocation"
"flag.commandLineUsage" "time.initLocal"
"flag.commandLineUsage" "time.FixedZone$1"
"flag.commandLineUsage" "syscall.libc_fchdir_trampoline"
"flag.commandLineUsage" "internal/poll.runtime_pollServerInit"
"flag.commandLineUsage" "syscall.libc_close_trampoline"
"flag.commandLineUsage" "syscall.libc_lseek_trampoline"
"flag.commandLineUsage" "syscall.libc_shutdown_trampoline"
"flag.commandLineUsage" "syscall.libc_mmap_trampoline"
"flag.commandLineUsage" "syscall.libc_munmap_trampoline"
"flag.commandLineUsage" "runtime.throw$1"
"flag.commandLineUsage" "reflect.methodValueCall"
"flag.commandLineUsage" "(*go/types.gcSizes).Alignof$1"
"flag.commandLineUsage" "(*go/types.StdSizes).Alignof$1"
"flag.commandLineUsage" "syscall.copyenv"
"runtime.removespecial" "runtime.spanOfHeap"
"runtime.removespecial" "runtime.throw"
"runtime.removespecial" "runtime.acquirem"
"runtime.removespecial" "(*runtime.mspan).ensureSwept"
"runtime.removespecial" "(*runtime.mspan).base"
"runtime.removespecial" "runtime.lock"
"runtime.removespecial" "(*runtime.mspan).specialFindSplicePoint"
"runtime.removespecial" "runtime.spanHasNoSpecials"
"runtime.removespecial" "runtime.unlock"
"runtime.removespecial" "runtime.releasem"
"runtime.removefinalizer" "runtime.removespecial"
"runtime.removefinalizer" "runtime.lock"
"runtime.removefinalizer" "(*runtime.fixalloc).free"
"runtime.removefinalizer" "runtime.unlock"
"runtime.SetFinalizer$1" "runtime.removefinalizer"
"flag.commandLineUsage" "runtime.SetFinalizer$1"
"flag.commandLineUsage" "runtime.SetFinalizer$2"
"flag.commandLineUsage" "syscall.libc_fchmod_trampoline"
"flag.commandLineUsage" "syscall.libc_fchown_trampoline"
"flag.commandLineUsage" "syscall.libc_fstat_trampoline"
"flag.commandLineUsage" "syscall.libc_ftruncate_trampoline"
"flag.commandLineUsage" "syscall.libc_getsockopt_trampoline"
"flag.commandLineUsage" "syscall.libc_pread_trampoline"
"flag.commandLineUsage" "syscall.libc_pwrite_trampoline"
"flag.commandLineUsage" "syscall.libc_read_trampoline"
"flag.commandLineUsage" "syscall.libc_recvfrom_trampoline"
"flag.commandLineUsage" "syscall.libc_fcntl_trampoline"
"flag.commandLineUsage" "syscall.libc_setsockopt_trampoline"
"flag.commandLineUsage" "syscall.libc_write_trampoline"
"flag.commandLineUsage" "syscall.libc_sendto_trampoline"
"flag.commandLineUsage" "(*log/slog.Level).parse$1"
"flag.commandLineUsage" "syscall.libc_getrlimit_trampoline"
"flag.commandLineUsage" "syscall.libc_setrlimit_trampoline"
"flag.commandLineUsage" "syscall.libc_execve_trampoline"
"flag.commandLineUsage" "syscall.libc_accept_trampoline"
"flag.commandLineUsage" "syscall.libc_getcwd_trampoline"
"flag.commandLineUsage" "go/types.resolve$1"
"runtime.fatalthrow$1" "runtime.isSecureMode"
"runtime.fatalthrow$1" "runtime.exit"
"runtime.startpanic_m" "runtime.getg"
"runtime.startpanic_m" "(*runtime/internal/atomic.Uint32).Add"
"runtime.startpanic_m" "runtime.lock"
"runtime.schedtrace" "runtime.nanotime"
"runtime.schedtrace" "runtime.lock"
"runtime.schedtrace" "(*runtime/internal/atomic.Int32).Load"
"runtime.schedtrace" "runtime.mcount"
"runtime.schedtrace" "(*runtime/internal/atomic.Int32).Load"
"runtime.schedtrace" "(*runtime/internal/atomic.Uint32).Load"
"runtime.schedtrace" "(*runtime/internal/atomic.Bool).Load"
"runtime.schedtrace" "(*runtime/internal/atomic.Bool).Load"
"runtime.schedtrace" "(runtime.muintptr).ptr"
"runtime.schedtrace" "runtime/internal/atomic.Load"
"runtime.schedtrace" "runtime/internal/atomic.Load"
"runtime.schedtrace" "runtime.unlock"
"runtime.schedtrace" "(runtime.puintptr).ptr"
"runtime.forEachG" "runtime.lock"
"runtime.park_m" "runtime.getg"
"runtime.park_m" "runtime.traceAcquire"
"runtime.park_m" "runtime.casgstatus"
"runtime.park_m" "(runtime.traceLocker).ok"
"(runtime.traceLocker).GoPark" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).GoPark" "(runtime.traceLocker).stack"
"(runtime.traceLocker).GoPark" "(runtime.traceEventWriter).commit"
"runtime.park_m" "(runtime.traceLocker).GoPark"
"runtime.park_m" "runtime.traceRelease"
"runtime.dropg" "runtime.getg"
"runtime.setMNoWB" "(*runtime.muintptr).set"
"runtime.dropg" "runtime.setMNoWB"
"runtime.setGNoWB" "(*runtime.guintptr).set"
"runtime.dropg" "runtime.setGNoWB"
"runtime.park_m" "runtime.dropg"
"runtime.chanparkcommit" "(*runtime/internal/atomic.Bool).Store"
"runtime.chanparkcommit" "runtime.unlock"
"runtime.park_m" "runtime.chanparkcommit"
"runtime.schedule" "runtime.getg"
"runtime.schedule" "runtime.throw"
"runtime.stoplockedm" "runtime.getg"
"runtime.stoplockedm" "runtime.throw"
"runtime.stoplockedm" "(runtime.guintptr).ptr"
"runtime.stoplockedm" "(runtime.muintptr).ptr"
"runtime.stoplockedm" "runtime.releasep"
"runtime.handoffp" "runtime.runqempty"
"runtime.handoffp" "runtime.startm"
"runtime.handoffp" "runtime.traceEnabled"
"runtime.handoffp" "runtime.startm"
"runtime.traceReaderAvailable" "(*runtime/internal/atomic.Uintptr).Load"
"runtime.traceReaderAvailable" "(*runtime/internal/atomic.Uintptr).Load"
"(*runtime/internal/atomic.Pointer[runtime.g]).Load[runtime.g]" "(*runtime/internal/atomic.UnsafePointer).Load"
"runtime.traceReaderAvailable" "(*runtime/internal/atomic.Pointer[runtime.g]).Load[runtime.g]"
"runtime.traceReaderAvailable" "(*runtime/internal/atomic.Bool).Load"
"runtime.traceReaderAvailable" "(*runtime/internal/atomic.Bool).Load"
"runtime.handoffp" "runtime.traceReaderAvailable"
"runtime.handoffp" "runtime.traceShuttingDown"
"runtime.handoffp" "runtime.startm"
"runtime.handoffp" "(*runtime/internal/atomic.Int32).Load"
"runtime.handoffp" "(*runtime/internal/atomic.Int32).Load"
"runtime.handoffp" "runtime.gcMarkWorkAvailable"
"runtime.handoffp" "(*runtime/internal/atomic.Uint32).Store"
"runtime.handoffp" "runtime.startm"
"runtime.handoffp" "runtime.lock"
"runtime.handoffp" "(*runtime/internal/atomic.Bool).Load"
"runtime.handoffp" "(*runtime/internal/atomic.Int32).CompareAndSwap"
"runtime.handoffp" "runtime.notewakeup"
"runtime.handoffp" "runtime.unlock"
"runtime.handoffp" "runtime/internal/atomic.Cas"
"runtime.handoffp" "runtime.notewakeup"
"runtime.handoffp" "runtime.unlock"
"runtime.handoffp" "runtime.startm"
"runtime.handoffp" "(*runtime/internal/atomic.Int32).Load"
"runtime.handoffp" "runtime.unlock"
"runtime.handoffp" "runtime.startm"
"runtime.nobarrierWakeTime" "(*runtime/internal/atomic.Int64).Load"
"runtime.nobarrierWakeTime" "(*runtime/internal/atomic.Int64).Load"
"runtime.handoffp" "runtime.nobarrierWakeTime"
"runtime.pidleput" "runtime.assertLockHeld"
"runtime.pidleput" "runtime.runqempty"
"runtime.pidleput" "runtime.throw"
"runtime.pidleput" "runtime.nanotime"
"runtime.updateTimerPMask" "(*runtime/internal/atomic.Uint32).Load"
"runtime.updateTimerPMask" "runtime.lock"
"runtime.updateTimerPMask" "(*runtime/internal/atomic.Uint32).Load"
"runtime.updateTimerPMask" "(runtime.pMask).clear"
"runtime.updateTimerPMask" "runtime.unlock"
"runtime.pidleput" "runtime.updateTimerPMask"
"runtime.pidleput" "(runtime.pMask).set"
"runtime.pidleput" "(*runtime.puintptr).set"
"runtime.pidleput" "(*runtime/internal/atomic.Int32).Add"
"runtime.pidleput" "(*runtime.limiterEvent).start"
"runtime.pidleput" "runtime.throw"
"runtime.handoffp" "runtime.pidleput"
"runtime.handoffp" "runtime.unlock"
"runtime.handoffp" "(*runtime/internal/atomic.Int64).Load"
"runtime.wakeNetPoller" "(*runtime/internal/atomic.Int64).Load"
"runtime.wakeNetPoller" "(*runtime/internal/atomic.Int64).Load"
"runtime.netpollBreak" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.netpollBreak" "runtime.write"
"runtime.netpollBreak" "runtime.throw"
"runtime.wakeNetPoller" "runtime.netpollBreak"
"runtime.wakeNetPoller" "runtime.wakep"
"runtime.handoffp" "runtime.wakeNetPoller"
"runtime.shade" "runtime.findObject"
"runtime.shade" "runtime.getg"
"runtime.shade" "(runtime.puintptr).ptr"
"runtime.shade" "runtime.greyobject"
"runtime.wbBufFlush1" "runtime.shade"
"(*runtime.wbBuf).reset" "runtime.throw"
"runtime.wbBufFlush1" "(*runtime.wbBuf).reset"
"(*runtime.gcWork).putBatch" "(*runtime.gcWork).init"
"(*runtime.gcWork).putBatch" "runtime.putfull"
"(*runtime.gcWork).putBatch" "runtime.getempty"
"(*runtime.gcWork).putBatch" "(*runtime.gcControllerState).enlistWorker"
"runtime.wbBufFlush1" "(*runtime.gcWork).putBatch"
"runtime.wbBufFlush1" "(*runtime.wbBuf).reset"
"runtime.wbBufFlush1" "runtime.findObject"
"runtime.wbBufFlush1" "(*runtime.mspan).markBitsForIndex"
"runtime.wbBufFlush1" "(runtime.markBits).isMarked"
"runtime.wbBufFlush1" "(runtime.markBits).setMarked"
"runtime.wbBufFlush1" "(*runtime.mspan).base"
"runtime.wbBufFlush1" "runtime.pageIndexOf"
"runtime.wbBufFlush1" "runtime/internal/atomic.Or8"
"runtime.wbBufFlush1" "(runtime.spanClass).noscan"
"runtime.gcMarkDone$1" "runtime.wbBufFlush1"
"(*runtime.gcWork).dispose" "runtime.putempty"
"(*runtime.gcWork).dispose" "runtime.putfull"
"(*runtime.gcWork).dispose" "runtime.putempty"
"(*runtime.gcWork).dispose" "runtime.putfull"
"(*runtime.gcWork).dispose" "runtime/internal/atomic.Xadd64"
"(*runtime.gcWork).dispose" "(*runtime/internal/atomic.Int64).Add"
"runtime.gcMarkDone$1" "(*runtime.gcWork).dispose"
"runtime.gcMarkDone$1" "runtime/internal/atomic.Xadd"
"runtime.handoffp" "runtime.gcMarkDone$1"
"runtime.gcMarkTermination$4" "(*runtime.mcache).prepareForSweep"
"runtime.gcMarkTermination$4" "runtime.systemstack"
"runtime.handoffp" "runtime.gcMarkTermination$4"
"runtime.stoplockedm" "runtime.handoffp"
"runtime.incidlelocked" "runtime.lock"
"runtime.checkdead" "runtime.assertLockHeld"
"runtime.checkdead" "(*runtime/internal/atomic.Uint32).Load"
"runtime.checkdead" "runtime.mcount"
"runtime.checkdead" "(*runtime/internal/atomic.Uint32).Load"
"runtime.checkdead" "runtime.mcount"
"runtime.checkdead" "runtime.unlock"
"runtime.checkdead" "runtime.throw"
"runtime.checkdead" "runtime.forEachG"
"runtime.checkdead" "runtime.unlock"
"runtime.checkdead" "runtime.fatal"
"runtime.timeSleepUntil" "runtime.lock"
"runtime.timeSleepUntil" "runtime.unlock"
"runtime.timeSleepUntil" "(*runtime/internal/atomic.Int64).Load"
"runtime.timeSleepUntil" "(*runtime/internal/atomic.Int64).Load"
"runtime.checkdead" "runtime.timeSleepUntil"
"runtime.checkdead" "runtime.pidleget"
"runtime.checkdead" "runtime.unlock"
"runtime.checkdead" "runtime.throw"
"runtime.checkdead" "runtime.mget"
"runtime.checkdead" "runtime.unlock"
"runtime.checkdead" "runtime.throw"
"runtime.checkdead" "(*runtime/internal/atomic.Int32).Add"
"runtime.checkdead" "(*runtime.puintptr).set"
"runtime.checkdead" "runtime.notewakeup"
"runtime.checkdead" "runtime.unlock"
"runtime.checkdead" "runtime.fatal"
"runtime.incidlelocked" "runtime.checkdead"
"runtime.incidlelocked" "runtime.unlock"
"runtime.stoplockedm" "runtime.incidlelocked"
"runtime.mPark" "runtime.getg"
"runtime.notesleep" "runtime.getg"
"runtime.notesleep" "runtime.throw"
"runtime.notesleep" "runtime.semacreate"
"runtime.notesleep" "runtime/internal/atomic.Casuintptr"
"runtime.notesleep" "runtime.throw"
"runtime.notesleep" "runtime.semasleep"
"runtime.notesleep" "runtime.semasleep"
"runtime.notesleep" "runtime.asmcgocall"
"runtime.notesleep" "runtime/internal/atomic.Loaduintptr"
"runtime.mPark" "runtime.notesleep"
"runtime.mPark" "runtime.noteclear"
"runtime.stoplockedm" "runtime.mPark"
"runtime.stoplockedm" "(runtime.guintptr).ptr"
"runtime.stoplockedm" "runtime.readgstatus"
"runtime.stoplockedm" "(runtime.guintptr).ptr"
"runtime.stoplockedm" "runtime.dumpgstatus"
"runtime.stoplockedm" "runtime.throw"
"runtime.stoplockedm" "(runtime.puintptr).ptr"
"runtime.stoplockedm" "runtime.acquirep"
"runtime.schedule" "runtime.stoplockedm"
"runtime.schedule" "(runtime.guintptr).ptr"
"runtime.execute" "runtime.getg"
"runtime.tryRecordGoroutineProfile" "runtime.readgstatus"
"runtime.tryRecordGoroutineProfile" "runtime.isSystemGoroutine"
"(*runtime.goroutineProfileStateHolder).Load" "(*runtime/internal/atomic.Uint32).Load"
"runtime.tryRecordGoroutineProfile" "(*runtime.goroutineProfileStateHolder).Load"
"(*go/types.Checker).checkFieldUniqueness" "(*go/types.Named).under"
"(*go/types.Checker).checkFieldUniqueness" "(*go/types.Named).NumMethods"
"(*go/types.Checker).checkFieldUniqueness" "(*go/types.Named).Method"
"(*go/types.Checker).checkFieldUniqueness" "go/types.assert"
"(*go/types.Checker).checkFieldUniqueness" "(*go/types.objset).insert"
"(*go/types.Checker).checkFieldUniqueness" "go/types.assert"
"(*go/types.Checker).checkFieldUniqueness" "(*go/types.objset).insert"
"(*go/types.Checker).checkFieldUniqueness" "(*go/types.Checker).errorf"
"(*go/types.Checker).checkFieldUniqueness" "(*go/types.Checker).reportAltDecl"
"(*go/types.Checker).collectMethods$1" "(*go/types.Checker).checkFieldUniqueness"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).collectMethods$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_pread_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_getcwd_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_sysctl_trampoline"
"runtime.tryRecordGoroutineProfile" "regexp/syntax.parse$1"
"(*golang.org/x/sync/errgroup.Group).done" "(*sync.WaitGroup).Done"
"(*golang.org/x/sync/errgroup.Group).Go$1" "(*golang.org/x/sync/errgroup.Group).done"
"(*golang.org/x/sync/errgroup.Group).Go$1" "(*internal/poll.FD).Fchmod$1"
"(*golang.org/x/sync/errgroup.Group).Go$1" "(*internal/poll.FD).Ftruncate$1"
"(*golang.org/x/sync/errgroup.Group).Go$1" "os.lstatNolog$1"
"(*golang.org/x/sync/errgroup.Group).Go$1" "os.statNolog$1"
"(*os.Process).signal" "errors.New"
"(*os.Process).signal" "errors.New"
"(*os.Process).signal" "(*sync.RWMutex).RLock"
"(*os.Process).signal" "(*sync.RWMutex).RUnlock"
"(*os.Process).done" "(*sync/atomic.Bool).Load"
"(*os.Process).signal" "(*os.Process).done"
"(*os.Process).signal" "errors.New"
"syscall.kill" "internal/abi.FuncPCABI0"
"syscall.kill" "syscall.syscall"
"syscall.kill" "syscall.errnoErr"
"syscall.Kill" "syscall.kill"
"(*os.Process).signal" "syscall.Kill"
"(*os.Process).Signal" "(*os.Process).signal"
"(*os.Process).kill" "(*os.Process).Signal"
"(*os.Process).Kill" "(*os.Process).kill"
"os/exec.CommandContext$1" "(*os.Process).Kill"
"(*golang.org/x/sync/errgroup.Group).Go$1" "os/exec.CommandContext$1"
"os.syscallMode" "(io/fs.FileMode).Perm"
"os.chmod$1" "os.syscallMode"
"syscall.Chmod" "syscall.BytePtrFromString"
"syscall.Chmod" "internal/abi.FuncPCABI0"
"syscall.Chmod" "syscall.syscall"
"syscall.Chmod" "syscall.errnoErr"
"os.chmod$1" "syscall.Chmod"
"(*golang.org/x/sync/errgroup.Group).Go$1" "os.chmod$1"
"(*golang.org/x/sync/errgroup.Group).Go$1" "(*internal/poll.FD).Fchown$1"
"(*golang.org/x/sync/errgroup.Group).Go$1" "(*internal/poll.FD).Fstat$1"
"(*golang.org/x/sync/errgroup.Group).Go$1" "(*internal/poll.FD).Fsync$1"
"(*golang.org/x/sync/errgroup.Group).Go$1" "os.newFile$1"
"(*golang.org/x/sync/errgroup.Group).Go$1" "golang.org/x/tools/go/packages.callDriverOnChunks$1"
"(*golang.org/x/sync/errgroup.Group).Go$1" "(*sync.Once).Do"
"(*bytes.Reader).WriteTo" "(*internal/poll.FD).Write"
"(*bytes.Reader).WriteTo" "(io.discard).Write"
"(*bytes.Reader).WriteTo" "(*internal/godebug.runtimeStderr).Write"
"(*bytes.Reader).WriteTo" "(*fmt.pp).Write"
"(*bytes.Reader).WriteTo" "(*os.File).Write"
"(*bytes.Reader).WriteTo" "(*crypto/md5.digest).Write"
"(*bytes.Reader).WriteTo" "(*os/exec.prefixSuffixSaver).Write"
"(*bytes.Reader).WriteTo" "(*strings.Builder).Write"
"(*bytes.Reader).WriteTo" "(*log/slog/internal/buffer.Buffer).Write"
"(*bytes.Reader).WriteTo" "(*go/ast.printer).Write"
"(*bytes.Reader).WriteTo" "(*bytes.Buffer).Write"
"io.copyBuffer" "(*bytes.Reader).WriteTo"
"io.copyBuffer" "(*internal/godebug.runtimeStderr).Write"
"(*bufio.Reader).writeBuf" "(*internal/poll.FD).Write"
"(*bufio.Reader).writeBuf" "(io.discard).Write"
"(*bufio.Reader).writeBuf" "(*internal/godebug.runtimeStderr).Write"
"(*bufio.Reader).writeBuf" "(*fmt.pp).Write"
"(*bufio.Reader).writeBuf" "(*os.File).Write"
"(*bufio.Reader).writeBuf" "(*crypto/md5.digest).Write"
"(*bufio.Reader).writeBuf" "(*os/exec.prefixSuffixSaver).Write"
"(*bufio.Reader).writeBuf" "(*strings.Builder).Write"
"(*bufio.Reader).writeBuf" "(*log/slog/internal/buffer.Buffer).Write"
"(*bufio.Reader).writeBuf" "(*go/ast.printer).Write"
"(*bufio.Reader).writeBuf" "(*bytes.Buffer).Write"
"(*bufio.Reader).WriteTo" "(*bufio.Reader).writeBuf"
"(*bufio.Reader).WriteTo" "(*bufio.Reader).fill"
"(*os.File).ReadFrom" "(*os.File).checkValid"
"(*os.File).ReadFrom" "(*os.File).readFrom"
"os.genericReadFrom" "io.Copy"
"(*os.File).ReadFrom" "os.genericReadFrom"
"(*os.File).ReadFrom" "(*os.File).wrapErr"
"(*bufio.Reader).WriteTo" "(*os.File).ReadFrom"
"(*bufio.Reader).WriteTo" "(*bufio.Reader).fill"
"(*bufio.Reader).WriteTo" "(os.noReadFrom).ReadFrom"
"(*bytes.Buffer).WriteTo" "(*bytes.Buffer).Len"
"(*bytes.Buffer).WriteTo" "(*internal/poll.FD).Write"
"(*bytes.Buffer).WriteTo" "(io.discard).Write"
"(*bytes.Buffer).WriteTo" "(*bytes.Buffer).Reset"
"(*bytes.Buffer).WriteTo" "(*fmt.pp).Write"
"(*bytes.Buffer).WriteTo" "(*os.File).Write"
"(*bytes.Buffer).WriteTo" "(*crypto/md5.digest).Write"
"(*bytes.Buffer).WriteTo" "(*os/exec.prefixSuffixSaver).Write"
"(*bytes.Buffer).WriteTo" "(*bytes.Buffer).Write"
"(*bytes.Buffer).WriteTo" "(*strings.Builder).Write"
"(*bytes.Buffer).WriteTo" "(*go/ast.printer).Write"
"(*bytes.Buffer).WriteTo" "(*internal/godebug.runtimeStderr).Write"
"(*bytes.Buffer).WriteTo" "(*log/slog/internal/buffer.Buffer).Write"
"(*bufio.Reader).WriteTo" "(*bytes.Buffer).WriteTo"
"(*bufio.Reader).WriteTo" "(os.noWriteTo).WriteTo"
"(*os.File).WriteTo" "(*os.File).checkValid"
"(*os.File).WriteTo" "(*os.File).writeTo"
"(*os.File).WriteTo" "(*os.File).wrapErr"
"os.genericWriteTo" "io.Copy"
"(*os.File).WriteTo" "os.genericWriteTo"
"(*bufio.Reader).WriteTo" "(*os.File).WriteTo"
"io.WriteString" "(*strings.Builder).Write"
"io.WriteString" "(*crypto/md5.digest).Write"
"io.WriteString" "(*strings.Builder).WriteString"
"io.WriteString" "(*fmt.pp).Write"
"io.WriteString" "(*internal/godebug.runtimeStderr).Write"
"(*fmt.pp).WriteString" "(*fmt.buffer).writeString"
"io.WriteString" "(*fmt.pp).WriteString"
"io.WriteString" "(*log/slog/internal/buffer.Buffer).Write"
"io.WriteString" "(*bytes.Buffer).Write"
"io.WriteString" "(*os.File).Write"
"io.WriteString" "(io.discard).WriteString"
"io.WriteString" "(*os/exec.prefixSuffixSaver).Write"
"io.WriteString" "(*bytes.Buffer).WriteString"
"(*os.File).WriteString" "(*os.File).Write"
"io.WriteString" "(*os.File).WriteString"
"io.WriteString" "(*log/slog/internal/buffer.Buffer).WriteString"
"io.WriteString" "(*internal/poll.FD).Write"
"io.WriteString" "(io.discard).Write"
"io.WriteString" "(*go/ast.printer).Write"
"(*strings.Reader).WriteTo" "io.WriteString"
"(*bufio.Reader).WriteTo" "(*strings.Reader).WriteTo"
"(*bufio.Reader).WriteTo" "(*bytes.Reader).WriteTo"
"(*bufio.Reader).WriteTo" "(*bufio.Reader).WriteTo"
"(*bytes.Buffer).ReadFrom" "(*bytes.Buffer).grow"
"(*bytes.Buffer).ReadFrom" "(*fmt.ss).Read"
"(*bytes.Buffer).ReadFrom" "(*os.File).Read"
"(*bytes.Buffer).ReadFrom" "(*internal/poll.FD).Read"
"(*bytes.Buffer).ReadFrom" "(*io.LimitedReader).Read"
"(*bytes.Buffer).ReadFrom" "(*bufio.Reader).Read"
"(*bytes.Buffer).ReadFrom" "(*math/rand.Rand).Read"
"(*bytes.Buffer).ReadFrom" "(*fmt.stringReader).Read"
"(*bytes.Buffer).ReadFrom" "(*bytes.Reader).Read"
"(*bytes.Buffer).ReadFrom" "(*strings.Reader).Read"
"(*bytes.Buffer).ReadFrom" "(*bytes.Buffer).Read"
"(*bufio.Reader).WriteTo" "(*bytes.Buffer).ReadFrom"
"(*bufio.Reader).WriteTo" "(*bufio.Reader).readErr"
"(*bufio.Reader).WriteTo" "(*bufio.Reader).writeBuf"
"(io.discard).ReadFrom" "(*sync.Pool).Get"
"(io.discard).ReadFrom" "(*fmt.ss).Read"
"(io.discard).ReadFrom" "(*os.File).Read"
"(io.discard).ReadFrom" "(*internal/poll.FD).Read"
"(io.discard).ReadFrom" "(*sync.Pool).Put"
"(io.discard).ReadFrom" "(*io.LimitedReader).Read"
"(io.discard).ReadFrom" "(*bufio.Reader).Read"
"(io.discard).ReadFrom" "(*math/rand.Rand).Read"
"(io.discard).ReadFrom" "(*fmt.stringReader).Read"
"(io.discard).ReadFrom" "(*bytes.Reader).Read"
"(io.discard).ReadFrom" "(*strings.Reader).Read"
"(io.discard).ReadFrom" "(*bytes.Buffer).Read"
"(*bufio.Reader).WriteTo" "(io.discard).ReadFrom"
"io.copyBuffer" "(*bufio.Reader).WriteTo"
"io.copyBuffer" "(*strings.Builder).Write"
"io.copyBuffer" "(*bytes.Buffer).WriteTo"
"io.copyBuffer" "(os.noWriteTo).WriteTo"
"io.copyBuffer" "(*os.File).WriteTo"
"io.copyBuffer" "(*math/rand.Rand).Read"
"io.copyBuffer" "(*bytes.Buffer).Write"
"io.copyBuffer" "(*os/exec.prefixSuffixSaver).Write"
"io.copyBuffer" "(io.discard).ReadFrom"
"io.copyBuffer" "(*strings.Reader).WriteTo"
"io.copyBuffer" "(*bytes.Buffer).ReadFrom"
"io.copyBuffer" "(*io.LimitedReader).Read"
"io.copyBuffer" "(os.noReadFrom).ReadFrom"
"io.copyBuffer" "(*os.File).ReadFrom"
"io.copyBuffer" "(*fmt.ss).Read"
"io.copyBuffer" "(*os.File).Read"
"io.copyBuffer" "(*internal/poll.FD).Read"
"io.copyBuffer" "(*strings.Reader).Read"
"io.copyBuffer" "(*bufio.Reader).Read"
"io.copyBuffer" "(*bytes.Reader).Read"
"io.copyBuffer" "(*go/ast.printer).Write"
"io.copyBuffer" "(*log/slog/internal/buffer.Buffer).Write"
"io.copyBuffer" "(*crypto/md5.digest).Write"
"io.copyBuffer" "(*bytes.Buffer).Read"
"io.copyBuffer" "(*internal/poll.FD).Write"
"io.copyBuffer" "(io.discard).Write"
"io.copyBuffer" "(*fmt.stringReader).Read"
"io.copyBuffer" "(*fmt.pp).Write"
"io.copyBuffer" "(*os.File).Write"
"io.Copy" "io.copyBuffer"
"(*os/exec.Cmd).childStdin$1" "io.Copy"
"(*os/exec.Cmd).childStdin$1" "os/exec.skipStdinCopyError"
"(*os.dirInfo).close" "os.closedir"
"(*os.file).close" "(*os.dirInfo).close"
"(*internal/poll.fdMutex).increfAndClose" "sync/atomic.LoadUint64"
"(*internal/poll.fdMutex).increfAndClose" "sync/atomic.CompareAndSwapUint64"
"(*internal/poll.fdMutex).increfAndClose" "internal/poll.runtime_Semrelease"
"(*internal/poll.fdMutex).increfAndClose" "internal/poll.runtime_Semrelease"
"(*internal/poll.FD).Close" "(*internal/poll.fdMutex).increfAndClose"
"(*internal/poll.FD).Close" "internal/poll.errClosing"
"(*internal/poll.pollDesc).evict" "internal/poll.runtime_pollUnblock"
"(*internal/poll.FD).Close" "(*internal/poll.pollDesc).evict"
"(*internal/poll.fdMutex).decref" "sync/atomic.LoadUint64"
"(*internal/poll.fdMutex).decref" "sync/atomic.CompareAndSwapUint64"
"(*internal/poll.FD).decref" "(*internal/poll.fdMutex).decref"
"(*internal/poll.FD).decref" "(*internal/poll.FD).destroy"
"(*internal/poll.FD).Close" "(*internal/poll.FD).decref"
"(*internal/poll.FD).Close" "internal/poll.runtime_Semacquire"
"(*os.file).close" "(*internal/poll.FD).Close"
"runtime.SetFinalizer" "runtime.efaceOf"
"runtime.SetFinalizer" "runtime.throw"
"runtime.SetFinalizer" "runtime.toRType"
"runtime.SetFinalizer" "(runtime.rtype).string"
"runtime.SetFinalizer" "runtime.throw"
"runtime.SetFinalizer" "runtime.throw"
"runtime.inUserArenaChunk" "runtime.spanOf"
"runtime.SetFinalizer" "runtime.inUserArenaChunk"
"runtime.SetFinalizer" "runtime.throw"
"runtime.SetFinalizer" "runtime.findObject"
"runtime.SetFinalizer" "runtime.isGoPointerWithoutSpan"
"runtime.SetFinalizer" "runtime.throw"
"runtime.SetFinalizer" "(runtime.spanClass).sizeclass"
"runtime.SetFinalizer" "runtime.heapBitsInSpan"
"runtime.SetFinalizer" "(runtime.spanClass).noscan"
"runtime.SetFinalizer" "runtime.efaceOf"
"runtime.SetFinalizer" "runtime.throw"
"runtime.SetFinalizer" "runtime.systemstack"
"runtime.SetFinalizer" "runtime.toRType"
"runtime.SetFinalizer" "(runtime.rtype).string"
"runtime.SetFinalizer" "runtime.throw"
"runtime.SetFinalizer" "(*internal/abi.FuncType).IsVariadic"
"runtime.SetFinalizer" "runtime.toRType"
"runtime.SetFinalizer" "(runtime.rtype).string"
"runtime.SetFinalizer" "runtime.toRType"
"runtime.SetFinalizer" "(runtime.rtype).string"
"runtime.SetFinalizer" "runtime.throw"
"runtime.SetFinalizer" "runtime.toRType"
"runtime.SetFinalizer" "(runtime.rtype).string"
"runtime.SetFinalizer" "runtime.toRType"
"runtime.SetFinalizer" "(runtime.rtype).string"
"runtime.SetFinalizer" "runtime.throw"
"runtime.SetFinalizer" "(*internal/abi.FuncType).InSlice"
"runtime.SetFinalizer" "runtime.toRType"
"runtime.SetFinalizer" "(runtime.rtype).string"
"runtime.SetFinalizer" "runtime.toRType"
"runtime.SetFinalizer" "(runtime.rtype).string"
"runtime.SetFinalizer" "runtime.throw"
"runtime.SetFinalizer" "(*internal/abi.Type).Uncommon"
"runtime.SetFinalizer" "(*internal/abi.FuncType).OutSlice"
"runtime.SetFinalizer" "(*internal/abi.Type).Uncommon"
"runtime.SetFinalizer" "runtime.efaceOf"
"runtime.getitab" "runtime.throw"
"runtime.getitab" "runtime/internal/atomic.Loadp"
"(*runtime.itabTableType).find" "runtime.itabHashFunc"
"(*runtime.itabTableType).find" "runtime.add"
"(*runtime.itabTableType).find" "runtime/internal/atomic.Loadp"
"runtime.getitab" "(*runtime.itabTableType).find"
"runtime.getitab" "runtime.toRType"
"runtime.getitab" "(runtime.rtype).nameOff"
"runtime.getitab" "(internal/abi.Name).Name"
"runtime.getitab" "runtime.lock"
"runtime.getitab" "(*runtime.itabTableType).find"
"runtime.getitab" "runtime.unlock"
"runtime.getitab" "runtime.persistentalloc"
"(*runtime.itab).init" "(*internal/abi.Type).Uncommon"
"(*runtime.itab).init" "runtime.add"
"(*runtime.itab).init" "runtime.toRType"
"runtime.resolveTypeOff" "runtime.reflectOffsLock"
"runtime.resolveTypeOff" "runtime.reflectOffsUnlock"
"runtime.resolveTypeOff" "runtime.throw"
"runtime.resolveTypeOff" "runtime.throw"
"(runtime.rtype).typeOff" "runtime.resolveTypeOff"
"(*runtime.itab).init" "(runtime.rtype).typeOff"
"(*runtime.itab).init" "runtime.toRType"
"(*runtime.itab).init" "(runtime.rtype).nameOff"
"(*runtime.itab).init" "(internal/abi.Name).Name"
"runtime.pkgPath" "(internal/abi.Name).ReadVarint"
"(internal/abi.Name).Data" "internal/abi.addChecked"
"runtime.pkgPath" "(internal/abi.Name).Data"
"runtime.pkgPath" "(internal/abi.Name).Data"
"runtime.pkgPath" "(internal/abi.Name).ReadVarint"
"runtime.pkgPath" "(internal/abi.Name).Data"
"runtime.pkgPath" "runtime.resolveNameOff"
"runtime.pkgPath" "(internal/abi.Name).Name"
"(*runtime.itab).init" "runtime.pkgPath"
"(*runtime.itab).init" "(internal/abi.Name).Name"
"(*runtime.itab).init" "runtime.toRType"
"(*runtime.itab).init" "(runtime.rtype).nameOff"
"(*runtime.itab).init" "(runtime.rtype).typeOff"
"(*runtime.itab).init" "runtime.pkgPath"
"(*runtime.itab).init" "(internal/abi.Name).Name"
"(*runtime.itab).init" "(runtime.rtype).nameOff"
"(*runtime.itab).init" "(internal/abi.Name).Name"
"(*runtime.itab).init" "(internal/abi.Name).IsExported"
"(runtime.rtype).textOff" "internal/abi.FuncPCABIInternal"
"(runtime.rtype).textOff" "runtime.reflectOffsLock"
"(runtime.rtype).textOff" "runtime.reflectOffsUnlock"
"(runtime.rtype).textOff" "(*runtime.moduledata).textAddr"
"(runtime.rtype).textOff" "runtime.throw"
"(*runtime.itab).init" "(runtime.rtype).textOff"
"runtime.getitab" "(*runtime.itab).init"
"runtime.itabAdd" "runtime.getg"
"runtime.itabAdd" "runtime.throw"
"runtime.itabAdd" "runtime.mallocgc"
"runtime.iterate_itabs" "runtime.add"
"(*runtime.itabTableType).add" "runtime.itabHashFunc"
"(*runtime.itabTableType).add" "runtime.add"
"(*runtime.itabTableType).add" "runtime/internal/atomic.StorepNoWB"
"runtime.iterate_itabs" "(*runtime.itabTableType).add"
"runtime.itabAdd" "runtime.iterate_itabs"
"runtime.itabAdd" "(*runtime.itabTableType).add"
"runtime.itabAdd" "runtime.throw"
"runtime.itabAdd" "runtime.atomicstorep"
"runtime.getitab" "runtime.itabAdd"
"runtime.getitab" "runtime.unlock"
"runtime.getitab" "(*runtime.itab).init"
"runtime.assertE2I2" "runtime.getitab"
"runtime.SetFinalizer" "runtime.assertE2I2"
"runtime.SetFinalizer" "runtime.alignUp"
"runtime.SetFinalizer" "runtime.alignUp"
"runtime.createfing" "(*runtime/internal/atomic.Uint32).Load"
"runtime.runfinq" "runtime.getg"
"runtime.runfinq" "runtime.lock"
"runtime.runfinq" "runtime.unlock"
"runtime.runfinq" "runtime.lock"
"runtime.runfinq" "runtime.gopark"
"runtime.runfinq" "runtime.unlock"
"runtime.racefingo" "runtime.throw"
"runtime.runfinq" "runtime.racefingo"
"runtime.runfinq" "runtime.lock"
"runtime.runfinq" "runtime.unlock"
"runtime.runfinq" "runtime.mallocgc"
"runtime.runfinq" "runtime.throw"
"runtime.runfinq" "(*runtime/internal/atomic.Uint32).Or"
"runtime.runfinq" "runtime.reflectcall"
"(*runtime/internal/atomic.Uint32).And" "runtime/internal/atomic.And"
"runtime.runfinq" "(*runtime/internal/atomic.Uint32).And"
"runtime.runfinq" "runtime/internal/atomic.Store"
"runtime.runfinq" "runtime.throw"
"runtime.assertE2I" "runtime.getitab"
"runtime.runfinq" "runtime.assertE2I"
"runtime.createfing" "runtime.runfinq"
"runtime.createfing" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.SetFinalizer" "runtime.createfing"
"runtime.SetFinalizer" "runtime.systemstack"
"(*os.file).close" "runtime.SetFinalizer"
"(*os.File).Close" "(*os.file).close"
"(*os/exec.Cmd).childStdin$1" "(*os.File).Close"
"(*golang.org/x/sync/errgroup.Group).Go$1" "(*os/exec.Cmd).childStdin$1"
"(*os/exec.Cmd).writerDescriptor$1" "io.Copy"
"(*os/exec.Cmd).writerDescriptor$1" "(*os.File).Close"
"(*golang.org/x/sync/errgroup.Group).Go$1" "(*os/exec.Cmd).writerDescriptor$1"
"os.Mkdir$1" "os.syscallMode"
"syscall.Mkdir" "syscall.BytePtrFromString"
"syscall.Mkdir" "internal/abi.FuncPCABI0"
"syscall.Mkdir" "syscall.syscall"
"syscall.Mkdir" "syscall.errnoErr"
"os.Mkdir$1" "syscall.Mkdir"
"(*golang.org/x/sync/errgroup.Group).Go$1" "os.Mkdir$1"
"syscall.Unlink" "syscall.BytePtrFromString"
"syscall.Unlink" "internal/abi.FuncPCABI0"
"syscall.Unlink" "syscall.syscall"
"syscall.Unlink" "syscall.errnoErr"
"os.Remove$1" "syscall.Unlink"
"(*golang.org/x/sync/errgroup.Group).Go$1" "os.Remove$1"
"syscall.Rmdir" "syscall.BytePtrFromString"
"syscall.Rmdir" "internal/abi.FuncPCABI0"
"syscall.Rmdir" "syscall.syscall"
"syscall.Rmdir" "syscall.errnoErr"
"os.Remove$2" "syscall.Rmdir"
"(*golang.org/x/sync/errgroup.Group).Go$1" "os.Remove$2"
"internal/syscall/unix.Unlinkat" "internal/syscall/unix.unlinkat"
"os.removeAllFrom$1" "internal/syscall/unix.Unlinkat"
"(*golang.org/x/sync/errgroup.Group).Go$1" "os.removeAllFrom$1"
"internal/syscall/unix.Fstatat" "internal/syscall/unix.fstatat"
"os.removeAllFrom$2" "internal/syscall/unix.Fstatat"
"(*golang.org/x/sync/errgroup.Group).Go$1" "os.removeAllFrom$2"
"os.removeAllFrom$3" "internal/syscall/unix.Unlinkat"
"(*golang.org/x/sync/errgroup.Group).Go$1" "os.removeAllFrom$3"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/sync/errgroup.Group).Go$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.typeWriter).signature$1"
"runtime.tryRecordGoroutineProfile" "runtime.fatalthrow$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_lstat_trampoline"
"go/types.computeInterfaceTypeSet$2$1" "(*go/types.Checker).allowVersion"
"go/types.computeInterfaceTypeSet$2$1" "(*go/types.Checker).errorf"
"go/types.computeInterfaceTypeSet$2$1" "(*go/types.Checker).errorf"
"go/types.computeInterfaceTypeSet$2$1" "go/types.Identical"
"go/types.computeInterfaceTypeSet$2$1" "(*go/types.object).Type"
"runtime.tryRecordGoroutineProfile" "go/types.computeInterfaceTypeSet$2$1"
"context.WithCancel$1" "(*context.cancelCtx).cancel"
"runtime.tryRecordGoroutineProfile" "context.WithCancel$1"
"runtime.tryRecordGoroutineProfile" "flag.commandLineUsage"
"runtime.tryRecordGoroutineProfile" "runtime.chansend$1"
"runtime.tryRecordGoroutineProfile" "runtime.asyncPreempt2"
"runtime.tryRecordGoroutineProfile" "syscall.libc_stat_trampoline"
"runtime.cgoCheckBits" "runtime.addb"
"runtime.cgoCheckBits" "runtime.add"
"runtime.cgoCheckBits" "runtime.addb"
"runtime.cgoCheckBits" "runtime.add"
"runtime.cgoCheckBits" "runtime.cgoIsGoPointer"
"runtime.cgoCheckBits" "runtime.throw"
"runtime.cgoCheckBits" "runtime.isPinned"
"runtime.cgoCheckUsingType" "runtime.cgoCheckBits"
"runtime.cgoCheckUsingType" "runtime.cgoCheckUsingType"
"runtime.cgoCheckUsingType" "runtime.add"
"runtime.cgoCheckUsingType" "runtime.throw"
"runtime.cgoCheckUsingType" "runtime.cgoCheckUsingType"
"runtime.cgoCheckUsingType" "runtime.add"
"runtime.cgoCheckTypedBlock$1" "runtime.cgoCheckUsingType"
"runtime.tryRecordGoroutineProfile" "runtime.cgoCheckTypedBlock$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_fstat_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_openat_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_closedir_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_fchmod_trampoline"
"runtime.tryRecordGoroutineProfile" "flag.init$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_mmap_trampoline"
"runtime.tryRecordGoroutineProfile" "(*go/types.gcSizes).Alignof$1"
"runtime.tryRecordGoroutineProfile" "time.FixedZone$1"
"runtime.tryRecordGoroutineProfile" "reflect.methodValueCall"
"runtime.tryRecordGoroutineProfile" "go/types.resolve$1"
"runtime.tryRecordGoroutineProfile" "runtime.goready$1"
"runtime.stopTheWorldWithSema" "runtime.traceAcquire"
"runtime.stopTheWorldWithSema" "(runtime.traceLocker).ok"
"(runtime.traceLocker).STWStart" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).STWStart" "(runtime.stwReason).String"
"(*runtime.traceStringTable).put" "runtime.stringStructOf"
"(*runtime.traceStringTable).put" "(*runtime.traceMap).put"
"(*runtime.traceStringTable).put" "runtime.systemstack"
"(runtime.traceLocker).string" "(*runtime.traceStringTable).put"
"(runtime.traceLocker).STWStart" "(runtime.traceLocker).string"
"(runtime.traceLocker).STWStart" "(runtime.traceLocker).stack"
"(runtime.traceLocker).STWStart" "(runtime.traceEventWriter).commit"
"runtime.stopTheWorldWithSema" "(runtime.traceLocker).STWStart"
"runtime.stopTheWorldWithSema" "runtime.traceRelease"
"runtime.stopTheWorldWithSema" "runtime.getg"
"runtime.stopTheWorldWithSema" "runtime.throw"
"runtime.stopTheWorldWithSema" "runtime.lock"
"runtime.stopTheWorldWithSema" "runtime.nanotime"
"runtime.stopTheWorldWithSema" "(*runtime/internal/atomic.Bool).Store"
"runtime.preemptall" "runtime.preemptone"
"runtime.stopTheWorldWithSema" "runtime.preemptall"
"runtime.stopTheWorldWithSema" "(runtime.puintptr).ptr"
"runtime.stopTheWorldWithSema" "runtime.traceAcquire"
"runtime.stopTheWorldWithSema" "(runtime.traceLocker).ok"
"runtime.stopTheWorldWithSema" "(runtime.traceLocker).ok"
"runtime.stopTheWorldWithSema" "runtime/internal/atomic.Cas"
"runtime.stopTheWorldWithSema" "(runtime.traceLocker).GoSysBlock"
"(runtime.traceLocker).ProcSteal" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).ProcSteal" "(*runtime.traceSchedResourceState).statusWasTraced"
"(runtime.traceLocker).ProcSteal" "(runtime.traceWriter).writeProcStatus"
"(runtime.traceLocker).ProcSteal" "(*runtime.traceSchedResourceState).nextSeq"
"(runtime.traceLocker).ProcSteal" "(runtime.traceEventWriter).commit"
"(runtime.traceLocker).ProcSteal" "(*runtime.traceSchedResourceState).acquireStatus"
"runtime.stopTheWorldWithSema" "(runtime.traceLocker).ProcSteal"
"runtime.stopTheWorldWithSema" "runtime.traceRelease"
"runtime.stopTheWorldWithSema" "runtime.nanotime"
"runtime.stopTheWorldWithSema" "runtime.pidleget"
"runtime.stopTheWorldWithSema" "runtime.unlock"
"runtime.stopTheWorldWithSema" "runtime.nanotime"
"runtime.stopTheWorldWithSema" "(runtime.stwReason).isGC"
"runtime.notetsleep" "runtime.getg"
"runtime.notetsleep" "runtime.throw"
"runtime.notetsleep" "runtime.semacreate"
"runtime.notetsleep" "runtime.notetsleep_internal"
"runtime.stopTheWorldWithSema" "runtime.notetsleep"
"runtime.stopTheWorldWithSema" "runtime.noteclear"
"runtime.stopTheWorldWithSema" "runtime.preemptall"
"runtime.stopTheWorldWithSema" "(*runtime.timeHistogram).record"
"runtime.stopTheWorldWithSema" "(*runtime.timeHistogram).record"
"runtime.stopTheWorldWithSema" "(*runtime/internal/atomic.Bool).Load"
"runtime.stopTheWorldWithSema" "runtime.lock"
"runtime.stopTheWorldWithSema" "runtime.lock"
"runtime.stopTheWorldWithSema" "runtime.throw"
"runtime.stopTheWorldWithSema" "runtime.worldStopped"
"runtime.gcStart$1" "runtime.stopTheWorldWithSema"
"runtime.tryRecordGoroutineProfile" "runtime.gcStart$1"
"runtime.tryRecordGoroutineProfile" "runtime.init$1"
"runtime.tryRecordGoroutineProfile" "(log/slog.Value).Resolve$1"
"runtime.tryRecordGoroutineProfile" "time.initLocal"
"runtime.tryRecordGoroutineProfile" "runtime.osyield"
"runtime.startTheWorldWithSema" "runtime.assertWorldStopped"
"runtime.startTheWorldWithSema" "runtime.acquirem"
"runtime.startTheWorldWithSema" "runtime.netpollinited"
"runtime.startTheWorldWithSema" "runtime.netpoll"
"runtime.startTheWorldWithSema" "runtime.injectglist"
"runtime.startTheWorldWithSema" "runtime.netpollAdjustWaiters"
"runtime.startTheWorldWithSema" "runtime.lock"
"runtime.procresize" "runtime.assertLockHeld"
"runtime.procresize" "runtime.assertWorldStopped"
"runtime.procresize" "runtime.throw"
"runtime.procresize" "runtime.traceAcquire"
"runtime.procresize" "(runtime.traceLocker).ok"
"(runtime.traceLocker).Gomaxprocs" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).Gomaxprocs" "(runtime.traceLocker).stack"
"(runtime.traceLocker).Gomaxprocs" "(runtime.traceEventWriter).commit"
"runtime.procresize" "(runtime.traceLocker).Gomaxprocs"
"runtime.procresize" "runtime.traceRelease"
"runtime.procresize" "runtime.nanotime"
"runtime.procresize" "runtime.lock"
"runtime.procresize" "runtime.unlock"
"runtime.procresize" "runtime.getg"
"(*runtime.p).init" "(*runtime.wbBuf).reset"
"runtime.allocmcache" "runtime.systemstack"
"runtime.allocmcache" "runtime.nextSample"
"(*runtime.p).init" "runtime.allocmcache"
"(*runtime.p).init" "runtime.throw"
"(*runtime.p).init" "runtime.lockInit"
"(*runtime.p).init" "(runtime.pMask).set"
"(*runtime.p).init" "(runtime.pMask).clear"
"runtime.raceproccreate" "runtime.throw"
"(*runtime.p).init" "runtime.raceproccreate"
"runtime.procresize" "(*runtime.p).init"
"runtime.procresize" "runtime.atomicstorep"
"runtime.procresize" "(runtime.puintptr).ptr"
"runtime.procresize" "(runtime.puintptr).ptr"
"runtime.procresize" "(*runtime.mcache).prepareForSweep"
"runtime.procresize" "(runtime.puintptr).ptr"
"runtime.procresize" "runtime.traceAcquire"
"runtime.procresize" "(runtime.traceLocker).ok"
"runtime.procresize" "runtime.acquirep"
"runtime.procresize" "runtime.traceAcquire"
"runtime.procresize" "(runtime.traceLocker).ok"
"(runtime.traceLocker).GoStop" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).GoStop" "(runtime.traceLocker).stack"
"(runtime.traceLocker).GoStop" "(runtime.traceEventWriter).commit"
"(runtime.traceLocker).GoSched" "(runtime.traceLocker).GoStop"
"runtime.procresize" "(runtime.traceLocker).GoSched"
"runtime.procresize" "(runtime.puintptr).ptr"
"runtime.procresize" "(runtime.traceLocker).ProcStop"
"runtime.procresize" "runtime.traceRelease"
"runtime.procresize" "(runtime.puintptr).ptr"
"runtime.procresize" "(runtime.traceLocker).GoStart"
"runtime.procresize" "runtime.traceRelease"
"(*runtime.p).destroy" "runtime.assertLockHeld"
"(*runtime.p).destroy" "runtime.assertWorldStopped"
"(*runtime.p).destroy" "(runtime.guintptr).ptr"
"runtime.globrunqputhead" "runtime.assertLockHeld"
"(*runtime.gQueue).push" "(*runtime.guintptr).set"
"(*runtime.gQueue).push" "(*runtime.guintptr).set"
"runtime.globrunqputhead" "(*runtime.gQueue).push"
"(*runtime.p).destroy" "runtime.globrunqputhead"
"(*runtime.p).destroy" "(runtime.guintptr).ptr"
"(*runtime.p).destroy" "runtime.globrunqputhead"
"(*runtime.p).destroy" "runtime.getg"
"(*runtime.p).destroy" "(runtime.puintptr).ptr"
"(*runtime.p).destroy" "runtime.lock"
"(*runtime.p).destroy" "runtime.lock"
"runtime.moveTimers" "(*runtime/internal/atomic.Uint32).Load"
"runtime.moveTimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.moveTimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.doaddtimer" "(*runtime/internal/atomic.Uint32).Load"
"runtime.netpollGenericInit" "(*runtime/internal/atomic.Uint32).Load"
"runtime.netpollGenericInit" "runtime.lockInit"
"runtime.netpollGenericInit" "runtime.lock"
"runtime.netpollGenericInit" "(*runtime/internal/atomic.Uint32).Load"
"runtime.kqueue" "internal/abi.FuncPCABI0"
"runtime.kqueue" "runtime.libcCall"
"runtime.netpollinit" "runtime.kqueue"
"runtime.netpollinit" "runtime.throw"
"runtime.fcntl" "internal/abi.FuncPCABI0"
"runtime.fcntl" "runtime.libcCall"
"runtime.closeonexec" "runtime.fcntl"
"runtime.netpollinit" "runtime.closeonexec"
"runtime.pipe" "internal/abi.FuncPCABI0"
"runtime.pipe" "runtime.noescape"
"runtime.pipe" "runtime.libcCall"
"runtime.nonblockingPipe" "runtime.pipe"
"runtime.nonblockingPipe" "runtime.closeonexec"
"runtime.setNonblock" "runtime.fcntl"
"runtime.setNonblock" "runtime.fcntl"
"runtime.nonblockingPipe" "runtime.setNonblock"
"runtime.nonblockingPipe" "runtime.closeonexec"
"runtime.nonblockingPipe" "runtime.setNonblock"
"runtime.netpollinit" "runtime.nonblockingPipe"
"runtime.netpollinit" "runtime.throw"
"runtime.netpollinit" "runtime.kevent"
"runtime.netpollinit" "runtime.throw"
"runtime.netpollGenericInit" "runtime.netpollinit"
"runtime.netpollGenericInit" "(*runtime/internal/atomic.Uint32).Store"
"runtime.netpollGenericInit" "runtime.unlock"
"runtime.doaddtimer" "runtime.netpollGenericInit"
"runtime.doaddtimer" "runtime.throw"
"runtime.doaddtimer" "(*runtime.puintptr).set"
"runtime.badTimer" "runtime.throw"
"runtime.siftupTimer" "runtime.badTimer"
"runtime.siftupTimer" "runtime.badTimer"
"runtime.doaddtimer" "runtime.siftupTimer"
"runtime.doaddtimer" "(*runtime/internal/atomic.Int64).Store"
"runtime.doaddtimer" "(*runtime/internal/atomic.Uint32).Add"
"runtime.moveTimers" "runtime.doaddtimer"
"runtime.moveTimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.moveTimers" "runtime.badTimer"
"runtime.moveTimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.moveTimers" "runtime.doaddtimer"
"runtime.moveTimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.moveTimers" "runtime.badTimer"
"runtime.moveTimers" "runtime.osyield"
"runtime.moveTimers" "runtime.badTimer"
"runtime.moveTimers" "runtime.badTimer"
"runtime.moveTimers" "runtime.badTimer"
"(*runtime.p).destroy" "runtime.moveTimers"
"(*runtime.p).destroy" "(*runtime/internal/atomic.Uint32).Store"
"(*runtime.p).destroy" "(*runtime/internal/atomic.Uint32).Store"
"(*runtime.p).destroy" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.p).destroy" "runtime.unlock"
"(*runtime.p).destroy" "runtime.unlock"
"(*runtime.p).destroy" "runtime.wbBufFlush1"
"(*runtime.p).destroy" "(*runtime.gcWork).dispose"
"(*runtime.p).destroy" "runtime.systemstack"
"runtime.freemcache" "runtime.systemstack"
"(*runtime.p).destroy" "runtime.freemcache"
"(*runtime.gList).pop" "(runtime.guintptr).ptr"
"runtime.gfpurge" "(*runtime.gList).pop"
"runtime.gfpurge" "runtime.lock"
"(*runtime.gList).pushAll" "(*runtime.gQueue).empty"
"(*runtime.gList).pushAll" "(runtime.guintptr).ptr"
"runtime.gfpurge" "(*runtime.gList).pushAll"
"runtime.gfpurge" "(*runtime.gList).pushAll"
"runtime.gfpurge" "runtime.unlock"
"runtime.gfpurge" "(*runtime.gList).empty"
"runtime.gfpurge" "(*runtime.gQueue).push"
"runtime.gfpurge" "(*runtime.gQueue).push"
"(*runtime.p).destroy" "runtime.gfpurge"
"(*runtime.p).destroy" "runtime.traceProcFree"
"(*runtime.p).destroy" "runtime.getg"
"(*runtime.p).destroy" "(runtime.puintptr).ptr"
"(*runtime.p).destroy" "(*runtime.puintptr).set"
"runtime.racectxend" "runtime.throw"
"(*runtime.p).destroy" "runtime.racectxend"
"(*runtime.p).destroy" "(*runtime.puintptr).set"
"runtime.raceprocdestroy" "runtime.throw"
"(*runtime.p).destroy" "runtime.raceprocdestroy"
"runtime.procresize" "(*runtime.p).destroy"
"runtime.procresize" "runtime.lock"
"runtime.procresize" "runtime.unlock"
"runtime.procresize" "(runtime.puintptr).ptr"
"(*runtime.randomOrder).reset" "runtime.gcd"
"runtime.procresize" "(*runtime.randomOrder).reset"
"runtime.procresize" "runtime/internal/atomic.Store"
"runtime.procresize" "runtime.runqempty"
"runtime.procresize" "runtime.pidleput"
"runtime.procresize" "runtime.mget"
"runtime.procresize" "(*runtime.muintptr).set"
"runtime.procresize" "(*runtime.puintptr).set"
"(*runtime.gcCPULimiterState).resetCapacity" "(*runtime.gcCPULimiterState).tryLock"
"(*runtime.gcCPULimiterState).resetCapacity" "runtime.throw"
"(*runtime.gcCPULimiterState).resetCapacity" "(*runtime.gcCPULimiterState).updateLocked"
"(*runtime.gcCPULimiterState).resetCapacity" "(*runtime/internal/atomic.Bool).Store"
"(*runtime.gcCPULimiterState).resetCapacity" "(*runtime/internal/atomic.Uint32).Store"
"(*runtime.gcCPULimiterState).resetCapacity" "(*runtime.gcCPULimiterState).unlock"
"(*runtime.gcCPULimiterState).resetCapacity" "(*runtime/internal/atomic.Bool).Store"
"runtime.procresize" "(*runtime.gcCPULimiterState).resetCapacity"
"runtime.startTheWorldWithSema" "runtime.procresize"
"runtime.startTheWorldWithSema" "(*runtime/internal/atomic.Bool).Store"
"runtime.startTheWorldWithSema" "(*runtime/internal/atomic.Bool).Load"
"runtime.startTheWorldWithSema" "(*runtime/internal/atomic.Bool).Store"
"runtime.startTheWorldWithSema" "runtime.notewakeup"
"runtime.startTheWorldWithSema" "runtime.unlock"
"runtime.startTheWorldWithSema" "runtime.worldStarted"
"runtime.startTheWorldWithSema" "(runtime.puintptr).ptr"
"runtime.startTheWorldWithSema" "(runtime.muintptr).ptr"
"runtime.startTheWorldWithSema" "runtime.newm"
"runtime.startTheWorldWithSema" "runtime.throw"
"runtime.startTheWorldWithSema" "(*runtime.puintptr).set"
"runtime.startTheWorldWithSema" "runtime.notewakeup"
"runtime.startTheWorldWithSema" "runtime.nanotime"
"runtime.startTheWorldWithSema" "(runtime.stwReason).isGC"
"runtime.startTheWorldWithSema" "(*runtime.timeHistogram).record"
"runtime.startTheWorldWithSema" "runtime.traceAcquire"
"runtime.startTheWorldWithSema" "(runtime.traceLocker).ok"
"runtime.startTheWorldWithSema" "(*runtime.timeHistogram).record"
"(runtime.traceLocker).STWDone" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).STWDone" "(runtime.traceEventWriter).commit"
"runtime.startTheWorldWithSema" "(runtime.traceLocker).STWDone"
"runtime.startTheWorldWithSema" "runtime.traceRelease"
"runtime.startTheWorldWithSema" "runtime.wakep"
"runtime.startTheWorldWithSema" "runtime.releasem"
"runtime.gcStart$3" "runtime.startTheWorldWithSema"
"runtime.gcStart$3" "(*runtime.gcCPULimiterState).finishGCTransition"
"runtime.tryRecordGoroutineProfile" "runtime.gcStart$3"
"runtime.tryRecordGoroutineProfile" "go/types.computeInterfaceTypeSet$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Named).expandUnderlying$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_setsockopt_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_write_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_fdopendir_trampoline"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"runtime.tryRecordGoroutineProfile" "runtime.chanrecv$1"
"runtime.tryRecordGoroutineProfile" "(*fmt.ss).Token$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_lseek_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.SetFinalizer$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_pwrite_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_sendto_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_getrlimit_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_execve_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_dup2_trampoline"
"runtime.tryRecordGoroutineProfile" "internal/poll.runtime_pollServerInit"
"runtime.tryRecordGoroutineProfile" "runtime.throw$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.subster).typ$2"
"runtime.tryRecordGoroutineProfile" "runtime.asyncPreempt"
"runtime.tryRecordGoroutineProfile" "syscall.libc_recvfrom_trampoline"
"runtime.gcResetMarkState" "runtime.forEachG"
"runtime.gcResetMarkState" "runtime.lock"
"runtime.gcResetMarkState" "runtime.unlock"
"runtime.gcResetMarkState" "(runtime.arenaIdx).l1"
"runtime.gcResetMarkState" "(runtime.arenaIdx).l2"
"runtime.gcResetMarkState" "(*runtime/internal/atomic.Uint64).Load"
"runtime.tryRecordGoroutineProfile" "runtime.gcResetMarkState"
"(*go/types.Checker).typeDecl$1" "go/types.asNamed"
"(*go/types.Checker).validType0" "go/types.Unalias"
"(*go/types.Checker).validType0" "(*go/types.Checker).validType0"
"(*go/types.Checker).validType0" "(*go/types.Checker).validType0"
"(*go/types.Checker).validType0" "(*go/types.Checker).validType0"
"(*go/types.Checker).validType0" "(*go/types.Checker).validType0"
"(*go/types.Checker).validType0" "(*go/types.instanceLookup).lookup"
"(*go/types.Checker).validType0" "(*go/types.Named).Underlying"
"(*go/types.Checker).validType0" "go/types.isValid"
"(*go/types.Checker).validType0" "go/types.Identical"
"(*go/types.Checker).validType0" "(*go/types.Named).Origin"
"(*go/types.Checker).validType0" "(*go/types.Checker).validType0"
"(*go/types.Checker).validType0" "go/types.assert"
"(*go/types.Checker).validType0" "(*go/types.Named).Origin"
"(*go/types.Checker).validType0" "go/types.assert"
"(*go/types.Checker).validType0" "(*go/types.Named).Origin"
"(*go/types.Checker).validType0" "go/types.Identical"
"(*go/types.Checker).validType0" "go/types.makeObjList"
"(*go/types.Checker).validType0" "(*go/types.Checker).cycleError"
"(*go/types.Checker).validType0" "(*go/types.instanceLookup).add"
"(*go/types.Checker).validType0" "(*go/types.Named).TypeParams"
"(*go/types.Checker).validType0" "(*go/types.TypeParamList).list"
"(*go/types.Checker).validType0" "(*go/types.Named).TypeArgs"
"(*go/types.Checker).validType0" "(*go/types.TypeList).At"
"(*go/types.Checker).validType0" "(*go/types.Checker).validType0"
"(*go/types.Checker).validType0" "(*go/types.Named).TypeArgs"
"(*go/types.Checker).validType0" "(*go/types.TypeList).Len"
"(*go/types.Checker).validType" "(*go/types.Checker).validType0"
"(*go/types.Checker).typeDecl$1" "(*go/types.Checker).validType"
"(*go/types.Checker).typeDecl$1" "(*go/types.Checker).isImportedConstraint"
"(*go/types.Checker).typeDecl$1" "(*go/types.Checker).verifyVersionf"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).typeDecl$1"
"(*go/types.Checker).funcBody" "(*go/ast.BlockStmt).Pos"
"(*go/types.Checker).funcBody" "(*go/types.Checker).trace"
"(*go/types.Checker).funcBody" "(*go/types.Checker).funcBody$1"
"(*go/types.Checker).stmtList" "go/types.trimTrailingEmptyStmts"
"(*go/types.Checker).stmt$1" "go/types.assert"
"(*go/types.Checker).stmt" "(*go/types.Checker).stmt$1"
"(*go/types.Checker).processDelayed" "go/types.assert"
"(*go/types.Checker).processDelayed" "runtime.init$1"
"(*go/types.Checker).processDelayed" "(log/slog.Value).Resolve$1"
"(*go/types.Checker).processDelayed" "time.initLocal"
"(*go/types.Checker).processDelayed" "time.FixedZone$1"
"(*go/types.Checker).processDelayed" "reflect.methodValueCall"
"(*go/types.Checker).processDelayed" "go/types.resolve$1"
"(*go/types.Checker).processDelayed" "runtime.goready$1"
"(*go/types.Checker).processDelayed" "runtime.gcStart$1"
"(*go/types.Checker).processDelayed" "runtime.gcStart$3"
"(*go/types.Checker).processDelayed" "go/types.computeInterfaceTypeSet$1"
"(*go/types.Checker).processDelayed" "(*go/types.Named).expandUnderlying$1"
"(*go/types.Checker).processDelayed" "runtime.chanrecv$1"
"(*go/types.Checker).processDelayed" "(*fmt.ss).Token$1"
"(*go/types.Checker).processDelayed" "syscall.libc_lseek_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_setsockopt_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_write_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_fdopendir_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_dup2_trampoline"
"(*go/types.Checker).processDelayed" "internal/poll.runtime_pollServerInit"
"(*go/types.Checker).processDelayed" "runtime.throw$1"
"(*go/types.Checker).processDelayed" "runtime.SetFinalizer$1"
"(*go/types.Checker).processDelayed" "syscall.libc_pwrite_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_sendto_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_getrlimit_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_execve_trampoline"
"(*go/types.Checker).processDelayed" "runtime.asyncPreempt"
"(*go/types.Checker).processDelayed" "syscall.libc_recvfrom_trampoline"
"(*go/types.Checker).processDelayed" "runtime.gcResetMarkState"
"(*go/types.Checker).processDelayed" "(*log/slog.Level).parse$1"
"(*go/types.Checker).processDelayed" "runtime.gcStart$2"
"(*go/types.Checker).processDelayed" "syscall.libc_read_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_recvmsg_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_open_trampoline"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/go/packages.goListDriver$1"
"(*go/types.Checker).processDelayed" "sync.poolCleanup"
"(*go/types.Checker).processDelayed" "syscall.libc_getsockopt_trampoline"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).objDecl$2"
"(*go/types.Checker).processDelayed" "syscall.libc_close_trampoline"
"(*internal/godebug.Setting).IncNonDefault" "(*sync.Once).Do"
"(*internal/godebug.Setting).IncNonDefault" "(*sync/atomic.Uint64).Add"
"(*go/types.Checker).processDelayed" "(*internal/godebug.Setting).IncNonDefault"
"(*go/types.Checker).processDelayed" "(*flag.FlagSet).defaultUsage"
"(*go/types.Checker).processDelayed" "syscall.libc_shutdown_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_munmap_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_dup_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_readdir_r_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_sendmsg_trampoline"
"(*go/types.Checker).processDelayed" "runtime.callers$1"
"(*go/types.Checker).processDelayed" "syscall.libc_fchdir_trampoline"
"(*go/types.Checker).processDelayed" "runtime.SetFinalizer$2"
"(*go/types.Checker).processDelayed" "syscall.libc_ftruncate_trampoline"
"(*go/types.Checker).processDelayed" "(*go/types.StdSizes).Alignof$1"
"(*go/types.Checker).processDelayed" "syscall.copyenv"
"(*go/types.Checker).processDelayed" "syscall.libc_fchown_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_fcntl_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_setrlimit_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_accept_trampoline"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/go/packages.goListDriver$2"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).objDecl$1"
"(*go/types.Checker).processDelayed" "syscall.libc_pread_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_getcwd_trampoline"
"(*go/types.Checker).processDelayed" "flag.commandLineUsage"
"(*go/types.Checker).processDelayed" "runtime.chansend$1"
"(*go/types.Checker).processDelayed" "runtime.asyncPreempt2"
"(*go/types.Checker).processDelayed" "runtime.fatalthrow$1"
"(*go/types.Checker).processDelayed" "syscall.libc_lstat_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_fstat_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_openat_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_closedir_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_stat_trampoline"
"(*go/types.Checker).processDelayed" "flag.init$1"
"(*go/types.Checker).processDelayed" "syscall.libc_mmap_trampoline"
"(*go/types.Checker).processDelayed" "(*go/types.gcSizes).Alignof$1"
"(*go/types.Checker).processDelayed" "syscall.libc_fchmod_trampoline"
"(*go/types.Checker).processDelayed" "runtime.fcntl_trampoline"
"(*go/types.Checker).processDelayed" "(*go/ast.CommentGroup).Pos"
"(*go/types.TypeParam).SetConstraint" "(*go/types.TypeParam).iface"
"(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1" "(*go/types.TypeParam).SetConstraint"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"(*go/types.Checker).processDelayed" "(*go/ast.Ident).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.BlockStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.ImportSpec).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).processDelayed" "(*go/types.Scope).Pos"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"(*go/types.Checker).processDelayed" "(go/types.atPos).Pos"
"(*go/types.Checker).processDelayed" "go/ast.fprint$1"
"(*go/types.Checker).processDelayed" "(*go/ast.Field).Pos"
"(*go/types.Checker).processDelayed" "(*go/types.object).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.TypeSpec).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.File).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.SelectorExpr).Pos"
"(*golang.org/x/tools/internal/gcimporter.iimporter).trace" "strings.Repeat"
"(*golang.org/x/tools/internal/gcimporter.iimporter).trace" "fmt.Printf"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType$1" "(*golang.org/x/tools/internal/gcimporter.iimporter).trace"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"(*go/types.Checker).processDelayed" "runtime.munmap_trampoline"
"(*go/types.Checker).processDelayed" "(*go/ast.Comment).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.FieldList).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.FuncDecl).Pos"
"(*go/types.Checker).processDelayed" "runtime.madvise_trampoline"
"(*go/types.Checker).processDelayed" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).processDelayed" "syscall.libc_ptrace_trampoline"
"(*go/types.Checker).processDelayed" "(*go/ast.Object).Pos"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).trace"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).trace"
"(*go/types.Checker).processDelayed" "fmt.Println"
"(*go/types.Checker).processDelayed" "(*internal/godebug.Setting).Value$1"
"(*go/types.Checker).processDelayed" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.IndexListExpr).Pos"
"runtime.casgstatus$1" "runtime.throw"
"(*go/types.Checker).processDelayed" "runtime.casgstatus$1"
"(*go/types.Checker).processDelayed" "runtime.osyield"
"(*go/types.Checker).processDelayed" "runtime.nanotime_trampoline"
"(*go/types.Checker).processDelayed" "runtime.cgoCheckTypedBlock$1"
"runtime.sweepone$1" "runtime.lock"
"runtime.sweepone$1" "(*runtime/internal/atomic.Uintptr).Load"
"runtime.sweepone$1" "(*runtime/internal/atomic.Uintptr).Load"
"runtime.printScavTrace" "runtime.assertLockHeld"
"runtime.printScavTrace" "runtime.printlock"
"runtime.printScavTrace" "(*runtime.sysMemStat).load"
"runtime.printScavTrace" "(*runtime.sysMemStat).load"
"runtime.heapRetained" "(*runtime.sysMemStat).load"
"runtime.heapRetained" "(*runtime.sysMemStat).load"
"runtime.printScavTrace" "runtime.heapRetained"
"runtime.printScavTrace" "runtime.printunlock"
"runtime.sweepone$1" "runtime.printScavTrace"
"runtime.sweepone$1" "(*runtime/internal/atomic.Uintptr).Add"
"runtime.sweepone$1" "(*runtime/internal/atomic.Uintptr).Add"
"runtime.sweepone$1" "runtime.unlock"
"(*go/types.Checker).processDelayed" "runtime.sweepone$1"
"(*go/types.Checker).processDelayed" "flag.isZeroValue$1"
"(*go/types.Checker).processDelayed" "go/types.computeInterfaceTypeSet$2$1"
"(*go/types.Checker).processDelayed" "regexp/syntax.parse$1"
"(*go/types.Checker).processDelayed" "syscall.libc_sysctl_trampoline"
"(*go/token.File).PositionFor" "fmt.Sprintf"
"(*go/token.File).PositionFor" "(*go/token.File).position"
"(*go/token.File).Position" "(*go/token.File).PositionFor"
"go/parser.ParseFile$1" "(*go/token.File).Position"
"go/parser.ParseFile$1" "(*go/scanner.ErrorList).Add"
"go/parser.ParseFile$1" "go/ast.NewScope"
"(go/scanner.ErrorList).Sort" "sort.Sort"
"go/parser.ParseFile$1" "(go/scanner.ErrorList).Sort"
"go/parser.ParseFile$1" "(go/scanner.ErrorList).Err"
"(*go/types.Checker).processDelayed" "go/parser.ParseFile$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/sync/errgroup.Group).Go$1"
"(*go/types.Checker).processDelayed" "context.WithCancel$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).validCycle$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).typeDecl$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).collectMethods$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).funcDecl$1"
"(*go/types.Checker).processDelayed" "(*go/types.subster).typ$2"
"(*go/types.Checker).processDelayed" "(*go/types.typeWriter).signature$1"
"(*go/types.Checker).processDelayed" "(*encoding/json.encodeState).marshal$1"
"(*go/types.Checker).processDelayed" "runtime.exit_trampoline"
"runtime.wbBufFlush$1" "runtime.getg"
"runtime.wbBufFlush$1" "(runtime.puintptr).ptr"
"runtime.wbBufFlush$1" "runtime.wbBufFlush1"
"(*go/types.Checker).processDelayed" "runtime.wbBufFlush$1"
"(*runtime.sweepLocked).sweep$1" "runtime.throw"
"(*runtime.sweepLocked).sweep$1" "runtime.lock"
"(*runtime.sweepLocked).sweep$1" "(*runtime.mSpanList).remove"
"(*runtime.sweepLocked).sweep$1" "(*runtime.mSpanList).insert"
"(*runtime.sweepLocked).sweep$1" "runtime.unlock"
"(*go/types.Checker).processDelayed" "(*runtime.sweepLocked).sweep$1"
"(*runtime.sweepLocked).sweep$2" "runtime.spanOf"
"(*runtime.sweepLocked).sweep$2" "(*runtime.mheap).freeManual"
"(*go/types.Checker).processDelayed" "(*runtime.sweepLocked).sweep$2"
"runtime.gcBgMarkWorker$2" "runtime.casGToWaiting"
"runtime.gcBgMarkWorker$2" "runtime.casgstatus"
"runtime.gcDrain" "runtime.throw"
"runtime.gcDrain" "runtime.getg"
"runtime.gcDrain" "(runtime.puintptr).ptr"
"runtime.gcDrain" "runtime/internal/atomic.Xadd"
"runtime.gcDrain" "(*runtime/internal/atomic.Bool).Load"
"runtime.markroot" "runtime.activeModules"
"runtime.markroot" "runtime.activeModules"
"runtime.markrootBlock" "runtime.throw"
"runtime.markrootBlock" "runtime.add"
"runtime.markrootBlock" "runtime.scanblock"
"runtime.markroot" "runtime.markrootBlock"
"runtime.markroot" "runtime.markrootBlock"
"runtime.markroot" "runtime.systemstack"
"runtime.markroot" "runtime/internal/atomic.Load"
"runtime.markroot" "runtime.scanblock"
"runtime.markrootSpans" "(runtime.arenaIdx).l1"
"runtime.markrootSpans" "(runtime.arenaIdx).l2"
"runtime.markrootSpans" "runtime/internal/atomic.Load8"
"runtime.markrootSpans" "(*runtime.mSpanStateBox).get"
"runtime.markrootSpans" "runtime.throw"
"runtime.markrootSpans" "runtime.throw"
"runtime.markrootSpans" "runtime.lock"
"runtime.markrootSpans" "runtime.unlock"
"runtime.markrootSpans" "(*runtime.mspan).base"
"runtime.markrootSpans" "(runtime.spanClass).noscan"
"runtime.markrootSpans" "runtime.scanobject"
"runtime.markrootSpans" "runtime.scanblock"
"runtime.markroot" "runtime.markrootSpans"
"runtime.markroot" "runtime.printlock"
"runtime.markroot" "runtime.throw"
"runtime.markroot" "runtime.readgstatus"
"runtime.markroot" "runtime.systemstack"
"runtime.markroot" "(*runtime/internal/atomic.Int64).Add"
"runtime.gcFlushBgCredit" "(*runtime.gQueue).empty"
"runtime.gcFlushBgCredit" "(*runtime/internal/atomic.Int64).Add"
"runtime.gcFlushBgCredit" "(*runtime/internal/atomic.Float64).Load"
"runtime.gcFlushBgCredit" "runtime.lock"
"runtime.gcFlushBgCredit" "(*runtime.gQueue).pop"
"runtime.gcFlushBgCredit" "(*runtime.gQueue).empty"
"runtime.gcFlushBgCredit" "runtime.ready"
"runtime.gcFlushBgCredit" "(*runtime.gQueue).pushBack"
"runtime.gcFlushBgCredit" "(*runtime/internal/atomic.Float64).Load"
"runtime.gcFlushBgCredit" "(*runtime/internal/atomic.Int64).Add"
"runtime.gcFlushBgCredit" "runtime.unlock"
"runtime.markroot" "runtime.gcFlushBgCredit"
"runtime.gcDrain" "runtime.markroot"
"runtime.gcDrain" "runtime.pollWork"
"runtime.gcDrain" "runtime.pollFractionalWorkerExit"
"runtime.gcDrain" "(*runtime/internal/atomic.Bool).Load"
"(*runtime.gcWork).balance" "runtime.putfull"
"(*runtime.gcWork).balance" "runtime.getempty"
"runtime.handoff" "runtime.getempty"
"runtime.handoff" "runtime.memmove"
"runtime.handoff" "runtime.putfull"
"(*runtime.gcWork).balance" "runtime.handoff"
"(*runtime.gcWork).balance" "(*runtime.gcControllerState).enlistWorker"
"runtime.gcDrain" "(*runtime.gcWork).balance"
"runtime.gcDrain" "(*runtime.gcWork).tryGetFast"
"(*runtime.gcWork).tryGet" "(*runtime.gcWork).init"
"(*runtime.gcWork).tryGet" "runtime.trygetfull"
"(*runtime.gcWork).tryGet" "runtime.putempty"
"runtime.gcDrain" "(*runtime.gcWork).tryGet"
"runtime.gcDrain" "runtime.wbBufFlush"
"runtime.gcDrain" "(*runtime.gcWork).tryGet"
"runtime.gcDrain" "runtime.scanobject"
"runtime.gcDrain" "(*runtime/internal/atomic.Int64).Add"
"runtime.gcDrain" "runtime.gcFlushBgCredit"
"runtime.gcDrain" "runtime.pollWork"
"runtime.gcDrain" "runtime.pollFractionalWorkerExit"
"runtime.gcDrain" "(*runtime/internal/atomic.Int64).Add"
"runtime.gcDrain" "runtime.gcFlushBgCredit"
"runtime.gcDrain" "(*go/types.Checker).implements$1"
"runtime.gcDrain" "(*go/types.Checker).implements$1"
"runtime.gcDrain" "(*runtime.mheap).allocSpan$1"
"runtime.gcDrain" "(*runtime.mheap).allocSpan$1"
"runtime.gcDrainMarkWorkerDedicated" "runtime.gcDrain"
"runtime.gcBgMarkWorker$2" "runtime.gcDrainMarkWorkerDedicated"
"runtime.gcDrainMarkWorkerFractional" "runtime.gcDrain"
"runtime.gcBgMarkWorker$2" "runtime.gcDrainMarkWorkerFractional"
"runtime.runqdrain" "(runtime.guintptr).ptr"
"runtime.runqdrain" "(*runtime.gQueue).pushBack"
"runtime.runqdrain" "(*runtime.guintptr).cas"
"runtime.runqdrain" "runtime/internal/atomic.LoadAcq"
"runtime.runqdrain" "runtime/internal/atomic.CasRel"
"runtime.runqdrain" "(runtime.guintptr).ptr"
"runtime.runqdrain" "(*runtime.gQueue).pushBack"
"runtime.gcBgMarkWorker$2" "runtime.runqdrain"
"runtime.gcBgMarkWorker$2" "runtime.gcDrainMarkWorkerDedicated"
"runtime.gcBgMarkWorker$2" "runtime.lock"
"runtime.gcBgMarkWorker$2" "runtime.globrunqputbatch"
"runtime.gcBgMarkWorker$2" "runtime.unlock"
"runtime.gcDrainMarkWorkerIdle" "runtime.gcDrain"
"runtime.gcBgMarkWorker$2" "runtime.gcDrainMarkWorkerIdle"
"runtime.gcBgMarkWorker$2" "runtime.throw"
"(*go/types.Checker).processDelayed" "runtime.gcBgMarkWorker$2"
"runtime.mspinning" "runtime.getg"
"(*go/types.Checker).processDelayed" "runtime.mspinning"
"(*go/types.Checker).processDelayed" "reflect.embeddedIfaceMethStub"
"(*internal/godebug.Setting).register" "(*internal/godebug.Setting).Name"
"(*internal/godebug.Setting).register" "internal/godebug.registerMetric"
"(*go/types.Checker).processDelayed" "(*internal/godebug.Setting).register"
"runtime.persistentalloc1" "runtime.throw"
"runtime.persistentalloc1" "runtime.throw"
"runtime.persistentalloc1" "runtime.throw"
"runtime.persistentalloc1" "runtime.sysAlloc"
"runtime.persistentalloc1" "runtime.acquirem"
"runtime.persistentalloc1" "(runtime.puintptr).ptr"
"runtime.persistentalloc1" "runtime.alignUp"
"runtime.persistentalloc1" "runtime.lock"
"runtime.persistentalloc1" "runtime.sysAlloc"
"runtime.persistentalloc1" "(*runtime.notInHeap).add"
"runtime.persistentalloc1" "runtime.releasem"
"runtime.persistentalloc1" "runtime.unlock"
"runtime.persistentalloc1" "runtime.throw"
"runtime.persistentalloc1" "runtime/internal/atomic.Casuintptr"
"runtime.persistentalloc1" "runtime.alignUp"
"runtime.persistentalloc1" "runtime.unlock"
"runtime.persistentalloc1" "(*runtime.sysMemStat).add"
"runtime.persistentalloc1" "(*runtime.sysMemStat).add"
"runtime.persistentalloc$1" "runtime.persistentalloc1"
"(*go/types.Checker).processDelayed" "runtime.persistentalloc$1"
"(*log/slog.handleState).appendValue$1" "reflect.ValueOf"
"(*log/slog.handleState).appendValue$1" "(reflect.Value).Kind"
"(*log/slog.handleState).appendString" "(*log/slog/internal/buffer.Buffer).WriteByte"
"log/slog.appendEscapedJSONString" "unicode/utf8.DecodeRuneInString"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$2"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$1"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$1"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$1"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$1"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$1"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$2"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$1"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$1"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$2"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$2"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$2"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$2"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$1"
"log/slog.appendEscapedJSONString" "log/slog.appendEscapedJSONString$2"
"(*log/slog.handleState).appendString" "log/slog.appendEscapedJSONString"
"(*log/slog.handleState).appendString" "(*log/slog/internal/buffer.Buffer).WriteByte"
"log/slog.needsQuoting" "unicode/utf8.DecodeRuneInString"
"unicode.Is" "unicode.is16"
"unicode.Is" "unicode.is32"
"unicode.In" "unicode.Is"
"unicode.IsPrint" "unicode.In"
"log/slog.needsQuoting" "unicode.IsPrint"
"unicode.IsSpace" "unicode.isExcludingLatin"
"log/slog.needsQuoting" "unicode.IsSpace"
"(*log/slog.handleState).appendString" "log/slog.needsQuoting"
"strconv.AppendQuote" "strconv.appendQuotedWith"
"(*log/slog.handleState).appendString" "strconv.AppendQuote"
"(*log/slog.handleState).appendString" "(*log/slog/internal/buffer.Buffer).WriteString"
"(*log/slog.handleState).appendValue$1" "(*log/slog.handleState).appendString"
"(*log/slog.handleState).appendValue$1" "fmt.Sprintf"
"(*log/slog.handleState).appendValue$1" "(*log/slog.handleState).appendString"
"(*log/slog.handleState).appendValue$1" "(reflect.Value).IsNil"
"(*go/types.Checker).processDelayed" "(*log/slog.handleState).appendValue$1"
"(*go/types.Checker).processDelayed" "(*go/ast.GenDecl).Pos"
"(*golang.org/x/sync/errgroup.Group).Go$1$1" "(*golang.org/x/tools/go/packages.loader).loadPackage$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"(*golang.org/x/tools/go/packages.golistState).getGoVersion$1" "(*golang.org/x/tools/go/packages.golistState).cfgInvocation"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/gocommand.invLabels"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/event.Start"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_cond_init_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.StdSizes).Alignof$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_fcntl_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_setrlimit_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_accept_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).objDecl$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcBgMarkWorker$2"
"(*runtime.mLockProfile).captureStack$1" "(*runtime.unwinder).initAt"
"(*runtime.mLockProfile).captureStack$1" "runtime.tracebackPCs"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*runtime.mLockProfile).captureStack$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.usleep_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_chmod_trampoline"
"runtime.entersyscallblock$2" "runtime.throw"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.entersyscallblock$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.chansend$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.asyncPreempt2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_lstat_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "go/types.computeInterfaceTypeSet$2$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_cond_wait_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_openat_trampoline"
"regexp/syntax.parse" "regexp/syntax.parse$1"
"regexp/syntax.checkUTF8" "unicode/utf8.DecodeRuneInString"
"regexp/syntax.parse" "regexp/syntax.checkUTF8"
"regexp/syntax.parse" "regexp/syntax.literalRegexp"
"(*regexp/syntax.parser).maybeConcat" "(*regexp/syntax.parser).reuse"
"(*regexp/syntax.parser).concat" "(*regexp/syntax.parser).maybeConcat"
"(*regexp/syntax.parser).concat" "(*regexp/syntax.parser).newRegexp"
"(*regexp/syntax.parser).push" "(*regexp/syntax.parser).maybeConcat"
"(*regexp/syntax.parser).calcSize" "(*regexp/syntax.parser).calcSize"
"(*regexp/syntax.parser).calcSize" "(*regexp/syntax.parser).calcSize"
"(*regexp/syntax.parser).calcSize" "(*regexp/syntax.parser).calcSize"
"(*regexp/syntax.parser).calcSize" "(*regexp/syntax.parser).calcSize"
"(*regexp/syntax.parser).calcSize" "(*regexp/syntax.parser).calcSize"
"(*regexp/syntax.parser).checkSize" "(*regexp/syntax.parser).calcSize"
"(*regexp/syntax.parser).checkSize" "(*regexp/syntax.parser).checkSize"
"(*regexp/syntax.parser).checkLimits" "(*regexp/syntax.parser).checkSize"
"(*regexp/syntax.parser).calcHeight" "(*regexp/syntax.parser).calcHeight"
"(*regexp/syntax.parser).checkHeight" "(*regexp/syntax.parser).calcHeight"
"(*regexp/syntax.parser).checkHeight" "(*regexp/syntax.parser).checkHeight"
"(*regexp/syntax.parser).checkLimits" "(*regexp/syntax.parser).checkHeight"
"(*regexp/syntax.parser).push" "(*regexp/syntax.parser).checkLimits"
"(*regexp/syntax.parser).push" "(*regexp/syntax.parser).maybeConcat"
"(*regexp/syntax.parser).push" "(*regexp/syntax.parser).maybeConcat"
"(*regexp/syntax.parser).push" "unicode.SimpleFold"
"(*regexp/syntax.parser).push" "unicode.SimpleFold"
"(*regexp/syntax.parser).push" "unicode.SimpleFold"
"(*regexp/syntax.parser).push" "unicode.SimpleFold"
"(*regexp/syntax.parser).concat" "(*regexp/syntax.parser).push"
"(*regexp/syntax.parser).collapse" "(*regexp/syntax.parser).newRegexp"
"(*regexp/syntax.parser).collapse" "(*regexp/syntax.parser).reuse"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).leadingString"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).newRegexp"
"(*regexp/syntax.parser).removeLeadingString" "(*regexp/syntax.parser).removeLeadingString"
"(*regexp/syntax.parser).removeLeadingString" "(*regexp/syntax.parser).reuse"
"(*regexp/syntax.parser).removeLeadingString" "(*regexp/syntax.parser).reuse"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).removeLeadingString"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).checkLimits"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).collapse"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).newRegexp"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).leadingRegexp"
"(*regexp/syntax.parser).factor" "regexp/syntax.isCharClass"
"(*regexp/syntax.Regexp).Equal" "(*regexp/syntax.Regexp).Equal"
"(*regexp/syntax.Regexp).Equal" "(*regexp/syntax.Regexp).Equal"
"(*regexp/syntax.Regexp).Equal" "(*regexp/syntax.Regexp).Equal"
"(*regexp/syntax.Regexp).Equal" "(*regexp/syntax.Regexp).Equal"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.Regexp).Equal"
"(*regexp/syntax.parser).factor" "regexp/syntax.isCharClass"
"(*regexp/syntax.parser).removeLeadingRegexp" "(*regexp/syntax.parser).reuse"
"(*regexp/syntax.parser).removeLeadingRegexp" "(*regexp/syntax.parser).reuse"
"(*regexp/syntax.parser).removeLeadingRegexp" "(*regexp/syntax.parser).reuse"
"(*regexp/syntax.parser).removeLeadingRegexp" "(*regexp/syntax.parser).newRegexp"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).removeLeadingRegexp"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).checkLimits"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).collapse"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).newRegexp"
"(*regexp/syntax.parser).factor" "regexp/syntax.isCharClass"
"regexp/syntax.mergeCharClass" "regexp/syntax.matchRune"
"regexp/syntax.appendFoldedRange" "regexp/syntax.appendRange"
"regexp/syntax.appendFoldedRange" "regexp/syntax.appendRange"
"regexp/syntax.appendFoldedRange" "regexp/syntax.appendRange"
"regexp/syntax.appendFoldedRange" "regexp/syntax.appendRange"
"regexp/syntax.appendFoldedRange" "regexp/syntax.appendRange"
"regexp/syntax.appendFoldedRange" "unicode.SimpleFold"
"regexp/syntax.appendFoldedRange" "regexp/syntax.appendRange"
"regexp/syntax.appendFoldedRange" "unicode.SimpleFold"
"regexp/syntax.appendLiteral" "regexp/syntax.appendFoldedRange"
"regexp/syntax.appendLiteral" "regexp/syntax.appendRange"
"regexp/syntax.mergeCharClass" "regexp/syntax.appendLiteral"
"regexp/syntax.appendClass" "regexp/syntax.appendRange"
"regexp/syntax.mergeCharClass" "regexp/syntax.appendClass"
"regexp/syntax.mergeCharClass" "regexp/syntax.appendLiteral"
"regexp/syntax.mergeCharClass" "regexp/syntax.appendLiteral"
"(*regexp/syntax.parser).factor" "regexp/syntax.mergeCharClass"
"(*regexp/syntax.parser).factor" "(*regexp/syntax.parser).reuse"
"regexp/syntax.cleanClass" "sort.Sort"
"regexp/syntax.cleanAlt" "regexp/syntax.cleanClass"
"(*regexp/syntax.parser).factor" "regexp/syntax.cleanAlt"
"(*regexp/syntax.parser).collapse" "(*regexp/syntax.parser).factor"
"(*regexp/syntax.parser).collapse" "(*regexp/syntax.parser).reuse"
"(*regexp/syntax.parser).concat" "(*regexp/syntax.parser).collapse"
"(*regexp/syntax.parser).concat" "(*regexp/syntax.parser).push"
"regexp/syntax.parse" "(*regexp/syntax.parser).concat"
"(*regexp/syntax.parser).swapVerticalBar" "regexp/syntax.isCharClass"
"(*regexp/syntax.parser).swapVerticalBar" "regexp/syntax.isCharClass"
"(*regexp/syntax.parser).swapVerticalBar" "regexp/syntax.mergeCharClass"
"(*regexp/syntax.parser).swapVerticalBar" "(*regexp/syntax.parser).reuse"
"(*regexp/syntax.parser).swapVerticalBar" "regexp/syntax.cleanAlt"
"regexp/syntax.parse" "(*regexp/syntax.parser).swapVerticalBar"
"(*regexp/syntax.parser).parseVerticalBar" "(*regexp/syntax.parser).concat"
"(*regexp/syntax.parser).parseVerticalBar" "(*regexp/syntax.parser).swapVerticalBar"
"(*regexp/syntax.parser).op" "(*regexp/syntax.parser).newRegexp"
"(*regexp/syntax.parser).op" "(*regexp/syntax.parser).push"
"(*regexp/syntax.parser).parseVerticalBar" "(*regexp/syntax.parser).op"
"regexp/syntax.parse" "(*regexp/syntax.parser).parseVerticalBar"
"strings.IndexRune" "strings.IndexByte"
"strings.IndexRune" "unicode/utf8.ValidRune"
"strings.IndexRune" "strings.Index"
"(*regexp/syntax.parser).parsePerlFlags" "strings.IndexRune"
"(*regexp/syntax.parser).parsePerlFlags" "regexp/syntax.checkUTF8"
"(*regexp/syntax.parser).parsePerlFlags" "regexp/syntax.checkUTF8"
"regexp/syntax.isValidCaptureName" "regexp/syntax.isalnum"
"(*regexp/syntax.parser).parsePerlFlags" "regexp/syntax.isValidCaptureName"
"(*regexp/syntax.parser).parsePerlFlags" "(*regexp/syntax.parser).op"
"regexp/syntax.nextRune" "unicode/utf8.DecodeRuneInString"
"(*regexp/syntax.parser).parsePerlFlags" "regexp/syntax.nextRune"
"(*regexp/syntax.parser).parsePerlFlags" "(*regexp/syntax.parser).op"
"regexp/syntax.parse" "(*regexp/syntax.parser).parsePerlFlags"
"regexp/syntax.parse" "(*regexp/syntax.parser).op"
"(*regexp/syntax.parser).parseRightParen" "(*regexp/syntax.parser).concat"
"(*regexp/syntax.parser).parseRightParen" "(*regexp/syntax.parser).swapVerticalBar"
"(*regexp/syntax.parser).alternate" "regexp/syntax.cleanAlt"
"(*regexp/syntax.parser).alternate" "(*regexp/syntax.parser).newRegexp"
"(*regexp/syntax.parser).alternate" "(*regexp/syntax.parser).push"
"(*regexp/syntax.parser).alternate" "(*regexp/syntax.parser).collapse"
"(*regexp/syntax.parser).alternate" "(*regexp/syntax.parser).push"
"(*regexp/syntax.parser).parseRightParen" "(*regexp/syntax.parser).alternate"
"(*regexp/syntax.parser).parseRightParen" "(*regexp/syntax.parser).push"
"(*regexp/syntax.parser).parseRightParen" "(*regexp/syntax.parser).push"
"regexp/syntax.parse" "(*regexp/syntax.parser).parseRightParen"
"regexp/syntax.parse" "(*regexp/syntax.parser).op"
"regexp/syntax.parse" "(*regexp/syntax.parser).op"
"regexp/syntax.parse" "(*regexp/syntax.parser).op"
"regexp/syntax.parse" "(*regexp/syntax.parser).op"
"(*regexp/syntax.parser).parseClass" "(*regexp/syntax.parser).newRegexp"
"(*regexp/syntax.parser).parseClass" "regexp/syntax.cleanClass"
"(*regexp/syntax.parser).parseClass" "unicode/utf8.DecodeRuneInString"
"(*regexp/syntax.parser).parseNamedClass" "strings.Index"
"regexp/syntax.appendFoldedClass" "regexp/syntax.appendFoldedRange"
"(*regexp/syntax.parser).appendGroup" "regexp/syntax.appendFoldedClass"
"(*regexp/syntax.parser).appendGroup" "regexp/syntax.cleanClass"
"regexp/syntax.appendNegatedClass" "regexp/syntax.appendRange"
"regexp/syntax.appendNegatedClass" "regexp/syntax.appendRange"
"(*regexp/syntax.parser).appendGroup" "regexp/syntax.appendNegatedClass"
"(*regexp/syntax.parser).appendGroup" "regexp/syntax.appendClass"
"(*regexp/syntax.parser).appendGroup" "regexp/syntax.appendNegatedClass"
"(*regexp/syntax.parser).appendGroup" "regexp/syntax.appendClass"
"(*regexp/syntax.parser).parseNamedClass" "(*regexp/syntax.parser).appendGroup"
"(*regexp/syntax.parser).parseClass" "(*regexp/syntax.parser).parseNamedClass"
"(*regexp/syntax.parser).parseUnicodeClass" "regexp/syntax.nextRune"
"(*regexp/syntax.parser).parseUnicodeClass" "strings.IndexRune"
"(*regexp/syntax.parser).parseUnicodeClass" "regexp/syntax.checkUTF8"
"(*regexp/syntax.parser).parseUnicodeClass" "regexp/syntax.checkUTF8"
"(*regexp/syntax.parser).parseUnicodeClass" "regexp/syntax.unicodeTable"
"regexp/syntax.appendTable" "regexp/syntax.appendRange"
"regexp/syntax.appendTable" "regexp/syntax.appendRange"
"regexp/syntax.appendTable" "regexp/syntax.appendRange"
"regexp/syntax.appendTable" "regexp/syntax.appendRange"
"(*regexp/syntax.parser).parseUnicodeClass" "regexp/syntax.appendTable"
"(*regexp/syntax.parser).parseUnicodeClass" "regexp/syntax.appendTable"
"(*regexp/syntax.parser).parseUnicodeClass" "regexp/syntax.cleanClass"
"(*regexp/syntax.parser).parseUnicodeClass" "regexp/syntax.appendTable"
"regexp/syntax.appendNegatedTable" "regexp/syntax.appendRange"
"regexp/syntax.appendNegatedTable" "regexp/syntax.appendRange"
"regexp/syntax.appendNegatedTable" "regexp/syntax.appendRange"
"regexp/syntax.appendNegatedTable" "regexp/syntax.appendRange"
"regexp/syntax.appendNegatedTable" "regexp/syntax.appendRange"
"(*regexp/syntax.parser).parseUnicodeClass" "regexp/syntax.appendNegatedTable"
"(*regexp/syntax.parser).parseUnicodeClass" "regexp/syntax.appendClass"
"(*regexp/syntax.parser).parseUnicodeClass" "regexp/syntax.appendNegatedClass"
"(*regexp/syntax.parser).parseClass" "(*regexp/syntax.parser).parseUnicodeClass"
"(*regexp/syntax.parser).parsePerlClassEscape" "(*regexp/syntax.parser).appendGroup"
"(*regexp/syntax.parser).parseClass" "(*regexp/syntax.parser).parsePerlClassEscape"
"(*regexp/syntax.parser).parseEscape" "regexp/syntax.nextRune"
"(*regexp/syntax.parser).parseEscape" "regexp/syntax.nextRune"
"(*regexp/syntax.parser).parseEscape" "regexp/syntax.unhex"
"(*regexp/syntax.parser).parseEscape" "regexp/syntax.nextRune"
"(*regexp/syntax.parser).parseEscape" "regexp/syntax.nextRune"
"(*regexp/syntax.parser).parseEscape" "regexp/syntax.unhex"
"(*regexp/syntax.parser).parseEscape" "regexp/syntax.unhex"
"(*regexp/syntax.parser).parseEscape" "regexp/syntax.isalnum"
"(*regexp/syntax.parser).parseClassChar" "(*regexp/syntax.parser).parseEscape"
"(*regexp/syntax.parser).parseClassChar" "regexp/syntax.nextRune"
"(*regexp/syntax.parser).parseClass" "(*regexp/syntax.parser).parseClassChar"
"(*regexp/syntax.parser).parseClass" "(*regexp/syntax.parser).parseClassChar"
"(*regexp/syntax.parser).parseClass" "regexp/syntax.appendRange"
"(*regexp/syntax.parser).parseClass" "regexp/syntax.appendFoldedRange"
"(*regexp/syntax.parser).parseClass" "regexp/syntax.negateClass"
"(*regexp/syntax.parser).parseClass" "(*regexp/syntax.parser).push"
"regexp/syntax.parse" "(*regexp/syntax.parser).parseClass"
"regexp/syntax.parse" "(*regexp/syntax.parser).op"
"regexp/syntax.parse" "(*regexp/syntax.parser).op"
"(*regexp/syntax.parser).parseRepeat" "(*regexp/syntax.parser).parseInt"
"(*regexp/syntax.parser).parseRepeat" "(*regexp/syntax.parser).parseInt"
"regexp/syntax.parse" "(*regexp/syntax.parser).parseRepeat"
"(*regexp/syntax.parser).repeat" "(*regexp/syntax.parser).newRegexp"
"(*regexp/syntax.parser).repeat" "(*regexp/syntax.parser).checkLimits"
"regexp/syntax.repeatIsValid" "regexp/syntax.repeatIsValid"
"(*regexp/syntax.parser).repeat" "regexp/syntax.repeatIsValid"
"regexp/syntax.parse" "(*regexp/syntax.parser).repeat"
"(*regexp/syntax.parser).literal" "(*regexp/syntax.parser).newRegexp"
"regexp/syntax.minFoldRune" "unicode.SimpleFold"
"regexp/syntax.minFoldRune" "unicode.SimpleFold"
"(*regexp/syntax.parser).literal" "regexp/syntax.minFoldRune"
"(*regexp/syntax.parser).literal" "(*regexp/syntax.parser).push"
"regexp/syntax.parse" "(*regexp/syntax.parser).literal"
"regexp/syntax.parse" "(*regexp/syntax.parser).repeat"
"regexp/syntax.parse" "regexp/syntax.nextRune"
"regexp/syntax.parse" "(*regexp/syntax.parser).newRegexp"
"regexp/syntax.parse" "(*regexp/syntax.parser).op"
"regexp/syntax.parse" "(*regexp/syntax.parser).op"
"regexp/syntax.parse" "(*regexp/syntax.parser).op"
"regexp/syntax.parse" "strings.Cut"
"regexp/syntax.parse" "(*regexp/syntax.parser).op"
"regexp/syntax.parse" "regexp/syntax.nextRune"
"regexp/syntax.parse" "(*regexp/syntax.parser).literal"
"regexp/syntax.parse" "(*regexp/syntax.parser).parseUnicodeClass"
"regexp/syntax.parse" "(*regexp/syntax.parser).parsePerlClassEscape"
"regexp/syntax.parse" "(*regexp/syntax.parser).push"
"regexp/syntax.parse" "(*regexp/syntax.parser).push"
"regexp/syntax.parse" "(*regexp/syntax.parser).reuse"
"regexp/syntax.parse" "(*regexp/syntax.parser).parseEscape"
"regexp/syntax.parse" "(*regexp/syntax.parser).literal"
"regexp/syntax.parse" "(*regexp/syntax.parser).literal"
"regexp/syntax.parse" "(*regexp/syntax.parser).alternate"
"regexp/syntax.Parse" "regexp/syntax.parse"
"regexp.compile" "regexp/syntax.Parse"
"(*regexp/syntax.Regexp).MaxCap" "(*regexp/syntax.Regexp).MaxCap"
"regexp.compile" "(*regexp/syntax.Regexp).MaxCap"
"(*regexp/syntax.Regexp).CapNames" "(*regexp/syntax.Regexp).MaxCap"
"(*regexp/syntax.Regexp).capNames" "(*regexp/syntax.Regexp).capNames"
"(*regexp/syntax.Regexp).CapNames" "(*regexp/syntax.Regexp).capNames"
"regexp.compile" "(*regexp/syntax.Regexp).CapNames"
"(*regexp/syntax.Regexp).Simplify" "(*regexp/syntax.Regexp).Simplify"
"(*regexp/syntax.Regexp).Simplify" "regexp/syntax.simplify1"
"(*regexp/syntax.Regexp).Simplify" "(*regexp/syntax.Regexp).Simplify"
"(*regexp/syntax.Regexp).Simplify" "(*regexp/syntax.Regexp).Simplify"
"(*regexp/syntax.Regexp).Simplify" "regexp/syntax.simplify1"
"(*regexp/syntax.Regexp).Simplify" "regexp/syntax.simplify1"
"(*regexp/syntax.Regexp).Simplify" "regexp/syntax.simplify1"
"(*regexp/syntax.Regexp).Simplify" "regexp/syntax.simplify1"
"(*regexp/syntax.Regexp).Simplify" "regexp/syntax.simplify1"
"regexp.compile" "(*regexp/syntax.Regexp).Simplify"
"(*regexp/syntax.compiler).init" "(*regexp/syntax.compiler).inst"
"regexp/syntax.Compile" "(*regexp/syntax.compiler).init"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).fail"
"(*regexp/syntax.compiler).nop" "(*regexp/syntax.compiler).inst"
"(*regexp/syntax.compiler).nop" "regexp/syntax.makePatchList"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).nop"
"(*regexp/syntax.compiler).rune" "(*regexp/syntax.compiler).inst"
"(*regexp/syntax.compiler).rune" "regexp/syntax.makePatchList"
"(*regexp/syntax.compiler).rune" "unicode.SimpleFold"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).rune"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).nop"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).rune"
"(*regexp/syntax.compiler).cat" "(regexp/syntax.patchList).patch"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).cat"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).rune"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).rune"
"(*regexp/syntax.compiler).empty" "(*regexp/syntax.compiler).inst"
"(*regexp/syntax.compiler).empty" "regexp/syntax.makePatchList"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).empty"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).empty"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).empty"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).empty"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).empty"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).empty"
"(*regexp/syntax.compiler).cap" "(*regexp/syntax.compiler).inst"
"(*regexp/syntax.compiler).cap" "regexp/syntax.makePatchList"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).cap"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).compile"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).cap"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).cat"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).cat"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).compile"
"(*regexp/syntax.compiler).loop" "(*regexp/syntax.compiler).inst"
"(*regexp/syntax.compiler).loop" "regexp/syntax.makePatchList"
"(*regexp/syntax.compiler).loop" "(regexp/syntax.patchList).patch"
"(*regexp/syntax.compiler).loop" "regexp/syntax.makePatchList"
"(*regexp/syntax.compiler).plus" "(*regexp/syntax.compiler).loop"
"(*regexp/syntax.compiler).star" "(*regexp/syntax.compiler).plus"
"(*regexp/syntax.compiler).quest" "(*regexp/syntax.compiler).inst"
"(*regexp/syntax.compiler).quest" "regexp/syntax.makePatchList"
"(*regexp/syntax.compiler).quest" "(regexp/syntax.patchList).append"
"(*regexp/syntax.compiler).quest" "regexp/syntax.makePatchList"
"(*regexp/syntax.compiler).star" "(*regexp/syntax.compiler).quest"
"(*regexp/syntax.compiler).star" "(*regexp/syntax.compiler).loop"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).star"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).compile"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).plus"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).compile"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).quest"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).nop"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).compile"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).compile"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).cat"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).compile"
"(*regexp/syntax.compiler).alt" "(*regexp/syntax.compiler).inst"
"(*regexp/syntax.compiler).alt" "(regexp/syntax.patchList).append"
"(*regexp/syntax.compiler).compile" "(*regexp/syntax.compiler).alt"
"regexp/syntax.Compile" "(*regexp/syntax.compiler).compile"
"regexp/syntax.Compile" "(*regexp/syntax.compiler).inst"
"regexp/syntax.Compile" "(regexp/syntax.patchList).patch"
"regexp.compile" "regexp/syntax.Compile"
"regexp.compileOnePass" "regexp.onePassCopy"
"regexp.makeOnePass" "regexp.newQueue"
"regexp.makeOnePass" "regexp.newQueue"
"regexp.makeOnePass" "(*regexp.queueOnePass).clear"
"(*regexp.queueOnePass).insert" "(*regexp.queueOnePass).contains"
"(*regexp.queueOnePass).insert" "(*regexp.queueOnePass).insertNew"
"regexp.makeOnePass" "(*regexp.queueOnePass).insert"
"regexp.makeOnePass" "(*regexp.queueOnePass).clear"
"regexp.makeOnePass" "(*regexp.queueOnePass).next"
"regexp.makeOnePass$1" "(*regexp.queueOnePass).contains"
"regexp.makeOnePass$1" "(*regexp.queueOnePass).insert"
"regexp.makeOnePass$1" "regexp.makeOnePass$1"
"regexp.makeOnePass$1" "regexp.makeOnePass$1"
"regexp.makeOnePass$1" "regexp.makeOnePass$1"
"regexp.mergeRuneSets" "regexp.mergeRuneSets$1"
"regexp.mergeRuneSets" "regexp.mergeRuneSets$2"
"regexp.mergeRuneSets" "regexp.mergeRuneSets$2"
"regexp.mergeRuneSets" "regexp.mergeRuneSets$2"
"regexp.mergeRuneSets" "regexp.mergeRuneSets$2"
"regexp.makeOnePass$1" "regexp.mergeRuneSets"
"regexp.makeOnePass$1" "regexp.makeOnePass$1"
"regexp.makeOnePass$1" "(*regexp.queueOnePass).insert"
"regexp.makeOnePass$1" "unicode.SimpleFold"
"regexp.makeOnePass$1" "unicode.SimpleFold"
"regexp.makeOnePass$1" "sort.Sort"
"regexp.makeOnePass$1" "(*regexp.queueOnePass).insert"
"regexp.makeOnePass$1" "unicode.SimpleFold"
"regexp.makeOnePass$1" "unicode.SimpleFold"
"regexp.makeOnePass$1" "sort.Sort"
"regexp.makeOnePass$1" "(*regexp.queueOnePass).insert"
"regexp.makeOnePass$1" "(*regexp.queueOnePass).insert"
"regexp.makeOnePass" "regexp.makeOnePass$1"
"regexp.makeOnePass" "(*regexp.queueOnePass).empty"
"regexp.compileOnePass" "regexp.makeOnePass"
"regexp.compileOnePass" "regexp.cleanupOnePass"
"regexp.compile" "regexp.compileOnePass"
"regexp.compile" "(*regexp/syntax.Prog).StartCond"
"regexp.minInputLen" "regexp.minInputLen"
"regexp.minInputLen" "unicode/utf8.RuneLen"
"regexp.minInputLen" "regexp.minInputLen"
"regexp.minInputLen" "regexp.minInputLen"
"regexp.minInputLen" "regexp.minInputLen"
"regexp.minInputLen" "regexp.minInputLen"
"regexp.compile" "regexp.minInputLen"
"(*regexp/syntax.Prog).Prefix" "(*regexp/syntax.Prog).skipNop"
"(*regexp/syntax.Prog).Prefix" "(*regexp/syntax.Inst).op"
"(*regexp/syntax.Prog).Prefix" "(*strings.Builder).WriteRune"
"(*regexp/syntax.Prog).Prefix" "(*regexp/syntax.Prog).skipNop"
"(*regexp/syntax.Prog).Prefix" "(*strings.Builder).String"
"(*regexp/syntax.Prog).Prefix" "(*regexp/syntax.Inst).op"
"regexp.compile" "(*regexp/syntax.Prog).Prefix"
"regexp.maxBitStateLen" "regexp.shouldBacktrack"
"regexp.compile" "regexp.maxBitStateLen"
"regexp.onePassPrefix" "regexp.iop"
"regexp.onePassPrefix" "(*strings.Builder).WriteRune"
"regexp.onePassPrefix" "regexp.iop"
"regexp.onePassPrefix" "(*strings.Builder).String"
"regexp.compile" "regexp.onePassPrefix"
"regexp.compile" "unicode/utf8.DecodeRuneInString"
"regexp.Compile" "regexp.compile"
"regexp.MustCompile" "regexp.Compile"
"strconv.CanBackquote" "unicode/utf8.DecodeRuneInString"
"regexp.quote" "strconv.CanBackquote"
"regexp.quote" "strconv.Quote"
"regexp.MustCompile" "regexp.quote"
"regexp.MustCompile" "(*errors.errorString).Error"
"regexp.MustCompile" "(runtime.errorString).Error"
"regexp.MustCompile" "(go/scanner.ErrorList).Error"
"regexp.MustCompile" "(*io/fs.PathError).Error"
"regexp.MustCompile" "(syscall.Errno).Error"
"regexp.MustCompile" "(*encoding/json.UnmarshalTypeError).Error"
"regexp.MustCompile" "(context.deadlineExceededError).Error"
"regexp.MustCompile" "(*encoding/json.InvalidUnmarshalError).Error"
"regexp.MustCompile" "(*internal/poll.DeadlineExceededError).Error"
"regexp.MustCompile" "(*fmt.wrapError).Error"
"regexp.MustCompile" "(*fmt.wrapErrors).Error"
"regexp.MustCompile" "(runtime.plainError).Error"
"regexp.MustCompile" "(*go/build/constraint.SyntaxError).Error"
"regexp.MustCompile" "(*reflect.ValueError).Error"
"regexp.MustCompile" "(*strconv.NumError).Error"
"regexp.MustCompile" "(*time.ParseError).Error"
"regexp.MustCompile" "(internal/poll.errNetClosing).Error"
"regexp.MustCompile" "(*go/types.ArgumentError).Error"
"regexp.MustCompile" "(*os.SyscallError).Error"
"regexp.MustCompile" "(*encoding/json.UnsupportedValueError).Error"
"regexp.MustCompile" "(*encoding/json.UnsupportedTypeError).Error"
"regexp.MustCompile" "(time.fileSizeError).Error"
"regexp.MustCompile" "(*encoding/json.MarshalerError).Error"
"regexp.MustCompile" "(golang.org/x/tools/go/packages.Error).Error"
"regexp.MustCompile" "(math/big.ErrNaN).Error"
"regexp.MustCompile" "(go/types.Error).Error"
"regexp.MustCompile" "(runtime.errorAddressString).Error"
"regexp.MustCompile" "(*regexp/syntax.Error).Error"
"regexp.MustCompile" "(*runtime.TypeAssertionError).Error"
"regexp.MustCompile" "(*os/exec.Error).Error"
"regexp.MustCompile" "(*encoding/json.SyntaxError).Error"
"regexp.MustCompile" "(*internal/bisect.parseError).Error"
"regexp.MustCompile" "(*os/exec.ExitError).Error"
"regexp.MustCompile" "(os/exec.wrappedError).Error"
"regexp.MustCompile" "(go/scanner.Error).Error"
"regexp.MustCompile" "(encoding/base64.CorruptInputError).Error"
"regexp.MustCompile" "(*internal/reflectlite.ValueError).Error"
"(*internal/lazyregexp.Regexp).build" "regexp.MustCompile"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*internal/lazyregexp.Regexp).build"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "flag.init$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_mmap_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_fchmod_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.exit_trampoline"
"(*runtime.mheap).freeSpan$1" "runtime.getg"
"(*runtime.mheap).freeSpan$1" "(runtime.puintptr).ptr"
"(*runtime.mheap).freeSpan$1" "(*runtime.mspan).base"
"(*runtime.mheap).freeSpan$1" "runtime.pageTraceFree"
"(*runtime.mheap).freeSpan$1" "runtime.lock"
"(*runtime.mheap).freeSpan$1" "(*runtime.mspan).base"
"(*runtime.mheap).freeSpan$1" "runtime.msanfree"
"(*runtime.mheap).freeSpan$1" "(*runtime.mspan).base"
"(*runtime.mheap).freeSpan$1" "runtime.asanpoison"
"(*runtime.mheap).freeSpan$1" "(*runtime.mheap).freeSpanLocked"
"(*runtime.mheap).freeSpan$1" "runtime.unlock"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*runtime.mheap).freeSpan$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "time.initLocal"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "reflect.methodValueCall"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcStart$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcStart$3"
"os/exec.closeDescriptors" "(*internal/poll.FD).Close"
"os/exec.closeDescriptors" "(*os.File).Close"
"(*os/exec.Cmd).Start$1" "os/exec.closeDescriptors"
"(*os/exec.Cmd).Start$1" "os/exec.closeDescriptors"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*os/exec.Cmd).Start$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*context.cancelCtx).propagateCancel$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*runtime.sweepLocked).sweep$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.mspinning"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.chanrecv$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*fmt.ss).Token$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_lseek_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_setsockopt_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_write_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_fdopendir_trampoline"
"runtime.gcMarkDone$4" "runtime.startTheWorldWithSema"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcMarkDone$4"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "internal/poll.runtime_pollServerInit"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.SetFinalizer$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_pwrite_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_getrlimit_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_execve_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*runtime.sweepLocked).sweep$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.asyncPreempt"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcResetMarkState"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.subster).typ$2"
"runtime.tryRecordGoroutineProfileWB" "runtime.getg"
"runtime.tryRecordGoroutineProfileWB" "(runtime.puintptr).ptr"
"runtime.tryRecordGoroutineProfileWB" "runtime.throw"
"runtime.tryRecordGoroutineProfileWB" "runtime.tryRecordGoroutineProfile"
"runtime.exitsyscall$1" "runtime.tryRecordGoroutineProfileWB"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.exitsyscall$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*log/slog.Level).parse$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*internal/godebug.Setting).Value$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).funcDecl$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "reflect.embeddedIfaceMethStub"
"(*runtime.mheap).allocManual" "(runtime.spanAllocType).manual"
"(*runtime.mheap).allocManual" "runtime.throw"
"(*runtime.mheap).allocSpan" "runtime.getg"
"(*runtime.mheap).allocSpan" "(runtime.puintptr).ptr"
"(*runtime.mheap).allocSpan" "(*runtime.pageCache).empty"
"(*runtime.mheap).allocSpan" "runtime.lock"
"(*runtime.mheap).allocSpan" "runtime.lock"
"(*runtime.pageAlloc).allocToCache" "runtime.assertLockHeld"
"(*runtime.pageAlloc).allocToCache" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).allocToCache" "runtime.chunkIndex"
"(*runtime.pageAlloc).allocToCache" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).allocToCache" "runtime.chunkIndex"
"(*runtime.pageAlloc).allocToCache" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).allocToCache" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).allocToCache" "runtime.chunkPageIndex"
"(*runtime.pallocBits).find1" "runtime/internal/sys.TrailingZeros64"
"(*runtime.pallocBits).find" "(*runtime.pallocBits).find1"
"(*runtime.pallocBits).findSmallN" "runtime/internal/sys.TrailingZeros64"
"(*runtime.pallocBits).findSmallN" "runtime/internal/sys.TrailingZeros64"
"runtime.findBitRange64" "runtime/internal/sys.TrailingZeros64"
"(*runtime.pallocBits).findSmallN" "runtime.findBitRange64"
"(*runtime.pallocBits).findSmallN" "runtime/internal/sys.LeadingZeros64"
"(*runtime.pallocBits).find" "(*runtime.pallocBits).findSmallN"
"(*runtime.pallocBits).findLargeN" "runtime/internal/sys.TrailingZeros64"
"(*runtime.pallocBits).findLargeN" "runtime/internal/sys.LeadingZeros64"
"(*runtime.pallocBits).findLargeN" "runtime/internal/sys.TrailingZeros64"
"(*runtime.pallocBits).findLargeN" "runtime/internal/sys.LeadingZeros64"
"(*runtime.pallocBits).find" "(*runtime.pallocBits).findLargeN"
"(*runtime.pageAlloc).allocToCache" "(*runtime.pallocBits).find"
"(*runtime.pageAlloc).allocToCache" "runtime.chunkPageIndex"
"(*runtime.pallocBits).allocPages64" "(*runtime.pageBits).setBlock64"
"(*runtime.pageAlloc).allocToCache" "(*runtime.pallocBits).allocPages64"
"(*runtime.pageAlloc).allocToCache" "(*runtime.pageBits).clearBlock64"
"(*runtime.pageAlloc).allocToCache" "(*runtime.pageAlloc).update"
"(*runtime.pageAlloc).allocToCache" "runtime/internal/sys.OnesCount64"
"(*runtime.scavengeIndex).alloc" "(*runtime.atomicScavChunkData).load"
"(*runtime.scavChunkData).alloc" "runtime.throw"
"(*runtime.scavChunkData).alloc" "(*runtime.scavChunkFlags).setEmpty"
"(*runtime.scavengeIndex).alloc" "(*runtime.scavChunkData).alloc"
"(*runtime.scavengeIndex).alloc" "(*runtime.atomicScavChunkData).store"
"(*runtime.pageAlloc).allocToCache" "(*runtime.scavengeIndex).alloc"
"(*runtime.pageAlloc).find" "runtime.assertLockHeld"
"(*runtime.pageAlloc).find" "runtime.packPallocSum"
"(*runtime.pageAlloc).find" "runtime.offAddrToLevelIndex"
"(*runtime.pageAlloc).find" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).find" "(*runtime.pallocBits).find"
"(*runtime.pageAlloc).find" "runtime.levelIndexToOffAddr"
"(*runtime.pageAlloc).find$1" "(runtime.offAddr).lessEqual"
"(*runtime.pageAlloc).find$1" "(runtime.offAddr).add"
"(*runtime.pageAlloc).find$1" "(runtime.offAddr).add"
"(*runtime.pageAlloc).find$1" "(runtime.offAddr).lessThan"
"(*runtime.pageAlloc).find$1" "(runtime.offAddr).add"
"(*runtime.pageAlloc).find$1" "(runtime.offAddr).lessEqual"
"(*runtime.pageAlloc).find$1" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).find$1" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).find$1" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).find$1" "runtime.throw"
"(*runtime.pageAlloc).find$1" "(runtime.offAddr).lessThan"
"(*runtime.pageAlloc).find" "(*runtime.pageAlloc).find$1"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).start"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).max"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).end"
"(*runtime.pageAlloc).find" "runtime.levelIndexToOffAddr"
"(*runtime.pageAlloc).find" "(runtime.offAddr).add"
"(*runtime.pageAlloc).find" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).findMappedAddr" "runtime.assertLockHeld"
"(*runtime.pageAlloc).findMappedAddr" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).findMappedAddr" "runtime.arenaIndex"
"(*runtime.pageAlloc).findMappedAddr" "(runtime.offAddr).addr"
"(*runtime.addrRanges).findSucc" "(runtime.offAddr).addr"
"(runtime.addrRange).contains" "(runtime.offAddr).lessEqual"
"(runtime.addrRange).contains" "(runtime.offAddr).lessThan"
"(*runtime.addrRanges).findSucc" "(runtime.addrRange).contains"
"(*runtime.addrRanges).findSucc" "(runtime.offAddr).lessThan"
"(*runtime.addrRanges).findSucc" "(runtime.offAddr).lessThan"
"(*runtime.addrRanges).findAddrGreaterEqual" "(*runtime.addrRanges).findSucc"
"(*runtime.addrRanges).findAddrGreaterEqual" "(runtime.offAddr).addr"
"(*runtime.addrRanges).findAddrGreaterEqual" "(runtime.addrRange).contains"
"(*runtime.addrRanges).findAddrGreaterEqual" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).findMappedAddr" "(*runtime.addrRanges).findAddrGreaterEqual"
"(*runtime.pageAlloc).findMappedAddr" "(runtime.arenaIdx).l1"
"(*runtime.pageAlloc).findMappedAddr" "(runtime.arenaIdx).l2"
"(*runtime.pageAlloc).findMappedAddr" "(runtime.arenaIdx).l1"
"(*runtime.pageAlloc).find" "(*runtime.pageAlloc).findMappedAddr"
"(*runtime.pageAlloc).find" "runtime.maxSearchAddr"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).start"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).max"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).end"
"(*runtime.pageAlloc).find" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).start"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).max"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).end"
"(*runtime.pageAlloc).find" "runtime.throw"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).start"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).max"
"(*runtime.pageAlloc).find" "(runtime.pallocSum).end"
"(*runtime.pageAlloc).find" "runtime.throw"
"(*runtime.pageAlloc).find" "runtime.chunkBase"
"(*runtime.pageAlloc).find" "runtime.chunkBase"
"(*runtime.pageAlloc).find" "runtime.chunkBase"
"(*runtime.pageAlloc).find" "(*runtime.pageAlloc).find$1"
"(*runtime.pageAlloc).find" "(*runtime.pageAlloc).findMappedAddr"
"(*runtime.pageAlloc).allocToCache" "(*runtime.pageAlloc).find"
"(*runtime.pageAlloc).allocToCache" "runtime.throw"
"(*runtime.pageAlloc).allocToCache" "runtime.chunkBase"
"(*runtime.pageAlloc).allocToCache" "runtime.alignDown"
"(*runtime.pallocBits).pages64" "(*runtime.pageBits).block64"
"(*runtime.pageAlloc).allocToCache" "(*runtime.pallocBits).pages64"
"(*runtime.pageAlloc).allocToCache" "(*runtime.pageBits).block64"
"(*runtime.pageAlloc).allocToCache" "runtime.maxSearchAddr"
"(*runtime.pageAlloc).allocToCache" "runtime.chunkIndex"
"(*runtime.pageAlloc).allocToCache" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).allocToCache" "runtime.alignDown"
"(*runtime.pageAlloc).allocToCache" "runtime.chunkPageIndex"
"(*runtime.pageAlloc).allocToCache" "(*runtime.pallocBits).pages64"
"(*runtime.pageAlloc).allocToCache" "runtime.chunkPageIndex"
"(*runtime.pageAlloc).allocToCache" "(*runtime.pageBits).block64"
"(*runtime.mheap).allocSpan" "(*runtime.pageAlloc).allocToCache"
"(*runtime.mheap).allocSpan" "runtime.unlock"
"(*runtime.pageCache).alloc" "runtime/internal/sys.TrailingZeros64"
"(*runtime.pageCache).allocN" "runtime.findBitRange64"
"(*runtime.pageCache).allocN" "runtime/internal/sys.OnesCount64"
"(*runtime.pageCache).alloc" "(*runtime.pageCache).allocN"
"(*runtime.mheap).allocSpan" "(*runtime.pageCache).alloc"
"(*runtime.mheap).tryAllocMSpan" "runtime.getg"
"(*runtime.mheap).tryAllocMSpan" "(runtime.puintptr).ptr"
"(*runtime.mheap).allocSpan" "(*runtime.mheap).tryAllocMSpan"
"(*runtime.mheap).allocSpan" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.mheap).allocSpan" "(*runtime.gcCPULimiterState).limiting"
"(*runtime.mheap).allocSpan" "(*runtime.pageAlloc).find"
"(*runtime.mheap).grow" "runtime.assertLockHeld"
"(*runtime.mheap).grow" "runtime.alignUp"
"(*runtime.mheap).grow" "runtime.alignUp"
"(*runtime.mheap).sysAlloc" "runtime.assertLockHeld"
"(*runtime.mheap).sysAlloc" "runtime.alignUp"
"(*runtime.linearAlloc).alloc" "runtime.alignUp"
"(*runtime.linearAlloc).alloc" "runtime.alignUp"
"runtime.sysMap" "(*runtime.sysMemStat).add"
"runtime.sysMapOS" "runtime.mmap"
"runtime.sysMapOS" "runtime.throw"
"runtime.sysMapOS" "runtime.throw"
"runtime.sysMap" "runtime.sysMapOS"
"(*runtime.linearAlloc).alloc" "runtime.sysMap"
"runtime.sysUsed" "(*runtime/internal/atomic.Uint64).Add"
"runtime.madvise" "internal/abi.FuncPCABI0"
"runtime.madvise" "runtime.libcCall"
"runtime.madvise" "runtime.KeepAlive"
"runtime.sysUsedOS" "runtime.madvise"
"runtime.sysUsed" "runtime.sysUsedOS"
"(*runtime.linearAlloc).alloc" "runtime.sysUsed"
"(*runtime.mheap).sysAlloc" "(*runtime.linearAlloc).alloc"
"(*runtime.mheap).sysAlloc" "runtime.arenaIndex"
"(*runtime.mheap).sysAlloc" "runtime.arenaIndex"
"runtime.sysReserveOS" "runtime.mmap"
"runtime.sysReserve" "runtime.sysReserveOS"
"(*runtime.mheap).sysAlloc" "runtime.sysReserve"
"runtime.munmap" "internal/abi.FuncPCABI0"
"runtime.munmap" "runtime.libcCall"
"runtime.munmap" "runtime.KeepAlive"
"runtime.sysFreeOS" "runtime.munmap"
"(*runtime.mheap).sysAlloc" "runtime.sysFreeOS"
"(*runtime.mheap).sysAlloc" "(*runtime.fixalloc).free"
"(*runtime.mheap).sysAlloc" "runtime.throw"
"runtime.sysReserveAligned" "runtime.sysReserve"
"runtime.sysReserveAligned" "runtime.sysFreeOS"
"runtime.sysReserveAligned" "runtime.alignUp"
"runtime.sysReserveAligned" "runtime.sysReserve"
"runtime.sysReserveAligned" "runtime.alignUp"
"runtime.sysReserveAligned" "runtime.sysFreeOS"
"runtime.sysReserveAligned" "runtime.sysFreeOS"
"runtime.sysReserveAligned" "runtime.throw"
"runtime.sysReserveAligned" "runtime.sysFreeOS"
"(*runtime.mheap).sysAlloc" "runtime.sysReserveAligned"
"(*runtime.mheap).sysAlloc" "(*runtime.fixalloc).alloc"
"(*runtime.mheap).sysAlloc" "(*runtime.fixalloc).alloc"
"(*runtime.mheap).sysAlloc" "runtime.arenaIndex"
"(*runtime.mheap).sysAlloc" "runtime.arenaIndex"
"(*runtime.mheap).sysAlloc" "runtime.throw"
"(*runtime.mheap).sysAlloc" "runtime.throw"
"(*runtime.mheap).sysAlloc" "runtime.arenaIndex"
"(*runtime.mheap).sysAlloc" "(runtime.arenaIdx).l1"
"(*runtime.mheap).sysAlloc" "runtime.sysAllocOS"
"(*runtime.mheap).sysAlloc" "(runtime.arenaIdx).l2"
"(*runtime.mheap).sysAlloc" "runtime.throw"
"runtime.sysHugePage" "runtime.sysHugePageOS"
"(*runtime.mheap).sysAlloc" "runtime.sysHugePage"
"(*runtime.mheap).sysAlloc" "(runtime.arenaIdx).l1"
"(*runtime.mheap).sysAlloc" "runtime/internal/atomic.StorepNoWB"
"runtime.sysNoHugePage" "runtime.sysNoHugePageOS"
"(*runtime.mheap).sysAlloc" "runtime.sysNoHugePage"
"(*runtime.mheap).sysAlloc" "runtime.throw"
"(*runtime.mheap).sysAlloc" "(*runtime.linearAlloc).alloc"
"(*runtime.mheap).sysAlloc" "runtime.persistentalloc"
"(*runtime.mheap).sysAlloc" "runtime.throw"
"(*runtime.mheap).sysAlloc" "(runtime.arenaIdx).l2"
"(*runtime.mheap).sysAlloc" "runtime/internal/atomic.StorepNoWB"
"(*runtime.mheap).sysAlloc" "runtime.persistentalloc"
"(*runtime.mheap).sysAlloc" "runtime.throw"
"runtime.racemapshadow" "runtime.throw"
"(*runtime.mheap).sysAlloc" "runtime.racemapshadow"
"(*runtime.mheap).grow" "(*runtime.mheap).sysAlloc"
"(*runtime.mheap).grow" "runtime.sysMap"
"(*runtime.mheap).grow" "(*runtime.consistentHeapStats).acquire"
"(*runtime.mheap).grow" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).grow" "(*runtime.consistentHeapStats).release"
"(*runtime.pageAlloc).grow" "runtime.assertLockHeld"
"(*runtime.pageAlloc).grow" "runtime.alignUp"
"(*runtime.pageAlloc).grow" "runtime.alignDown"
"(*runtime.pageAlloc).sysGrow" "runtime.throw"
"(*runtime.pageAlloc).sysGrow" "(*runtime.addrRanges).findSucc"
"runtime.makeAddrRange" "runtime.throw"
"(*runtime.pageAlloc).sysGrow" "runtime.makeAddrRange"
"(*runtime.pageAlloc).sysGrow$1" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).sysGrow$1" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).sysGrow$1" "runtime.addrsToSummaryRange"
"runtime.blockAlignSummaryRange" "runtime.alignDown"
"runtime.blockAlignSummaryRange" "runtime.alignUp"
"(*runtime.pageAlloc).sysGrow$1" "runtime.blockAlignSummaryRange"
"(*runtime.pageAlloc).sysGrow" "(*runtime.pageAlloc).sysGrow$1"
"(*runtime.scavengeIndex).sysGrow" "runtime.throw"
"(*runtime.scavengeIndex).sysGrow" "(*runtime/internal/atomic.Uintptr).Load"
"(*runtime.scavengeIndex).sysGrow" "(*runtime/internal/atomic.Uintptr).Load"
"(*runtime.scavengeIndex).sysGrow" "runtime.chunkIndex"
"(*runtime.scavengeIndex).sysGrow" "runtime.alignDown"
"(*runtime.scavengeIndex).sysGrow" "runtime.chunkIndex"
"(*runtime.scavengeIndex).sysGrow" "runtime.alignUp"
"(*runtime.scavengeIndex).sysGrow" "runtime.makeAddrRange"
"(*runtime.scavengeIndex).sysGrow" "runtime.makeAddrRange"
"(runtime.addrRange).subtract" "(runtime.offAddr).lessEqual"
"(runtime.addrRange).subtract" "(runtime.offAddr).lessThan"
"(runtime.addrRange).subtract" "(runtime.offAddr).lessEqual"
"(runtime.addrRange).subtract" "runtime.throw"
"(runtime.addrRange).subtract" "(runtime.offAddr).lessThan"
"(runtime.addrRange).subtract" "(runtime.offAddr).lessThan"
"(runtime.addrRange).subtract" "(runtime.offAddr).lessThan"
"(runtime.addrRange).subtract" "(runtime.offAddr).lessThan"
"(runtime.addrRange).subtract" "(runtime.offAddr).lessThan"
"(*runtime.scavengeIndex).sysGrow" "(runtime.addrRange).subtract"
"(runtime.addrRange).size" "(runtime.offAddr).lessThan"
"(runtime.addrRange).size" "(runtime.offAddr).diff"
"(*runtime.scavengeIndex).sysGrow" "(runtime.addrRange).size"
"(*runtime.scavengeIndex).sysGrow" "(runtime.offAddr).addr"
"(*runtime.scavengeIndex).sysGrow" "(runtime.addrRange).size"
"(*runtime.scavengeIndex).sysGrow" "runtime.sysMap"
"(*runtime.scavengeIndex).sysGrow" "(runtime.offAddr).addr"
"(*runtime.scavengeIndex).sysGrow" "(runtime.addrRange).size"
"(*runtime.scavengeIndex).sysGrow" "(runtime.addrRange).size"
"(*runtime.scavengeIndex).sysGrow" "runtime.sysUsed"
"(*runtime.scavengeIndex).sysGrow" "(runtime.addrRange).size"
"(*runtime.scavengeIndex).sysGrow" "(*runtime/internal/atomic.Uintptr).Store"
"(*runtime.scavengeIndex).sysGrow" "(*runtime/internal/atomic.Uintptr).Store"
"(*runtime.pageAlloc).sysGrow" "(*runtime.scavengeIndex).sysGrow"
"(*runtime.pageAlloc).sysGrow$2" "runtime.alignDown"
"(*runtime.pageAlloc).sysGrow$2" "runtime.alignUp"
"(*runtime.pageAlloc).sysGrow$2" "runtime.add"
"(*runtime.pageAlloc).sysGrow$2" "runtime.add"
"(*runtime.pageAlloc).sysGrow" "(*runtime.pageAlloc).sysGrow$2"
"(*runtime.pageAlloc).sysGrow$3" "(*runtime.pageAlloc).sysGrow$1"
"(*runtime.pageAlloc).sysGrow$3" "(*runtime.pageAlloc).sysGrow$2"
"(*runtime.pageAlloc).sysGrow" "(*runtime.pageAlloc).sysGrow$3"
"(*runtime.pageAlloc).sysGrow" "(runtime.addrRange).subtract"
"(*runtime.pageAlloc).sysGrow" "(*runtime.pageAlloc).sysGrow$3"
"(*runtime.pageAlloc).sysGrow" "(runtime.addrRange).subtract"
"(*runtime.pageAlloc).sysGrow" "(runtime.addrRange).size"
"(*runtime.pageAlloc).sysGrow" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).sysGrow" "(runtime.addrRange).size"
"(*runtime.pageAlloc).sysGrow" "runtime.sysMap"
"(*runtime.pageAlloc).sysGrow" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).sysGrow" "(runtime.addrRange).size"
"(*runtime.pageAlloc).sysGrow" "(runtime.addrRange).size"
"(*runtime.pageAlloc).sysGrow" "runtime.sysUsed"
"(*runtime.pageAlloc).sysGrow" "(runtime.addrRange).size"
"(*runtime.pageAlloc).grow" "(*runtime.pageAlloc).sysGrow"
"(*runtime.scavengeIndex).grow" "(*runtime/internal/atomic.Uintptr).Load"
"(*runtime.scavengeIndex).grow" "runtime.chunkIndex"
"(*runtime.scavengeIndex).grow" "(*runtime/internal/atomic.Uintptr).Store"
"(*runtime.scavengeIndex).grow" "(*runtime.scavengeIndex).sysGrow"
"(*runtime.pageAlloc).grow" "(*runtime.scavengeIndex).grow"
"(*runtime.pageAlloc).grow" "runtime.chunkIndex"
"(*runtime.pageAlloc).grow" "runtime.chunkIndex"
"(*runtime.pageAlloc).grow" "runtime.makeAddrRange"
"(*runtime.addrRanges).add" "(runtime.addrRange).size"
"(*runtime.addrRanges).add" "(runtime.offAddr).addr"
"(*runtime.addrRanges).add" "(runtime.offAddr).addr"
"(*runtime.addrRanges).add" "runtime.throw"
"(*runtime.addrRanges).add" "(runtime.offAddr).addr"
"(*runtime.addrRanges).add" "(*runtime.addrRanges).findSucc"
"(*runtime.addrRanges).add" "(runtime.offAddr).equal"
"(*runtime.addrRanges).add" "(runtime.offAddr).equal"
"(*runtime.addrRanges).add" "(runtime.addrRange).size"
"(*runtime.addrRanges).add" "runtime.persistentalloc"
"(*runtime.pageAlloc).grow" "(*runtime.addrRanges).add"
"(*runtime.pageAlloc).grow" "(runtime.offAddr).lessThan"
"(*runtime.pageAlloc).grow" "runtime.chunkIndex"
"(*runtime.pageAlloc).grow" "runtime.chunkIndex"
"(*runtime.pageAlloc).grow" "(runtime.chunkIdx).l1"
"(*runtime.pageAlloc).grow" "(*runtime.pageAlloc).update"
"(*runtime.pageAlloc).grow" "runtime.sysAlloc"
"(*runtime.pageAlloc).grow" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageBits).setRange" "(*runtime.pageBits).set"
"(*runtime.pageAlloc).grow" "(*runtime.pageBits).setRange"
"(*runtime.pageAlloc).grow" "runtime.throw"
"(*runtime.pageAlloc).grow" "(runtime.chunkIdx).l1"
"(*runtime.pageAlloc).grow" "runtime.sysHugePage"
"(*runtime.pageAlloc).grow" "runtime.sysNoHugePage"
"(*runtime.mheap).grow" "(*runtime.pageAlloc).grow"
"(*runtime.mheap).grow" "(*runtime.sysMemStat).load"
"(*runtime.mheap).grow" "(*runtime.sysMemStat).load"
"(*runtime.mheap).grow" "(*runtime.sysMemStat).load"
"(*runtime.mheap).grow" "runtime.alignUp"
"(*runtime.mheap).grow" "runtime.sysMap"
"(*runtime.mheap).grow" "(*runtime.consistentHeapStats).acquire"
"(*runtime.mheap).grow" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).grow" "(*runtime.consistentHeapStats).release"
"(*runtime.mheap).grow" "(*runtime.pageAlloc).grow"
"(*runtime.mheap).allocSpan" "(*runtime.mheap).grow"
"(*runtime.mheap).allocSpan" "runtime.alignUp"
"(*runtime.pageAlloc).allocRange" "runtime.assertLockHeld"
"(*runtime.pageAlloc).allocRange" "runtime.chunkIndex"
"(*runtime.pageAlloc).allocRange" "runtime.chunkIndex"
"(*runtime.pageAlloc).allocRange" "runtime.chunkPageIndex"
"(*runtime.pageAlloc).allocRange" "runtime.chunkPageIndex"
"(*runtime.pageAlloc).allocRange" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageBits).popcntRange" "runtime/internal/sys.OnesCount64"
"(*runtime.pageBits).popcntRange" "runtime/internal/sys.OnesCount64"
"(*runtime.pageBits).popcntRange" "runtime/internal/sys.OnesCount64"
"(*runtime.pageBits).popcntRange" "runtime/internal/sys.OnesCount64"
"(*runtime.pageAlloc).allocRange" "(*runtime.pageBits).popcntRange"
"(*runtime.pallocBits).allocRange" "(*runtime.pageBits).setRange"
"(*runtime.pallocData).allocRange" "(*runtime.pallocBits).allocRange"
"(*runtime.pallocData).allocRange" "(*runtime.pageBits).clearRange"
"(*runtime.pageAlloc).allocRange" "(*runtime.pallocData).allocRange"
"(*runtime.pageAlloc).allocRange" "(*runtime.scavengeIndex).alloc"
"(*runtime.pageAlloc).allocRange" "(*runtime.pageAlloc).update"
"(*runtime.pageAlloc).allocRange" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).allocRange" "(*runtime.pageBits).popcntRange"
"(*runtime.pageAlloc).allocRange" "(*runtime.pallocData).allocRange"
"(*runtime.pageAlloc).allocRange" "(*runtime.scavengeIndex).alloc"
"(*runtime.pageAlloc).allocRange" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).allocRange" "(*runtime.pageBits).popcntRange"
"(*runtime.pallocBits).allocAll" "(*runtime.pageBits).setAll"
"(*runtime.pallocData).allocAll" "(*runtime.pallocBits).allocAll"
"(*runtime.pallocData).allocAll" "(*runtime.pageBits).clearAll"
"(*runtime.pageAlloc).allocRange" "(*runtime.pallocData).allocAll"
"(*runtime.pageAlloc).allocRange" "(*runtime.scavengeIndex).alloc"
"(*runtime.pageAlloc).allocRange" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).allocRange" "(*runtime.pageBits).popcntRange"
"(*runtime.pageAlloc).allocRange" "(*runtime.pallocData).allocRange"
"(*runtime.pageAlloc).allocRange" "(*runtime.scavengeIndex).alloc"
"(*runtime.mheap).allocSpan" "(*runtime.pageAlloc).allocRange"
"(*runtime.mheap).allocSpan" "runtime.unlock"
"(*runtime.mheap).allocSpan" "(*runtime.pageAlloc).find"
"(*runtime.mheap).allocSpan" "runtime.throw"
"(*runtime.pageAlloc).alloc" "runtime.assertLockHeld"
"(*runtime.pageAlloc).alloc" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).alloc" "runtime.chunkIndex"
"(*runtime.pageAlloc).alloc" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).alloc" "runtime.chunkPageIndex"
"(*runtime.pageAlloc).alloc" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).alloc" "runtime.chunkIndex"
"(*runtime.pageAlloc).alloc" "(runtime.pallocSum).max"
"(*runtime.pageAlloc).alloc" "(*runtime.pageAlloc).find"
"(*runtime.pageAlloc).alloc" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).alloc" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).alloc" "runtime.chunkPageIndex"
"(*runtime.pageAlloc).alloc" "(*runtime.pallocBits).find"
"(*runtime.pageAlloc).alloc" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).alloc" "runtime.chunkPageIndex"
"(*runtime.pageAlloc).alloc" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).alloc" "runtime.throw"
"(*runtime.pageAlloc).alloc" "runtime.chunkBase"
"(*runtime.pageAlloc).alloc" "runtime.chunkBase"
"(*runtime.pageAlloc).alloc" "(*runtime.pageAlloc).allocRange"
"(*runtime.pageAlloc).alloc" "(runtime.offAddr).lessThan"
"(*runtime.pageAlloc).alloc" "runtime.maxSearchAddr"
"(*runtime.mheap).allocSpan" "(*runtime.pageAlloc).alloc"
"(*runtime.mheap).allocSpan" "(*runtime.mheap).grow"
"(*runtime.mheap).allocSpan" "runtime.unlock"
"(*runtime.mheap).allocSpan" "(*runtime.pageAlloc).alloc"
"(*runtime.mheap).allocSpan" "runtime.throw"
"(*runtime.mheap).allocMSpanLocked" "runtime.assertLockHeld"
"(*runtime.mheap).allocMSpanLocked" "runtime.getg"
"(*runtime.mheap).allocMSpanLocked" "(runtime.puintptr).ptr"
"(*runtime.mheap).allocMSpanLocked" "(*runtime.fixalloc).alloc"
"(*runtime.mheap).allocMSpanLocked" "(*runtime.fixalloc).alloc"
"(*runtime.mheap).allocSpan" "(*runtime.mheap).allocMSpanLocked"
"(*runtime.mheap).allocSpan" "runtime.unlock"
"(*runtime.mheap).allocSpan" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.mheap).allocSpan" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.mheap).allocSpan" "runtime.heapRetained"
"(*runtime.mheap).allocSpan" "runtime.nanotime"
"(*runtime.mheap).allocSpan" "(*runtime.limiterEvent).start"
"(*runtime.scavengeIndex).find" "(*runtime.atomicOffAddr).Load"
"(*runtime.scavengeIndex).find" "(runtime.offAddr).addr"
"(*runtime.scavengeIndex).find" "(*runtime/internal/atomic.Uintptr).Load"
"(*runtime.scavengeIndex).find" "runtime.chunkIndex"
"(*runtime.scavengeIndex).find" "(*runtime.atomicScavChunkData).load"
"(runtime.scavChunkData).shouldScavenge" "(*runtime.scavChunkFlags).isEmpty"
"(*runtime.scavengeIndex).find" "(runtime.scavChunkData).shouldScavenge"
"(*runtime.atomicOffAddr).Clear" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.atomicOffAddr).Clear" "(runtime.offAddr).addr"
"(*runtime/internal/atomic.Int64).CompareAndSwap" "runtime/internal/atomic.Casint64"
"(*runtime.atomicOffAddr).Clear" "(*runtime/internal/atomic.Int64).CompareAndSwap"
"(*runtime.scavengeIndex).find" "(*runtime.atomicOffAddr).Clear"
"(*runtime.scavengeIndex).find" "runtime.chunkPageIndex"
"(*runtime.scavengeIndex).find" "runtime.chunkBase"
"(*runtime.atomicOffAddr).StoreUnmark" "(*runtime/internal/atomic.Int64).CompareAndSwap"
"(*runtime.scavengeIndex).find" "(*runtime.atomicOffAddr).StoreUnmark"
"(*runtime.atomicOffAddr).StoreMin" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.atomicOffAddr).StoreMin" "(*runtime/internal/atomic.Int64).CompareAndSwap"
"(*runtime.scavengeIndex).find" "(*runtime.atomicOffAddr).StoreMin"
"(*runtime.pageAlloc).scavenge" "(*runtime.scavengeIndex).find"
"(*runtime.pageAlloc).scavenge" "runtime.systemstack"
"(*runtime.pageAlloc).scavenge" "runtime.pollWork"
"(*runtime.pageAlloc).scavenge" "runtime.pollFractionalWorkerExit"
"(*runtime.pageAlloc).scavenge" "(*go/types.Checker).implements$1"
"(*runtime.pageAlloc).scavenge" "(*runtime.mheap).allocSpan$1"
"(*runtime.mheap).allocSpan" "(*runtime.pageAlloc).scavenge"
"(*runtime.mheap).allocSpan" "(*runtime/internal/atomic.Uintptr).Add"
"(*runtime.mheap).allocSpan" "runtime.nanotime"
"(*runtime.mspan).init" "(*runtime.mSpanStateBox).set"
"(*runtime.mspan).init" "runtime.lockInit"
"(*runtime.mheap).initSpan" "(*runtime.mspan).init"
"(*runtime.mheap).allocNeedsZero" "runtime.arenaIndex"
"(*runtime.mheap).allocNeedsZero" "(runtime.arenaIdx).l1"
"(*runtime.mheap).allocNeedsZero" "(runtime.arenaIdx).l2"
"(*runtime.mheap).allocNeedsZero" "runtime/internal/atomic.Loaduintptr"
"(*runtime.mheap).allocNeedsZero" "runtime/internal/atomic.Casuintptr"
"(*runtime.mheap).allocNeedsZero" "runtime/internal/atomic.Loaduintptr"
"(*runtime.mheap).allocNeedsZero" "runtime.throw"
"(*runtime.mheap).initSpan" "(*runtime.mheap).allocNeedsZero"
"(*runtime.mheap).initSpan" "(runtime.spanAllocType).manual"
"(*runtime.mheap).initSpan" "(*runtime.mspan).base"
"(*runtime.mheap).initSpan" "(*runtime.mSpanStateBox).set"
"(*runtime.mheap).initSpan" "(*runtime.mspan).base"
"(*runtime.mheap).setSpans" "runtime.arenaIndex"
"(*runtime.mheap).setSpans" "(runtime.arenaIdx).l1"
"(*runtime.mheap).setSpans" "(runtime.arenaIdx).l2"
"(*runtime.mheap).setSpans" "runtime.arenaIndex"
"(*runtime.mheap).setSpans" "(runtime.arenaIdx).l1"
"(*runtime.mheap).setSpans" "(runtime.arenaIdx).l2"
"(*runtime.mheap).initSpan" "(*runtime.mheap).setSpans"
"(*runtime.mheap).initSpan" "(runtime.spanAllocType).manual"
"(*runtime.mheap).initSpan" "(runtime.spanClass).sizeclass"
"(*runtime.mheap).initSpan" "runtime.newMarkBits"
"runtime.newAllocBits" "runtime.newMarkBits"
"(*runtime.mheap).initSpan" "runtime.newAllocBits"
"(*runtime.mheap).initSpan" "runtime/internal/atomic.Store"
"(*runtime.mheap).initSpan" "(*runtime.mSpanStateBox).set"
"(*runtime.mheap).initSpan" "runtime.heapBitsInSpan"
"(*runtime.mheap).initSpan" "(runtime.spanClass).noscan"
"(*runtime.mheap).initSpan" "(*runtime.mspan).base"
"(*runtime.mheap).initSpan" "runtime.pageIndexOf"
"(*runtime.mheap).initSpan" "runtime/internal/atomic.Or8"
"(*runtime.mheap).initSpan" "(*runtime/internal/atomic.Uintptr).Add"
"(*runtime.mheap).initSpan" "runtime.publicationBarrier"
"(*runtime.mheap).allocSpan" "(*runtime.mheap).initSpan"
"(*runtime.mheap).allocSpan" "(*runtime.limiterEvent).stop"
"(*runtime.mheap).allocSpan" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.mheap).allocSpan" "runtime.sysUsed"
"(*runtime.mheap).allocSpan" "(*runtime.sysMemStat).add"
"(*runtime.mheap).allocSpan" "(*runtime.sysMemStat).add"
"(*runtime.mheap).allocSpan" "(*runtime.sysMemStat).add"
"(*runtime.mheap).allocSpan" "(*runtime.consistentHeapStats).acquire"
"(*runtime.mheap).allocSpan" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).allocSpan" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).allocSpan" "(*runtime.consistentHeapStats).release"
"(*runtime.mheap).allocSpan" "runtime.pageTraceAlloc"
"(*runtime.mheap).allocSpan" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).allocSpan" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).allocSpan" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).allocSpan" "runtime/internal/atomic.Xaddint64"
"(*runtime.mheap).allocManual" "(*runtime.mheap).allocSpan"
"runtime.heapSetType$1" "(*runtime.mheap).allocManual"
"runtime.heapSetType$1" "(*runtime.mspan).base"
"runtime.heapSetType$1" "runtime.memclrNoHeapPointers"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.heapSetType$1"
"runtime.entersyscallblock_handoff" "runtime.traceAcquire"
"runtime.entersyscallblock_handoff" "(runtime.traceLocker).ok"
"(runtime.traceLocker).GoSysCall" "runtime.tracefpunwindoff"
"(runtime.traceLocker).GoSysCall" "(runtime.puintptr).ptr"
"(runtime.traceLocker).GoSysCall" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).GoSysCall" "(*runtime.traceSchedResourceState).nextSeq"
"(runtime.traceLocker).GoSysCall" "(runtime.traceLocker).stack"
"(runtime.traceLocker).GoSysCall" "(runtime.traceEventWriter).commit"
"runtime.entersyscallblock_handoff" "(runtime.traceLocker).GoSysCall"
"runtime.entersyscallblock_handoff" "runtime.getg"
"runtime.entersyscallblock_handoff" "(runtime.puintptr).ptr"
"runtime.entersyscallblock_handoff" "(runtime.traceLocker).GoSysBlock"
"runtime.entersyscallblock_handoff" "runtime.traceRelease"
"runtime.entersyscallblock_handoff" "runtime.releasep"
"runtime.entersyscallblock_handoff" "runtime.handoffp"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.entersyscallblock_handoff"
"runtime.unreachableMethod" "runtime.throw"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.unreachableMethod"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_open_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/go/packages.goListDriver$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.sweepone$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "flag.isZeroValue$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "go/parser.ParseFile$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_getsockopt_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).objDecl$2"
"runtime.tracefree$1" "runtime.traceback"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.tracefree$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*internal/godebug.Setting).IncNonDefault"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*flag.FlagSet).defaultUsage"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_dup_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_ftruncate_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).validCycle$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.copyenv"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_fchown_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/go/packages.goListDriver$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.nanotime_trampoline"
"runtime.gcMarkDone$2" "runtime.stopTheWorldWithSema"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcMarkDone$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_pread_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_getcwd_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_sysctl_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).collectMethods$1"
"(*go/types.Checker).funcType$2" "go/types.deref"
"(*go/types.Checker).funcType$2" "go/types.Unalias"
"(*go/types.Checker).funcType$2" "go/types.isValid"
"(*go/types.Checker).funcType$2" "(*go/types.Named).TypeArgs"
"(*go/types.Checker).funcType$2" "(*go/types.Checker).errorf"
"(*go/types.Checker).funcType$2" "(*go/types.Signature).RecvTypeParams"
"(*go/types.Checker).funcType$2" "(*go/types.Checker).errorf"
"(*go/types.Checker).funcType$2" "(*go/types.Named).under"
"(*go/types.Checker).funcType$2" "go/types.unreachable"
"(*go/types.Checker).funcType$2" "(*go/types.Checker).errorf"
"(*go/types.Checker).funcType$2" "(*go/types.Checker).errorf"
"(*go/types.Checker).funcType$2" "(*go/types.Checker).errorf"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).funcType$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "regexp/syntax.parse$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/sync/errgroup.Group).Go$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.typeWriter).signature$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.wbBufFlush$1"
"(*context.cancelCtx).propagateCancel$1" "(*context.cancelCtx).Err"
"(*context.cancelCtx).propagateCancel$1" "(*context.cancelCtx).cancel"
"(*context.cancelCtx).propagateCancel$1" "(context.emptyCtx).Err"
"(*context.cancelCtx).propagateCancel$1" "context.Cause"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*context.cancelCtx).propagateCancel$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "flag.commandLineUsage"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.fatalthrow$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "context.WithCancel$1"
"runtime.entersyscallblock$1" "runtime.throw"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.entersyscallblock$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_fstat_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_closedir_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_stat_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.cgoCheckTypedBlock$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.persistentalloc$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.gcSizes).Alignof$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Named).expandUnderlying$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.osyield"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.init$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(log/slog.Value).Resolve$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "time.FixedZone$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "go/types.resolve$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.goready$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "go/types.computeInterfaceTypeSet$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.exitsyscall$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_dup2_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.throw$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_sendto_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_recvfrom_trampoline"
"runtime.saveg" "(*runtime.unwinder).initAt"
"runtime.saveg" "runtime.tracebackPCs"
"runtime.doRecordGoroutineProfile$1" "runtime.saveg"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.doRecordGoroutineProfile$1"
"runtime.cgoCheckPtrWrite$1" "runtime.throw"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.cgoCheckPtrWrite$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcStart$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).typeDecl$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_mutex_unlock_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "regexp.mergeRuneSets$1"
"runtime.tracealloc$1" "runtime.traceback"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.tracealloc$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_read_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_recvmsg_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*log/slog.handleState).appendValue$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_mutex_init_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_mutex_lock_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_cond_signal_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "sync.poolCleanup"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*internal/godebug.Setting).register"
"runtime._LostContendedRuntimeLock" "runtime._LostContendedRuntimeLock"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime._LostContendedRuntimeLock"
"runtime.gcMarkDone$3" "runtime.wbBufFlush1"
"runtime.gcMarkDone$3" "(*runtime.gcWork).empty"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcMarkDone$3"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_close_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*encoding/json.encodeState).marshal$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_shutdown_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_munmap_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_readdir_r_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_sendmsg_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.callers$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_fchdir_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.SetFinalizer$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.casgstatus$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).collectTypeParams$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gocommand.Runner).RunRaw"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"os.endsWithDot" "os.IsPathSeparator"
"os.removeAll" "os.endsWithDot"
"os.Remove" "os.ignoringEINTR"
"os.Remove" "os.ignoringEINTR"
"os.removeAll" "os.Remove"
"os.removeAll" "os.splitPath"
"os.removeAll" "os.Open"
"os.underlyingErrorIs" "os.underlyingError"
"os.underlyingErrorIs" "(syscall.Errno).Is"
"os.IsNotExist" "os.underlyingErrorIs"
"os.removeAll" "os.IsNotExist"
"os.removeAll" "os.IsNotExist"
"os.removeAll" "(*os.File).Close"
"(*internal/poll.fdMutex).incref" "sync/atomic.LoadUint64"
"(*internal/poll.fdMutex).incref" "sync/atomic.CompareAndSwapUint64"
"(*internal/poll.FD).incref" "(*internal/poll.fdMutex).incref"
"(*internal/poll.FD).incref" "internal/poll.errClosing"
"(*internal/poll.FD).SetBlocking" "(*internal/poll.FD).incref"
"(*internal/poll.FD).SetBlocking" "(*internal/poll.FD).decref"
"(*internal/poll.FD).SetBlocking" "sync/atomic.StoreUint32"
"syscall.fcntl" "internal/abi.FuncPCABI0"
"syscall.fcntl" "syscall.syscall"
"syscall.fcntl" "syscall.errnoErr"
"syscall.SetNonblock" "syscall.fcntl"
"syscall.SetNonblock" "syscall.fcntl"
"(*internal/poll.FD).SetBlocking" "syscall.SetNonblock"
"(*os.File).Fd" "(*internal/poll.FD).SetBlocking"
"os.removeAllFrom" "(*os.File).Fd"
"os.removeAllFrom" "os.ignoringEINTR"
"os.removeAllFrom" "os.IsNotExist"
"os.removeAllFrom" "os.ignoringEINTR"
"os.removeAllFrom" "os.IsNotExist"
"internal/syscall/unix.Openat" "internal/syscall/unix.openat"
"os.openFdAt" "internal/syscall/unix.Openat"
"syscall.CloseOnExec" "syscall.fcntl"
"os.openFdAt" "syscall.CloseOnExec"
"os.newFile" "os.ignoringEINTR"
"(*internal/poll.FD).Init" "(*internal/poll.SysFile).init"
"(*internal/poll.pollDesc).init" "(*sync.Once).Do"
"(*internal/poll.pollDesc).init" "internal/poll.runtime_pollOpen"
"(*internal/poll.pollDesc).init" "internal/poll.errnoErr"
"(*internal/poll.FD).Init" "(*internal/poll.pollDesc).init"
"os.newFile" "(*internal/poll.FD).Init"
"os.newFile" "syscall.SetNonblock"
"os.newFile" "syscall.SetNonblock"
"os.newFile" "runtime.SetFinalizer"
"os.openFdAt" "os.newFile"
"os.removeAllFrom" "os.openFdAt"
"os.removeAllFrom" "os.ignoringEINTR"
"os.removeAllFrom" "os.IsNotExist"
"(*internal/poll.FD).Dup" "(*internal/poll.FD).incref"
"(*internal/poll.FD).Dup" "(*internal/poll.FD).decref"
"internal/poll.DupCloseOnExec" "internal/syscall/unix.Fcntl"
"internal/poll.dupCloseOnExecOld" "(*sync.RWMutex).RLock"
"internal/poll.dupCloseOnExecOld" "(*sync.RWMutex).RUnlock"
"syscall.Dup" "internal/abi.FuncPCABI0"
"syscall.Dup" "syscall.syscall"
"syscall.Dup" "syscall.errnoErr"
"internal/poll.dupCloseOnExecOld" "syscall.Dup"
"internal/poll.dupCloseOnExecOld" "syscall.CloseOnExec"
"internal/poll.DupCloseOnExec" "internal/poll.dupCloseOnExecOld"
"internal/poll.DupCloseOnExec" "(*sync/atomic.Bool).Load"
"(*sync/atomic.Bool).Store" "sync/atomic.b32"
"(*sync/atomic.Bool).Store" "sync/atomic.StoreUint32"
"internal/poll.DupCloseOnExec" "(*sync/atomic.Bool).Store"
"(*internal/poll.FD).Dup" "internal/poll.DupCloseOnExec"
"(*internal/poll.FD).OpenDir" "(*internal/poll.FD).Dup"
"(*internal/poll.FD).OpenDir" "internal/poll.fdopendir"
"(*internal/poll.FD).OpenDir" "syscall.Close"
"(*os.File).readdir" "(*internal/poll.FD).OpenDir"
"(*os.File).readdir" "os.readdir_r"
"(*os.File).readdir" "runtime.KeepAlive"
"(*os.File).readdir" "os.dtToType"
"os.Lstat" "internal/testlog.Stat"
"os.lstatNolog" "os.ignoringEINTR"
"os.fillFileStatFromSys" "os.basename"
"os.fillFileStatFromSys" "(*syscall.Timespec).Unix"
"time.Unix" "time.unixTime"
"os.fillFileStatFromSys" "time.Unix"
"os.lstatNolog" "os.fillFileStatFromSys"
"os.Lstat" "os.lstatNolog"
"os.newUnixDirent" "os.Lstat"
"os.newUnixDirent" "(*os.fileStat).Mode"
"os.newUnixDirent" "(io/fs.FileMode).Type"
"(*os.File).readdir" "os.newUnixDirent"
"(*os.File).readdir" "os.IsNotExist"
"(*os.File).readdir" "os.Lstat"
"(*os.File).readdir" "os.IsNotExist"
"(*os.File).Readdirnames" "(*os.File).readdir"
"os.removeAllFrom" "(*os.File).Readdirnames"
"os.removeAllFrom" "(*os.File).Close"
"os.removeAllFrom" "os.IsNotExist"
"os.removeAllFrom" "os.removeAllFrom"
"os.removeAllFrom" "(*os.File).Close"
"os.removeAllFrom" "os.IsNotExist"
"os.removeAll" "os.removeAllFrom"
"os.RemoveAll" "os.removeAll"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$2" "os.RemoveAll"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"runtime.gcControllerCommit" "runtime.assertWorldStoppedOrLockHeld"
"(*runtime.activeSweep).isDone" "(*runtime/internal/atomic.Uint32).Load"
"runtime.isSweepDone" "(*runtime.activeSweep).isDone"
"runtime.gcControllerCommit" "runtime.isSweepDone"
"(*runtime.gcControllerState).commit" "runtime.assertWorldStoppedOrLockHeld"
"(*runtime.gcControllerState).commit" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.gcControllerState).commit" "(*runtime/internal/atomic.Int32).Load"
"(*runtime.gcControllerState).commit" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).commit" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.gcControllerState).commit" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).commit" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).commit" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.gcControllerState).commit" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).commit" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).commit" "(*runtime/internal/atomic.Uint64).Store"
"runtime.gcControllerCommit" "(*runtime.gcControllerState).commit"
"runtime.gcControllerCommit" "(*runtime.gcControllerState).revise"
"runtime.gcControllerCommit" "runtime.traceAcquire"
"runtime.gcControllerCommit" "(runtime.traceLocker).ok"
"(runtime.traceLocker).HeapGoal" "(*runtime.gcControllerState).heapGoal"
"(runtime.traceLocker).HeapGoal" "(runtime.traceLocker).eventWriter"
"(runtime.traceLocker).HeapGoal" "(runtime.traceEventWriter).commit"
"runtime.gcControllerCommit" "(runtime.traceLocker).HeapGoal"
"runtime.gcControllerCommit" "runtime.traceRelease"
"runtime.gcControllerCommit" "(*runtime.gcControllerState).trigger"
"runtime.gcPaceSweeper" "runtime.assertWorldStoppedOrLockHeld"
"runtime.gcPaceSweeper" "runtime.isSweepDone"
"runtime.gcPaceSweeper" "(*runtime/internal/atomic.Uint64).Load"
"runtime.gcPaceSweeper" "(*runtime/internal/atomic.Uint64).Load"
"runtime.gcPaceSweeper" "(*runtime/internal/atomic.Uintptr).Load"
"runtime.gcPaceSweeper" "(*runtime/internal/atomic.Uint64).Store"
"runtime.gcControllerCommit" "runtime.gcPaceSweeper"
"runtime.gcControllerCommit" "(*runtime/internal/atomic.Int64).Load"
"runtime.gcPaceScavenger" "runtime.assertWorldStoppedOrLockHeld"
"runtime.gcPaceScavenger" "(*runtime/internal/atomic.Uint64).Load"
"runtime.gcPaceScavenger" "(*runtime/internal/atomic.Uint64).Store"
"runtime.gcPaceScavenger" "(*runtime/internal/atomic.Uint64).Store"
"runtime.gcPaceScavenger" "(*runtime/internal/atomic.Uint64).Store"
"runtime.gcPaceScavenger" "runtime.heapRetained"
"runtime.gcPaceScavenger" "(*runtime/internal/atomic.Uint64).Store"
"runtime.gcPaceScavenger" "(*runtime/internal/atomic.Uint64).Store"
"runtime.gcControllerCommit" "runtime.gcPaceScavenger"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcControllerCommit"
"(*runtime.pageAlloc).enableChunkHugePages" "runtime.lock"
"(*runtime.pageAlloc).enableChunkHugePages" "runtime.unlock"
"(*runtime.addrRanges).cloneInto" "runtime.persistentalloc"
"(*runtime.pageAlloc).enableChunkHugePages" "(*runtime.addrRanges).cloneInto"
"(*runtime.pageAlloc).enableChunkHugePages" "runtime.unlock"
"(*runtime.pageAlloc).enableChunkHugePages" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).enableChunkHugePages" "runtime.chunkIndex"
"(*runtime.pageAlloc).enableChunkHugePages" "(runtime.chunkIdx).l1"
"(*runtime.pageAlloc).enableChunkHugePages" "(runtime.offAddr).addr"
"(*runtime.pageAlloc).enableChunkHugePages" "runtime.chunkIndex"
"(*runtime.pageAlloc).enableChunkHugePages" "(runtime.chunkIdx).l1"
"(*runtime.pageAlloc).enableChunkHugePages" "runtime.sysHugePage"
"(*runtime.mheap).enableMetadataHugePages" "(*runtime.pageAlloc).enableChunkHugePages"
"(*runtime.mheap).enableMetadataHugePages" "runtime.lock"
"(*runtime.mheap).enableMetadataHugePages" "runtime.unlock"
"(*runtime.mheap).enableMetadataHugePages" "runtime.unlock"
"(*runtime.mheap).enableMetadataHugePages" "runtime/internal/atomic.Loadp"
"(*runtime.mheap).enableMetadataHugePages" "runtime.sysHugePage"
"runtime.gcMarkTermination$5" "(*runtime.mheap).enableMetadataHugePages"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcMarkTermination$5"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_close_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*encoding/json.encodeState).marshal$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).typInternal$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.callers$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.read_trampoline"
"(*runtime.p).destroy$1" "(*runtime.fixalloc).free"
"(*runtime.p).destroy$1" "runtime.lock"
"(*runtime.pageCache).flush" "runtime.assertLockHeld"
"(*runtime.pageCache).flush" "(*runtime.pageCache).empty"
"(*runtime.pageCache).flush" "runtime.chunkIndex"
"(*runtime.pageCache).flush" "runtime.chunkPageIndex"
"(*runtime.pageCache).flush" "(runtime.offAddr).lessThan"
"(*runtime.pageCache).flush" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageCache).flush" "(*runtime.pallocBits).free1"
"(*runtime.pageCache).flush" "(*runtime.scavengeIndex).free"
"(*runtime.pageCache).flush" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageCache).flush" "(*runtime.pageBits).setRange"
"(*runtime.pageCache).flush" "(*runtime.pageAlloc).update"
"(*runtime.p).destroy$1" "(*runtime.pageCache).flush"
"(*runtime.p).destroy$1" "runtime.unlock"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*runtime.p).destroy$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_shutdown_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_munmap_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_readdir_r_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_sendmsg_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_fchdir_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.SetFinalizer$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.casgstatus$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).collectTypeParams$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).objDecl$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcBgMarkWorker$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_cond_init_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.raise_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.StdSizes).Alignof$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_fcntl_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_setrlimit_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_accept_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*runtime.mLockProfile).captureStack$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.usleep_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_chmod_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_cond_wait_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.entersyscallblock$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).rawExpr$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.chansend$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.asyncPreempt2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_lstat_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "go/types.computeInterfaceTypeSet$2$1"
"runtime.gcMarkTermination$3" "runtime.startTheWorldWithSema"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcMarkTermination$3"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_openat_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*internal/lazyregexp.Regexp).build"
"runtime.exitsyscallfast_pidle" "runtime.lock"
"runtime.exitsyscallfast_pidle" "runtime.pidleget"
"runtime.exitsyscallfast_pidle" "(*runtime/internal/atomic.Bool).Store"
"runtime.exitsyscallfast_pidle" "runtime.notewakeup"
"runtime.exitsyscallfast_pidle" "runtime.unlock"
"runtime.exitsyscallfast_pidle" "(*runtime/internal/atomic.Bool).Load"
"runtime.exitsyscallfast_pidle" "runtime.acquirep"
"runtime.exitsyscallfast$1" "runtime.exitsyscallfast_pidle"
"runtime.exitsyscallfast$1" "runtime.traceAcquire"
"runtime.exitsyscallfast$1" "(runtime.traceLocker).ok"
"runtime.exitsyscallfast$1" "(runtime.traceLocker).GoSysExit"
"runtime.exitsyscallfast$1" "runtime.traceRelease"
"runtime.exitsyscallfast$1" "runtime.osyield"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.exitsyscallfast$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*runtime.mheap).freeSpan$1"
"(*golang.org/x/tools/go/packages.golistState).getEnv" "(*sync.Once).Do"
"(*golang.org/x/tools/go/packages.golistState).mustGetEnv" "(*golang.org/x/tools/go/packages.golistState).getEnv"
"(*golang.org/x/tools/go/packages.golistState).mustGetEnv" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirsGOPATH" "(*golang.org/x/tools/go/packages.golistState).mustGetEnv"
"strings.explode" "unicode/utf8.RuneCountInString"
"strings.explode" "unicode/utf8.DecodeRuneInString"
"strings.genSplit" "strings.explode"
"strings.genSplit" "strings.Count"
"strings.genSplit" "strings.Index"
"strings.Split" "strings.genSplit"
"path/filepath.splitList" "strings.Split"
"path/filepath.SplitList" "path/filepath.splitList"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirsGOPATH" "path/filepath.SplitList"
"path/filepath.IsAbs" "strings.HasPrefix"
"path/filepath.unixAbs" "path/filepath.IsAbs"
"path/filepath.Clean" "path/filepath.volumeNameLen"
"path/filepath.Clean" "os.IsPathSeparator"
"path/filepath.FromSlash" "strings.ReplaceAll"
"path/filepath.Clean" "path/filepath.FromSlash"
"path/filepath.Clean" "os.IsPathSeparator"
"path/filepath.Clean" "os.IsPathSeparator"
"path/filepath.Clean" "(*path/filepath.lazybuf).append"
"path/filepath.Clean" "os.IsPathSeparator"
"path/filepath.Clean" "os.IsPathSeparator"
"path/filepath.Clean" "os.IsPathSeparator"
"path/filepath.Clean" "(*path/filepath.lazybuf).index"
"path/filepath.Clean" "os.IsPathSeparator"
"path/filepath.Clean" "(*path/filepath.lazybuf).append"
"path/filepath.Clean" "(*path/filepath.lazybuf).append"
"path/filepath.Clean" "(*path/filepath.lazybuf).append"
"path/filepath.Clean" "(*path/filepath.lazybuf).append"
"path/filepath.Clean" "(*path/filepath.lazybuf).append"
"path/filepath.Clean" "os.IsPathSeparator"
"path/filepath.Clean" "(*path/filepath.lazybuf).append"
"path/filepath.Clean" "path/filepath.postClean"
"path/filepath.Clean" "(*path/filepath.lazybuf).string"
"path/filepath.Clean" "path/filepath.FromSlash"
"path/filepath.unixAbs" "path/filepath.Clean"
"syscall.getcwd" "internal/abi.FuncPCABI0"
"syscall.getcwd" "syscall.syscall"
"syscall.getcwd" "syscall.errnoErr"
"syscall.Getwd" "syscall.getcwd"
"syscall.clen" "internal/bytealg.IndexByte"
"syscall.Getwd" "syscall.clen"
"os.Getwd" "syscall.Getwd"
"os.Getwd" "os.statNolog"
"internal/testlog.Getenv" "internal/testlog.Logger"
"os.Getenv" "internal/testlog.Getenv"
"os.Getenv" "syscall.Getenv"
"os.Getwd" "os.Getenv"
"os.Getwd" "os.statNolog"
"os.SameFile" "os.sameFile"
"os.Getwd" "os.SameFile"
"os.Getwd" "(*sync.Mutex).Lock"
"os.Getwd" "(*sync.Mutex).Unlock"
"os.Getwd" "syscall.Getwd"
"os.Getwd" "os.NewSyscallError"
"os.Getwd" "os.statNolog"
"os.Getwd" "os.statNolog"
"os.Getwd" "os.SameFile"
"os.Getwd" "os.SameFile"
"os.Getwd" "os.openFileNolog"
"os.Getwd" "(*os.File).Readdirnames"
"os.Getwd" "(*os.File).Close"
"os.Getwd" "os.lstatNolog"
"os.Getwd" "os.SameFile"
"(*internal/poll.FD).Fstat" "(*internal/poll.FD).incref"
"(*internal/poll.FD).Fstat" "(*internal/poll.FD).decref"
"internal/poll.ignoringEINTR" "(*internal/poll.FD).Fchmod$1"
"internal/poll.ignoringEINTR" "(*internal/poll.FD).Fchown$1"
"internal/poll.ignoringEINTR" "(*internal/poll.FD).Fstat$1"
"internal/poll.ignoringEINTR" "(*internal/poll.FD).Fsync$1"
"internal/poll.ignoringEINTR" "(*internal/poll.FD).Ftruncate$1"
"internal/poll.ignoringEINTR" "os.newFile$1"
"internal/poll.ignoringEINTR" "os.lstatNolog$1"
"internal/poll.ignoringEINTR" "os.statNolog$1"
"internal/poll.ignoringEINTR" "golang.org/x/tools/go/packages.callDriverOnChunks$1"
"internal/poll.ignoringEINTR" "os.chmod$1"
"internal/poll.ignoringEINTR" "os/exec.CommandContext$1"
"internal/poll.ignoringEINTR" "(*os/exec.Cmd).childStdin$1"
"internal/poll.ignoringEINTR" "(*os/exec.Cmd).writerDescriptor$1"
"internal/poll.ignoringEINTR" "os.Mkdir$1"
"internal/poll.ignoringEINTR" "os.Remove$1"
"internal/poll.ignoringEINTR" "os.Remove$2"
"internal/poll.ignoringEINTR" "os.removeAllFrom$1"
"internal/poll.ignoringEINTR" "os.removeAllFrom$2"
"internal/poll.ignoringEINTR" "os.removeAllFrom$3"
"(*internal/poll.FD).Fstat" "internal/poll.ignoringEINTR"
"(*os.File).Stat" "(*internal/poll.FD).Fstat"
"(*os.File).Stat" "os.fillFileStatFromSys"
"os.Getwd" "(*os.File).Stat"
"os.Getwd" "(*os.File).Close"
"os.Getwd" "os.SameFile"
"os.Getwd" "(*sync.Mutex).Lock"
"os.Getwd" "(*sync.Mutex).Unlock"
"path/filepath.unixAbs" "os.Getwd"
"path/filepath.join" "strings.Join"
"path/filepath.join" "path/filepath.Clean"
"path/filepath.Join" "path/filepath.join"
"path/filepath.unixAbs" "path/filepath.Join"
"path/filepath.abs" "path/filepath.unixAbs"
"path/filepath.Abs" "path/filepath.abs"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirsGOPATH" "path/filepath.Abs"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirsGOPATH" "path/filepath.Join"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2" "(*golang.org/x/tools/go/packages.golistState).determineRootDirsGOPATH"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"(*go/types.Checker).validVarType$1" "go/types.under"
"(*go/types.Checker).validVarType$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).validVarType$1" "go/types.computeInterfaceTypeSet"
"(*go/types.Checker).validVarType$1" "(*go/types._TypeSet).IsMethodSet"
"(*go/types.Checker).validVarType$1" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).validVarType$1" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).validVarType$1" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.MapType).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).validVarType$1" "(*go/ast.StructType).Pos"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).validVarType$1"
"runtime.wirep$2" "(runtime.muintptr).ptr"
"runtime.wirep$2" "runtime.throw"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.wirep$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "flag.init$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_mmap_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_fchmod_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.exit_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*os/exec.Cmd).Start$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*context.cancelCtx).propagateCancel$2"
"runtime.tracegc" "runtime.lock"
"runtime.tracegc" "runtime.getg"
"runtime.tracebackothers" "runtime.gotraceback"
"runtime.tracebackothers" "runtime.getg"
"runtime.tracebackothers" "runtime.goroutineheader"
"runtime.tracebackothers" "runtime.traceback"
"runtime.atomicAllG" "runtime/internal/atomic.Loaduintptr"
"runtime.atomicAllG" "runtime/internal/atomic.Loadp"
"runtime.forEachGRace" "runtime.atomicAllG"
"runtime.atomicAllGIndex" "runtime.add"
"runtime.forEachGRace" "runtime.atomicAllGIndex"
"runtime.schedtrace$1" "runtime.readgstatus"
"runtime.schedtrace$1" "(runtime.waitReason).String"
"runtime.schedtrace$1" "(runtime.muintptr).ptr"
"runtime.forEachGRace" "runtime.schedtrace$1"
"runtime.goyield_m" "runtime.traceAcquire"
"runtime.goyield_m" "(runtime.puintptr).ptr"
"runtime.goyield_m" "runtime.casgstatus"
"runtime.goyield_m" "(runtime.traceLocker).ok"
"(runtime.traceLocker).GoPreempt" "(runtime.traceLocker).GoStop"
"runtime.goyield_m" "(runtime.traceLocker).GoPreempt"
"runtime.goyield_m" "runtime.traceRelease"
"runtime.goyield_m" "runtime.dropg"
"runtime.goyield_m" "runtime.runqput"
"runtime.goyield_m" "runtime.schedule"
"runtime.forEachGRace" "runtime.goyield_m"
"runtime.traceExitingSyscall" "(*runtime/internal/atomic.Int32).Add"
"runtime.exitsyscall0" "runtime.traceExitingSyscall"
"runtime.exitsyscall0" "runtime.traceAcquire"
"runtime.exitsyscall0" "runtime.casgstatus"
"runtime.traceExitedSyscall" "(*runtime/internal/atomic.Int32).Add"
"runtime.exitsyscall0" "runtime.traceExitedSyscall"
"runtime.exitsyscall0" "(runtime.traceLocker).ok"
"runtime.exitsyscall0" "runtime.dropg"
"runtime.exitsyscall0" "runtime.lock"
"runtime.exitsyscall0" "runtime.schedEnabled"
"runtime.exitsyscall0" "(runtime.traceLocker).GoSysExit"
"runtime.exitsyscall0" "runtime.traceRelease"
"runtime.exitsyscall0" "runtime.pidleget"
"runtime.globrunqput" "runtime.assertLockHeld"
"runtime.globrunqput" "(*runtime.gQueue).pushBack"
"runtime.exitsyscall0" "runtime.globrunqput"
"runtime.exitsyscall0" "runtime.unlock"
"runtime.exitsyscall0" "(*runtime/internal/atomic.Bool).Load"
"runtime.exitsyscall0" "(*runtime/internal/atomic.Bool).Store"
"runtime.exitsyscall0" "runtime.notewakeup"
"runtime.exitsyscall0" "runtime.acquirep"
"runtime.exitsyscall0" "runtime.execute"
"runtime.exitsyscall0" "runtime.stoplockedm"
"runtime.exitsyscall0" "runtime.execute"
"runtime.stopm" "runtime.getg"
"runtime.stopm" "runtime.throw"
"runtime.stopm" "runtime.throw"
"runtime.stopm" "runtime.throw"
"runtime.stopm" "runtime.lock"
"runtime.mput" "runtime.assertLockHeld"
"runtime.mput" "(*runtime.muintptr).set"
"runtime.mput" "runtime.checkdead"
"runtime.stopm" "runtime.mput"
"runtime.stopm" "runtime.unlock"
"runtime.stopm" "runtime.mPark"
"runtime.stopm" "(runtime.puintptr).ptr"
"runtime.stopm" "runtime.acquirep"
"runtime.exitsyscall0" "runtime.stopm"
"runtime.exitsyscall0" "runtime.schedule"
"runtime.forEachGRace" "runtime.exitsyscall0"
"runtime.tracebackothers$1" "runtime.goroutineheader"
"runtime.tracebackothers$1" "runtime.getg"
"runtime.tracebackothers$1" "runtime.isSystemGoroutine"
"runtime.tracebackothers$1" "runtime.readgstatus"
"runtime.tracebackothers$1" "runtime.printcreatedby"
"runtime.tracebackothers$1" "runtime.traceback"
"runtime.tracebackothers$1" "runtime.readgstatus"
"runtime.forEachGRace" "runtime.tracebackothers$1"
"runtime.checkdead$1" "runtime.isSystemGoroutine"
"runtime.checkdead$1" "runtime.readgstatus"
"runtime.checkdead$1" "runtime.unlock"
"runtime.checkdead$1" "runtime.throw"
"runtime.forEachGRace" "runtime.checkdead$1"
"runtime.forEachGRace" "runtime.park_m"
"runtime.preemptPark" "runtime.readgstatus"
"runtime.preemptPark" "runtime.dumpgstatus"
"runtime.preemptPark" "runtime.throw"
"runtime.preemptPark" "runtime.findfunc"
"runtime.preemptPark" "(runtime.funcInfo).valid"
"runtime.casGToPreemptScan" "runtime.throw"
"runtime.casGToPreemptScan" "runtime.acquireLockRank"
"runtime.casGToPreemptScan" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.preemptPark" "runtime.casGToPreemptScan"
"runtime.preemptPark" "runtime.dropg"
"runtime.preemptPark" "runtime.traceAcquire"
"runtime.preemptPark" "(runtime.traceLocker).ok"
"runtime.preemptPark" "runtime.throw"
"runtime.preemptPark" "runtime.funcname"
"runtime.preemptPark" "runtime.throw"
"runtime.preemptPark" "(runtime.traceLocker).GoPark"
"runtime.casfrom_Gscanstatus" "runtime.dumpgstatus"
"runtime.casfrom_Gscanstatus" "runtime.throw"
"runtime.casfrom_Gscanstatus" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.casfrom_Gscanstatus" "runtime.dumpgstatus"
"runtime.casfrom_Gscanstatus" "runtime.throw"
"runtime.casfrom_Gscanstatus" "runtime.releaseLockRank"
"runtime.preemptPark" "runtime.casfrom_Gscanstatus"
"runtime.preemptPark" "(runtime.traceLocker).ok"
"runtime.preemptPark" "runtime.traceRelease"
"runtime.preemptPark" "runtime.schedule"
"runtime.forEachGRace" "runtime.preemptPark"
"runtime.goschedImpl" "runtime.traceAcquire"
"runtime.goschedImpl" "runtime.readgstatus"
"runtime.goschedImpl" "runtime.dumpgstatus"
"runtime.goschedImpl" "runtime.throw"
"runtime.goschedImpl" "runtime.casgstatus"
"runtime.goschedImpl" "(runtime.traceLocker).ok"
"runtime.goschedImpl" "runtime.dropg"
"runtime.goschedImpl" "runtime.lock"
"runtime.goschedImpl" "runtime.globrunqput"
"runtime.goschedImpl" "runtime.unlock"
"runtime.goschedImpl" "(runtime.traceLocker).GoPreempt"
"runtime.goschedImpl" "runtime.traceRelease"
"runtime.goschedImpl" "(runtime.traceLocker).GoSched"
"runtime.goschedImpl" "runtime.wakep"
"runtime.goschedImpl" "runtime.schedule"
"runtime.gopreempt_m" "runtime.goschedImpl"
"runtime.forEachGRace" "runtime.gopreempt_m"
"runtime.forEachGRace" "runtime.gcResetMarkState$1"
"runtime.gosched_m" "runtime.goschedImpl"
"runtime.forEachGRace" "runtime.gosched_m"
"runtime.canPreemptM" "(runtime.puintptr).ptr"
"runtime.goschedguarded_m" "runtime.canPreemptM"
"runtime.goschedguarded_m" "runtime.gogo"
"runtime.goschedguarded_m" "runtime.goschedImpl"
"runtime.forEachGRace" "runtime.goschedguarded_m"
"runtime.gcMarkRootCheck$1" "runtime.readgstatus"
"runtime.gcMarkRootCheck$1" "runtime.throw"
"runtime.forEachGRace" "runtime.gcMarkRootCheck$1"
"runtime.tracebackothers" "runtime.forEachGRace"
"runtime.tracegc" "runtime.tracebackothers"
"runtime.tracegc" "runtime.unlock"
"runtime.gcMark" "runtime.tracegc"
"runtime.gcMark" "runtime.throw"
"runtime.gcMarkRootCheck" "runtime.throw"
"runtime.gcMarkRootCheck" "runtime.forEachGRace"
"runtime.gcMark" "runtime.gcMarkRootCheck"
"runtime.gcMark" "runtime.wbBufFlush1"
"runtime.gcMark" "(*runtime.gcWork).empty"
"runtime.gcMark" "(*runtime.wbBuf).reset"
"runtime.gcMark" "runtime.printlock"
"runtime.gcMark" "(*runtime.gcWork).dispose"
"runtime.gcMark" "runtime.throw"
"(*runtime.gcControllerState).resetLive" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.gcControllerState).resetLive" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).resetLive" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.gcControllerState).resetLive" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).resetLive" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).resetLive" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.gcControllerState).resetLive" "runtime.traceAcquire"
"(*runtime.gcControllerState).resetLive" "(runtime.traceLocker).ok"
"(*runtime.gcControllerState).resetLive" "(runtime.traceLocker).HeapAlloc"
"(*runtime.gcControllerState).resetLive" "runtime.traceRelease"
"runtime.gcMark" "(*runtime.gcControllerState).resetLive"
"runtime.gcMarkTermination$1" "runtime.gcMark"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcMarkTermination$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "time.initLocal"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "reflect.methodValueCall"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcStart$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcStart$3"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_write_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_fdopendir_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*runtime.sweepLocked).sweep$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.mspinning"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.chanrecv$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*fmt.ss).Token$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_lseek_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_setsockopt_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).cfgInvocation"
"(*golang.org/x/tools/go/packages.golistState).getGoVersion" "(*sync.Once).Do"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).getGoVersion"
"os.tempDir" "os.Getenv"
"os.TempDir" "os.tempDir"
"os.MkdirTemp" "os.TempDir"
"os.prefixAndSuffix" "os.IsPathSeparator"
"os.prefixAndSuffix" "internal/bytealg.LastIndexByteString"
"os.MkdirTemp" "os.prefixAndSuffix"
"os.joinPath" "os.IsPathSeparator"
"os.MkdirTemp" "os.joinPath"
"os.nextRandom" "os.runtime_rand"
"os.nextRandom" "internal/itoa.Uitoa"
"os.MkdirTemp" "os.nextRandom"
"os.Mkdir" "os.fixLongPath"
"os.Mkdir" "os.ignoringEINTR"
"os.setStickyBit" "os.Stat"
"os.setStickyBit" "(*os.fileStat).Mode"
"os.chmod" "os.fixLongPath"
"os.chmod" "os.ignoringEINTR"
"os.Chmod" "os.chmod"
"os.setStickyBit" "os.Chmod"
"os.Mkdir" "os.setStickyBit"
"os.Mkdir" "os.Remove"
"os.MkdirTemp" "os.Mkdir"
"os.IsExist" "os.underlyingErrorIs"
"os.MkdirTemp" "os.IsExist"
"os.MkdirTemp" "os.IsNotExist"
"os.MkdirTemp" "os.Stat"
"os.MkdirTemp" "os.IsNotExist"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "os.MkdirTemp"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"path/filepath.ToSlash" "strings.ReplaceAll"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "path/filepath.ToSlash"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "strings.Split"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "strings.Join"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "fmt.Sprintf"
"os.CreateTemp" "os.TempDir"
"os.CreateTemp" "os.prefixAndSuffix"
"os.CreateTemp" "os.joinPath"
"os.CreateTemp" "os.nextRandom"
"os.CreateTemp" "os.OpenFile"
"os.CreateTemp" "os.IsExist"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "os.CreateTemp"
"encoding/json.newEncodeState" "(*sync.Pool).Get"
"encoding/json.newEncodeState" "(*bytes.Buffer).Reset"
"encoding/json.Marshal" "encoding/json.newEncodeState"
"encoding/json.Marshal" "(*sync.Pool).Put"
"(*encoding/json.encodeState).marshal" "(*encoding/json.encodeState).marshal$1"
"(*encoding/json.encodeState).marshal" "reflect.ValueOf"
"encoding/json.valueEncoder" "(reflect.Value).IsValid"
"encoding/json.valueEncoder" "(reflect.Value).Type"
"encoding/json.typeEncoder" "(*sync.Map).Load"
"encoding/json.typeEncoder" "(*sync.WaitGroup).Add"
"encoding/json.typeEncoder" "(*sync.Map).LoadOrStore"
"encoding/json.newTypeEncoder" "(*reflect.rtype).Kind"
"encoding/json.newTypeEncoder" "encoding/json.newTypeEncoder"
"encoding/json.newTypeEncoder" "encoding/json.newCondAddrEncoder"
"(*reflect.rtype).Implements" "(*reflect.rtype).Kind"
"(*reflect.rtype).Implements" "(*reflect.rtype).common"
"(*reflect.rtype).Implements" "(*reflect.rtype).common"
"(*reflect.rtype).Implements" "reflect.implements"
"encoding/json.newTypeEncoder" "(*reflect.rtype).Implements"
"reflect.PointerTo" "(*reflect.rtype).ptrTo"
"reflect.PointerTo" "reflect.toRType"
"encoding/json.newTypeEncoder" "reflect.PointerTo"
"encoding/json.newTypeEncoder" "(*reflect.rtype).Implements"
"encoding/json.newTypeEncoder" "(*reflect.rtype).Kind"
"encoding/json.newTypeEncoder" "encoding/json.newTypeEncoder"
"encoding/json.newTypeEncoder" "encoding/json.newCondAddrEncoder"
"encoding/json.newTypeEncoder" "(*reflect.rtype).Implements"
"encoding/json.newTypeEncoder" "reflect.PointerTo"
"encoding/json.newTypeEncoder" "(*reflect.rtype).Implements"
"encoding/json.newTypeEncoder" "(*reflect.rtype).Kind"
"encoding/json.cachedTypeFields" "(*sync.Map).Load"
"encoding/json.typeFields" "sort.Slice"
"encoding/json.typeFields" "(*reflect.rtype).NumField"
"encoding/json.typeFields" "(*reflect.rtype).Field"
"encoding/json.typeFields" "(*reflect.rtype).Kind"
"(reflect.StructTag).Lookup" "strconv.Unquote"
"(reflect.StructTag).Get" "(reflect.StructTag).Lookup"
"encoding/json.typeFields" "(reflect.StructTag).Get"
"encoding/json.typeFields" "(reflect.StructField).IsExported"
"encoding/json.typeFields" "(*reflect.rtype).Elem"
"encoding/json.typeFields" "(reflect.StructField).IsExported"
"encoding/json.typeFields" "(*reflect.rtype).Kind"
"encoding/json.parseTag" "strings.Cut"
"encoding/json.typeFields" "encoding/json.parseTag"
"strings.ContainsRune" "strings.IndexRune"
"encoding/json.isValidTag" "strings.ContainsRune"
"unicode.IsLetter" "unicode.isExcludingLatin"
"encoding/json.isValidTag" "unicode.IsLetter"
"unicode.IsDigit" "unicode.isExcludingLatin"
"encoding/json.isValidTag" "unicode.IsDigit"
"encoding/json.typeFields" "encoding/json.isValidTag"
"encoding/json.typeFields" "(*reflect.rtype).Name"
"encoding/json.typeFields" "(*reflect.rtype).Elem"
"(encoding/json.tagOptions).Contains" "strings.Cut"
"encoding/json.typeFields" "(encoding/json.tagOptions).Contains"
"encoding/json.typeFields" "(*reflect.rtype).Kind"
"encoding/json.typeFields" "(*reflect.rtype).Kind"
"encoding/json.typeFields" "(*reflect.rtype).Kind"
"encoding/json.typeFields" "(encoding/json.tagOptions).Contains"
"encoding/json.typeFields" "encoding/json.appendHTMLEscape"
"encoding/json.typeFields" "(*reflect.rtype).Name"
"encoding/json.typeFields" "sort.Sort"
"encoding/json.typeFields" "encoding/json.dominantField"
"encoding/json.typeByIndex" "(*reflect.rtype).Kind"
"encoding/json.typeByIndex" "(*reflect.rtype).Elem"
"encoding/json.typeByIndex" "(*reflect.rtype).Field"
"encoding/json.typeFields" "encoding/json.typeByIndex"
"encoding/json.typeFields" "encoding/json.typeEncoder"
"encoding/json.appendFoldedName" "unicode/utf8.DecodeRune"
"encoding/json.foldRune" "unicode.SimpleFold"
"encoding/json.appendFoldedName" "encoding/json.foldRune"
"encoding/json.appendFoldedName" "unicode/utf8.AppendRune"
"encoding/json.foldName" "encoding/json.appendFoldedName"
"encoding/json.typeFields" "encoding/json.foldName"
"encoding/json.typeFields" "encoding/json.foldName"
"encoding/json.cachedTypeFields" "encoding/json.typeFields"
"encoding/json.cachedTypeFields" "(*sync.Map).LoadOrStore"
"encoding/json.newStructEncoder" "encoding/json.cachedTypeFields"
"encoding/json.newTypeEncoder" "encoding/json.newStructEncoder"
"(*reflect.rtype).Key" "(*reflect.rtype).Kind"
"(*reflect.rtype).Key" "(*reflect.rtype).String"
"(*reflect.rtype).Key" "reflect.toType"
"encoding/json.newMapEncoder" "(*reflect.rtype).Key"
"encoding/json.newMapEncoder" "(*reflect.rtype).Kind"
"encoding/json.newMapEncoder" "(*reflect.rtype).Elem"
"encoding/json.newMapEncoder" "encoding/json.typeEncoder"
"encoding/json.newMapEncoder" "(*reflect.rtype).Key"
"encoding/json.newMapEncoder" "(*reflect.rtype).Implements"
"encoding/json.newTypeEncoder" "encoding/json.newMapEncoder"
"encoding/json.newSliceEncoder" "(*reflect.rtype).Elem"
"encoding/json.newSliceEncoder" "(*reflect.rtype).Kind"
"encoding/json.newSliceEncoder" "(*reflect.rtype).Elem"
"encoding/json.newSliceEncoder" "reflect.PointerTo"
"encoding/json.newSliceEncoder" "(*reflect.rtype).Implements"
"encoding/json.newArrayEncoder" "(*reflect.rtype).Elem"
"encoding/json.newArrayEncoder" "encoding/json.typeEncoder"
"encoding/json.newSliceEncoder" "encoding/json.newArrayEncoder"
"encoding/json.newSliceEncoder" "(*reflect.rtype).Implements"
"encoding/json.newTypeEncoder" "encoding/json.newSliceEncoder"
"encoding/json.newTypeEncoder" "encoding/json.newArrayEncoder"
"encoding/json.newPtrEncoder" "(*reflect.rtype).Elem"
"encoding/json.newPtrEncoder" "encoding/json.typeEncoder"
"encoding/json.newTypeEncoder" "encoding/json.newPtrEncoder"
"encoding/json.typeEncoder" "encoding/json.newTypeEncoder"
"encoding/json.typeEncoder" "(*sync.WaitGroup).Done"
"(*sync.Map).Swap" "(*sync.Map).loadReadOnly"
"(*sync.entry).trySwap" "(*sync/atomic.Pointer[any]).Load[any]"
"(*sync.entry).trySwap" "(*sync/atomic.Pointer[any]).CompareAndSwap[any]"
"(*sync.Map).Swap" "(*sync.entry).trySwap"
"(*sync.Map).Swap" "(*sync.Mutex).Lock"
"(*sync.Map).Swap" "(*sync.Map).loadReadOnly"
"(*sync.Map).Swap" "(*sync.entry).unexpungeLocked"
"(*sync.Map).Swap" "(*sync.Mutex).Unlock"
"(*sync/atomic.Pointer[any]).Swap[any]" "sync/atomic.SwapPointer"
"(*sync.entry).swapLocked" "(*sync/atomic.Pointer[any]).Swap[any]"
"(*sync.Map).Swap" "(*sync.entry).swapLocked"
"(*sync.Map).Swap" "(*sync.entry).swapLocked"
"(*sync.Map).Swap" "(*sync.Map).dirtyLocked"
"(*sync.Map).Swap" "(*sync/atomic.Pointer[sync.readOnly]).Store[sync.readOnly]"
"(*sync.Map).Swap" "sync.newEntry"
"(*sync.Map).Store" "(*sync.Map).Swap"
"encoding/json.typeEncoder" "(*sync.Map).Store"
"encoding/json.valueEncoder" "encoding/json.typeEncoder"
"(*encoding/json.encodeState).reflectValue" "encoding/json.valueEncoder"
"(encoding/json.ptrEncoder).encode" "(reflect.Value).IsNil"
"(encoding/json.ptrEncoder).encode" "(*bytes.Buffer).WriteString"
"(encoding/json.ptrEncoder).encode" "(reflect.Value).Interface"
"(encoding/json.ptrEncoder).encode" "(reflect.Value).Elem"
"(encoding/json.condAddrEncoder).encode" "(reflect.Value).CanAddr"
"(encoding/json.floatEncoder).encode" "(reflect.Value).Float"
"(encoding/json.floatEncoder).encode" "math.IsInf"
"strconv.genericFtoa" "math.Float32bits"
"strconv.genericFtoa" "math.Float64bits"
"strconv.fmtB" "strconv.formatBits"
"strconv.fmtB" "strconv.formatBits"
"strconv.genericFtoa" "strconv.fmtB"
"strconv.fmtX" "strconv.lower"
"strconv.genericFtoa" "strconv.fmtX"
"(*strconv.decimal).Assign" "strconv.trim"
"strconv.bigFtoa" "(*strconv.decimal).Assign"
"strconv.leftShift" "strconv.prefixIsLessThan"
"strconv.leftShift" "strconv.trim"
"(*strconv.decimal).Shift" "strconv.leftShift"
"(*strconv.decimal).Shift" "strconv.leftShift"
"strconv.rightShift" "strconv.trim"
"(*strconv.decimal).Shift" "strconv.rightShift"
"(*strconv.decimal).Shift" "strconv.rightShift"
"strconv.bigFtoa" "(*strconv.decimal).Shift"
"strconv.roundShortest" "(*strconv.decimal).Assign"
"strconv.roundShortest" "(*strconv.decimal).Shift"
"strconv.roundShortest" "(*strconv.decimal).Assign"
"strconv.roundShortest" "(*strconv.decimal).Shift"
"(*strconv.decimal).Round" "strconv.shouldRoundUp"
"(*strconv.decimal).Round" "(*strconv.decimal).RoundUp"
"(*strconv.decimal).RoundDown" "strconv.trim"
"(*strconv.decimal).Round" "(*strconv.decimal).RoundDown"
"strconv.roundShortest" "(*strconv.decimal).Round"
"strconv.roundShortest" "(*strconv.decimal).RoundDown"
"strconv.roundShortest" "(*strconv.decimal).RoundUp"
"strconv.bigFtoa" "strconv.roundShortest"
"strconv.formatDigits" "strconv.fmtE"
"strconv.formatDigits" "strconv.fmtF"
"strconv.formatDigits" "strconv.fmtE"
"strconv.formatDigits" "strconv.fmtF"
"strconv.bigFtoa" "strconv.formatDigits"
"strconv.bigFtoa" "(*strconv.decimal).Round"
"strconv.bigFtoa" "(*strconv.decimal).Round"
"strconv.bigFtoa" "(*strconv.decimal).Round"
"strconv.genericFtoa" "strconv.bigFtoa"
"strconv.divmod1e9" "math/bits.Mul64"
"strconv.ryuDigits" "strconv.divmod1e9"
"strconv.ryuDigits" "strconv.divmod1e9"
"strconv.ryuDigits" "strconv.divmod1e9"
"strconv.ryuDigits" "strconv.ryuDigits32"
"strconv.ryuDigits" "strconv.ryuDigits32"
"strconv.ryuDigits" "strconv.ryuDigits32"
"strconv.ryuFtoaShortest" "strconv.ryuDigits"
"strconv.ryuFtoaShortest" "strconv.computeBounds"
"strconv.ryuFtoaShortest" "math/bits.TrailingZeros64"
"strconv.ryuFtoaShortest" "strconv.ryuDigits"
"strconv.ryuFtoaShortest" "strconv.mulByLog2Log10"
"strconv.mult64bitPow10" "math/bits.Mul64"
"strconv.mult64bitPow10" "strconv.mulByLog10Log2"
"strconv.ryuFtoaShortest" "strconv.mult64bitPow10"
"strconv.ryuFtoaShortest" "strconv.mult64bitPow10"
"strconv.ryuFtoaShortest" "strconv.mult64bitPow10"
"strconv.mult128bitPow10" "strconv.mulByLog10Log2"
"strconv.mult128bitPow10" "math/bits.Mul64"
"strconv.mult128bitPow10" "math/bits.Mul64"
"strconv.mult128bitPow10" "math/bits.Add64"
"strconv.ryuFtoaShortest" "strconv.mult128bitPow10"
"strconv.ryuFtoaShortest" "strconv.mult128bitPow10"
"strconv.ryuFtoaShortest" "strconv.mult128bitPow10"
"strconv.ryuFtoaShortest" "strconv.divisibleByPower5"
"strconv.ryuFtoaShortest" "strconv.divisibleByPower5"
"strconv.ryuFtoaShortest" "strconv.divisibleByPower5"
"strconv.ryuFtoaShortest" "strconv.ryuDigits"
"strconv.genericFtoa" "strconv.ryuFtoaShortest"
"strconv.ryuFtoaFixed32" "math/bits.Len32"
"strconv.ryuFtoaFixed32" "strconv.mulByLog2Log10"
"strconv.ryuFtoaFixed32" "strconv.mult64bitPow10"
"strconv.ryuFtoaFixed32" "strconv.divisibleByPower5"
"strconv.ryuFtoaFixed32" "strconv.formatDecimal"
"strconv.genericFtoa" "strconv.ryuFtoaFixed32"
"strconv.ryuFtoaFixed64" "math/bits.Len64"
"strconv.ryuFtoaFixed64" "strconv.mulByLog2Log10"
"strconv.ryuFtoaFixed64" "strconv.mult128bitPow10"
"strconv.ryuFtoaFixed64" "strconv.divisibleByPower5"
"strconv.ryuFtoaFixed64" "strconv.formatDecimal"
"strconv.genericFtoa" "strconv.ryuFtoaFixed64"
"strconv.genericFtoa" "strconv.bigFtoa"
"strconv.genericFtoa" "strconv.formatDigits"
"strconv.FormatFloat" "strconv.genericFtoa"
"(encoding/json.floatEncoder).encode" "strconv.FormatFloat"
"(encoding/json.floatEncoder).encode" "(*encoding/json.encodeState).error"
"(encoding/json.floatEncoder).encode" "(*bytes.Buffer).AvailableBuffer"
"(encoding/json.floatEncoder).encode" "encoding/json.mayAppendQuote"
"(encoding/json.floatEncoder).encode" "math.Abs"
"(encoding/json.floatEncoder).encode" "math.IsNaN"
"strconv.AppendFloat" "strconv.genericFtoa"
"(encoding/json.floatEncoder).encode" "strconv.AppendFloat"
"(encoding/json.floatEncoder).encode" "encoding/json.mayAppendQuote"
"(encoding/json.floatEncoder).encode" "(*bytes.Buffer).Write"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.floatEncoder).encode"
"(reflect.Value).Addr" "(reflect.Value).typ"
"(reflect.Value).Addr" "reflect.ptrTo"
"encoding/json.addrMarshalerEncoder" "(reflect.Value).Addr"
"encoding/json.addrMarshalerEncoder" "(reflect.Value).IsNil"
"encoding/json.addrMarshalerEncoder" "(*bytes.Buffer).WriteString"
"encoding/json.addrMarshalerEncoder" "(reflect.Value).Interface"
"encoding/json.newScanner" "(*sync.Pool).Get"
"encoding/json.newScanner" "(*encoding/json.scanner).reset"
"encoding/json.appendCompact" "encoding/json.newScanner"
"encoding/json.freeScanner" "(*sync.Pool).Put"
"encoding/json.appendCompact" "encoding/json.freeScanner"
"encoding/json.stateBeginValue" "encoding/json.isSpace"
"encoding/json.quoteChar" "strconv.Quote"
"(*encoding/json.scanner).error" "encoding/json.quoteChar"
"(*encoding/json.scanner).pushParseState" "(*encoding/json.scanner).error"
"encoding/json.stateBeginValue" "(*encoding/json.scanner).pushParseState"
"encoding/json.stateBeginValue" "(*encoding/json.scanner).pushParseState"
"encoding/json.stateBeginValue" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateBeginValue"
"encoding/json.stateBeginStringOrEmpty" "encoding/json.isSpace"
"encoding/json.stateEndTop" "encoding/json.isSpace"
"encoding/json.stateEndTop" "(*encoding/json.scanner).error"
"encoding/json.stateEndValue" "encoding/json.stateEndTop"
"encoding/json.stateEndValue" "encoding/json.isSpace"
"encoding/json.stateEndValue" "(*encoding/json.scanner).error"
"encoding/json.stateEndValue" "(*encoding/json.scanner).popParseState"
"encoding/json.stateEndValue" "(*encoding/json.scanner).error"
"encoding/json.stateEndValue" "(*encoding/json.scanner).error"
"encoding/json.stateEndValue" "(*encoding/json.scanner).popParseState"
"encoding/json.stateEndValue" "(*encoding/json.scanner).error"
"encoding/json.stateBeginStringOrEmpty" "encoding/json.stateEndValue"
"encoding/json.stateBeginString" "encoding/json.isSpace"
"encoding/json.stateBeginString" "(*encoding/json.scanner).error"
"encoding/json.stateBeginStringOrEmpty" "encoding/json.stateBeginString"
"(*encoding/json.scanner).eof" "encoding/json.stateBeginStringOrEmpty"
"encoding/json.stateBeginValueOrEmpty" "encoding/json.isSpace"
"encoding/json.stateBeginValueOrEmpty" "encoding/json.stateEndValue"
"encoding/json.stateBeginValueOrEmpty" "encoding/json.stateBeginValue"
"(*encoding/json.scanner).eof" "encoding/json.stateBeginValueOrEmpty"
"encoding/json.stateInString" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateInString"
"encoding/json.stateNeg" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateNeg"
"encoding/json.state0" "encoding/json.stateEndValue"
"(*encoding/json.scanner).eof" "encoding/json.state0"
"encoding/json.stateT" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateT"
"encoding/json.stateF" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateF"
"encoding/json.stateN" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateN"
"encoding/json.state1" "encoding/json.state0"
"(*encoding/json.scanner).eof" "encoding/json.state1"
"(*encoding/json.scanner).eof" "encoding/json.stateEndTop"
"(*encoding/json.scanner).eof" "encoding/json.stateEndValue"
"(*encoding/json.scanner).eof" "encoding/json.stateBeginString"
"encoding/json.stateInStringEsc" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateInStringEsc"
"encoding/json.stateDot" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateDot"
"encoding/json.stateESign" "(*encoding/json.scanner).error"
"encoding/json.stateE" "encoding/json.stateESign"
"(*encoding/json.scanner).eof" "encoding/json.stateE"
"encoding/json.stateTr" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateTr"
"encoding/json.stateFa" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateFa"
"encoding/json.stateNu" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateNu"
"(*encoding/json.scanner).eof" "encoding/json.stateError"
"encoding/json.stateInStringEscU" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateInStringEscU"
"encoding/json.stateDot0" "encoding/json.stateEndValue"
"(*encoding/json.scanner).eof" "encoding/json.stateDot0"
"(*encoding/json.scanner).eof" "encoding/json.stateESign"
"encoding/json.stateTru" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateTru"
"encoding/json.stateFal" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateFal"
"encoding/json.stateNul" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateNul"
"encoding/json.stateInStringEscU1" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateInStringEscU1"
"encoding/json.stateE0" "encoding/json.stateEndValue"
"(*encoding/json.scanner).eof" "encoding/json.stateE0"
"encoding/json.stateFals" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateFals"
"encoding/json.stateInStringEscU12" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateInStringEscU12"
"encoding/json.stateInStringEscU123" "(*encoding/json.scanner).error"
"(*encoding/json.scanner).eof" "encoding/json.stateInStringEscU123"
"encoding/json.appendCompact" "(*encoding/json.scanner).eof"
"encoding/json.appendCompact" "encoding/json.stateTr"
"encoding/json.appendCompact" "encoding/json.stateE0"
"encoding/json.appendCompact" "encoding/json.stateT"
"encoding/json.appendCompact" "encoding/json.stateTru"
"encoding/json.appendCompact" "encoding/json.stateFals"
"encoding/json.appendCompact" "encoding/json.stateInString"
"encoding/json.appendCompact" "encoding/json.stateF"
"encoding/json.appendCompact" "encoding/json.stateN"
"encoding/json.appendCompact" "encoding/json.state1"
"encoding/json.appendCompact" "encoding/json.stateDot"
"encoding/json.appendCompact" "encoding/json.stateInStringEscU"
"encoding/json.appendCompact" "encoding/json.stateDot0"
"encoding/json.appendCompact" "encoding/json.stateFal"
"encoding/json.appendCompact" "encoding/json.state0"
"encoding/json.appendCompact" "encoding/json.stateEndValue"
"encoding/json.appendCompact" "encoding/json.stateBeginString"
"encoding/json.appendCompact" "encoding/json.stateError"
"encoding/json.appendCompact" "encoding/json.stateNu"
"encoding/json.appendCompact" "encoding/json.stateESign"
"encoding/json.appendCompact" "encoding/json.stateInStringEsc"
"encoding/json.appendCompact" "encoding/json.stateInStringEscU1"
"encoding/json.appendCompact" "encoding/json.stateBeginValueOrEmpty"
"encoding/json.appendCompact" "encoding/json.stateBeginValue"
"encoding/json.appendCompact" "encoding/json.stateBeginStringOrEmpty"
"encoding/json.appendCompact" "encoding/json.stateNeg"
"encoding/json.appendCompact" "encoding/json.stateEndTop"
"encoding/json.appendCompact" "encoding/json.stateE"
"encoding/json.appendCompact" "encoding/json.stateFa"
"encoding/json.appendCompact" "encoding/json.stateNul"
"encoding/json.appendCompact" "encoding/json.stateInStringEscU12"
"encoding/json.appendCompact" "encoding/json.stateInStringEscU123"
"encoding/json.addrMarshalerEncoder" "encoding/json.appendCompact"
"(*golang.org/x/tools/go/packages.Package).MarshalJSON" "encoding/json.Marshal"
"encoding/json.addrMarshalerEncoder" "(*golang.org/x/tools/go/packages.Package).MarshalJSON"
"encoding/json.addrMarshalerEncoder" "(reflect.Value).Type"
"encoding/json.addrMarshalerEncoder" "(*bytes.Buffer).AvailableBuffer"
"(*math/big.Int).MarshalJSON" "(math/big.nat).itoa"
"encoding/json.addrMarshalerEncoder" "(*math/big.Int).MarshalJSON"
"(time.Time).locabs" "(*time.Location).get"
"(time.Time).locabs" "(*time.Time).unixSec"
"(*time.Location).lookup" "(*time.Location).get"
"(*time.Location).lookupFirstZone" "(*time.Location).firstZoneUsed"
"(*time.Location).lookup" "(*time.Location).lookupFirstZone"
"(*time.Location).lookup" "time.tzset"
"(time.Time).locabs" "(*time.Location).lookup"
"(time.Time).appendFormatRFC3339" "(time.Time).locabs"
"(time.Time).appendFormatRFC3339" "time.absDate"
"time.appendInt" "time.appendInt$1"
"time.appendInt" "time.appendInt$1"
"time.appendInt" "time.appendInt$1"
"time.appendInt" "time.appendInt$1"
"time.appendInt" "time.appendInt$1"
"time.appendInt" "time.appendInt$1"
"time.appendInt" "time.appendInt$1"
"time.appendInt" "time.appendInt$1"
"(time.Time).appendFormatRFC3339" "time.appendInt"
"(time.Time).appendFormatRFC3339" "time.appendInt"
"(time.Time).appendFormatRFC3339" "time.appendInt"
"(time.Time).appendFormatRFC3339" "time.absClock"
"(time.Time).appendFormatRFC3339" "time.appendInt"
"(time.Time).appendFormatRFC3339" "time.appendInt"
"(time.Time).appendFormatRFC3339" "time.appendInt"
"(time.Time).appendFormatRFC3339" "time.stdFracSecond"
"(time.Time).appendFormatRFC3339" "(time.Time).Nanosecond"
"time.appendNano" "time.digitsLen"
"time.appendNano" "time.separator"
"time.appendNano" "time.appendInt"
"(time.Time).appendFormatRFC3339" "time.appendNano"
"(time.Time).appendFormatRFC3339" "time.appendInt"
"(time.Time).appendFormatRFC3339" "time.appendInt"
"(time.Time).appendStrictRFC3339" "(time.Time).appendFormatRFC3339"
"(time.Time).appendStrictRFC3339" "errors.New"
"(time.Time).appendStrictRFC3339" "errors.New"
"(time.Time).appendStrictRFC3339" "(time.Time).appendStrictRFC3339$1"
"(time.Time).MarshalJSON" "(time.Time).appendStrictRFC3339"
"(time.Time).MarshalJSON" "(*errors.errorString).Error"
"(time.Time).MarshalJSON" "(runtime.errorString).Error"
"(time.Time).MarshalJSON" "(go/scanner.ErrorList).Error"
"(time.Time).MarshalJSON" "(*io/fs.PathError).Error"
"(time.Time).MarshalJSON" "(syscall.Errno).Error"
"(time.Time).MarshalJSON" "(*encoding/json.UnmarshalTypeError).Error"
"(time.Time).MarshalJSON" "errors.New"
"(time.Time).MarshalJSON" "(context.deadlineExceededError).Error"
"(time.Time).MarshalJSON" "(*encoding/json.InvalidUnmarshalError).Error"
"(time.Time).MarshalJSON" "(*internal/poll.DeadlineExceededError).Error"
"(time.Time).MarshalJSON" "(*fmt.wrapError).Error"
"(time.Time).MarshalJSON" "(*fmt.wrapErrors).Error"
"(time.Time).MarshalJSON" "(runtime.plainError).Error"
"(time.Time).MarshalJSON" "(*go/build/constraint.SyntaxError).Error"
"(time.Time).MarshalJSON" "(*reflect.ValueError).Error"
"(time.Time).MarshalJSON" "(*strconv.NumError).Error"
"(time.Time).MarshalJSON" "(*time.ParseError).Error"
"(time.Time).MarshalJSON" "(internal/poll.errNetClosing).Error"
"(time.Time).MarshalJSON" "(*go/types.ArgumentError).Error"
"(time.Time).MarshalJSON" "(*os.SyscallError).Error"
"(time.Time).MarshalJSON" "(*encoding/json.UnsupportedValueError).Error"
"(time.Time).MarshalJSON" "(*encoding/json.UnsupportedTypeError).Error"
"(time.Time).MarshalJSON" "(time.fileSizeError).Error"
"(time.Time).MarshalJSON" "(*encoding/json.MarshalerError).Error"
"(time.Time).MarshalJSON" "(golang.org/x/tools/go/packages.Error).Error"
"(time.Time).MarshalJSON" "(math/big.ErrNaN).Error"
"(time.Time).MarshalJSON" "(go/types.Error).Error"
"(time.Time).MarshalJSON" "(runtime.errorAddressString).Error"
"(time.Time).MarshalJSON" "(*regexp/syntax.Error).Error"
"(time.Time).MarshalJSON" "(*runtime.TypeAssertionError).Error"
"(time.Time).MarshalJSON" "(*os/exec.Error).Error"
"(time.Time).MarshalJSON" "(*encoding/json.SyntaxError).Error"
"(time.Time).MarshalJSON" "(*internal/bisect.parseError).Error"
"(time.Time).MarshalJSON" "(*os/exec.ExitError).Error"
"(time.Time).MarshalJSON" "(os/exec.wrappedError).Error"
"(time.Time).MarshalJSON" "(go/scanner.Error).Error"
"(time.Time).MarshalJSON" "(encoding/base64.CorruptInputError).Error"
"(time.Time).MarshalJSON" "(*internal/reflectlite.ValueError).Error"
"encoding/json.addrMarshalerEncoder" "(time.Time).MarshalJSON"
"encoding/json.addrMarshalerEncoder" "(*encoding/json.encodeState).error"
"encoding/json.addrMarshalerEncoder" "(*bytes.Buffer).Write"
"(log/slog.Level).String$1" "fmt.Sprintf"
"(log/slog.Level).String" "(log/slog.Level).String$1"
"(log/slog.Level).String" "(log/slog.Level).String$1"
"(log/slog.Level).String" "(log/slog.Level).String$1"
"(log/slog.Level).String" "(log/slog.Level).String$1"
"(log/slog.Level).MarshalJSON" "(log/slog.Level).String"
"(log/slog.Level).MarshalJSON" "strconv.AppendQuote"
"encoding/json.addrMarshalerEncoder" "(log/slog.Level).MarshalJSON"
"(*bytes.Buffer).Grow" "(*bytes.Buffer).grow"
"encoding/json.addrMarshalerEncoder" "(*bytes.Buffer).Grow"
"(encoding/json.condAddrEncoder).encode" "encoding/json.addrMarshalerEncoder"
"encoding/json.marshalerEncoder" "(reflect.Value).Kind"
"encoding/json.marshalerEncoder" "(*bytes.Buffer).WriteString"
"encoding/json.marshalerEncoder" "(reflect.Value).Interface"
"encoding/json.marshalerEncoder" "(reflect.Value).IsNil"
"encoding/json.marshalerEncoder" "(*bytes.Buffer).WriteString"
"encoding/json.marshalerEncoder" "encoding/json.appendCompact"
"encoding/json.marshalerEncoder" "(*golang.org/x/tools/go/packages.Package).MarshalJSON"
"encoding/json.marshalerEncoder" "(reflect.Value).Type"
"encoding/json.marshalerEncoder" "(*bytes.Buffer).AvailableBuffer"
"encoding/json.marshalerEncoder" "(*math/big.Int).MarshalJSON"
"encoding/json.marshalerEncoder" "(time.Time).MarshalJSON"
"encoding/json.marshalerEncoder" "(*encoding/json.encodeState).error"
"encoding/json.marshalerEncoder" "(*bytes.Buffer).Write"
"encoding/json.marshalerEncoder" "(log/slog.Level).MarshalJSON"
"encoding/json.marshalerEncoder" "(*bytes.Buffer).Grow"
"(encoding/json.condAddrEncoder).encode" "encoding/json.marshalerEncoder"
"encoding/json.boolEncoder" "(*bytes.Buffer).AvailableBuffer"
"encoding/json.boolEncoder" "encoding/json.mayAppendQuote"
"encoding/json.boolEncoder" "(reflect.Value).Bool"
"encoding/json.boolEncoder" "strconv.AppendBool"
"encoding/json.boolEncoder" "encoding/json.mayAppendQuote"
"encoding/json.boolEncoder" "(*bytes.Buffer).Write"
"(encoding/json.condAddrEncoder).encode" "encoding/json.boolEncoder"
"encoding/json.uintEncoder" "(*bytes.Buffer).AvailableBuffer"
"encoding/json.uintEncoder" "encoding/json.mayAppendQuote"
"encoding/json.uintEncoder" "(reflect.Value).Uint"
"strconv.AppendUint" "strconv.small"
"strconv.AppendUint" "strconv.formatBits"
"encoding/json.uintEncoder" "strconv.AppendUint"
"encoding/json.uintEncoder" "encoding/json.mayAppendQuote"
"encoding/json.uintEncoder" "(*bytes.Buffer).Write"
"(encoding/json.condAddrEncoder).encode" "encoding/json.uintEncoder"
"(encoding/json.structEncoder).encode" "(reflect.Value).Kind"
"(encoding/json.structEncoder).encode" "(reflect.Value).IsNil"
"(encoding/json.structEncoder).encode" "(reflect.Value).Field"
"(encoding/json.structEncoder).encode" "(reflect.Value).Elem"
"(encoding/json.structEncoder).encode" "(*bytes.Buffer).WriteByte"
"encoding/json.isEmptyValue" "(reflect.Value).Kind"
"encoding/json.isEmptyValue" "(reflect.Value).Len"
"(reflect.Value).IsZero" "(reflect.flag).kind"
"(reflect.Value).IsZero" "(reflect.Value).Bool"
"(reflect.Value).IsZero" "(reflect.Value).Int"
"(reflect.Value).IsZero" "(reflect.Value).Uint"
"(reflect.Value).IsZero" "(reflect.Value).Float"
"(reflect.Value).IsZero" "(reflect.Value).Complex"
"(reflect.Value).IsZero" "(reflect.Value).IsNil"
"(reflect.Value).IsZero" "(reflect.Value).typ"
"(reflect.Value).IsZero" "reflect.noescape"
"(reflect.Value).IsZero" "(*internal/abi.Type).Size"
"(reflect.Value).IsZero" "(*internal/abi.Type).Size"
"(reflect.Value).IsZero" "reflect.isZero"
"(reflect.Value).IsZero" "(reflect.Value).Index"
"(reflect.Value).IsZero" "(reflect.Value).IsZero"
"(reflect.Value).IsZero" "(reflect.Value).Len"
"(reflect.Value).IsZero" "(reflect.Value).Kind"
"(reflect.Value).IsZero" "(reflect.Value).typ"
"(reflect.Value).IsZero" "reflect.noescape"
"(reflect.Value).IsZero" "(*internal/abi.Type).Size"
"(reflect.Value).IsZero" "(*internal/abi.Type).Size"
"(reflect.Value).IsZero" "reflect.isZero"
"(reflect.Value).IsZero" "(reflect.Value).NumField"
"(reflect.Value).IsZero" "(reflect.Value).Field"
"(reflect.Value).IsZero" "(reflect.Value).IsZero"
"(reflect.Value).IsZero" "(reflect.Value).Type"
"(reflect.Value).IsZero" "(*reflect.rtype).Field"
"reflect.ArrayOf$1" "reflect.arrayAt"
"reflect.ArrayOf$1" "reflect.arrayAt"
"reflect.ArrayOf$1" "reflect.ArrayOf$1"
"reflect.StructOf$2" "reflect.add"
"reflect.StructOf$2" "reflect.add"
"reflect.StructOf$2" "reflect.ArrayOf$1"
"reflect.StructOf$2" "reflect.StructOf$2"
"reflect.ArrayOf$1" "reflect.StructOf$2"
"(reflect.Value).IsZero" "reflect.ArrayOf$1"
"(reflect.Value).IsZero" "reflect.ArrayOf$1"
"(reflect.Value).IsZero" "reflect.StructOf$2"
"(reflect.Value).IsZero" "reflect.StructOf$2"
"encoding/json.isEmptyValue" "(reflect.Value).IsZero"
"(encoding/json.structEncoder).encode" "encoding/json.isEmptyValue"
"(encoding/json.structEncoder).encode" "(*bytes.Buffer).WriteString"
"encoding/json.textMarshalerEncoder" "(reflect.Value).Kind"
"encoding/json.textMarshalerEncoder" "(*bytes.Buffer).WriteString"
"encoding/json.textMarshalerEncoder" "(reflect.Value).Interface"
"encoding/json.textMarshalerEncoder" "(reflect.Value).IsNil"
"encoding/json.textMarshalerEncoder" "(*bytes.Buffer).WriteString"
"encoding/json.appendString[[]byte]" "unicode/utf8.DecodeRuneInString"
"encoding/json.textMarshalerEncoder" "encoding/json.appendString[[]byte]"
"(*regexp.Regexp).MarshalText" "(*regexp.Regexp).String"
"encoding/json.textMarshalerEncoder" "(*regexp.Regexp).MarshalText"
"encoding/json.textMarshalerEncoder" "(*bytes.Buffer).Write"
"(log/slog.Level).MarshalText" "(log/slog.Level).String"
"encoding/json.textMarshalerEncoder" "(log/slog.Level).MarshalText"
"(time.Time).MarshalText" "(time.Time).appendStrictRFC3339"
"(time.Time).MarshalText" "(*errors.errorString).Error"
"(time.Time).MarshalText" "(runtime.errorString).Error"
"(time.Time).MarshalText" "(go/scanner.ErrorList).Error"
"(time.Time).MarshalText" "(*io/fs.PathError).Error"
"(time.Time).MarshalText" "(syscall.Errno).Error"
"(time.Time).MarshalText" "(*encoding/json.UnmarshalTypeError).Error"
"(time.Time).MarshalText" "errors.New"
"(time.Time).MarshalText" "(context.deadlineExceededError).Error"
"(time.Time).MarshalText" "(*encoding/json.InvalidUnmarshalError).Error"
"(time.Time).MarshalText" "(*internal/poll.DeadlineExceededError).Error"
"(time.Time).MarshalText" "(*fmt.wrapError).Error"
"(time.Time).MarshalText" "(*fmt.wrapErrors).Error"
"(time.Time).MarshalText" "(runtime.plainError).Error"
"(time.Time).MarshalText" "(*go/build/constraint.SyntaxError).Error"
"(time.Time).MarshalText" "(*reflect.ValueError).Error"
"(time.Time).MarshalText" "(*strconv.NumError).Error"
"(time.Time).MarshalText" "(*time.ParseError).Error"
"(time.Time).MarshalText" "(internal/poll.errNetClosing).Error"
"(time.Time).MarshalText" "(*go/types.ArgumentError).Error"
"(time.Time).MarshalText" "(*os.SyscallError).Error"
"(time.Time).MarshalText" "(*encoding/json.UnsupportedValueError).Error"
"(time.Time).MarshalText" "(*encoding/json.UnsupportedTypeError).Error"
"(time.Time).MarshalText" "(time.fileSizeError).Error"
"(time.Time).MarshalText" "(*encoding/json.MarshalerError).Error"
"(time.Time).MarshalText" "(golang.org/x/tools/go/packages.Error).Error"
"(time.Time).MarshalText" "(math/big.ErrNaN).Error"
"(time.Time).MarshalText" "(go/types.Error).Error"
"(time.Time).MarshalText" "(runtime.errorAddressString).Error"
"(time.Time).MarshalText" "(*regexp/syntax.Error).Error"
"(time.Time).MarshalText" "(*runtime.TypeAssertionError).Error"
"(time.Time).MarshalText" "(*os/exec.Error).Error"
"(time.Time).MarshalText" "(*encoding/json.SyntaxError).Error"
"(time.Time).MarshalText" "(*internal/bisect.parseError).Error"
"(time.Time).MarshalText" "(*os/exec.ExitError).Error"
"(time.Time).MarshalText" "(os/exec.wrappedError).Error"
"(time.Time).MarshalText" "(go/scanner.Error).Error"
"(time.Time).MarshalText" "(encoding/base64.CorruptInputError).Error"
"(time.Time).MarshalText" "(*internal/reflectlite.ValueError).Error"
"encoding/json.textMarshalerEncoder" "(time.Time).MarshalText"
"(*math/big.Int).MarshalText" "(math/big.nat).itoa"
"encoding/json.textMarshalerEncoder" "(*math/big.Int).MarshalText"
"(*math/big.Rat).MarshalText" "(*math/big.Rat).IsInt"
"(*math/big.Rat).MarshalText" "(*math/big.Int).MarshalText"
"(*math/big.Int).Append" "(math/big.nat).itoa"
"(*math/big.Rat).marshal" "(*math/big.Int).Append"
"(*math/big.Rat).marshal" "(*math/big.Int).Append"
"(*math/big.Rat).MarshalText" "(*math/big.Rat).marshal"
"encoding/json.textMarshalerEncoder" "(*math/big.Rat).MarshalText"
"(*math/big.Float).MarshalText" "(*math/big.Float).Append"
"encoding/json.textMarshalerEncoder" "(*math/big.Float).MarshalText"
"encoding/json.textMarshalerEncoder" "(reflect.Value).Type"
"encoding/json.textMarshalerEncoder" "(*encoding/json.encodeState).error"
"encoding/json.textMarshalerEncoder" "(*bytes.Buffer).AvailableBuffer"
"(encoding/json.structEncoder).encode" "encoding/json.textMarshalerEncoder"
"encoding/json.stringEncoder" "(reflect.Value).Type"
"encoding/json.stringEncoder" "(reflect.Value).String"
"encoding/json.stringEncoder" "encoding/json.isValidNumber"
"encoding/json.stringEncoder" "fmt.Errorf"
"encoding/json.stringEncoder" "(*encoding/json.encodeState).error"
"encoding/json.stringEncoder" "(*bytes.Buffer).AvailableBuffer"
"encoding/json.stringEncoder" "encoding/json.mayAppendQuote"
"encoding/json.stringEncoder" "encoding/json.mayAppendQuote"
"encoding/json.stringEncoder" "(*bytes.Buffer).Write"
"encoding/json.stringEncoder" "(reflect.Value).String"
"encoding/json.appendString[string]" "unicode/utf8.DecodeRuneInString"
"encoding/json.stringEncoder" "encoding/json.appendString[string]"
"encoding/json.stringEncoder" "(*bytes.Buffer).AvailableBuffer"
"encoding/json.stringEncoder" "encoding/json.appendString[[]byte]"
"encoding/json.stringEncoder" "(*bytes.Buffer).Write"
"encoding/json.stringEncoder" "(*bytes.Buffer).AvailableBuffer"
"encoding/json.stringEncoder" "(reflect.Value).String"
"encoding/json.stringEncoder" "encoding/json.appendString[string]"
"encoding/json.stringEncoder" "(*bytes.Buffer).Write"
"(encoding/json.structEncoder).encode" "encoding/json.stringEncoder"
"encoding/json.interfaceEncoder" "(reflect.Value).IsNil"
"encoding/json.interfaceEncoder" "(*bytes.Buffer).WriteString"
"encoding/json.interfaceEncoder" "(reflect.Value).Elem"
"encoding/json.interfaceEncoder" "(*encoding/json.encodeState).reflectValue"
"(encoding/json.structEncoder).encode" "encoding/json.interfaceEncoder"
"(encoding/json.mapEncoder).encode" "(reflect.Value).IsNil"
"(encoding/json.mapEncoder).encode" "(*bytes.Buffer).WriteString"
"(reflect.Value).UnsafePointer" "(reflect.flag).kind"
"(reflect.Value).UnsafePointer" "(reflect.Value).typ"
"(reflect.Value).UnsafePointer" "(reflect.Value).pointer"
"(reflect.Value).UnsafePointer" "reflect.verifyNotInHeapPtr"
"(reflect.Value).UnsafePointer" "reflect.methodValueCallCodePtr"
"(reflect.Value).UnsafePointer" "(reflect.Value).pointer"
"(reflect.Value).UnsafePointer" "(reflect.flag).kind"
"(encoding/json.mapEncoder).encode" "(reflect.Value).UnsafePointer"
"(encoding/json.mapEncoder).encode" "(*bytes.Buffer).WriteByte"
"(encoding/json.mapEncoder).encode" "(reflect.Value).Len"
"(reflect.Value).MapRange" "(reflect.flag).kind"
"(reflect.flag).panicNotMap" "(reflect.flag).mustBe"
"(reflect.Value).MapRange" "(reflect.flag).panicNotMap"
"(encoding/json.mapEncoder).encode" "(reflect.Value).MapRange"
"(encoding/json.mapEncoder).encode" "(reflect.Value).Type"
"(encoding/json.mapEncoder).encode" "fmt.Sprintf"
"(encoding/json.mapEncoder).encode" "(*encoding/json.encodeState).error"
"(*reflect.MapIter).Next" "(reflect.Value).IsValid"
"(*reflect.MapIter).Next" "(*reflect.hiter).initialized"
"(*reflect.MapIter).Next" "(reflect.Value).typ"
"(*reflect.MapIter).Next" "(reflect.Value).pointer"
"(*reflect.MapIter).Next" "reflect.mapiterinit"
"(*reflect.MapIter).Next" "reflect.mapiterkey"
"(*reflect.MapIter).Next" "reflect.mapiterkey"
"(*reflect.MapIter).Next" "reflect.mapiternext"
"(encoding/json.mapEncoder).encode" "(*reflect.MapIter).Next"
"(*reflect.MapIter).Key" "(*reflect.hiter).initialized"
"(*reflect.MapIter).Key" "reflect.mapiterkey"
"(*reflect.MapIter).Key" "(reflect.Value).typ"
"(*reflect.MapIter).Key" "(reflect.flag).ro"
"(*reflect.MapIter).Key" "(*internal/abi.Type).Kind"
"(*reflect.MapIter).Key" "reflect.copyVal"
"(encoding/json.mapEncoder).encode" "(*reflect.MapIter).Key"
"encoding/json.resolveKeyName" "(reflect.Value).Kind"
"encoding/json.resolveKeyName" "(reflect.Value).String"
"encoding/json.resolveKeyName" "(reflect.Value).Interface"
"encoding/json.resolveKeyName" "(reflect.Value).Kind"
"encoding/json.resolveKeyName" "(reflect.Value).Kind"
"encoding/json.resolveKeyName" "(reflect.Value).Uint"
"encoding/json.resolveKeyName" "(*regexp.Regexp).MarshalText"
"strconv.FormatUint" "strconv.small"
"strconv.FormatUint" "strconv.formatBits"
"encoding/json.resolveKeyName" "strconv.FormatUint"
"encoding/json.resolveKeyName" "(log/slog.Level).MarshalText"
"encoding/json.resolveKeyName" "(time.Time).MarshalText"
"encoding/json.resolveKeyName" "(*math/big.Int).MarshalText"
"encoding/json.resolveKeyName" "(*math/big.Rat).MarshalText"
"encoding/json.resolveKeyName" "(*math/big.Float).MarshalText"
"encoding/json.resolveKeyName" "(reflect.Value).IsNil"
"encoding/json.resolveKeyName" "(reflect.Value).Int"
"encoding/json.resolveKeyName" "strconv.FormatInt"
"(encoding/json.mapEncoder).encode" "encoding/json.resolveKeyName"
"slices.SortFunc[[]encoding/json.reflectWithString encoding/json.reflectWithString]" "math/bits.Len"
"(encoding/json.mapEncoder).encode$1" "strings.Compare"
"slices.insertionSortCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.pdqsortCmpFunc[encoding/json.reflectWithString]" "slices.insertionSortCmpFunc[encoding/json.reflectWithString]"
"slices.siftDownCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.siftDownCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.heapSortCmpFunc[encoding/json.reflectWithString]" "slices.siftDownCmpFunc[encoding/json.reflectWithString]"
"slices.heapSortCmpFunc[encoding/json.reflectWithString]" "slices.siftDownCmpFunc[encoding/json.reflectWithString]"
"slices.pdqsortCmpFunc[encoding/json.reflectWithString]" "slices.heapSortCmpFunc[encoding/json.reflectWithString]"
"slices.breakPatternsCmpFunc[encoding/json.reflectWithString]" "slices.nextPowerOfTwo"
"slices.breakPatternsCmpFunc[encoding/json.reflectWithString]" "(*slices.xorshift).Next"
"slices.pdqsortCmpFunc[encoding/json.reflectWithString]" "slices.breakPatternsCmpFunc[encoding/json.reflectWithString]"
"slices.order2CmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.medianCmpFunc[encoding/json.reflectWithString]" "slices.order2CmpFunc[encoding/json.reflectWithString]"
"slices.medianCmpFunc[encoding/json.reflectWithString]" "slices.order2CmpFunc[encoding/json.reflectWithString]"
"slices.medianCmpFunc[encoding/json.reflectWithString]" "slices.order2CmpFunc[encoding/json.reflectWithString]"
"slices.medianAdjacentCmpFunc[encoding/json.reflectWithString]" "slices.medianCmpFunc[encoding/json.reflectWithString]"
"slices.choosePivotCmpFunc[encoding/json.reflectWithString]" "slices.medianAdjacentCmpFunc[encoding/json.reflectWithString]"
"slices.choosePivotCmpFunc[encoding/json.reflectWithString]" "slices.medianAdjacentCmpFunc[encoding/json.reflectWithString]"
"slices.choosePivotCmpFunc[encoding/json.reflectWithString]" "slices.medianAdjacentCmpFunc[encoding/json.reflectWithString]"
"slices.choosePivotCmpFunc[encoding/json.reflectWithString]" "slices.medianCmpFunc[encoding/json.reflectWithString]"
"slices.pdqsortCmpFunc[encoding/json.reflectWithString]" "slices.choosePivotCmpFunc[encoding/json.reflectWithString]"
"slices.pdqsortCmpFunc[encoding/json.reflectWithString]" "slices.reverseRangeCmpFunc[encoding/json.reflectWithString]"
"slices.partialInsertionSortCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.partialInsertionSortCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.partialInsertionSortCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.pdqsortCmpFunc[encoding/json.reflectWithString]" "slices.partialInsertionSortCmpFunc[encoding/json.reflectWithString]"
"slices.partitionEqualCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.partitionEqualCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.pdqsortCmpFunc[encoding/json.reflectWithString]" "slices.partitionEqualCmpFunc[encoding/json.reflectWithString]"
"slices.partitionCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.partitionCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.partitionCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.partitionCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.pdqsortCmpFunc[encoding/json.reflectWithString]" "slices.partitionCmpFunc[encoding/json.reflectWithString]"
"slices.pdqsortCmpFunc[encoding/json.reflectWithString]" "(encoding/json.mapEncoder).encode$1"
"slices.pdqsortCmpFunc[encoding/json.reflectWithString]" "slices.pdqsortCmpFunc[encoding/json.reflectWithString]"
"slices.pdqsortCmpFunc[encoding/json.reflectWithString]" "slices.pdqsortCmpFunc[encoding/json.reflectWithString]"
"slices.SortFunc[[]encoding/json.reflectWithString encoding/json.reflectWithString]" "slices.pdqsortCmpFunc[encoding/json.reflectWithString]"
"(encoding/json.mapEncoder).encode" "slices.SortFunc[[]encoding/json.reflectWithString encoding/json.reflectWithString]"
"(encoding/json.mapEncoder).encode" "(reflect.Value).Type"
"(encoding/json.mapEncoder).encode" "(*reflect.rtype).String"
"(encoding/json.mapEncoder).encode" "(*errors.errorString).Error"
"(encoding/json.mapEncoder).encode" "(runtime.errorString).Error"
"(encoding/json.mapEncoder).encode" "encoding/json.textMarshalerEncoder"
"(encoding/json.mapEncoder).encode" "(*io/fs.PathError).Error"
"(encoding/json.mapEncoder).encode" "(syscall.Errno).Error"
"(encoding/json.mapEncoder).encode" "(encoding/json.condAddrEncoder).encode"
"(encoding/json.mapEncoder).encode" "(context.deadlineExceededError).Error"
"(encoding/json.mapEncoder).encode" "encoding/json.boolEncoder"
"(encoding/json.mapEncoder).encode" "(*internal/poll.DeadlineExceededError).Error"
"(encoding/json.mapEncoder).encode" "(*fmt.wrapError).Error"
"(encoding/json.mapEncoder).encode" "(*fmt.wrapErrors).Error"
"(encoding/json.mapEncoder).encode" "(runtime.plainError).Error"
"(encoding/json.arrayEncoder).encode" "(*bytes.Buffer).WriteByte"
"(encoding/json.arrayEncoder).encode" "(reflect.Value).Len"
"(encoding/json.arrayEncoder).encode" "(*bytes.Buffer).WriteByte"
"(encoding/json.arrayEncoder).encode" "(*bytes.Buffer).WriteByte"
"(encoding/json.arrayEncoder).encode" "(reflect.Value).Index"
"encoding/json.encodeByteSlice" "(reflect.Value).IsNil"
"encoding/json.encodeByteSlice" "(*bytes.Buffer).WriteString"
"(reflect.Value).bytesSlow" "(reflect.flag).kind"
"(reflect.Value).bytesSlow" "(reflect.Value).typ"
"(reflect.Value).bytesSlow" "(*internal/abi.Type).Elem"
"(reflect.Value).bytesSlow" "(*internal/abi.Type).Kind"
"(reflect.Value).bytesSlow" "(reflect.Value).typ"
"(reflect.Value).bytesSlow" "(*internal/abi.Type).Elem"
"(reflect.Value).bytesSlow" "(*internal/abi.Type).Kind"
"(reflect.Value).bytesSlow" "(reflect.flag).kind"
"(reflect.Value).bytesSlow" "(reflect.Value).CanAddr"
"(reflect.Value).bytesSlow" "(reflect.Value).typ"
"(reflect.Value).Bytes" "(reflect.Value).bytesSlow"
"encoding/json.encodeByteSlice" "(reflect.Value).Bytes"
"encoding/json.encodeByteSlice" "(*bytes.Buffer).AvailableBuffer"
"(*encoding/base64.Encoding).AppendEncode" "(*encoding/base64.Encoding).EncodedLen"
"(*encoding/base64.Encoding).AppendEncode" "slices.Grow[[]byte byte]"
"(*encoding/base64.Encoding).AppendEncode" "(*encoding/base64.Encoding).Encode"
"encoding/json.encodeByteSlice" "(*encoding/base64.Encoding).AppendEncode"
"encoding/json.encodeByteSlice" "(*bytes.Buffer).Write"
"(encoding/json.arrayEncoder).encode" "encoding/json.encodeByteSlice"
"(encoding/json.arrayEncoder).encode" "(encoding/json.floatEncoder).encode"
"(encoding/json.arrayEncoder).encode" "encoding/json.addrMarshalerEncoder"
"(encoding/json.arrayEncoder).encode" "encoding/json.marshalerEncoder"
"(encoding/json.arrayEncoder).encode" "encoding/json.boolEncoder"
"(encoding/json.arrayEncoder).encode" "encoding/json.uintEncoder"
"(encoding/json.arrayEncoder).encode" "(encoding/json.structEncoder).encode"
"(encoding/json.sliceEncoder).encode" "(reflect.Value).IsNil"
"(encoding/json.sliceEncoder).encode" "(*bytes.Buffer).WriteString"
"(encoding/json.sliceEncoder).encode" "(reflect.Value).UnsafePointer"
"(encoding/json.sliceEncoder).encode" "(reflect.Value).Len"
"encoding/json.invalidValueEncoder" "(*bytes.Buffer).WriteString"
"(encoding/json.sliceEncoder).encode" "encoding/json.invalidValueEncoder"
"encoding/json.typeEncoder$1" "(*sync.WaitGroup).Wait"
"encoding/json.typeEncoder$1" "encoding/json.typeEncoder$1"
"encoding/json.typeEncoder$1" "(encoding/json.ptrEncoder).encode"
"encoding/json.typeEncoder$1" "(encoding/json.floatEncoder).encode"
"encoding/json.typeEncoder$1" "encoding/json.invalidValueEncoder"
"encoding/json.typeEncoder$1" "encoding/json.addrMarshalerEncoder"
"encoding/json.typeEncoder$1" "encoding/json.marshalerEncoder"
"encoding/json.addrTextMarshalerEncoder" "(reflect.Value).Addr"
"encoding/json.addrTextMarshalerEncoder" "(reflect.Value).IsNil"
"encoding/json.addrTextMarshalerEncoder" "(*bytes.Buffer).WriteString"
"encoding/json.addrTextMarshalerEncoder" "(reflect.Value).Interface"
"encoding/json.addrTextMarshalerEncoder" "encoding/json.appendString[[]byte]"
"encoding/json.addrTextMarshalerEncoder" "(*regexp.Regexp).MarshalText"
"encoding/json.addrTextMarshalerEncoder" "(*bytes.Buffer).Write"
"encoding/json.addrTextMarshalerEncoder" "(log/slog.Level).MarshalText"
"encoding/json.addrTextMarshalerEncoder" "(time.Time).MarshalText"
"encoding/json.addrTextMarshalerEncoder" "(*math/big.Int).MarshalText"
"encoding/json.addrTextMarshalerEncoder" "(*math/big.Rat).MarshalText"
"encoding/json.addrTextMarshalerEncoder" "(*math/big.Float).MarshalText"
"encoding/json.addrTextMarshalerEncoder" "(reflect.Value).Type"
"encoding/json.addrTextMarshalerEncoder" "(*encoding/json.encodeState).error"
"encoding/json.addrTextMarshalerEncoder" "(*bytes.Buffer).AvailableBuffer"
"encoding/json.typeEncoder$1" "encoding/json.addrTextMarshalerEncoder"
"encoding/json.typeEncoder$1" "encoding/json.textMarshalerEncoder"
"encoding/json.typeEncoder$1" "encoding/json.boolEncoder"
"encoding/json.intEncoder" "(*bytes.Buffer).AvailableBuffer"
"encoding/json.intEncoder" "encoding/json.mayAppendQuote"
"encoding/json.intEncoder" "(reflect.Value).Int"
"encoding/json.intEncoder" "strconv.AppendInt"
"encoding/json.intEncoder" "encoding/json.mayAppendQuote"
"encoding/json.intEncoder" "(*bytes.Buffer).Write"
"encoding/json.typeEncoder$1" "encoding/json.intEncoder"
"encoding/json.typeEncoder$1" "encoding/json.uintEncoder"
"encoding/json.typeEncoder$1" "encoding/json.stringEncoder"
"encoding/json.typeEncoder$1" "encoding/json.interfaceEncoder"
"encoding/json.unsupportedTypeEncoder" "(reflect.Value).Type"
"encoding/json.unsupportedTypeEncoder" "(*encoding/json.encodeState).error"
"encoding/json.typeEncoder$1" "encoding/json.unsupportedTypeEncoder"
"encoding/json.typeEncoder$1" "(encoding/json.condAddrEncoder).encode"
"encoding/json.typeEncoder$1" "(encoding/json.structEncoder).encode"
"encoding/json.typeEncoder$1" "(encoding/json.mapEncoder).encode"
"encoding/json.typeEncoder$1" "(encoding/json.sliceEncoder).encode"
"encoding/json.typeEncoder$1" "encoding/json.encodeByteSlice"
"encoding/json.typeEncoder$1" "(encoding/json.arrayEncoder).encode"
"(encoding/json.sliceEncoder).encode" "encoding/json.typeEncoder$1"
"(encoding/json.sliceEncoder).encode" "encoding/json.addrTextMarshalerEncoder"
"(encoding/json.sliceEncoder).encode" "encoding/json.intEncoder"
"(encoding/json.sliceEncoder).encode" "(encoding/json.condAddrEncoder).encode"
"(encoding/json.sliceEncoder).encode" "(encoding/json.arrayEncoder).encode"
"(encoding/json.sliceEncoder).encode" "(encoding/json.ptrEncoder).encode"
"(encoding/json.sliceEncoder).encode" "(*encoding/json.encodeState).error"
"(encoding/json.sliceEncoder).encode" "encoding/json.textMarshalerEncoder"
"(encoding/json.sliceEncoder).encode" "encoding/json.stringEncoder"
"(encoding/json.sliceEncoder).encode" "encoding/json.interfaceEncoder"
"(encoding/json.sliceEncoder).encode" "(encoding/json.mapEncoder).encode"
"(encoding/json.sliceEncoder).encode" "encoding/json.unsupportedTypeEncoder"
"(encoding/json.sliceEncoder).encode" "(encoding/json.floatEncoder).encode"
"(encoding/json.sliceEncoder).encode" "encoding/json.addrMarshalerEncoder"
"(encoding/json.sliceEncoder).encode" "encoding/json.marshalerEncoder"
"(encoding/json.sliceEncoder).encode" "encoding/json.boolEncoder"
"(encoding/json.sliceEncoder).encode" "encoding/json.uintEncoder"
"(encoding/json.sliceEncoder).encode" "(encoding/json.structEncoder).encode"
"(encoding/json.sliceEncoder).encode" "(encoding/json.sliceEncoder).encode"
"(encoding/json.sliceEncoder).encode" "encoding/json.encodeByteSlice"
"(encoding/json.sliceEncoder).encode" "(reflect.Value).Type"
"(encoding/json.sliceEncoder).encode" "fmt.Sprintf"
"(encoding/json.arrayEncoder).encode" "(encoding/json.sliceEncoder).encode"
"(encoding/json.arrayEncoder).encode" "encoding/json.invalidValueEncoder"
"(encoding/json.arrayEncoder).encode" "encoding/json.typeEncoder$1"
"(encoding/json.arrayEncoder).encode" "encoding/json.addrTextMarshalerEncoder"
"(encoding/json.arrayEncoder).encode" "encoding/json.intEncoder"
"(encoding/json.arrayEncoder).encode" "(encoding/json.condAddrEncoder).encode"
"(encoding/json.arrayEncoder).encode" "(encoding/json.arrayEncoder).encode"
"(encoding/json.arrayEncoder).encode" "(encoding/json.ptrEncoder).encode"
"(encoding/json.arrayEncoder).encode" "encoding/json.unsupportedTypeEncoder"
"(encoding/json.arrayEncoder).encode" "encoding/json.textMarshalerEncoder"
"(encoding/json.arrayEncoder).encode" "encoding/json.stringEncoder"
"(encoding/json.arrayEncoder).encode" "encoding/json.interfaceEncoder"
"(encoding/json.arrayEncoder).encode" "(encoding/json.mapEncoder).encode"
"(encoding/json.mapEncoder).encode" "(encoding/json.arrayEncoder).encode"
"(encoding/json.mapEncoder).encode" "(*reflect.ValueError).Error"
"(encoding/json.mapEncoder).encode" "(*strconv.NumError).Error"
"(encoding/json.mapEncoder).encode" "(*time.ParseError).Error"
"(encoding/json.mapEncoder).encode" "(internal/poll.errNetClosing).Error"
"(encoding/json.mapEncoder).encode" "(*go/types.ArgumentError).Error"
"(encoding/json.mapEncoder).encode" "(*os.SyscallError).Error"
"(encoding/json.mapEncoder).encode" "(*encoding/json.UnsupportedValueError).Error"
"(encoding/json.mapEncoder).encode" "encoding/json.invalidValueEncoder"
"(encoding/json.mapEncoder).encode" "encoding/json.marshalerEncoder"
"(encoding/json.mapEncoder).encode" "(encoding/json.ptrEncoder).encode"
"(encoding/json.mapEncoder).encode" "(golang.org/x/tools/go/packages.Error).Error"
"(encoding/json.mapEncoder).encode" "(encoding/json.mapEncoder).encode"
"(encoding/json.mapEncoder).encode" "(go/types.Error).Error"
"(encoding/json.mapEncoder).encode" "(encoding/json.floatEncoder).encode"
"(encoding/json.mapEncoder).encode" "(*regexp/syntax.Error).Error"
"(encoding/json.mapEncoder).encode" "(*runtime.TypeAssertionError).Error"
"(encoding/json.mapEncoder).encode" "(*os/exec.Error).Error"
"(encoding/json.mapEncoder).encode" "(*encoding/json.SyntaxError).Error"
"(encoding/json.mapEncoder).encode" "(*internal/bisect.parseError).Error"
"(encoding/json.mapEncoder).encode" "(*os/exec.ExitError).Error"
"(encoding/json.mapEncoder).encode" "encoding/json.addrTextMarshalerEncoder"
"(encoding/json.mapEncoder).encode" "encoding/json.encodeByteSlice"
"(encoding/json.mapEncoder).encode" "encoding/json.typeEncoder$1"
"(encoding/json.mapEncoder).encode" "(*internal/reflectlite.ValueError).Error"
"(encoding/json.mapEncoder).encode" "(time.fileSizeError).Error"
"(encoding/json.mapEncoder).encode" "encoding/json.addrMarshalerEncoder"
"(encoding/json.mapEncoder).encode" "(go/scanner.ErrorList).Error"
"(encoding/json.mapEncoder).encode" "encoding/json.interfaceEncoder"
"(encoding/json.mapEncoder).encode" "encoding/json.uintEncoder"
"(encoding/json.mapEncoder).encode" "(go/scanner.Error).Error"
"(encoding/json.mapEncoder).encode" "(*encoding/json.InvalidUnmarshalError).Error"
"(encoding/json.mapEncoder).encode" "(os/exec.wrappedError).Error"
"(encoding/json.mapEncoder).encode" "encoding/json.stringEncoder"
"(encoding/json.mapEncoder).encode" "(*encoding/json.UnmarshalTypeError).Error"
"(encoding/json.mapEncoder).encode" "(*go/build/constraint.SyntaxError).Error"
"(encoding/json.mapEncoder).encode" "(*encoding/json.MarshalerError).Error"
"(encoding/json.mapEncoder).encode" "(*encoding/json.UnsupportedTypeError).Error"
"(encoding/json.mapEncoder).encode" "(encoding/base64.CorruptInputError).Error"
"(encoding/json.mapEncoder).encode" "(encoding/json.structEncoder).encode"
"(encoding/json.mapEncoder).encode" "(math/big.ErrNaN).Error"
"(encoding/json.mapEncoder).encode" "encoding/json.intEncoder"
"(encoding/json.mapEncoder).encode" "(runtime.errorAddressString).Error"
"(encoding/json.mapEncoder).encode" "(encoding/json.sliceEncoder).encode"
"(encoding/json.mapEncoder).encode" "fmt.Errorf"
"(encoding/json.mapEncoder).encode" "(*encoding/json.encodeState).error"
"(*reflect.MapIter).Value" "(*reflect.hiter).initialized"
"(*reflect.MapIter).Value" "reflect.mapiterelem"
"(*reflect.MapIter).Value" "(reflect.Value).typ"
"(*reflect.MapIter).Value" "(reflect.flag).ro"
"(*reflect.MapIter).Value" "(*internal/abi.Type).Kind"
"(*reflect.MapIter).Value" "reflect.copyVal"
"(encoding/json.mapEncoder).encode" "(*reflect.MapIter).Value"
"(encoding/json.mapEncoder).encode" "(*bytes.Buffer).WriteByte"
"(encoding/json.mapEncoder).encode" "(*bytes.Buffer).WriteByte"
"(encoding/json.mapEncoder).encode" "(*bytes.Buffer).AvailableBuffer"
"(encoding/json.mapEncoder).encode" "encoding/json.appendString[string]"
"(encoding/json.mapEncoder).encode" "(*bytes.Buffer).Write"
"(encoding/json.mapEncoder).encode" "(*bytes.Buffer).WriteByte"
"(encoding/json.mapEncoder).encode" "encoding/json.unsupportedTypeEncoder"
"(encoding/json.structEncoder).encode" "(encoding/json.mapEncoder).encode"
"(encoding/json.structEncoder).encode" "(*bytes.Buffer).WriteByte"
"(encoding/json.structEncoder).encode" "encoding/json.unsupportedTypeEncoder"
"(encoding/json.structEncoder).encode" "encoding/json.addrMarshalerEncoder"
"(encoding/json.structEncoder).encode" "encoding/json.marshalerEncoder"
"(encoding/json.structEncoder).encode" "encoding/json.boolEncoder"
"(encoding/json.structEncoder).encode" "encoding/json.uintEncoder"
"(encoding/json.structEncoder).encode" "(encoding/json.structEncoder).encode"
"(encoding/json.structEncoder).encode" "(encoding/json.sliceEncoder).encode"
"(encoding/json.structEncoder).encode" "encoding/json.encodeByteSlice"
"(encoding/json.structEncoder).encode" "(encoding/json.floatEncoder).encode"
"(encoding/json.structEncoder).encode" "encoding/json.typeEncoder$1"
"(encoding/json.structEncoder).encode" "encoding/json.addrTextMarshalerEncoder"
"(encoding/json.structEncoder).encode" "encoding/json.intEncoder"
"(encoding/json.structEncoder).encode" "(encoding/json.condAddrEncoder).encode"
"(encoding/json.structEncoder).encode" "(encoding/json.arrayEncoder).encode"
"(encoding/json.structEncoder).encode" "(encoding/json.ptrEncoder).encode"
"(encoding/json.structEncoder).encode" "encoding/json.invalidValueEncoder"
"(encoding/json.structEncoder).encode" "(*bytes.Buffer).WriteString"
"(encoding/json.structEncoder).encode" "(*bytes.Buffer).WriteString"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.structEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.sliceEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "encoding/json.encodeByteSlice"
"(encoding/json.condAddrEncoder).encode" "encoding/json.invalidValueEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.typeEncoder$1"
"(encoding/json.condAddrEncoder).encode" "encoding/json.addrTextMarshalerEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.intEncoder"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.condAddrEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.arrayEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.ptrEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.mapEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "encoding/json.textMarshalerEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.stringEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.interfaceEncoder"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.mapEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "encoding/json.unsupportedTypeEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.unsupportedTypeEncoder"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.structEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.sliceEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "encoding/json.encodeByteSlice"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.floatEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "encoding/json.addrMarshalerEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.marshalerEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.boolEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.uintEncoder"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.arrayEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.ptrEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "encoding/json.invalidValueEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.typeEncoder$1"
"(encoding/json.condAddrEncoder).encode" "encoding/json.addrTextMarshalerEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.intEncoder"
"(encoding/json.condAddrEncoder).encode" "(encoding/json.condAddrEncoder).encode"
"(encoding/json.condAddrEncoder).encode" "encoding/json.interfaceEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.textMarshalerEncoder"
"(encoding/json.condAddrEncoder).encode" "encoding/json.stringEncoder"
"(encoding/json.ptrEncoder).encode" "(encoding/json.condAddrEncoder).encode"
"(encoding/json.ptrEncoder).encode" "(encoding/json.arrayEncoder).encode"
"(encoding/json.ptrEncoder).encode" "(encoding/json.ptrEncoder).encode"
"(encoding/json.ptrEncoder).encode" "encoding/json.invalidValueEncoder"
"(encoding/json.ptrEncoder).encode" "encoding/json.typeEncoder$1"
"(encoding/json.ptrEncoder).encode" "encoding/json.addrTextMarshalerEncoder"
"(encoding/json.ptrEncoder).encode" "encoding/json.intEncoder"
"(encoding/json.ptrEncoder).encode" "(encoding/json.mapEncoder).encode"
"(encoding/json.ptrEncoder).encode" "(*encoding/json.encodeState).error"
"(encoding/json.ptrEncoder).encode" "encoding/json.textMarshalerEncoder"
"(encoding/json.ptrEncoder).encode" "encoding/json.stringEncoder"
"(encoding/json.ptrEncoder).encode" "encoding/json.interfaceEncoder"
"(encoding/json.ptrEncoder).encode" "encoding/json.unsupportedTypeEncoder"
"(encoding/json.ptrEncoder).encode" "encoding/json.uintEncoder"
"(encoding/json.ptrEncoder).encode" "(encoding/json.structEncoder).encode"
"(encoding/json.ptrEncoder).encode" "(encoding/json.sliceEncoder).encode"
"(encoding/json.ptrEncoder).encode" "encoding/json.encodeByteSlice"
"(encoding/json.ptrEncoder).encode" "(encoding/json.floatEncoder).encode"
"(encoding/json.ptrEncoder).encode" "encoding/json.addrMarshalerEncoder"
"(encoding/json.ptrEncoder).encode" "encoding/json.marshalerEncoder"
"(encoding/json.ptrEncoder).encode" "encoding/json.boolEncoder"
"(encoding/json.ptrEncoder).encode" "(reflect.Value).Type"
"(encoding/json.ptrEncoder).encode" "fmt.Sprintf"
"(*encoding/json.encodeState).reflectValue" "(encoding/json.ptrEncoder).encode"
"(*encoding/json.encodeState).reflectValue" "(encoding/json.floatEncoder).encode"
"(*encoding/json.encodeState).reflectValue" "encoding/json.invalidValueEncoder"
"(*encoding/json.encodeState).reflectValue" "encoding/json.typeEncoder$1"
"(*encoding/json.encodeState).reflectValue" "encoding/json.addrMarshalerEncoder"
"(*encoding/json.encodeState).reflectValue" "encoding/json.marshalerEncoder"
"(*encoding/json.encodeState).reflectValue" "encoding/json.addrTextMarshalerEncoder"
"(*encoding/json.encodeState).reflectValue" "encoding/json.textMarshalerEncoder"
"(*encoding/json.encodeState).reflectValue" "encoding/json.boolEncoder"
"(*encoding/json.encodeState).reflectValue" "encoding/json.intEncoder"
"(*encoding/json.encodeState).reflectValue" "encoding/json.uintEncoder"
"(*encoding/json.encodeState).reflectValue" "encoding/json.stringEncoder"
"(*encoding/json.encodeState).reflectValue" "encoding/json.interfaceEncoder"
"(*encoding/json.encodeState).reflectValue" "encoding/json.unsupportedTypeEncoder"
"(*encoding/json.encodeState).reflectValue" "(encoding/json.condAddrEncoder).encode"
"(*encoding/json.encodeState).reflectValue" "(encoding/json.structEncoder).encode"
"(*encoding/json.encodeState).reflectValue" "(encoding/json.mapEncoder).encode"
"(*encoding/json.encodeState).reflectValue" "(encoding/json.sliceEncoder).encode"
"(*encoding/json.encodeState).reflectValue" "encoding/json.encodeByteSlice"
"(*encoding/json.encodeState).reflectValue" "(encoding/json.arrayEncoder).encode"
"(*encoding/json.encodeState).marshal" "(*encoding/json.encodeState).reflectValue"
"encoding/json.Marshal" "(*encoding/json.encodeState).marshal"
"encoding/json.Marshal" "(*bytes.Buffer).Bytes"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "encoding/json.Marshal"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "(*os.File).Write"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "(*os.File).Close"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "(*os.File).Name"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "path/filepath.Join"
"os.WriteFile" "os.OpenFile"
"os.WriteFile" "(*os.File).Write"
"os.WriteFile" "(*os.File).Close"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays" "os.WriteFile"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).writeOverlays"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_sendto_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_dup2_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.throw$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_recvfrom_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).typeDecl$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcStart$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_read_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_recvmsg_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*log/slog.handleState).appendValue$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "sync.poolCleanup"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*internal/godebug.Setting).register"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_close_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*encoding/json.encodeState).marshal$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_readdir_r_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_sendmsg_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.callers$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_shutdown_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_munmap_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.casgstatus$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_fchdir_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.SetFinalizer$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_fcntl_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_setrlimit_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_accept_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).objDecl$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.StdSizes).Alignof$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcBgMarkWorker$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_lstat_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "go/types.computeInterfaceTypeSet$2$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.chansend$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.asyncPreempt2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_openat_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_fchmod_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.exit_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "flag.init$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_mmap_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "reflect.methodValueCall"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcStart$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "time.initLocal"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcStart$3"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_setsockopt_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_write_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_fdopendir_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*runtime.sweepLocked).sweep$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.chanrecv$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*fmt.ss).Token$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_lseek_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.mspinning"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.SetFinalizer$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_pwrite_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_getrlimit_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_execve_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "internal/poll.runtime_pollServerInit"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*runtime.sweepLocked).sweep$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.subster).typ$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.asyncPreempt"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcResetMarkState"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).funcDecl$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "reflect.embeddedIfaceMethStub"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*log/slog.Level).parse$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*internal/godebug.Setting).Value$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "flag.isZeroValue$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "go/parser.ParseFile$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_open_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/go/packages.goListDriver$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.sweepone$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_getsockopt_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).objDecl$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*internal/godebug.Setting).IncNonDefault"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_dup_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*flag.FlagSet).defaultUsage"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).validCycle$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_ftruncate_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/go/packages.goListDriver$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.copyenv"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_fchown_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.nanotime_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).collectMethods$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_pread_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_getcwd_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_sysctl_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.wbBufFlush$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "regexp/syntax.parse$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/sync/errgroup.Group).Go$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.typeWriter).signature$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.fatalthrow$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "context.WithCancel$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "flag.commandLineUsage"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_stat_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.cgoCheckTypedBlock$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.persistentalloc$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_fstat_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_closedir_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.gcSizes).Alignof$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "time.FixedZone$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "go/types.resolve$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.goready$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.init$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(log/slog.Value).Resolve$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.osyield"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "go/types.computeInterfaceTypeSet$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Named).expandUnderlying$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gocommand.Runner).RunRaw"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.IndexRune"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.HasPrefix"
"fmt.notSpace" "fmt.isSpace"
"strings.indexFunc" "fmt.notSpace"
"strings.indexFunc" "unicode.IsSpace"
"unicode.IsOneOf" "unicode.Is"
"(*golang.org/x/tools/go/packages.golistState).invokeGo$1" "unicode.IsOneOf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo$1" "strings.ContainsRune"
"strings.indexFunc" "(*golang.org/x/tools/go/packages.golistState).invokeGo$1"
"math/big.ratTok" "strings.ContainsRune"
"strings.indexFunc" "math/big.ratTok"
"strings.TrimLeftFunc" "strings.indexFunc"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.TrimLeftFunc"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.HasPrefix"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.HasPrefix"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.HasPrefix"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"strings.Trim" "strings.trimRightByte"
"strings.Trim" "strings.trimLeftByte"
"strings.Trim" "strings.makeASCIISet"
"strings.trimRightASCII" "(*strings.asciiSet).contains"
"strings.Trim" "strings.trimRightASCII"
"strings.trimLeftASCII" "(*strings.asciiSet).contains"
"strings.Trim" "strings.trimLeftASCII"
"unicode/utf8.DecodeLastRuneInString" "unicode/utf8.RuneStart"
"unicode/utf8.DecodeLastRuneInString" "unicode/utf8.DecodeRuneInString"
"strings.trimRightUnicode" "unicode/utf8.DecodeLastRuneInString"
"strings.trimRightUnicode" "strings.ContainsRune"
"strings.Trim" "strings.trimRightUnicode"
"strings.trimLeftUnicode" "unicode/utf8.DecodeRuneInString"
"strings.trimLeftUnicode" "strings.ContainsRune"
"strings.Trim" "strings.trimLeftUnicode"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Trim"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "bytes.NewBufferString"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Trim"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "bytes.NewBufferString"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Index"
"strings.TrimFunc" "strings.TrimLeftFunc"
"strings.lastIndexFunc" "unicode/utf8.DecodeLastRuneInString"
"strings.lastIndexFunc" "fmt.notSpace"
"strings.lastIndexFunc" "unicode.IsSpace"
"strings.lastIndexFunc" "(*golang.org/x/tools/go/packages.golistState).invokeGo$1"
"strings.lastIndexFunc" "math/big.ratTok"
"strings.TrimRightFunc" "strings.lastIndexFunc"
"strings.TrimRightFunc" "unicode/utf8.DecodeRuneInString"
"strings.TrimFunc" "strings.TrimRightFunc"
"strings.TrimSpace" "strings.TrimFunc"
"strings.TrimSpace" "strings.TrimRightFunc"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.TrimSpace"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Trim"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "bytes.NewBufferString"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Trim"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "bytes.NewBufferString"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Trim"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "bytes.NewBufferString"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Trim"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "bytes.NewBufferString"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/go/packages.usesExportData"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*bytes.Buffer).String"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Index"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.Trim"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "bytes.NewBufferString"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "strings.HasPrefix"
"golang.org/x/tools/go/packages.containsGoFile" "strings.HasSuffix"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/go/packages.containsGoFile"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).collectTypeParams$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).funcType$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.usleep_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.doRecordGoroutineProfile$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_mutex_init_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_cond_init_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_mutex_lock_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_mutex_unlock_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_cond_wait_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime._LostContendedRuntimeLock"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*runtime.mLockProfile).captureStack$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_cond_signal_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.tracefree$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*runtime.mheap).freeSpan$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcMarkDone$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcMarkDone$3"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcMarkDone$4"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.entersyscallblock$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.entersyscallblock$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.entersyscallblock_handoff"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.exitsyscall$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.exitsyscall$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.cgoCheckPtrWrite$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*internal/lazyregexp.Regexp).build"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "regexp.mergeRuneSets$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.unreachableMethod"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.heapSetType$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.tracealloc$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_chmod_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*os/exec.Cmd).Start$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*context.cancelCtx).propagateCancel$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*context.cancelCtx).propagateCancel$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"(*golang.org/x/tools/go/packages.loader).loadPackage$2" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.loader).loadPackage$2" "(*golang.org/x/tools/go/packages.loader).loadPackage$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).rawExpr$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).validVarType$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).typInternal$1"
"(*go/types.Checker).typInternal$2" "go/types.Comparable"
"(*go/types.Checker).typInternal$2" "go/types.isTypeParam"
"(*go/types.Checker).typInternal$2" "(*go/types.Checker).errorf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).typInternal$2"
"runtime.stopTheWorld$1" "runtime.casGToWaiting"
"runtime.stopTheWorld$1" "runtime.stopTheWorldWithSema"
"runtime.stopTheWorld$1" "runtime.casgstatus"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.stopTheWorld$1"
"runtime.startTheWorld$1" "runtime.startTheWorldWithSema"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.startTheWorld$1"
"runtime.wirep$1" "runtime.throw"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.wirep$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.wirep$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.kevent_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.read_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.raise_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.cgoSigtramp"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.sigtramp"
"runtime.forEachP$1" "runtime.getg"
"runtime.forEachP$1" "runtime.casGToWaiting"
"runtime.forEachPInternal" "runtime.acquirem"
"runtime.forEachPInternal" "runtime.getg"
"runtime.forEachPInternal" "(runtime.puintptr).ptr"
"runtime.forEachPInternal" "runtime.lock"
"runtime.forEachPInternal" "runtime.throw"
"runtime.forEachPInternal" "runtime.preemptall"
"runtime.forEachPInternal" "(runtime.puintptr).ptr"
"runtime.forEachPInternal" "runtime/internal/atomic.Store"
"runtime.forEachPInternal" "runtime/internal/atomic.Cas"
"runtime.forEachPInternal" "runtime.unlock"
"runtime.forEachPInternal" "runtime.gcMarkDone$1"
"runtime.forEachPInternal" "runtime.gcMarkTermination$4"
"runtime.forEachPInternal" "runtime.gcMarkDone$1"
"runtime.forEachPInternal" "runtime.gcMarkTermination$4"
"runtime.forEachPInternal" "(runtime.puintptr).ptr"
"runtime.forEachPInternal" "runtime.traceAcquire"
"runtime.forEachPInternal" "(runtime.traceLocker).ok"
"runtime.forEachPInternal" "(runtime.traceLocker).ok"
"runtime.forEachPInternal" "runtime/internal/atomic.Cas"
"runtime.forEachPInternal" "(runtime.traceLocker).GoSysBlock"
"runtime.forEachPInternal" "(runtime.traceLocker).ProcSteal"
"runtime.forEachPInternal" "runtime.traceRelease"
"runtime.forEachPInternal" "runtime.handoffp"
"runtime.forEachPInternal" "runtime.traceRelease"
"runtime.forEachPInternal" "runtime.notetsleep"
"runtime.forEachPInternal" "runtime.noteclear"
"runtime.forEachPInternal" "runtime.preemptall"
"runtime.forEachPInternal" "runtime.throw"
"runtime.forEachPInternal" "runtime.lock"
"runtime.forEachPInternal" "runtime.unlock"
"runtime.forEachPInternal" "runtime.releasem"
"runtime.forEachPInternal" "runtime.throw"
"runtime.forEachP$1" "runtime.forEachPInternal"
"runtime.forEachP$1" "runtime.casgstatus"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.forEachP$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcMarkTermination$1"
"runtime.startCheckmarks" "runtime.assertWorldStopped"
"runtime.startCheckmarks" "(runtime.arenaIdx).l1"
"runtime.startCheckmarks" "(runtime.arenaIdx).l2"
"runtime.startCheckmarks" "runtime.persistentalloc"
"runtime.startCheckmarks" "runtime.throw"
"runtime.gcMarkTermination$2" "runtime.startCheckmarks"
"runtime.gcMarkTermination$2" "runtime.gcResetMarkState"
"runtime.gcMarkTermination$2" "runtime.getg"
"runtime.gcMarkTermination$2" "(runtime.puintptr).ptr"
"runtime.gcMarkTermination$2" "runtime.gcDrain"
"runtime.gcMarkTermination$2" "runtime.getg"
"runtime.gcMarkTermination$2" "(runtime.puintptr).ptr"
"runtime.gcMarkTermination$2" "runtime.wbBufFlush1"
"runtime.gcMarkTermination$2" "(*runtime.gcWork).dispose"
"runtime.endCheckmarks" "runtime.gcMarkWorkAvailable"
"runtime.endCheckmarks" "runtime.throw"
"runtime.gcMarkTermination$2" "runtime.endCheckmarks"
"runtime.gcMarkTermination$2" "runtime.setGCPhase"
"runtime.gcSweep" "runtime.assertWorldStopped"
"runtime.gcSweep" "runtime.throw"
"runtime.gcSweep" "runtime.lock"
"(*runtime.activeSweep).reset" "runtime.assertWorldStopped"
"(*runtime.activeSweep).reset" "(*runtime/internal/atomic.Uint32).Store"
"runtime.gcSweep" "(*runtime.activeSweep).reset"
"runtime.gcSweep" "(*runtime/internal/atomic.Uint64).Store"
"runtime.gcSweep" "(*runtime/internal/atomic.Uint64).Store"
"runtime.gcSweep" "(*runtime/internal/atomic.Uintptr).Store"
"runtime.gcSweep" "runtime.unlock"
"(*runtime.sweepClass).clear" "runtime/internal/atomic.Store"
"runtime.gcSweep" "(*runtime.sweepClass).clear"
"runtime.gcSweep" "runtime.lock"
"runtime.gcSweep" "runtime.unlock"
"runtime.gcSweep" "runtime.lock"
"runtime.gcSweep" "(*runtime.mcache).prepareForSweep"
"runtime.gcSweep" "runtime.prepareFreeWorkbufs"
"runtime.gcSweep" "runtime.sweepone"
"runtime.gcSweep" "runtime.mProf_NextCycle"
"runtime.gcSweep" "runtime.mProf_Flush"
"runtime.freeSomeWbufs" "runtime.lock"
"runtime.freeSomeWbufs" "runtime.unlock"
"runtime.freeSomeWbufs" "runtime.systemstack"
"runtime.freeSomeWbufs" "(*runtime.mSpanList).isEmpty"
"runtime.freeSomeWbufs" "runtime.unlock"
"runtime.freeSomeWbufs" "(*runtime.mSpanList).isEmpty"
"runtime.gcSweep" "runtime.freeSomeWbufs"
"runtime.gcSweep" "runtime.ready"
"runtime.gcSweep" "runtime.unlock"
"runtime.gcMarkTermination$2" "runtime.gcSweep"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcMarkTermination$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcControllerCommit"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcMarkTermination$3"
"runtime.freeStackSpans" "runtime.lock"
"runtime.freeStackSpans" "runtime.lock"
"runtime.freeStackSpans" "runtime.unlock"
"runtime.freeStackSpans" "(*runtime.mSpanList).remove"
"runtime.freeStackSpans" "runtime.osStackFree"
"runtime.freeStackSpans" "(*runtime.mheap).freeManual"
"runtime.freeStackSpans" "runtime.unlock"
"runtime.freeStackSpans" "(*runtime.mSpanList).remove"
"runtime.freeStackSpans" "runtime.osStackFree"
"runtime.freeStackSpans" "(*runtime.mheap).freeManual"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.freeStackSpans"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcMarkTermination$5"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.exitsyscallfast$1"
"runtime.stackfree" "runtime.getg"
"runtime.stackfree" "runtime.throw"
"runtime.stackfree" "runtime.throw"
"runtime.stackfree" "runtime.memclrNoHeapPointers"
"runtime.stackfree" "runtime.sysFault"
"runtime.sysFree" "(*runtime.sysMemStat).add"
"runtime.sysFree" "(*runtime/internal/atomic.Uint64).Add"
"runtime.sysFree" "runtime.sysFreeOS"
"runtime.stackfree" "runtime.sysFree"
"runtime.stackfree" "runtime.msanfree"
"runtime.stackfree" "runtime.asanpoison"
"runtime.stackfree" "runtime.spanOfUnchecked"
"runtime.stackfree" "(*runtime.mSpanStateBox).get"
"runtime.stackfree" "runtime.lock"
"runtime.stackfree" "runtime.stackpoolfree"
"runtime.stackfree" "runtime.unlock"
"runtime.stackfree" "(runtime.puintptr).ptr"
"runtime.stackcacherelease" "runtime.lock"
"runtime.stackcacherelease" "(runtime.gclinkptr).ptr"
"runtime.stackcacherelease" "runtime.stackpoolfree"
"runtime.stackcacherelease" "runtime.unlock"
"runtime.stackfree" "runtime.stackcacherelease"
"runtime.stackfree" "(runtime.gclinkptr).ptr"
"runtime.stackfree" "(*runtime.mspan).base"
"runtime.stackfree" "runtime.throw"
"runtime.stackfree" "runtime.osStackFree"
"runtime.stackfree" "(*runtime.mheap).freeManual"
"runtime.stackfree" "runtime.stacklog2"
"runtime.stackfree" "runtime.lock"
"runtime.stackfree" "(*runtime.mSpanList).insert"
"runtime.stackfree" "runtime.unlock"
"runtime.allocm$1" "runtime.stackfree"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.allocm$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.mstart"
"runtime.getempty$1" "(*runtime.mheap).allocManual"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.getempty$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*runtime.p).destroy$1"
"runtime.gcAssistAlloc1" "runtime/internal/atomic.Load"
"runtime.gcAssistAlloc1" "runtime.nanotime"
"runtime.gcAssistAlloc1" "(runtime.puintptr).ptr"
"runtime.gcAssistAlloc1" "(*runtime.limiterEvent).start"
"runtime.gcAssistAlloc1" "runtime/internal/atomic.Xadd"
"runtime.gcAssistAlloc1" "runtime.throw"
"runtime.gcAssistAlloc1" "runtime.casGToWaiting"
"runtime.gcAssistAlloc1" "runtime.getg"
"runtime.gcAssistAlloc1" "(runtime.puintptr).ptr"
"runtime.gcDrainN" "runtime.throw"
"runtime.gcDrainN" "runtime.getg"
"runtime.gcDrainN" "(*runtime.gcCPULimiterState).limiting"
"runtime.gcDrainN" "(*runtime.gcWork).balance"
"runtime.gcDrainN" "(*runtime.gcWork).tryGetFast"
"runtime.gcDrainN" "(*runtime.gcWork).tryGet"
"runtime.gcDrainN" "runtime.wbBufFlush"
"runtime.gcDrainN" "(*runtime.gcWork).tryGet"
"runtime.gcDrainN" "runtime.scanobject"
"runtime.gcDrainN" "runtime/internal/atomic.Xadd"
"runtime.gcDrainN" "runtime.markroot"
"runtime.gcDrainN" "(*runtime/internal/atomic.Int64).Add"
"runtime.gcAssistAlloc1" "runtime.gcDrainN"
"runtime.gcAssistAlloc1" "runtime.casgstatus"
"runtime.gcAssistAlloc1" "(*runtime/internal/atomic.Float64).Load"
"runtime.gcAssistAlloc1" "runtime/internal/atomic.Xadd"
"runtime.gcAssistAlloc1" "runtime.throw"
"runtime.gcAssistAlloc1" "runtime.nanotime"
"runtime.gcAssistAlloc1" "(runtime.puintptr).ptr"
"runtime.gcAssistAlloc1" "runtime.gcMarkWorkAvailable"
"runtime.gcAssistAlloc1" "(*runtime.limiterEvent).stop"
"runtime.gcAssistAlloc1" "(*runtime/internal/atomic.Int64).Add"
"(*runtime.gcCPULimiterState).update" "(*runtime.gcCPULimiterState).tryLock"
"(*runtime.gcCPULimiterState).update" "runtime.throw"
"(*runtime.gcCPULimiterState).update" "(*runtime.gcCPULimiterState).updateLocked"
"(*runtime.gcCPULimiterState).update" "(*runtime.gcCPULimiterState).unlock"
"runtime.gcAssistAlloc1" "(*runtime.gcCPULimiterState).update"
"runtime.gcAssistAlloc$1" "runtime.gcAssistAlloc1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcAssistAlloc$1"
"(*runtime.mheap).alloc$1" "runtime.isSweepDone"
"(*runtime.mheap).reclaim" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.mheap).reclaim" "runtime.acquirem"
"(*runtime.mheap).reclaim" "runtime.traceAcquire"
"(*runtime.mheap).reclaim" "(runtime.traceLocker).ok"
"(*runtime.mheap).reclaim" "(runtime.traceLocker).GCSweepStart"
"(*runtime.mheap).reclaim" "runtime.traceRelease"
"(*runtime.mheap).reclaim" "(*runtime/internal/atomic.Uintptr).Load"
"(*runtime.mheap).reclaim" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.mheap).reclaim" "(*runtime/internal/atomic.Uintptr).CompareAndSwap"
"(*runtime.mheap).reclaim" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.mheap).reclaim" "runtime.lock"
"(*runtime.mheap).reclaimChunk" "runtime.assertLockHeld"
"(*runtime.mheap).reclaimChunk" "(*runtime.activeSweep).begin"
"(*runtime.mheap).reclaimChunk" "(runtime.arenaIdx).l1"
"(*runtime.mheap).reclaimChunk" "(runtime.arenaIdx).l2"
"(*runtime.mheap).reclaimChunk" "(*runtime.activeSweep).end"
"(*runtime.mheap).reclaimChunk" "runtime.traceAcquire"
"(*runtime.mheap).reclaimChunk" "(runtime.traceLocker).ok"
"(*runtime.mheap).reclaimChunk" "runtime/internal/atomic.Load8"
"(*runtime.mheap).reclaimChunk" "(*runtime.sweepLocker).tryAcquire"
"(*runtime.mheap).reclaimChunk" "runtime.unlock"
"(*runtime.mheap).reclaimChunk" "(*runtime.sweepLocked).sweep"
"(*runtime.mheap).reclaimChunk" "runtime.lock"
"(*runtime.mheap).reclaimChunk" "runtime/internal/atomic.Load8"
"(*runtime.mheap).reclaimChunk" "runtime.unlock"
"(*runtime.mheap).reclaimChunk" "(runtime.traceLocker).GCSweepSpan"
"(*runtime.mheap).reclaimChunk" "runtime.traceRelease"
"(*runtime.mheap).reclaimChunk" "runtime.lock"
"(*runtime.mheap).reclaimChunk" "runtime.assertLockHeld"
"(*runtime.mheap).reclaim" "(*runtime.mheap).reclaimChunk"
"(*runtime.mheap).reclaim" "(*runtime/internal/atomic.Uintptr).Add"
"(*runtime.mheap).reclaim" "runtime.unlock"
"(*runtime.mheap).reclaim" "runtime.traceAcquire"
"(*runtime.mheap).reclaim" "(runtime.traceLocker).ok"
"(*runtime.mheap).reclaim" "(runtime.traceLocker).GCSweepDone"
"(*runtime.mheap).reclaim" "runtime.traceRelease"
"(*runtime.mheap).reclaim" "runtime.releasem"
"(*runtime.mheap).alloc$1" "(*runtime.mheap).reclaim"
"(*runtime.mheap).alloc$1" "(*runtime.mheap).allocSpan"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*runtime.mheap).alloc$1"
"runtime.setprofilebucket" "runtime.lock"
"runtime.setprofilebucket" "(*runtime.fixalloc).alloc"
"runtime.setprofilebucket" "runtime.unlock"
"runtime.setprofilebucket" "runtime.addspecial"
"runtime.setprofilebucket" "runtime.throw"
"runtime.mProf_Malloc$1" "runtime.setprofilebucket"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.mProf_Malloc$1"
"runtime.Stack$1" "runtime.getg"
"runtime.Stack$1" "runtime.goroutineheader"
"runtime.Stack$1" "runtime.traceback"
"runtime.Stack$1" "runtime.tracebackothers"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.Stack$1"
"(*time.Timer).Stop" "time.stopTimer"
"(*os/exec.Cmd).awaitGoroutines$1" "(*time.Timer).Stop"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*os/exec.Cmd).awaitGoroutines$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"(*golang.org/x/tools/go/packages.golistState).getEnv$1" "(*golang.org/x/tools/go/packages.golistState).invokeGo"
"(*golang.org/x/tools/go/packages.golistState).getEnv$1" "encoding/json.NewDecoder"
"(*encoding/json.Decoder).peek" "encoding/json.isSpace"
"(*encoding/json.Decoder).refill" "(*fmt.ss).Read"
"(*encoding/json.Decoder).refill" "(*os.File).Read"
"(*encoding/json.Decoder).refill" "(*internal/poll.FD).Read"
"(*encoding/json.Decoder).refill" "(*io.LimitedReader).Read"
"(*encoding/json.Decoder).refill" "(*bufio.Reader).Read"
"(*encoding/json.Decoder).refill" "(*math/rand.Rand).Read"
"(*encoding/json.Decoder).refill" "(*fmt.stringReader).Read"
"(*encoding/json.Decoder).refill" "(*bytes.Reader).Read"
"(*encoding/json.Decoder).refill" "(*strings.Reader).Read"
"(*encoding/json.Decoder).refill" "(*bytes.Buffer).Read"
"(*encoding/json.Decoder).peek" "(*encoding/json.Decoder).refill"
"(*encoding/json.Decoder).tokenPrepareForDecode" "(*encoding/json.Decoder).peek"
"(*encoding/json.Decoder).tokenPrepareForDecode" "(*encoding/json.Decoder).peek"
"(*encoding/json.Decoder).tokenPrepareForDecode" "(*encoding/json.Decoder).InputOffset"
"(*encoding/json.Decoder).tokenPrepareForDecode" "(*encoding/json.Decoder).InputOffset"
"(*encoding/json.Decoder).Decode" "(*encoding/json.Decoder).tokenPrepareForDecode"
"(*encoding/json.Decoder).Decode" "(*encoding/json.Decoder).tokenValueAllowed"
"(*encoding/json.Decoder).Decode" "(*encoding/json.Decoder).InputOffset"
"(*encoding/json.Decoder).readValue" "(*encoding/json.scanner).reset"
"(*encoding/json.Decoder).readValue" "encoding/json.stateBeginValue"
"(*encoding/json.Decoder).readValue" "encoding/json.stateEndValue"
"(*encoding/json.Decoder).readValue" "(*encoding/json.Decoder).refill"
"(*encoding/json.Decoder).readValue" "encoding/json.stateBeginValue"
"encoding/json.nonSpace" "encoding/json.isSpace"
"(*encoding/json.Decoder).readValue" "encoding/json.nonSpace"
"(*encoding/json.Decoder).readValue" "encoding/json.stateBeginStringOrEmpty"
"(*encoding/json.Decoder).readValue" "encoding/json.stateBeginStringOrEmpty"
"(*encoding/json.Decoder).readValue" "encoding/json.stateBeginValueOrEmpty"
"(*encoding/json.Decoder).readValue" "encoding/json.stateBeginValueOrEmpty"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInString"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInString"
"(*encoding/json.Decoder).readValue" "encoding/json.stateNeg"
"(*encoding/json.Decoder).readValue" "encoding/json.stateNeg"
"(*encoding/json.Decoder).readValue" "encoding/json.state0"
"(*encoding/json.Decoder).readValue" "encoding/json.state0"
"(*encoding/json.Decoder).readValue" "encoding/json.stateT"
"(*encoding/json.Decoder).readValue" "encoding/json.stateT"
"(*encoding/json.Decoder).readValue" "encoding/json.stateF"
"(*encoding/json.Decoder).readValue" "encoding/json.stateF"
"(*encoding/json.Decoder).readValue" "encoding/json.stateN"
"(*encoding/json.Decoder).readValue" "encoding/json.stateN"
"(*encoding/json.Decoder).readValue" "encoding/json.state1"
"(*encoding/json.Decoder).readValue" "encoding/json.state1"
"(*encoding/json.Decoder).readValue" "encoding/json.stateEndTop"
"(*encoding/json.Decoder).readValue" "encoding/json.stateEndTop"
"(*encoding/json.Decoder).readValue" "encoding/json.stateEndValue"
"(*encoding/json.Decoder).readValue" "encoding/json.stateEndValue"
"(*encoding/json.Decoder).readValue" "encoding/json.stateBeginString"
"(*encoding/json.Decoder).readValue" "encoding/json.stateBeginString"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInStringEsc"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInStringEsc"
"(*encoding/json.Decoder).readValue" "encoding/json.stateDot"
"(*encoding/json.Decoder).readValue" "encoding/json.stateDot"
"(*encoding/json.Decoder).readValue" "encoding/json.stateE"
"(*encoding/json.Decoder).readValue" "encoding/json.stateE"
"(*encoding/json.Decoder).readValue" "encoding/json.stateTr"
"(*encoding/json.Decoder).readValue" "encoding/json.stateTr"
"(*encoding/json.Decoder).readValue" "encoding/json.stateFa"
"(*encoding/json.Decoder).readValue" "encoding/json.stateFa"
"(*encoding/json.Decoder).readValue" "encoding/json.stateNu"
"(*encoding/json.Decoder).readValue" "encoding/json.stateNu"
"(*encoding/json.Decoder).readValue" "encoding/json.stateError"
"(*encoding/json.Decoder).readValue" "encoding/json.stateError"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInStringEscU"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInStringEscU"
"(*encoding/json.Decoder).readValue" "encoding/json.stateDot0"
"(*encoding/json.Decoder).readValue" "encoding/json.stateDot0"
"(*encoding/json.Decoder).readValue" "encoding/json.stateESign"
"(*encoding/json.Decoder).readValue" "encoding/json.stateESign"
"(*encoding/json.Decoder).readValue" "encoding/json.stateTru"
"(*encoding/json.Decoder).readValue" "encoding/json.stateTru"
"(*encoding/json.Decoder).readValue" "encoding/json.stateFal"
"(*encoding/json.Decoder).readValue" "encoding/json.stateFal"
"(*encoding/json.Decoder).readValue" "encoding/json.stateNul"
"(*encoding/json.Decoder).readValue" "encoding/json.stateNul"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInStringEscU1"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInStringEscU1"
"(*encoding/json.Decoder).readValue" "encoding/json.stateE0"
"(*encoding/json.Decoder).readValue" "encoding/json.stateE0"
"(*encoding/json.Decoder).readValue" "encoding/json.stateFals"
"(*encoding/json.Decoder).readValue" "encoding/json.stateFals"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInStringEscU12"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInStringEscU12"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInStringEscU123"
"(*encoding/json.Decoder).readValue" "encoding/json.stateInStringEscU123"
"(*encoding/json.Decoder).Decode" "(*encoding/json.Decoder).readValue"
"(*encoding/json.Decoder).Decode" "(*encoding/json.decodeState).init"
"(*encoding/json.decodeState).unmarshal" "reflect.ValueOf"
"(*encoding/json.decodeState).unmarshal" "(reflect.Value).Kind"
"(*encoding/json.decodeState).unmarshal" "reflect.TypeOf"
"(*encoding/json.decodeState).unmarshal" "(*encoding/json.scanner).reset"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateBeginValueOrEmpty"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateInString"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateF"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateN"
"(*encoding/json.decodeState).scanWhile" "encoding/json.state1"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateBeginValue"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateBeginStringOrEmpty"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateNeg"
"(*encoding/json.decodeState).scanWhile" "encoding/json.state0"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateT"
"(*encoding/json.decodeState).scanWhile" "(*encoding/json.scanner).eof"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateEndTop"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateEndValue"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateBeginString"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateInStringEsc"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateDot"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateE"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateTr"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateFa"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateNu"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateError"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateInStringEscU"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateDot0"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateESign"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateTru"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateFal"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateNul"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateInStringEscU1"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateE0"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateFals"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateInStringEscU12"
"(*encoding/json.decodeState).scanWhile" "encoding/json.stateInStringEscU123"
"(*encoding/json.decodeState).unmarshal" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).value" "(reflect.Value).IsValid"
"(*encoding/json.decodeState).value" "(reflect.Value).IsValid"
"encoding/json.indirect" "(reflect.Value).Kind"
"encoding/json.indirect" "(reflect.Value).Addr"
"encoding/json.indirect" "(reflect.Value).CanAddr"
"encoding/json.indirect" "(reflect.Value).Type"
"encoding/json.indirect" "(*reflect.rtype).Name"
"encoding/json.indirect" "(reflect.Value).Kind"
"encoding/json.indirect" "(reflect.Value).Elem"
"encoding/json.indirect" "(reflect.Value).Kind"
"encoding/json.indirect" "(reflect.Value).Kind"
"encoding/json.indirect" "(reflect.Value).IsNil"
"encoding/json.indirect" "(reflect.Value).IsNil"
"encoding/json.indirect" "(reflect.Value).Elem"
"encoding/json.indirect" "(reflect.Value).Kind"
"encoding/json.indirect" "(reflect.Value).Elem"
"encoding/json.indirect" "(reflect.Value).Kind"
"encoding/json.indirect" "(reflect.Value).CanSet"
"encoding/json.indirect" "(reflect.Value).Elem"
"encoding/json.indirect" "(reflect.Value).IsNil"
"encoding/json.indirect" "(reflect.Value).Elem"
"encoding/json.indirect" "(reflect.Value).Elem"
"encoding/json.indirect" "(reflect.Value).Type"
"encoding/json.indirect" "(*reflect.rtype).Elem"
"encoding/json.indirect" "reflect.New"
"(reflect.flag).mustBeAssignableSlow" "reflect.valueMethodName"
"(reflect.flag).mustBeAssignableSlow" "reflect.valueMethodName"
"(reflect.flag).mustBeAssignableSlow" "reflect.valueMethodName"
"(reflect.flag).mustBeAssignable" "(reflect.flag).mustBeAssignableSlow"
"(reflect.Value).Set" "(reflect.flag).mustBeAssignable"
"(reflect.flag).mustBeExportedSlow" "reflect.valueMethodName"
"(reflect.flag).mustBeExportedSlow" "reflect.valueMethodName"
"(reflect.flag).mustBeExported" "(reflect.flag).mustBeExportedSlow"
"(reflect.Value).Set" "(reflect.flag).mustBeExported"
"(reflect.Value).Set" "(reflect.flag).kind"
"(reflect.Value).Set" "(reflect.Value).typ"
"(reflect.Value).Set" "(reflect.Value).assignTo"
"(reflect.Value).Set" "(reflect.Value).typ"
"(reflect.Value).Set" "reflect.typedmemclr"
"(reflect.Value).Set" "(reflect.Value).typ"
"(reflect.Value).Set" "reflect.typedmemmove"
"encoding/json.indirect" "(reflect.Value).Set"
"encoding/json.indirect" "(reflect.Value).Type"
"encoding/json.indirect" "(*reflect.rtype).NumMethod"
"encoding/json.indirect" "(reflect.Value).Interface"
"encoding/json.indirect" "(reflect.Value).CanInterface"
"encoding/json.indirect" "(reflect.Value).Interface"
"encoding/json.indirect" "(reflect.Value).Elem"
"(*encoding/json.decodeState).array" "encoding/json.indirect"
"(*encoding/json.decodeState).array" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).skip" "encoding/json.stateTr"
"(*encoding/json.decodeState).skip" "encoding/json.stateNu"
"(*encoding/json.decodeState).skip" "encoding/json.stateT"
"(*encoding/json.decodeState).skip" "encoding/json.stateInStringEsc"
"(*encoding/json.decodeState).skip" "encoding/json.stateN"
"(*encoding/json.decodeState).skip" "encoding/json.state1"
"(*encoding/json.decodeState).skip" "encoding/json.stateDot"
"(*encoding/json.decodeState).skip" "encoding/json.stateBeginValueOrEmpty"
"(*encoding/json.decodeState).skip" "encoding/json.stateInString"
"(*encoding/json.decodeState).skip" "encoding/json.stateF"
"(*encoding/json.decodeState).skip" "encoding/json.state0"
"(*encoding/json.decodeState).skip" "encoding/json.stateEndTop"
"(*encoding/json.decodeState).skip" "encoding/json.stateEndValue"
"(*encoding/json.decodeState).skip" "encoding/json.stateBeginString"
"(*encoding/json.decodeState).skip" "encoding/json.stateE"
"(*encoding/json.decodeState).skip" "encoding/json.stateBeginValue"
"(*encoding/json.decodeState).skip" "encoding/json.stateBeginStringOrEmpty"
"(*encoding/json.decodeState).skip" "encoding/json.stateNeg"
"(*encoding/json.decodeState).skip" "encoding/json.stateFa"
"(*encoding/json.decodeState).skip" "encoding/json.stateError"
"(*encoding/json.decodeState).skip" "encoding/json.stateInStringEscU"
"(*encoding/json.decodeState).skip" "encoding/json.stateDot0"
"(*encoding/json.decodeState).skip" "encoding/json.stateESign"
"(*encoding/json.decodeState).skip" "encoding/json.stateTru"
"(*encoding/json.decodeState).skip" "encoding/json.stateFal"
"(*encoding/json.decodeState).skip" "encoding/json.stateNul"
"(*encoding/json.decodeState).skip" "encoding/json.stateInStringEscU1"
"(*encoding/json.decodeState).skip" "encoding/json.stateE0"
"(*encoding/json.decodeState).skip" "encoding/json.stateFals"
"(*encoding/json.decodeState).skip" "encoding/json.stateInStringEscU12"
"(*encoding/json.decodeState).skip" "encoding/json.stateInStringEscU123"
"(*encoding/json.decodeState).array" "(*encoding/json.decodeState).skip"
"(*math/big.Int).UnmarshalText" "bytes.NewReader"
"(*math/big.Int).UnmarshalText" "(*math/big.Int).setFromScanner"
"(*math/big.Int).UnmarshalText" "fmt.Errorf"
"(*math/big.Int).UnmarshalJSON" "(*math/big.Int).UnmarshalText"
"(*encoding/json.decodeState).array" "(*math/big.Int).UnmarshalJSON"
"(*encoding/json.decodeState).array" "(reflect.Value).Kind"
"(*encoding/json.decodeState).array" "(reflect.Value).Set"
"(*time.Time).UnmarshalJSON" "errors.New"
"time.parseRFC3339[[]byte]" "time.parseRFC3339[[]byte]$1"
"time.parseRFC3339[[]byte]" "time.parseRFC3339[[]byte]$1"
"time.parseRFC3339[[]byte]" "time.daysIn"
"time.parseRFC3339[[]byte]" "time.parseRFC3339[[]byte]$1"
"time.parseRFC3339[[]byte]" "time.parseRFC3339[[]byte]$1"
"time.parseRFC3339[[]byte]" "time.parseRFC3339[[]byte]$1"
"time.parseRFC3339[[]byte]" "time.parseRFC3339[[]byte]$1"
"time.Date" "time.norm"
"time.Date" "time.norm"
"time.Date" "time.norm"
"time.Date" "time.norm"
"time.Date" "time.norm"
"time.Date" "time.daysSinceEpoch"
"time.Date" "time.isLeap"
"time.Date" "(*time.Location).lookup"
"time.Date" "time.unixTime"
"time.Date" "(*time.Time).setLoc"
"time.Date" "(*time.Location).lookup"
"time.parseRFC3339[[]byte]" "time.Date"
"time.parseRFC3339[[]byte]" "time.isDigit[[]byte]"
"time.parseNanoseconds[[]byte]" "time.commaOrPeriod"
"time.atoi[[]byte]" "time.leadingInt[[]byte]"
"time.parseNanoseconds[[]byte]" "time.atoi[[]byte]"
"time.parseRFC3339[[]byte]" "time.parseNanoseconds[[]byte]"
"time.parseRFC3339[[]byte]" "time.isDigit[[]byte]"
"time.parseRFC3339[[]byte]" "time.parseRFC3339[[]byte]$1"
"time.parseRFC3339[[]byte]" "time.parseRFC3339[[]byte]$1"
"(*time.Time).addSec" "(*time.Time).stripMono"
"time.parseRFC3339[[]byte]" "(*time.Time).addSec"
"time.parseRFC3339[[]byte]" "(*time.Time).unixSec"
"time.parseRFC3339[[]byte]" "(*time.Location).lookup"
"time.parseRFC3339[[]byte]" "(*time.Time).setLoc"
"time.FixedZone" "(*sync.Once).Do"
"time.FixedZone" "time.fixedZone"
"time.parseRFC3339[[]byte]" "time.FixedZone"
"time.parseRFC3339[[]byte]" "(*time.Time).setLoc"
"time.parseStrictRFC3339" "time.parseRFC3339[[]byte]"
"time.parseRFC3339[string]" "time.parseRFC3339[string]$1"
"time.parseRFC3339[string]" "time.parseRFC3339[string]$1"
"time.parseRFC3339[string]" "time.daysIn"
"time.parseRFC3339[string]" "time.parseRFC3339[string]$1"
"time.parseRFC3339[string]" "time.parseRFC3339[string]$1"
"time.parseRFC3339[string]" "time.parseRFC3339[string]$1"
"time.parseRFC3339[string]" "time.parseRFC3339[string]$1"
"time.parseRFC3339[string]" "time.Date"
"time.parseRFC3339[string]" "time.isDigit[string]"
"time.parseNanoseconds[string]" "time.commaOrPeriod"
"time.atoi[string]" "time.leadingInt[string]"
"time.parseNanoseconds[string]" "time.atoi[string]"
"time.parseRFC3339[string]" "time.parseNanoseconds[string]"
"time.parseRFC3339[string]" "time.isDigit[string]"
"time.parseRFC3339[string]" "time.parseRFC3339[string]$1"
"time.parseRFC3339[string]" "time.parseRFC3339[string]$1"
"time.parseRFC3339[string]" "(*time.Time).addSec"
"time.parseRFC3339[string]" "(*time.Time).unixSec"
"time.parseRFC3339[string]" "(*time.Location).lookup"
"time.parseRFC3339[string]" "(*time.Time).setLoc"
"time.parseRFC3339[string]" "time.FixedZone"
"time.parseRFC3339[string]" "(*time.Time).setLoc"
"time.Parse" "time.parseRFC3339[string]"
"time.nextStdChunk" "time.startsWithLowerCase"
"time.nextStdChunk" "time.startsWithLowerCase"
"time.nextStdChunk" "time.isDigit[string]"
"time.nextStdChunk" "time.stdFracSecond"
"time.parse" "time.nextStdChunk"
"time.skip" "time.cutspace"
"time.skip" "time.cutspace"
"time.parse" "time.skip"
"time.newParseError" "time.cloneString"
"time.newParseError" "time.cloneString"
"time.parse" "time.newParseError"
"time.parse" "time.quote"
"time.parse" "time.newParseError"
"time.parse" "time.atoi[string]"
"time.lookup" "time.match"
"time.parse" "time.lookup"
"time.parse" "time.atoi[string]"
"time.parse" "time.isDigit[string]"
"time.parse" "time.lookup"
"time.getnum" "time.isDigit[string]"
"time.getnum" "time.isDigit[string]"
"time.parse" "time.getnum"
"time.parse" "time.lookup"
"time.parse" "time.lookup"
"time.parse" "time.getnum"
"time.parse" "time.getnum"
"time.getnum3" "time.isDigit[string]"
"time.parse" "time.getnum3"
"time.parse" "time.getnum"
"time.parse" "time.getnum"
"time.parse" "time.getnum"
"time.parse" "time.nextStdChunk"
"time.parse" "time.isDigit[string]"
"time.parse" "time.commaOrPeriod"
"time.parse" "time.parseNanoseconds[string]"
"time.parse" "time.isDigit[string]"
"time.parse" "time.getnum"
"time.parse" "time.getnum"
"time.parse" "time.getnum"
"time.parse" "time.digitsLen"
"time.parseSignedOffset" "time.leadingInt[string]"
"time.parseGMT" "time.parseSignedOffset"
"time.parseTimeZone" "time.parseGMT"
"time.parseTimeZone" "time.parseSignedOffset"
"time.parse" "time.parseTimeZone"
"time.parse" "time.parseNanoseconds[string]"
"time.parse" "time.commaOrPeriod"
"time.parse" "time.parseNanoseconds[string]"
"time.parse" "time.newParseError"
"time.parse" "time.newParseError"
"time.parse" "time.isLeap"
"time.parse" "time.newParseError"
"time.parse" "time.newParseError"
"time.parse" "time.newParseError"
"time.parse" "time.newParseError"
"time.parse" "time.daysIn"
"time.parse" "time.Date"
"time.parse" "time.Date"
"time.parse" "(*time.Time).addSec"
"time.parse" "(*time.Time).unixSec"
"time.parse" "(*time.Location).lookup"
"time.parse" "(*time.Time).setLoc"
"time.parse" "time.cloneString"
"time.parse" "time.FixedZone"
"time.parse" "(*time.Time).setLoc"
"time.parse" "time.Date"
"time.parse" "(*time.Time).unixSec"
"(*time.Location).lookupName" "(*time.Location).get"
"(*time.Location).lookupName" "(*time.Location).lookup"
"time.parse" "(*time.Location).lookupName"
"time.parse" "time.Date"
"time.parse" "(*time.Time).addSec"
"time.parse" "(*time.Time).setLoc"
"time.parse" "time.atoi[string]"
"time.parse" "time.cloneString"
"time.parse" "time.FixedZone"
"time.parse" "(*time.Time).setLoc"
"time.Parse" "time.parse"
"time.parseStrictRFC3339" "time.Parse"
"time.parseStrictRFC3339" "time.parseStrictRFC3339$1"
"time.parseStrictRFC3339" "time.parseStrictRFC3339$1"
"(*time.Time).UnmarshalJSON" "time.parseStrictRFC3339"
"(*encoding/json.decodeState).array" "(*time.Time).UnmarshalJSON"
"encoding/json.checkValid" "(*encoding/json.scanner).reset"
"encoding/json.checkValid" "encoding/json.stateBeginValue"
"encoding/json.checkValid" "(*encoding/json.scanner).eof"
"encoding/json.checkValid" "encoding/json.stateBeginStringOrEmpty"
"encoding/json.checkValid" "encoding/json.stateBeginValueOrEmpty"
"encoding/json.checkValid" "encoding/json.stateInString"
"encoding/json.checkValid" "encoding/json.stateNeg"
"encoding/json.checkValid" "encoding/json.state0"
"encoding/json.checkValid" "encoding/json.stateT"
"encoding/json.checkValid" "encoding/json.stateF"
"encoding/json.checkValid" "encoding/json.stateN"
"encoding/json.checkValid" "encoding/json.state1"
"encoding/json.checkValid" "encoding/json.stateEndTop"
"encoding/json.checkValid" "encoding/json.stateEndValue"
"encoding/json.checkValid" "encoding/json.stateBeginString"
"encoding/json.checkValid" "encoding/json.stateInStringEsc"
"encoding/json.checkValid" "encoding/json.stateDot"
"encoding/json.checkValid" "encoding/json.stateE"
"encoding/json.checkValid" "encoding/json.stateTr"
"encoding/json.checkValid" "encoding/json.stateFa"
"encoding/json.checkValid" "encoding/json.stateNu"
"encoding/json.checkValid" "encoding/json.stateError"
"encoding/json.checkValid" "encoding/json.stateInStringEscU"
"encoding/json.checkValid" "encoding/json.stateDot0"
"encoding/json.checkValid" "encoding/json.stateESign"
"encoding/json.checkValid" "encoding/json.stateTru"
"encoding/json.checkValid" "encoding/json.stateFal"
"encoding/json.checkValid" "encoding/json.stateNul"
"encoding/json.checkValid" "encoding/json.stateInStringEscU1"
"encoding/json.checkValid" "encoding/json.stateE0"
"encoding/json.checkValid" "encoding/json.stateFals"
"encoding/json.checkValid" "encoding/json.stateInStringEscU12"
"encoding/json.checkValid" "encoding/json.stateInStringEscU123"
"encoding/json.Unmarshal" "encoding/json.checkValid"
"encoding/json.Unmarshal" "(*encoding/json.decodeState).init"
"encoding/json.Unmarshal" "(*encoding/json.decodeState).unmarshal"
"(*golang.org/x/tools/go/packages.Package).UnmarshalJSON" "encoding/json.Unmarshal"
"(*encoding/json.decodeState).array" "(*golang.org/x/tools/go/packages.Package).UnmarshalJSON"
"(*log/slog.Level).UnmarshalJSON" "strconv.Unquote"
"(*log/slog.Level).parse" "(*log/slog.Level).parse$1"
"strings.IndexAny" "strings.IndexRune"
"strings.IndexAny" "strings.makeASCIISet"
"strings.IndexAny" "(*strings.asciiSet).contains"
"strings.IndexAny" "strings.IndexRune"
"(*log/slog.Level).parse" "strings.IndexAny"
"strconv.Atoi" "strconv.ParseInt"
"strconv.Atoi" "strconv.syntaxError"
"strconv.Atoi" "strconv.syntaxError"
"(*log/slog.Level).parse" "strconv.Atoi"
"strings.Map" "unicode.ToUpper"
"strings.Map" "unicode.ToLower"
"strings.Map" "(*strings.Builder).Cap"
"strings.Map" "unicode/utf8.DecodeRuneInString"
"strings.Map" "(*strings.Builder).Grow"
"strings.Map" "(*strings.Builder).WriteString"
"strings.Map" "unicode/utf8.RuneLen"
"strings.Map" "(*strings.Builder).WriteRune"
"strings.Map" "unicode.ToUpper"
"strings.Map" "unicode.ToLower"
"strings.Map" "(*strings.Builder).String"
"(*strings.Builder).WriteByte" "(*strings.Builder).copyCheck"
"strings.Map" "(*strings.Builder).WriteByte"
"strings.Map" "(*strings.Builder).WriteRune"
"strings.ToUpper" "strings.Map"
"strings.ToUpper" "(*strings.Builder).Grow"
"strings.ToUpper" "(*strings.Builder).WriteString"
"strings.ToUpper" "(*strings.Builder).WriteByte"
"strings.ToUpper" "(*strings.Builder).WriteString"
"strings.ToUpper" "(*strings.Builder).String"
"(*log/slog.Level).parse" "strings.ToUpper"
"(*log/slog.Level).parse" "errors.New"
"(*log/slog.Level).UnmarshalJSON" "(*log/slog.Level).parse"
"(*encoding/json.decodeState).array" "(*log/slog.Level).UnmarshalJSON"
"(*encoding/json.decodeState).array" "(reflect.Value).Type"
"(*encoding/json.decodeState).addErrorContext" "(*reflect.rtype).Name"
"(*encoding/json.decodeState).addErrorContext" "strings.Join"
"(*encoding/json.decodeState).saveError" "(*encoding/json.decodeState).addErrorContext"
"(*encoding/json.decodeState).array" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).array" "(*encoding/json.decodeState).skip"
"(*encoding/json.decodeState).array" "(reflect.Value).Kind"
"(*encoding/json.decodeState).array" "(reflect.Value).NumMethod"
"(*encoding/json.decodeState).array" "(reflect.Value).Type"
"(*encoding/json.decodeState).array" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).array" "(*encoding/json.decodeState).skip"
"(*encoding/json.decodeState).arrayInterface" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).valueInterface" "(*encoding/json.decodeState).arrayInterface"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateT"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateInStringEsc"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateBeginValueOrEmpty"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateInString"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateF"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateN"
"(*encoding/json.decodeState).scanNext" "encoding/json.state1"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateDot"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateE"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateBeginValue"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateBeginStringOrEmpty"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateNeg"
"(*encoding/json.decodeState).scanNext" "encoding/json.state0"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateEndTop"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateEndValue"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateBeginString"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateFa"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateError"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateTr"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateNu"
"(*encoding/json.decodeState).scanNext" "(*encoding/json.scanner).eof"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateInStringEscU"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateDot0"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateESign"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateTru"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateFal"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateNul"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateInStringEscU1"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateE0"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateFals"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateInStringEscU12"
"(*encoding/json.decodeState).scanNext" "encoding/json.stateInStringEscU123"
"(*encoding/json.decodeState).valueInterface" "(*encoding/json.decodeState).scanNext"
"(*encoding/json.decodeState).objectInterface" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).objectInterface" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).rescanLiteral" "encoding/json.stateEndValue"
"(*encoding/json.decodeState).objectInterface" "(*encoding/json.decodeState).rescanLiteral"
"(*encoding/json.decodeState).objectInterface" "(*encoding/json.decodeState).readIndex"
"encoding/json.unquoteBytes" "unicode/utf8.DecodeRune"
"encoding/json.unquoteBytes" "encoding/json.getu4"
"encoding/json.unquoteBytes" "unicode/utf16.IsSurrogate"
"encoding/json.unquoteBytes" "encoding/json.getu4"
"encoding/json.unquoteBytes" "unicode/utf16.DecodeRune"
"encoding/json.unquoteBytes" "unicode/utf8.EncodeRune"
"encoding/json.unquoteBytes" "unicode/utf8.EncodeRune"
"encoding/json.unquoteBytes" "unicode/utf8.DecodeRune"
"encoding/json.unquoteBytes" "unicode/utf8.EncodeRune"
"encoding/json.unquote" "encoding/json.unquoteBytes"
"(*encoding/json.decodeState).objectInterface" "encoding/json.unquote"
"(*encoding/json.decodeState).objectInterface" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).objectInterface" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).objectInterface" "(*encoding/json.decodeState).valueInterface"
"(*encoding/json.decodeState).objectInterface" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).valueInterface" "(*encoding/json.decodeState).objectInterface"
"(*encoding/json.decodeState).valueInterface" "(*encoding/json.decodeState).scanNext"
"(*encoding/json.decodeState).literalInterface" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalInterface" "(*encoding/json.decodeState).rescanLiteral"
"(*encoding/json.decodeState).literalInterface" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalInterface" "encoding/json.unquote"
"strconv.special" "strconv.commonPrefixLenIgnoreCase"
"strconv.special" "strconv.commonPrefixLenIgnoreCase"
"strconv.special" "math.Inf"
"strconv.special" "math.NaN"
"strconv.atof32" "strconv.special"
"strconv.readFloat" "strconv.lower"
"strconv.readFloat" "strconv.lower"
"strconv.readFloat" "strconv.lower"
"strconv.readFloat" "strconv.lower"
"strconv.readFloat" "strconv.lower"
"strconv.readFloat" "strconv.underscoreOK"
"strconv.atof32" "strconv.readFloat"
"strconv.atof32" "strconv.syntaxError"
"strconv.atofHex" "strconv.rangeError"
"strconv.atofHex" "math.Float32frombits"
"strconv.atofHex" "math.Float64frombits"
"strconv.atof32" "strconv.atofHex"
"(*strconv.decimal).set" "strconv.lower"
"strconv.atof32" "(*strconv.decimal).set"
"strconv.atof32" "strconv.atof32exact"
"strconv.eiselLemire32" "math.Float32frombits"
"strconv.eiselLemire32" "math/bits.LeadingZeros64"
"strconv.eiselLemire32" "math/bits.Mul64"
"strconv.eiselLemire32" "math/bits.Mul64"
"strconv.eiselLemire32" "math.Float32frombits"
"strconv.atof32" "strconv.eiselLemire32"
"strconv.atof32" "strconv.eiselLemire32"
"strconv.atof32" "strconv.syntaxError"
"(*strconv.decimal).floatBits" "(*strconv.decimal).Shift"
"(*strconv.decimal).floatBits" "(*strconv.decimal).Shift"
"(*strconv.decimal).floatBits" "(*strconv.decimal).Shift"
"(*strconv.decimal).floatBits" "(*strconv.decimal).Shift"
"(*strconv.decimal).RoundedInteger" "strconv.shouldRoundUp"
"(*strconv.decimal).floatBits" "(*strconv.decimal).RoundedInteger"
"strconv.atof32" "(*strconv.decimal).floatBits"
"strconv.atof32" "math.Float32frombits"
"strconv.atof32" "strconv.rangeError"
"strconv.parseFloatPrefix" "strconv.atof32"
"strconv.atof64" "strconv.special"
"strconv.atof64" "strconv.readFloat"
"strconv.atof64" "strconv.syntaxError"
"strconv.atof64" "strconv.atofHex"
"strconv.atof64" "(*strconv.decimal).set"
"strconv.atof64" "strconv.atof64exact"
"strconv.eiselLemire64" "math.Float64frombits"
"strconv.eiselLemire64" "math/bits.LeadingZeros64"
"strconv.eiselLemire64" "math/bits.Mul64"
"strconv.eiselLemire64" "math/bits.Mul64"
"strconv.eiselLemire64" "math.Float64frombits"
"strconv.atof64" "strconv.eiselLemire64"
"strconv.atof64" "strconv.eiselLemire64"
"strconv.atof64" "strconv.syntaxError"
"strconv.atof64" "(*strconv.decimal).floatBits"
"strconv.atof64" "math.Float64frombits"
"strconv.atof64" "strconv.rangeError"
"strconv.parseFloatPrefix" "strconv.atof64"
"strconv.ParseFloat" "strconv.parseFloatPrefix"
"strconv.ParseFloat" "strconv.syntaxError"
"(*encoding/json.decodeState).convertNumber" "strconv.ParseFloat"
"reflect.TypeFor[float64]" "reflect.TypeOf"
"reflect.TypeFor[float64]" "(*reflect.rtype).Elem"
"(*encoding/json.decodeState).convertNumber" "reflect.TypeFor[float64]"
"(*encoding/json.decodeState).literalInterface" "(*encoding/json.decodeState).convertNumber"
"(*encoding/json.decodeState).literalInterface" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).valueInterface" "(*encoding/json.decodeState).literalInterface"
"(*encoding/json.decodeState).arrayInterface" "(*encoding/json.decodeState).valueInterface"
"(*encoding/json.decodeState).arrayInterface" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).array" "(*encoding/json.decodeState).arrayInterface"
"(*encoding/json.decodeState).array" "reflect.ValueOf"
"(*encoding/json.decodeState).array" "(reflect.Value).Set"
"(*encoding/json.decodeState).array" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).array" "(reflect.Value).Len"
"(*encoding/json.decodeState).array" "(reflect.Value).Kind"
"(reflect.Value).Cap" "(reflect.flag).kind"
"(reflect.Value).capNonSlice" "(reflect.flag).kind"
"(reflect.Value).capNonSlice" "(reflect.Value).typ"
"(reflect.Value).capNonSlice" "(*internal/abi.Type).Len"
"(reflect.Value).capNonSlice" "(reflect.Value).pointer"
"(reflect.Value).capNonSlice" "reflect.chancap"
"(reflect.Value).capNonSlice" "(reflect.Value).typ"
"(reflect.Value).capNonSlice" "(*internal/abi.Type).Elem"
"(reflect.Value).capNonSlice" "(*internal/abi.Type).Kind"
"(reflect.Value).capNonSlice" "(reflect.flag).kind"
"(reflect.Value).capNonSlice" "(reflect.Value).typ"
"(reflect.Value).capNonSlice" "(*internal/abi.Type).Elem"
"(reflect.Value).capNonSlice" "(*internal/abi.Type).Len"
"(reflect.Value).Cap" "(reflect.Value).capNonSlice"
"(*encoding/json.decodeState).array" "(reflect.Value).Cap"
"(*encoding/json.decodeState).array" "(reflect.Value).Len"
"(reflect.Value).Grow" "(reflect.flag).mustBeAssignable"
"(reflect.Value).Grow" "(reflect.flag).mustBe"
"(reflect.Value).grow" "(reflect.Value).typ"
"(reflect.Value).grow" "(*internal/abi.Type).Elem"
"(reflect.Value).grow" "reflect.growslice"
"(reflect.Value).Grow" "(reflect.Value).grow"
"(*encoding/json.decodeState).array" "(reflect.Value).Grow"
"(*encoding/json.decodeState).array" "(reflect.Value).Len"
"(reflect.Value).SetLen" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetLen" "(reflect.flag).mustBe"
"(*encoding/json.decodeState).array" "(reflect.Value).SetLen"
"(*encoding/json.decodeState).array" "(reflect.Value).Index"
"(*encoding/json.decodeState).array" "(*encoding/json.decodeState).value"
"(*encoding/json.decodeState).array" "(*encoding/json.decodeState).value"
"(*encoding/json.decodeState).array" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).array" "(reflect.Value).Kind"
"(*encoding/json.decodeState).array" "(reflect.Value).SetLen"
"(*encoding/json.decodeState).array" "(reflect.Value).Index"
"(reflect.Value).SetZero" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetZero" "(reflect.flag).kind"
"(reflect.Value).SetZero" "(reflect.Value).typ"
"(reflect.Value).SetZero" "reflect.typedmemclr"
"(reflect.Value).SetZero" "(reflect.Value).Kind"
"(*encoding/json.decodeState).array" "(reflect.Value).SetZero"
"(*encoding/json.decodeState).array" "(reflect.Value).Len"
"(*encoding/json.decodeState).array" "(reflect.Value).Type"
"reflect.MakeSlice" "(*reflect.rtype).Kind"
"reflect.MakeSlice" "(*reflect.rtype).Elem"
"reflect.MakeSlice" "reflect.unsafe_NewArray"
"(*encoding/json.decodeState).array" "reflect.MakeSlice"
"(*encoding/json.decodeState).value" "(*encoding/json.decodeState).array"
"(*encoding/json.decodeState).value" "(*encoding/json.decodeState).scanNext"
"(*encoding/json.decodeState).value" "(*encoding/json.decodeState).skip"
"(*encoding/json.decodeState).value" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).value" "(*encoding/json.decodeState).rescanLiteral"
"(*encoding/json.decodeState).value" "(reflect.Value).IsValid"
"(*encoding/json.decodeState).object" "encoding/json.indirect"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).skip"
"(*encoding/json.decodeState).object" "(*math/big.Int).UnmarshalJSON"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).scanWhile"
"(reflect.Value).SetMapIndex" "(reflect.flag).mustBe"
"(reflect.Value).SetMapIndex" "(reflect.flag).mustBeExported"
"(reflect.Value).SetMapIndex" "(reflect.flag).mustBeExported"
"(reflect.Value).SetMapIndex" "(reflect.Value).typ"
"(reflect.Value).SetMapIndex" "(reflect.Value).typ"
"(reflect.Value).SetMapIndex" "(reflect.Value).assignTo"
"(reflect.Value).SetMapIndex" "(*internal/abi.Type).Size"
"(reflect.Value).SetMapIndex" "(reflect.Value).typ"
"(reflect.Value).SetMapIndex" "(reflect.flag).kind"
"(reflect.Value).SetMapIndex" "(reflect.Value).typ"
"(reflect.Value).SetMapIndex" "(reflect.Value).pointer"
"(reflect.Value).SetMapIndex" "reflect.mapdelete_faststr"
"(reflect.Value).SetMapIndex" "(reflect.flag).mustBeExported"
"(reflect.Value).SetMapIndex" "(reflect.Value).assignTo"
"(reflect.Value).SetMapIndex" "(reflect.Value).typ"
"(reflect.Value).SetMapIndex" "(reflect.Value).pointer"
"reflect.contentEscapes" "reflect.escapes"
"reflect.mapassign_faststr" "reflect.contentEscapes"
"reflect.mapassign_faststr" "reflect.contentEscapes"
"reflect.mapassign_faststr" "reflect.mapassign_faststr0"
"(reflect.Value).SetMapIndex" "reflect.mapassign_faststr"
"(reflect.Value).SetMapIndex" "(reflect.Value).typ"
"(reflect.Value).SetMapIndex" "(reflect.Value).typ"
"(reflect.Value).SetMapIndex" "(reflect.Value).pointer"
"(reflect.Value).SetMapIndex" "reflect.mapdelete"
"(reflect.Value).SetMapIndex" "(reflect.flag).mustBeExported"
"(reflect.Value).SetMapIndex" "(reflect.Value).assignTo"
"(reflect.Value).SetMapIndex" "(reflect.Value).typ"
"(reflect.Value).SetMapIndex" "(reflect.Value).pointer"
"reflect.mapassign" "reflect.contentEscapes"
"reflect.mapassign" "reflect.contentEscapes"
"reflect.mapassign" "reflect.mapassign0"
"(reflect.Value).SetMapIndex" "reflect.mapassign"
"(*encoding/json.decodeState).object" "(reflect.Value).SetMapIndex"
"(*encoding/json.decodeState).object" "(*time.Time).UnmarshalJSON"
"(*encoding/json.decodeState).object" "(*golang.org/x/tools/go/packages.Package).UnmarshalJSON"
"(*encoding/json.decodeState).object" "(*log/slog.Level).UnmarshalJSON"
"(*encoding/json.decodeState).object" "(reflect.Value).Type"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).skip"
"(*encoding/json.decodeState).object" "(reflect.Value).Type"
"(*encoding/json.decodeState).object" "(reflect.Value).Kind"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).objectInterface"
"(*encoding/json.decodeState).object" "reflect.ValueOf"
"(*encoding/json.decodeState).object" "(reflect.Value).Set"
"(*encoding/json.decodeState).object" "(reflect.Value).Kind"
"(*encoding/json.decodeState).object" "(reflect.Value).NumMethod"
"(*encoding/json.decodeState).object" "(*reflect.rtype).Key"
"(*encoding/json.decodeState).object" "(*reflect.rtype).Kind"
"(*encoding/json.decodeState).object" "encoding/json.cachedTypeFields"
"(*encoding/json.decodeState).object" "(reflect.Value).IsNil"
"(*encoding/json.decodeState).object" "(*reflect.rtype).Key"
"(*encoding/json.decodeState).object" "reflect.PointerTo"
"(*encoding/json.decodeState).object" "(*reflect.rtype).Implements"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).skip"
"reflect.MakeMapWithSize" "(*reflect.rtype).Kind"
"reflect.MakeMapWithSize" "(*reflect.rtype).common"
"reflect.MakeMapWithSize" "reflect.makemap"
"reflect.MakeMap" "reflect.MakeMapWithSize"
"(*encoding/json.decodeState).object" "reflect.MakeMap"
"(*encoding/json.decodeState).object" "(reflect.Value).Set"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).skip"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).rescanLiteral"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).object" "encoding/json.unquoteBytes"
"(*encoding/json.decodeState).object" "(reflect.Value).Kind"
"(*encoding/json.decodeState).object" "(*reflect.rtype).Elem"
"(*encoding/json.decodeState).object" "(reflect.Value).IsValid"
"(*encoding/json.decodeState).object" "reflect.New"
"(*encoding/json.decodeState).object" "(reflect.Value).Elem"
"(*encoding/json.decodeState).object" "(reflect.Value).SetZero"
"(*encoding/json.decodeState).object" "encoding/json.foldName"
"(*encoding/json.decodeState).object" "(reflect.Value).Kind"
"(*encoding/json.decodeState).object" "(reflect.Value).IsNil"
"(*encoding/json.decodeState).object" "(reflect.Value).Field"
"(*encoding/json.decodeState).object" "(reflect.Value).CanSet"
"(*encoding/json.decodeState).object" "(reflect.Value).Elem"
"(*encoding/json.decodeState).object" "(reflect.Value).Type"
"(*encoding/json.decodeState).object" "(*reflect.rtype).Elem"
"(*encoding/json.decodeState).object" "fmt.Errorf"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).object" "(reflect.Value).Type"
"(*encoding/json.decodeState).object" "(*reflect.rtype).Elem"
"(*encoding/json.decodeState).object" "reflect.New"
"(*encoding/json.decodeState).object" "(reflect.Value).Set"
"(*encoding/json.decodeState).object" "fmt.Errorf"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).scanWhile"
"(*encoding/json.decodeState).valueQuoted" "(*encoding/json.decodeState).skip"
"(*encoding/json.decodeState).valueQuoted" "(*encoding/json.decodeState).scanNext"
"(*encoding/json.decodeState).valueQuoted" "(*encoding/json.decodeState).literalInterface"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).valueQuoted"
"(*encoding/json.decodeState).object" "(reflect.Value).Kind"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).value"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "fmt.Errorf"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "encoding/json.indirect"
"(*math/big.Float).UnmarshalText" "(*math/big.Float).Parse"
"(*math/big.Float).UnmarshalText" "fmt.Errorf"
"(*encoding/json.decodeState).literalStore" "(*math/big.Float).UnmarshalText"
"(*math/big.Rat).UnmarshalText" "(*math/big.Rat).SetString"
"(*math/big.Rat).UnmarshalText" "fmt.Errorf"
"(*encoding/json.decodeState).literalStore" "(*math/big.Rat).UnmarshalText"
"(*encoding/json.decodeState).literalStore" "(*math/big.Int).UnmarshalJSON"
"(*encoding/json.decodeState).literalStore" "(*time.Time).UnmarshalJSON"
"(*encoding/json.decodeState).literalStore" "(*golang.org/x/tools/go/packages.Package).UnmarshalJSON"
"(*encoding/json.decodeState).literalStore" "(*log/slog.Level).UnmarshalJSON"
"(*encoding/json.decodeState).literalStore" "encoding/json.unquoteBytes"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "fmt.Errorf"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*time.Time).UnmarshalText" "time.parseStrictRFC3339"
"(*encoding/json.decodeState).literalStore" "(*time.Time).UnmarshalText"
"(*log/slog.Level).UnmarshalText" "(*log/slog.Level).parse"
"(*encoding/json.decodeState).literalStore" "(*log/slog.Level).UnmarshalText"
"(*regexp.Regexp).UnmarshalText" "regexp.Compile"
"(*encoding/json.decodeState).literalStore" "(*regexp.Regexp).UnmarshalText"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "fmt.Errorf"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "fmt.Errorf"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).SetZero"
"(*encoding/json.decodeState).literalStore" "encoding/json.unquoteBytes"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "fmt.Errorf"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Kind"
"(reflect.Value).SetBool" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetBool" "(reflect.flag).mustBe"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).SetBool"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).NumMethod"
"(*encoding/json.decodeState).literalStore" "reflect.ValueOf"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Set"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "fmt.Errorf"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "fmt.Errorf"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*reflect.rtype).Elem"
"(*encoding/json.decodeState).literalStore" "(*reflect.rtype).Kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/base64.Encoding).DecodedLen" "encoding/base64.decodedLen"
"(*encoding/json.decodeState).literalStore" "(*encoding/base64.Encoding).DecodedLen"
"(*encoding/base64.Encoding).Decode" "encoding/base64.assemble64"
"(*encoding/base64.Encoding).Decode" "(encoding/binary.bigEndian).PutUint64"
"(*encoding/base64.Encoding).Decode" "(*encoding/base64.Encoding).decodeQuantum"
"(*encoding/base64.Encoding).Decode" "encoding/base64.assemble32"
"(*encoding/base64.Encoding).Decode" "(encoding/binary.bigEndian).PutUint32"
"(*encoding/base64.Encoding).Decode" "(*encoding/base64.Encoding).decodeQuantum"
"(*encoding/base64.Encoding).Decode" "(*encoding/base64.Encoding).decodeQuantum"
"(*encoding/json.decodeState).literalStore" "(*encoding/base64.Encoding).Decode"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(reflect.Value).SetBytes" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetBytes" "(reflect.flag).mustBe"
"(reflect.Value).SetBytes" "(reflect.Value).typ"
"(reflect.Value).SetBytes" "reflect.toRType"
"(reflect.Value).SetBytes" "(*reflect.rtype).Elem"
"(reflect.Value).SetBytes" "(*reflect.rtype).Kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).SetBytes"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).NumMethod"
"(*encoding/json.decodeState).literalStore" "fmt.Errorf"
"(reflect.Value).SetString" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetString" "(reflect.flag).mustBe"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).SetString"
"(*encoding/json.decodeState).literalStore" "encoding/json.isValidNumber"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "reflect.ValueOf"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Set"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "fmt.Errorf"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).convertNumber"
"(*encoding/json.decodeState).literalStore" "strconv.ParseInt"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).NumMethod"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "reflect.ValueOf"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Set"
"(*encoding/json.decodeState).literalStore" "strconv.ParseUint"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(reflect.Value).SetInt" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetInt" "(reflect.flag).kind"
"(reflect.Value).SetInt" "(reflect.flag).kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).SetInt"
"(reflect.Value).OverflowInt" "(reflect.flag).kind"
"(reflect.Value).OverflowInt" "(reflect.Value).typ"
"(reflect.Value).OverflowInt" "(*internal/abi.Type).Size"
"(reflect.Value).OverflowInt" "(reflect.flag).kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).OverflowInt"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*reflect.rtype).Bits" "(*reflect.rtype).Kind"
"(*reflect.rtype).Bits" "(*reflect.rtype).String"
"(*encoding/json.decodeState).literalStore" "(*reflect.rtype).Bits"
"(*encoding/json.decodeState).literalStore" "strconv.ParseFloat"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(reflect.Value).SetUint" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetUint" "(reflect.flag).kind"
"(reflect.Value).SetUint" "(reflect.flag).kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).SetUint"
"(reflect.Value).OverflowUint" "(reflect.flag).kind"
"(reflect.Value).OverflowUint" "(*internal/abi.Type).Size"
"(reflect.Value).OverflowUint" "(reflect.flag).kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).OverflowUint"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(reflect.Value).SetFloat" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetFloat" "(reflect.flag).kind"
"(reflect.Value).SetFloat" "(reflect.flag).kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).SetFloat"
"(reflect.Value).OverflowFloat" "(reflect.flag).kind"
"(reflect.Value).OverflowFloat" "reflect.overflowFloat32"
"(reflect.Value).OverflowFloat" "(reflect.flag).kind"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).OverflowFloat"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).SetString"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "fmt.Errorf"
"(*encoding/json.decodeState).literalStore" "(reflect.Value).Type"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).literalStore" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).literalStore" "(*math/big.Int).UnmarshalText"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).literalStore"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).literalStore"
"(*encoding/json.decodeState).object" "(reflect.Value).Type"
"(*encoding/json.decodeState).object" "fmt.Errorf"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).object" "(*reflect.rtype).Key"
"(*encoding/json.decodeState).object" "reflect.PointerTo"
"(*encoding/json.decodeState).object" "(*reflect.rtype).Implements"
"(*encoding/json.decodeState).object" "reflect.New"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).literalStore"
"(*encoding/json.decodeState).object" "(reflect.Value).IsValid"
"(*encoding/json.decodeState).object" "(*reflect.rtype).Kind"
"(*encoding/json.decodeState).object" "(reflect.Value).Elem"
"(*encoding/json.decodeState).object" "reflect.New"
"(*encoding/json.decodeState).object" "(reflect.Value).Elem"
"(*encoding/json.decodeState).object" "(reflect.Value).SetString"
"(*encoding/json.decodeState).object" "strconv.ParseInt"
"(*encoding/json.decodeState).object" "strconv.ParseUint"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).object" "reflect.New"
"(*encoding/json.decodeState).object" "(reflect.Value).Elem"
"(*encoding/json.decodeState).object" "(reflect.Value).SetInt"
"(*encoding/json.decodeState).object" "reflect.Zero"
"(*encoding/json.decodeState).object" "(reflect.Value).OverflowInt"
"(*encoding/json.decodeState).object" "(*encoding/json.decodeState).saveError"
"(*encoding/json.decodeState).object" "reflect.New"
"(*encoding/json.decodeState).object" "(reflect.Value).Elem"
"(*encoding/json.decodeState).object" "(reflect.Value).SetUint"
"(*encoding/json.decodeState).object" "reflect.Zero"
"(*encoding/json.decodeState).object" "(reflect.Value).OverflowUint"
"(*encoding/json.decodeState).value" "(*encoding/json.decodeState).object"
"(*encoding/json.decodeState).value" "(*encoding/json.decodeState).scanNext"
"(*encoding/json.decodeState).value" "(*encoding/json.decodeState).skip"
"(*encoding/json.decodeState).value" "(*encoding/json.decodeState).readIndex"
"(*encoding/json.decodeState).value" "(*encoding/json.decodeState).literalStore"
"(*encoding/json.decodeState).unmarshal" "(*encoding/json.decodeState).value"
"(*encoding/json.decodeState).unmarshal" "(reflect.Value).IsNil"
"(*encoding/json.decodeState).unmarshal" "(*encoding/json.decodeState).addErrorContext"
"(*encoding/json.Decoder).Decode" "(*encoding/json.decodeState).unmarshal"
"(*encoding/json.Decoder).Decode" "(*encoding/json.Decoder).tokenValueEnd"
"(*golang.org/x/tools/go/packages.golistState).getEnv$1" "(*encoding/json.Decoder).Decode"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"(*go/types.Checker).exprInternal$1" "(*go/types.Checker).funcBody"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).exprInternal$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).instantiatedType$1"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Named).TypeArgs"
"(*go/types.Checker).instantiatedType$2" "(*go/types.TypeList).list"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Checker).recordInstance"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Named).TypeParams"
"(*go/types.Checker).instantiatedType$2" "(*go/types.TypeParamList).Len"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Named).TypeArgs"
"(*go/types.Checker).instantiatedType$2" "(*go/types.TypeList).Len"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Checker).validateTArgLen"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Named).TypeParams"
"(*go/types.Checker).instantiatedType$2" "(*go/types.TypeParamList).list"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Named).TypeArgs"
"(*go/types.Checker).instantiatedType$2" "(*go/types.TypeList).list"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Checker).context"
"(*go/types.Checker).verify" "go/types.makeSubstMap"
"(*go/types.Checker).verify" "(*go/types.TypeParam).iface"
"(*go/types.Checker).verify" "(*go/types.Checker).subst"
"(*go/types.Checker).verify" "(*go/types.Checker).implements"
"(*go/types.Checker).verify" "errors.New"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Checker).verify"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Checker).validType"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Named).TypeParams"
"(*go/types.Checker).instantiatedType$2" "(*go/types.TypeParamList).list"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Named).TypeArgs"
"(*go/types.Checker).instantiatedType$2" "(*go/types.TypeList).list"
"(*go/types.monoGraph).recordInstance" "(*go/ast.Ident).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.BasicLit).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.FuncType).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.SelectorExpr).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.CallExpr).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.IndexExpr).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.IndexListExpr).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.Ellipsis).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.ChanType).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.InterfaceType).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.UnaryExpr).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.FuncLit).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.CompositeLit).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.ParenExpr).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.BinaryExpr).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.MapType).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.BadExpr).Pos"
"(*go/types.monoGraph).assign" "(*go/types.TypeParam).Obj"
"(*go/types.monoGraph).assign" "(*go/types.object).Pkg"
"(*go/types.monoGraph).assign$2" "go/types.Unalias"
"(*go/types.monoGraph).assign$2" "(*go/types.TypeParam).Obj"
"(*go/types.monoGraph).assign$2" "(*go/types.object).Pkg"
"(*go/types.monoGraph).assign$2" "go/types.assert"
"(*go/types.monoGraph).typeParamVertex" "(*go/types.TypeParam).Obj"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).typeParamVertex"
"(*go/types.monoGraph).assign$1" "(*go/types.monoGraph).typeParamVertex"
"(*go/types.monoGraph).assign$1" "(*go/types.monoGraph).addEdge"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$1"
"(*go/types.monoGraph).assign$2" "(*go/types.Named).Origin"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.Named).Obj"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.object).Pkg"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.Package).Scope"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.object).Parent"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.object).Parent"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.Scope).Parent"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.object).Type"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.object).Pos"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.object).Pos"
"(*go/types.monoGraph).localNamedVertex" "go/types.cmpPos"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.TypeName).IsAlias"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.monoGraph).typeParamVertex"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.object).Pos"
"(*go/types.monoGraph).localNamedVertex" "(*go/types.monoGraph).addEdge"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).localNamedVertex"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$1"
"(*go/types.monoGraph).assign$2" "(*go/types.Named).TypeArgs"
"(*go/types.monoGraph).assign$2" "(*go/types.TypeList).Len"
"(*go/types.monoGraph).assign$2" "(*go/types.TypeList).At"
"golang.org/x/tools/internal/aliases.Unalias" "go/types.Unalias"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "golang.org/x/tools/internal/aliases.Unalias"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.Interface).NumExplicitMethods"
"(*go/types.Named).SetUnderlying" "go/types.assert"
"(*go/types.Named).SetUnderlying" "go/types.asNamed"
"(*go/types.Named).SetUnderlying" "(*go/types.Named).resolve"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.Named).SetUnderlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.Interface).NumExplicitMethods"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.Interface).ExplicitMethod"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.object).Type"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.object).Pos"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.Func).Pkg"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "go/types.NewVar"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.object).Pos"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.Func).Pkg"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.object).Name"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.Signature).Params"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.Signature).Results"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.Signature).Variadic"
"go/types.NewSignature" "go/types.NewSignatureType"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "go/types.NewSignature"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "go/types.NewFunc"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.Interface).NumEmbeddeds"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "(*go/types.Interface).EmbeddedType"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2" "go/types.NewInterfaceType"
"(*go/types.monoGraph).assign$2" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$2"
"(*go/types.monoGraph).assign$2" "(*go/types.Array).Elem"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$2"
"(*go/types.monoGraph).assign$2" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*go/types.monoGraph).assign$2" "(*go/types.Chan).Elem"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$2"
"(*go/types.monoGraph).assign$2" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*go/types.monoGraph).assign$2" "(*go/types.Map).Key"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$2"
"(*go/types.monoGraph).assign$2" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*go/types.monoGraph).assign$2" "(*go/types.Map).Elem"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$2"
"(*go/types.monoGraph).assign$2" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*go/types.monoGraph).assign$2" "(*go/types.Pointer).Elem"
"(*go/types.monoGraph).assign$2" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$2"
"(*go/types.monoGraph).assign$2" "(*go/types.Slice).Elem"
"(*go/types.monoGraph).assign$2" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$2"
"(*go/types.Interface).NumMethods" "(*go/types.Interface).typeSet"
"(*go/types.Interface).NumMethods" "(*go/types._TypeSet).NumMethods"
"(*go/types.monoGraph).assign$2" "(*go/types.Interface).NumMethods"
"(*go/types.Interface).Method" "(*go/types.Interface).typeSet"
"(*go/types.Interface).Method" "(*go/types._TypeSet).Method"
"(*go/types.monoGraph).assign$2" "(*go/types.Interface).Method"
"(*go/types.monoGraph).assign$2" "(*go/types.object).Type"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$2"
"(*go/types.monoGraph).assign$2" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*go/types.monoGraph).assign$2" "(*go/types.Signature).Params"
"(*go/types.monoGraph).assign$2$1" "(*go/types.Tuple).Len"
"(*go/types.monoGraph).assign$2$1" "(*go/types.Tuple).At"
"(*go/types.monoGraph).assign$2$1" "(*go/types.object).Type"
"(*go/types.monoGraph).assign$2$1" "(*go/types.monoGraph).assign$2"
"(*go/types.monoGraph).assign$2$1" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$2$1"
"(*go/types.monoGraph).assign$2" "(*go/types.Signature).Results"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$2$1"
"(*go/types.monoGraph).assign$2" "(*go/types.Struct).NumFields"
"(*go/types.monoGraph).assign$2" "(*go/types.Struct).Field"
"(*go/types.monoGraph).assign$2" "(*go/types.object).Type"
"(*go/types.monoGraph).assign$2" "(*go/types.monoGraph).assign$2"
"(*go/types.monoGraph).assign$2" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*go/types.monoGraph).assign" "(*go/types.monoGraph).assign$2"
"(*go/types.monoGraph).assign" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*go/types.monoGraph).recordInstance" "(*go/types.monoGraph).assign"
"(*go/types.monoGraph).recordInstance" "(*go/ast.ArrayType).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.SliceExpr).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.StructType).Pos"
"(*go/types.monoGraph).recordInstance" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/types.monoGraph).recordInstance"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.Ident).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*encoding/json.InvalidUnmarshalError).Error"
"(*go/types.Checker).instantiatedType$2" "(*go/build/constraint.SyntaxError).Error"
"(*go/types.Checker).instantiatedType$2" "(runtime.errorAddressString).Error"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(*errors.errorString).Error"
"(*go/types.Checker).instantiatedType$2" "(runtime.errorString).Error"
"(*go/types.Checker).instantiatedType$2" "(os/exec.wrappedError).Error"
"(*go/types.Checker).instantiatedType$2" "(*io/fs.PathError).Error"
"(*go/types.Checker).instantiatedType$2" "(syscall.Errno).Error"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(context.deadlineExceededError).Error"
"(*go/types.Checker).instantiatedType$2" "(go/scanner.Error).Error"
"(*go/types.Checker).instantiatedType$2" "(*internal/poll.DeadlineExceededError).Error"
"(*go/types.Checker).instantiatedType$2" "(*fmt.wrapError).Error"
"(*go/types.Checker).instantiatedType$2" "(*fmt.wrapErrors).Error"
"(*go/types.Checker).instantiatedType$2" "(runtime.plainError).Error"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.MapType).Pos"
"(*go/types.Checker).instantiatedType$2" "(*reflect.ValueError).Error"
"(*go/types.Checker).instantiatedType$2" "(*strconv.NumError).Error"
"(*go/types.Checker).instantiatedType$2" "(*time.ParseError).Error"
"(*go/types.Checker).instantiatedType$2" "(internal/poll.errNetClosing).Error"
"(*go/types.Checker).instantiatedType$2" "(*go/types.ArgumentError).Error"
"(*go/types.Checker).instantiatedType$2" "(*os.SyscallError).Error"
"(*go/types.Checker).instantiatedType$2" "(*encoding/json.UnsupportedValueError).Error"
"(*go/types.Checker).instantiatedType$2" "(*encoding/json.MarshalerError).Error"
"(*go/types.Checker).instantiatedType$2" "(go/scanner.ErrorList).Error"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).instantiatedType$2" "(golang.org/x/tools/go/packages.Error).Error"
"(*go/types.Checker).instantiatedType$2" "(math/big.ErrNaN).Error"
"(*go/types.Checker).instantiatedType$2" "(go/types.Error).Error"
"(*go/types.Checker).instantiatedType$2" "(*go/ast.StructType).Pos"
"(*go/types.Checker).instantiatedType$2" "(*regexp/syntax.Error).Error"
"(*go/types.Checker).instantiatedType$2" "(*runtime.TypeAssertionError).Error"
"(*go/types.Checker).instantiatedType$2" "(*os/exec.Error).Error"
"(*go/types.Checker).instantiatedType$2" "(*encoding/json.SyntaxError).Error"
"(*go/types.Checker).instantiatedType$2" "(*internal/bisect.parseError).Error"
"(*go/types.Checker).instantiatedType$2" "(*os/exec.ExitError).Error"
"(*go/types.Checker).instantiatedType$2" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).instantiatedType$2" "(encoding/base64.CorruptInputError).Error"
"(*go/types.Checker).instantiatedType$2" "(*encoding/json.UnsupportedTypeError).Error"
"(*go/types.Checker).instantiatedType$2" "(*internal/reflectlite.ValueError).Error"
"(*go/types.Checker).instantiatedType$2" "(time.fileSizeError).Error"
"(*go/types.Checker).instantiatedType$2" "(*encoding/json.UnmarshalTypeError).Error"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).instantiatedType$2"
"(*go/types.Checker).structType$3" "go/types.deref"
"(*go/types.Checker).structType$3" "go/types.under"
"(*go/types.Checker).structType$3" "go/types.isValid"
"(*go/types.Checker).structType$3" "(*go/types.Checker).error"
"(*go/types.Checker).structType$3" "(*go/types.Checker).error"
"(*go/types.Checker).structType$3" "go/types.isTypeParam"
"(*go/types.Checker).structType$3" "(*go/types.Checker).error"
"(*go/types.Checker).structType$3" "(*go/types.Checker).error"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).structType$3"
"(*go/types.Checker).interfaceType$2" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).interfaceType$2" "go/types.computeInterfaceTypeSet"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).interfaceType$2"
"runtime.reentersyscall$1" "runtime.throw"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.reentersyscall$1"
"runtime.reentersyscall$2" "(runtime.traceLocker).GoSysCall"
"runtime.reentersyscall$2" "runtime.traceRelease"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.reentersyscall$2"
"runtime.entersyscall_sysmon" "runtime.lock"
"runtime.entersyscall_sysmon" "(*runtime/internal/atomic.Bool).Load"
"runtime.entersyscall_sysmon" "(*runtime/internal/atomic.Bool).Store"
"runtime.entersyscall_sysmon" "runtime.notewakeup"
"runtime.entersyscall_sysmon" "runtime.unlock"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.entersyscall_sysmon"
"runtime.runSafePointFn" "runtime.getg"
"runtime.runSafePointFn" "(runtime.puintptr).ptr"
"runtime.runSafePointFn" "runtime/internal/atomic.Cas"
"runtime.runSafePointFn" "runtime.lock"
"runtime.runSafePointFn" "runtime.notewakeup"
"runtime.runSafePointFn" "runtime.unlock"
"runtime.runSafePointFn" "runtime.gcMarkDone$1"
"runtime.runSafePointFn" "runtime.gcMarkTermination$4"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.runSafePointFn"
"runtime.entersyscall_gcwait" "runtime.getg"
"runtime.entersyscall_gcwait" "(runtime.puintptr).ptr"
"runtime.entersyscall_gcwait" "runtime.lock"
"runtime.entersyscall_gcwait" "runtime.traceAcquire"
"runtime.entersyscall_gcwait" "(runtime.traceLocker).ok"
"runtime.entersyscall_gcwait" "runtime.unlock"
"runtime.entersyscall_gcwait" "(runtime.traceLocker).ok"
"runtime.entersyscall_gcwait" "runtime/internal/atomic.Cas"
"runtime.entersyscall_gcwait" "(runtime.traceLocker).ProcSteal"
"runtime.entersyscall_gcwait" "runtime.traceRelease"
"runtime.entersyscall_gcwait" "(runtime.traceLocker).GoSysBlock"
"runtime.entersyscall_gcwait" "(runtime.traceLocker).ProcStop"
"runtime.entersyscall_gcwait" "runtime.notewakeup"
"runtime.entersyscall_gcwait" "runtime.traceRelease"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.entersyscall_gcwait"
"(*runtime.traceMap).put$1" "runtime.lock"
"(*runtime.traceMap).put$1" "(*runtime.traceMap).find"
"(*runtime.traceMap).put$1" "runtime.unlock"
"(*runtime.traceMap).put$1" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.traceRegionAlloc).alloc" "runtime.alignUp"
"(*runtime.traceRegionAlloc).alloc" "runtime.throw"
"(*runtime.traceRegionAlloc).alloc" "runtime.sysAlloc"
"(*runtime.traceRegionAlloc).alloc" "runtime.throw"
"(*runtime.traceMap).newTraceMapNode" "(*runtime.traceRegionAlloc).alloc"
"(*runtime.traceMap).newTraceMapNode" "runtime.memmove"
"(*runtime.traceMap).newTraceMapNode" "(*runtime.traceRegionAlloc).alloc"
"(*runtime.traceMap).put$1" "(*runtime.traceMap).newTraceMapNode"
"(*runtime.traceMap).put$1" "(*runtime/internal/atomic.UnsafePointer).Load"
"(*runtime.traceMap).put$1" "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
"(*runtime.traceMap).put$1" "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
"(*runtime.traceMap).put$1" "runtime.unlock"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*runtime.traceMap).put$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.fatal$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.write_trampoline"
"(runtime.traceWriter).refill$1" "runtime.lock"
"runtime.traceBufFlush" "runtime.assertLockHeld"
"(*runtime.traceBuf).varintAt" "runtime.throw"
"runtime.traceBufFlush" "(*runtime.traceBuf).varintAt"
"runtime.traceBufFlush" "(*runtime.traceBufQueue).push"
"runtime.traceBufFlush" "(*runtime/internal/atomic.Bool).Load"
"runtime.traceBufFlush" "(*runtime/internal/atomic.Bool).Store"
"(runtime.traceWriter).refill$1" "runtime.traceBufFlush"
"(runtime.traceWriter).refill$1" "runtime.unlock"
"(runtime.traceWriter).refill$1" "runtime.unlock"
"(runtime.traceWriter).refill$1" "runtime.sysAlloc"
"(runtime.traceWriter).refill$1" "runtime.throw"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(runtime.traceWriter).refill$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.mmap_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.sigprocmask_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.sigaction_trampoline"
"runtime.gcMarkTermination$4$1" "runtime.lock"
"runtime.gcMarkTermination$4$1" "(*runtime.pageCache).flush"
"runtime.gcMarkTermination$4$1" "runtime.unlock"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.gcMarkTermination$4$1"
"(*runtime.mspan).setUserArenaChunkToFault$1" "runtime.lock"
"(*runtime.mspan).setUserArenaChunkToFault$1" "(*runtime.mSpanList).insert"
"(*runtime.mspan).setUserArenaChunkToFault$1" "runtime.unlock"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*runtime.mspan).setUserArenaChunkToFault$1"
"runtime.exitsyscallfast_reacquired$1" "(runtime.puintptr).ptr"
"runtime.exitsyscallfast_reacquired$1" "(runtime.traceLocker).ProcSteal"
"runtime.exitsyscallfast_reacquired$1" "(runtime.traceLocker).ProcStart"
"runtime.exitsyscallfast_reacquired$1" "(runtime.puintptr).ptr"
"runtime.exitsyscallfast_reacquired$1" "(runtime.traceLocker).GoSysBlock"
"runtime.exitsyscallfast_reacquired$1" "(runtime.traceLocker).GoSysExit"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.exitsyscallfast_reacquired$1"
"(*runtime.traceStringTable).writeString" "runtime.lock"
"(*runtime.traceStringTable).writeString" "runtime.unsafeTraceWriter"
"(*runtime.traceStringTable).writeString" "(runtime.traceWriter).ensure"
"(*runtime.traceStringTable).writeString" "(*runtime.traceBuf).byte"
"(*runtime.traceStringTable).writeString" "(*runtime.traceBuf).byte"
"(*runtime.traceStringTable).writeString" "(*runtime.traceBuf).varint"
"(*runtime.traceStringTable).writeString" "(*runtime.traceBuf).varint"
"(*runtime.traceStringTable).writeString" "(*runtime.traceBuf).stringData"
"(*runtime.traceStringTable).writeString" "runtime.unlock"
"(*runtime.traceStringTable).put$1" "(*runtime.traceStringTable).writeString"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*runtime.traceStringTable).put$1"
"(*runtime.rwmutex).rlock$1" "runtime.lock"
"(*runtime.rwmutex).rlock$1" "runtime.unlock"
"(*runtime.rwmutex).rlock$1" "runtime.getg"
"(*runtime.rwmutex).rlock$1" "(*runtime.muintptr).set"
"(*runtime.rwmutex).rlock$1" "runtime.unlock"
"(*runtime.rwmutex).rlock$1" "runtime.notesleep"
"(*runtime.rwmutex).rlock$1" "runtime.noteclear"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*runtime.rwmutex).rlock$1"
"runtime.traceThreadDestroy$1" "runtime.lock"
"runtime.traceThreadDestroy$1" "runtime.unlock"
"runtime.traceThreadDestroy$1" "runtime.traceBufFlush"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.traceThreadDestroy$1"
"runtime.stackalloc" "runtime.getg"
"runtime.stackalloc" "runtime.throw"
"runtime.stackalloc" "runtime.throw"
"runtime.stackalloc" "runtime.alignUp"
"runtime.stackalloc" "runtime.sysAlloc"
"runtime.stackalloc" "runtime.throw"
"runtime.stackalloc" "runtime.stacklog2"
"runtime.stackalloc" "runtime.lock"
"runtime.stackalloc" "(*runtime.mSpanList).isEmpty"
"runtime.stackalloc" "runtime.lock"
"runtime.stackpoolalloc" "runtime.lockWithRankMayAcquire"
"runtime.stackpoolalloc" "(*runtime.mheap).allocManual"
"runtime.stackpoolalloc" "(runtime.gclinkptr).ptr"
"runtime.stackpoolalloc" "runtime.throw"
"runtime.stackpoolalloc" "runtime.throw"
"runtime.stackpoolalloc" "(runtime.gclinkptr).ptr"
"runtime.stackpoolalloc" "runtime.throw"
"runtime.stackpoolalloc" "runtime.osStackAlloc"
"runtime.stackpoolalloc" "(*runtime.mspan).base"
"runtime.stackpoolalloc" "(runtime.gclinkptr).ptr"
"runtime.stackpoolalloc" "(*runtime.mSpanList).insert"
"runtime.stackpoolalloc" "runtime.throw"
"runtime.stackpoolalloc" "(runtime.gclinkptr).ptr"
"runtime.stackpoolalloc" "(runtime.gclinkptr).ptr"
"runtime.stackpoolalloc" "(*runtime.mSpanList).remove"
"runtime.stackalloc" "runtime.stackpoolalloc"
"runtime.stackalloc" "runtime.unlock"
"runtime.stackalloc" "(runtime.puintptr).ptr"
"runtime.stackalloc" "(runtime.gclinkptr).ptr"
"runtime.stackcacherefill" "runtime.lock"
"runtime.stackcacherefill" "runtime.stackpoolalloc"
"runtime.stackcacherefill" "(runtime.gclinkptr).ptr"
"runtime.stackcacherefill" "runtime.unlock"
"runtime.stackalloc" "runtime.stackcacherefill"
"runtime.stackalloc" "(runtime.gclinkptr).ptr"
"runtime.stackalloc" "(*runtime.mSpanList).remove"
"runtime.stackalloc" "runtime.unlock"
"runtime.stackalloc" "runtime.lockWithRankMayAcquire"
"runtime.stackalloc" "(*runtime.mheap).allocManual"
"runtime.stackalloc" "(*runtime.mspan).base"
"runtime.stackalloc" "runtime.throw"
"runtime.stackalloc" "runtime.osStackAlloc"
"runtime.stackalloc" "runtime.racemalloc"
"runtime.stackalloc" "runtime.msanmalloc"
"runtime.stackalloc" "runtime.asanunpoison"
"runtime.malg$1" "runtime.stackalloc"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.malg$1"
"runtime.allocmcache$1" "runtime.lock"
"runtime.allocmcache$1" "(*runtime.fixalloc).alloc"
"runtime.allocmcache$1" "(*runtime/internal/atomic.Uint32).Store"
"runtime.allocmcache$1" "runtime.unlock"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.allocmcache$1"
"runtime.freemcache$1" "(*runtime.mcache).releaseAll"
"runtime.freemcache$1" "runtime.stackcache_clear"
"runtime.freemcache$1" "runtime.lock"
"runtime.freemcache$1" "(*runtime.fixalloc).free"
"runtime.freemcache$1" "runtime.unlock"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.freemcache$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/internal/event/core.ExportPair$1"
"golang.org/x/tools/internal/event/core.ExportPair$2" "golang.org/x/tools/internal/event/core.deliver"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/internal/event/core.ExportPair$2"
"go/types.parseUnion$1" "go/types.isValid"
"go/types.parseUnion$1" "go/types.under"
"go/types.parseUnion$1" "(*go/types.Checker).errorf"
"go/types.parseUnion$1" "go/types.Identical"
"go/types.parseUnion$1" "(*go/types.Checker).errorf"
"go/types.parseUnion$1" "(*go/types.Interface).typeSet"
"go/types.parseUnion$1" "(*go/types._TypeSet).NumMethods"
"go/types.overlappingTerm" "go/types.IsInterface"
"go/types.overlappingTerm" "go/types.assert"
"go/types.overlappingTerm" "go/types.IsInterface"
"go/types.overlappingTerm" "(*go/types.term).disjoint"
"go/types.parseUnion$1" "go/types.overlappingTerm"
"go/types.parseUnion$1" "(*go/types.Checker).errorf"
"go/types.parseUnion$1" "(*go/types.Checker).error"
"go/types.parseUnion$1" "(*go/types.Checker).softErrorf"
"go/types.parseUnion$1" "(*go/types.object).Type"
"go/types.parseUnion$1" "(*go/types.Checker).errorf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "go/types.parseUnion$1"
"runtime._VDSO" "runtime._VDSO"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime._VDSO"
"runtime._ExternalCode" "runtime._ExternalCode"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime._ExternalCode"
"runtime._GC" "runtime._GC"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime._GC"
"runtime._System" "runtime._System"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime._System"
"runtime.sigpanic" "runtime.getg"
"runtime.canpanic" "runtime.getg"
"runtime.canpanic" "runtime.acquirem"
"runtime.canpanic" "runtime.releasem"
"runtime.canpanic" "runtime.releasem"
"runtime.canpanic" "runtime.readgstatus"
"runtime.canpanic" "runtime.releasem"
"runtime.canpanic" "runtime.releasem"
"runtime.canpanic" "runtime.releasem"
"runtime.sigpanic" "runtime.canpanic"
"runtime.sigpanic" "runtime.throw"
"runtime.panicCheck2" "runtime.getg"
"runtime.panicCheck2" "runtime.throw"
"runtime.panicmem" "runtime.panicCheck2"
"runtime.sigpanic" "runtime.panicmem"
"runtime.panicmemAddr" "runtime.panicCheck2"
"runtime.sigpanic" "runtime.panicmemAddr"
"runtime.sigpanic" "runtime.throw"
"runtime.sigpanic" "runtime.panicmem"
"runtime.sigpanic" "runtime.panicmemAddr"
"runtime.sigpanic" "runtime.inUserArenaChunk"
"runtime.sigpanic" "runtime.throw"
"runtime.panicfloat" "runtime.panicCheck2"
"runtime.sigpanic" "runtime.panicfloat"
"runtime.panicdivide" "runtime.panicCheck2"
"runtime.sigpanic" "runtime.panicdivide"
"runtime.panicoverflow" "runtime.panicCheck2"
"runtime.sigpanic" "runtime.panicoverflow"
"runtime.sigpanic" "runtime.throw"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.sigpanic"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.raiseproc_trampoline"
"runtime.markrootFreeGStacks" "runtime.lock"
"runtime.markrootFreeGStacks" "runtime.unlock"
"runtime.markrootFreeGStacks" "(*runtime.gList).empty"
"runtime.markrootFreeGStacks" "(runtime.guintptr).ptr"
"runtime.markrootFreeGStacks" "runtime.stackfree"
"runtime.markrootFreeGStacks" "(*runtime.guintptr).set"
"runtime.markrootFreeGStacks" "(runtime.guintptr).ptr"
"runtime.markrootFreeGStacks" "runtime.lock"
"runtime.markrootFreeGStacks" "(*runtime.gList).pushAll"
"runtime.markrootFreeGStacks" "runtime.unlock"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.markrootFreeGStacks"
"runtime.markroot$1" "runtime.getg"
"runtime.markroot$1" "runtime.readgstatus"
"runtime.markroot$1" "runtime.casGToWaiting"
"runtime.suspendG" "runtime.getg"
"runtime.suspendG" "runtime.throw"
"runtime.suspendG" "runtime.readgstatus"
"runtime.suspendG" "runtime.readgstatus"
"runtime.casGFromPreempted" "runtime.throw"
"runtime.casGFromPreempted" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.suspendG" "runtime.casGFromPreempted"
"runtime.castogscanstatus" "runtime.throw"
"runtime.castogscanstatus" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.castogscanstatus" "runtime.acquireLockRank"
"runtime.suspendG" "runtime.castogscanstatus"
"runtime.suspendG" "runtime.castogscanstatus"
"runtime.suspendG" "(*runtime/internal/atomic.Uint32).Load"
"runtime.suspendG" "(*runtime/internal/atomic.Uint32).Load"
"runtime.suspendG" "runtime.casfrom_Gscanstatus"
"runtime.suspendG" "runtime.nanotime"
"runtime.suspendG" "runtime.preemptM"
"runtime.suspendG" "runtime.dumpgstatus"
"runtime.suspendG" "runtime.throw"
"runtime.suspendG" "runtime.nanotime"
"runtime.suspendG" "runtime.nanotime"
"runtime.suspendG" "runtime.procyield"
"runtime.suspendG" "runtime.osyield"
"runtime.suspendG" "runtime.nanotime"
"runtime.markroot$1" "runtime.suspendG"
"runtime.markroot$1" "runtime.throw"
"runtime.scanstack" "runtime.readgstatus"
"runtime.scanstack" "runtime.readgstatus"
"runtime.scanstack" "runtime.throw"
"runtime.scanstack" "runtime.readgstatus"
"runtime.scanstack" "runtime.getg"
"runtime.scanstack" "runtime.readgstatus"
"runtime.scanstack" "runtime.throw"
"runtime.scanstack" "runtime.readgstatus"
"runtime.scanstack" "runtime.throw"
"runtime.scanstack" "runtime.throw"
"runtime.scanstack" "runtime.getg"
"runtime.scanstack" "(runtime.puintptr).ptr"
"runtime.isShrinkStackSafe" "(*runtime/internal/atomic.Bool).Load"
"runtime.scanstack" "runtime.isShrinkStackSafe"
"runtime.shrinkstack" "runtime.throw"
"runtime.shrinkstack" "runtime.readgstatus"
"runtime.shrinkstack" "runtime.getg"
"runtime.shrinkstack" "runtime.isShrinkStackSafe"
"runtime.shrinkstack" "runtime.throw"
"runtime.shrinkstack" "runtime.getg"
"runtime.shrinkstack" "runtime.getg"
"runtime.shrinkstack" "runtime.throw"
"runtime.shrinkstack" "runtime.getg"
"runtime.shrinkstack" "runtime.throw"
"runtime.shrinkstack" "runtime.findfunc"
"runtime.shrinkstack" "(runtime.funcInfo).valid"
"runtime.copystack" "runtime.throw"
"runtime.copystack" "runtime.throw"
"runtime.copystack" "runtime.getg"
"runtime.copystack" "(runtime.puintptr).ptr"
"(*runtime.gcControllerState).addScannableStack" "(*runtime/internal/atomic.Uint64).Add"
"(*runtime.gcControllerState).addScannableStack" "(*runtime/internal/atomic.Uint64).Add"
"runtime.copystack" "(*runtime.gcControllerState).addScannableStack"
"runtime.copystack" "runtime.stackalloc"
"runtime.copystack" "runtime.fillstack"
"runtime.copystack" "runtime.memmove"
"runtime.adjustctxt" "runtime.adjustpointer"
"runtime.adjustctxt" "runtime.adjustpointer"
"runtime.adjustctxt" "runtime.throw"
"runtime.adjustctxt" "runtime.memmove"
"runtime.adjustctxt" "runtime.adjustpointer"
"runtime.copystack" "runtime.adjustctxt"
"runtime.adjustdefers" "runtime.adjustpointer"
"runtime.adjustdefers" "runtime.adjustpointer"
"runtime.adjustdefers" "runtime.adjustpointer"
"runtime.adjustdefers" "runtime.adjustpointer"
"runtime.copystack" "runtime.adjustdefers"
"runtime.adjustpanics" "runtime.adjustpointer"
"runtime.copystack" "runtime.adjustpanics"
"runtime.copystack" "runtime.findsghi"
"runtime.adjustsudogs" "runtime.adjustpointer"
"runtime.syncadjustsudogs" "runtime.adjustsudogs"
"runtime.syncadjustsudogs" "runtime.lockWithRank"
"runtime.syncadjustsudogs" "runtime.memmove"
"runtime.syncadjustsudogs" "runtime.unlock"
"runtime.copystack" "runtime.syncadjustsudogs"
"runtime.copystack" "runtime.throw"
"runtime.copystack" "runtime.adjustsudogs"
"runtime.copystack" "(*runtime/internal/atomic.Bool).Load"
"runtime.copystack" "(*runtime.unwinder).init"
"runtime.adjustframe" "runtime.funcname"
"(*runtime.stkframe).getStackMap" "(runtime.funcInfo).entry"
"(*runtime.stkframe).getStackMap" "runtime.pcdatavalue"
"(*runtime.stkframe).getStackMap" "runtime.funcdata"
"(*runtime.stkframe).argMapInternal" "runtime.funcname"
"(*runtime.stkframe).argMapInternal" "(runtime.funcInfo).entry"
"(*runtime.stkframe).argMapInternal" "(runtime.funcInfo).entry"
"(*runtime.stkframe).argMapInternal" "runtime.funcname"
"(*runtime.stkframe).argMapInternal" "(runtime.funcInfo).entry"
"(*runtime.stkframe).argMapInternal" "runtime.throw"
"(*runtime.stkframe).argMapInternal" "runtime.funcname"
"(*runtime.stkframe).argMapInternal" "runtime.throw"
"(*runtime.stkframe).getStackMap" "(*runtime.stkframe).argMapInternal"
"(*runtime.stkframe).getStackMap" "runtime.funcname"
"(*runtime.stkframe).getStackMap" "runtime.throw"
"(*runtime.stkframe).getStackMap" "runtime.funcname"
"(*runtime.stkframe).getStackMap" "runtime.throw"
"runtime.stackmapdata" "runtime.throw"
"runtime.stackmapdata" "runtime.addb"
"(*runtime.stkframe).getStackMap" "runtime.stackmapdata"
"(*runtime.stkframe).getStackMap" "runtime.funcdata"
"(*runtime.stkframe).getStackMap" "runtime.funcname"
"(*runtime.stkframe).getStackMap" "runtime.throw"
"(*runtime.stkframe).getStackMap" "runtime.funcname"
"(*runtime.stkframe).getStackMap" "runtime.throw"
"(*runtime.stkframe).getStackMap" "runtime.stackmapdata"
"(*runtime.stkframe).getStackMap" "runtime.funcdata"
"(*runtime.stkframe).getStackMap" "runtime.add"
"(*runtime.stkframe).getStackMap" "runtime.noescape"
"runtime.adjustframe" "(*runtime.stkframe).getStackMap"
"runtime.adjustframe" "runtime.adjustpointer"
"runtime.adjustframe" "runtime.throw"
"runtime.adjustpointers" "runtime.addb"
"runtime.adjustpointers" "runtime.add"
"(*runtime.bitvector).ptrbit" "runtime.addb"
"runtime.adjustpointers" "(*runtime.bitvector).ptrbit"
"runtime.adjustpointers" "runtime.add"
"runtime.adjustpointers" "runtime.addb"
"runtime.adjustpointers" "runtime/internal/sys.TrailingZeros8"
"runtime.adjustpointers" "runtime.add"
"runtime.adjustpointers" "(runtime.funcInfo).valid"
"runtime.adjustpointers" "runtime.getg"
"runtime.adjustpointers" "runtime.funcname"
"runtime.adjustpointers" "runtime.throw"
"runtime.adjustpointers" "runtime.funcname"
"runtime.adjustpointers" "runtime/internal/atomic.Casp1"
"runtime.adjustframe" "runtime.adjustpointers"
"runtime.adjustframe" "runtime.adjustpointers"
"runtime.adjustframe" "(*runtime.stackObjectRecord).ptrdata"
"runtime.adjustframe" "(*runtime.stackObjectRecord).gcdata"
"runtime.adjustframe" "(*runtime.stackObjectRecord).useGCProg"
"runtime.materializeGCProg" "runtime.divRoundUp"
"runtime.materializeGCProg" "runtime.divRoundUp"
"runtime.materializeGCProg" "(*runtime.mheap).allocManual"
"runtime.materializeGCProg" "runtime.addb"
"runtime.materializeGCProg" "runtime.runGCProg"
"runtime.adjustframe" "runtime.materializeGCProg"
"runtime.adjustframe" "runtime.addb"
"runtime.adjustframe" "runtime.adjustpointer"
"runtime.dematerializeGCProg" "(*runtime.mheap).freeManual"
"runtime.adjustframe" "runtime.dematerializeGCProg"
"runtime.copystack" "runtime.adjustframe"
"runtime.copystack" "(*runtime.unwinder).next"
"runtime.copystack" "(*runtime.unwinder).valid"
"runtime.copystack" "runtime.fillstack"
"runtime.copystack" "runtime.stackfree"
"runtime.shrinkstack" "runtime.copystack"
"runtime.scanstack" "runtime.shrinkstack"
"runtime.scanstack" "runtime.scanblock"
"runtime.scanstack" "(*runtime.unwinder).init"
"runtime.scanframeworker" "runtime.funcname"
"runtime.scanframeworker" "(runtime.funcInfo).valid"
"runtime.scanframeworker" "(runtime.funcInfo).valid"
"runtime.scanframeworker" "(*runtime.stkframe).getStackMap"
"runtime.scanframeworker" "runtime.funcname"
"(*runtime.stkframe).argBytes" "(*runtime.stkframe).argMapInternal"
"runtime.scanframeworker" "(*runtime.stkframe).argBytes"
"runtime.scanConservative" "runtime.printlock"
"runtime.scanConservative" "runtime.hexdumpWords"
"runtime.scanConservative" "runtime.printunlock"
"runtime.scanConservative" "runtime.addb"
"runtime.scanConservative" "runtime.throw"
"runtime.scanConservative" "(*runtime.stackScanState).putPtr"
"runtime.scanConservative" "runtime.spanOfHeap"
"runtime.scanConservative" "(*runtime.mspan).objIndex"
"runtime.scanConservative" "(*runtime.mspan).isFree"
"runtime.scanConservative" "(*runtime.mspan).base"
"runtime.scanConservative" "runtime.greyobject"
"runtime.scanframeworker" "runtime.scanConservative"
"runtime.scanframeworker" "runtime.scanConservative"
"runtime.scanframeworker" "runtime.scanblock"
"runtime.scanframeworker" "runtime.scanblock"
"(*runtime.stackScanState).addObject" "runtime.getempty"
"(*runtime.stackScanState).addObject" "runtime.throw"
"(*runtime.stackScanState).addObject" "runtime.getempty"
"(*runtime.stackScanState).addObject" "(*runtime.stackObject).setRecord"
"runtime.scanframeworker" "(*runtime.stackScanState).addObject"
"runtime.scanstack" "runtime.scanframeworker"
"runtime.scanstack" "(*runtime.unwinder).next"
"runtime.scanstack" "(*runtime.unwinder).valid"
"runtime.scanstack" "runtime.scanblock"
"runtime.scanstack" "runtime.scanblock"
"runtime.scanstack" "runtime.scanblock"
"runtime.scanstack" "(*runtime.stackScanState).putPtr"
"runtime.binarySearchTree" "runtime.binarySearchTree"
"runtime.binarySearchTree" "runtime.binarySearchTree"
"(*runtime.stackScanState).buildIndex" "runtime.binarySearchTree"
"runtime.scanstack" "(*runtime.stackScanState).buildIndex"
"(*runtime.stackScanState).getPtr" "runtime.putempty"
"(*runtime.stackScanState).getPtr" "runtime.putempty"
"runtime.scanstack" "(*runtime.stackScanState).getPtr"
"runtime.scanstack" "(*runtime.stackScanState).findObject"
"runtime.scanstack" "(*runtime.stackObject).setRecord"
"runtime.scanstack" "runtime.printlock"
"runtime.scanstack" "(*runtime.stackObjectRecord).gcdata"
"runtime.scanstack" "(*runtime.stackObjectRecord).useGCProg"
"runtime.scanstack" "runtime.printunlock"
"runtime.scanstack" "(*runtime.stackObjectRecord).ptrdata"
"runtime.scanstack" "runtime.materializeGCProg"
"runtime.scanstack" "(*runtime.stackObjectRecord).ptrdata"
"runtime.scanstack" "runtime.scanConservative"
"runtime.scanstack" "(*runtime.stackObjectRecord).ptrdata"
"runtime.scanstack" "runtime.scanblock"
"runtime.scanstack" "runtime.dematerializeGCProg"
"runtime.scanstack" "runtime.putempty"
"runtime.scanstack" "runtime.throw"
"runtime.markroot$1" "runtime.scanstack"
"runtime.resumeG" "runtime.readgstatus"
"runtime.resumeG" "runtime.casfrom_Gscanstatus"
"runtime.resumeG" "runtime.dumpgstatus"
"runtime.resumeG" "runtime.throw"
"runtime.resumeG" "runtime.ready"
"runtime.markroot$1" "runtime.resumeG"
"runtime.markroot$1" "runtime.casgstatus"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.markroot$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.walltime_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_attr_init_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_attr_getstacksize_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_attr_setdetachstate_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.mstart_stub"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "go/build/constraint.parseExpr$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/parser.parser).parsePrimaryExpr$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/parser.parser).parseBinaryExpr$1"
"(*go/parser.parser).parseParameterList$1" "go/parser.assert"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/parser.parser).parseParameterList$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"golang.org/x/tools/internal/gcimporter.UImportData$1" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).infer$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).infer$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).instantiateSignature$1"
"(*go/types.Checker).instantiateSignature$2" "(*go/types.Signature).TypeParams"
"(*go/types.Checker).instantiateSignature$2" "(*go/types.TypeParamList).list"
"(*go/types.Checker).instantiateSignature$2" "(*go/types.Checker).context"
"(*go/types.Checker).instantiateSignature$2" "(*go/types.Checker).verify"
"(*go/types.Checker).instantiateSignature$2" "(*go/types.monoGraph).recordInstance"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.Ident).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.MapType).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.StructType).Pos"
"(*go/types.Checker).instantiateSignature$2" "(*go/ast.StarExpr).Pos"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).instantiateSignature$2"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.Checker).genericExprList$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.printArgs$3"
"runtime.freeSomeWbufs$1" "runtime.getg"
"runtime.freeSomeWbufs$1" "(*runtime.mSpanList).remove"
"runtime.freeSomeWbufs$1" "(*runtime.mheap).freeManual"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.freeSomeWbufs$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_kill_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.mlock_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pthread_create_trampoline"
"(*runtime.pageAlloc).scavengeOne" "runtime.lock"
"(*runtime.pageAlloc).scavengeOne" "(runtime.pallocSum).max"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pallocData).findScavengeCandidate" "runtime.throw"
"(*runtime.pallocData).findScavengeCandidate" "runtime.throw"
"(*runtime.pallocData).findScavengeCandidate" "runtime.alignUp"
"runtime.fillAligned" "runtime.fillAligned$1"
"runtime.fillAligned" "runtime.fillAligned$1"
"runtime.fillAligned" "runtime.fillAligned$1"
"runtime.fillAligned" "runtime.fillAligned$1"
"runtime.fillAligned" "runtime.fillAligned$1"
"runtime.fillAligned" "runtime.fillAligned$1"
"runtime.fillAligned" "runtime.throw"
"(*runtime.pallocData).findScavengeCandidate" "runtime.fillAligned"
"(*runtime.pallocData).findScavengeCandidate" "runtime.fillAligned"
"(*runtime.pallocData).findScavengeCandidate" "runtime/internal/sys.LeadingZeros64"
"(*runtime.pallocData).findScavengeCandidate" "runtime/internal/sys.LeadingZeros64"
"(*runtime.pallocData).findScavengeCandidate" "runtime.fillAligned"
"(*runtime.pallocData).findScavengeCandidate" "runtime/internal/sys.LeadingZeros64"
"(*runtime.pallocData).findScavengeCandidate" "runtime.alignUp"
"(*runtime.pallocData).findScavengeCandidate" "runtime.alignDown"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.pallocData).findScavengeCandidate"
"(*runtime.scavengeIndex).setEmpty" "(*runtime.atomicScavChunkData).load"
"(*runtime.scavengeIndex).setEmpty" "(*runtime.scavChunkFlags).setEmpty"
"(*runtime.scavengeIndex).setEmpty" "(*runtime.atomicScavChunkData).store"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.scavengeIndex).setEmpty"
"(*runtime.pageAlloc).scavengeOne" "runtime.unlock"
"(*runtime.pageAlloc).scavengeOne" "runtime.chunkBase"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.pallocData).allocRange"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.pageAlloc).update"
"(*runtime.pageAlloc).scavengeOne" "runtime.unlock"
"(*runtime.pageAlloc).scavengeOne" "runtime.getg"
"(*runtime.pageAlloc).scavengeOne" "(runtime.puintptr).ptr"
"(*runtime.pageAlloc).scavengeOne" "runtime.pageTraceScav"
"runtime.sysUnused" "(*runtime/internal/atomic.Uint64).Add"
"runtime.sysUnusedOS" "runtime.madvise"
"runtime.sysUnused" "runtime.sysUnusedOS"
"(*runtime.pageAlloc).scavengeOne" "runtime.sysUnused"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.sysMemStat).add"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.sysMemStat).add"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.consistentHeapStats).acquire"
"(*runtime.pageAlloc).scavengeOne" "runtime/internal/atomic.Xaddint64"
"(*runtime.pageAlloc).scavengeOne" "runtime/internal/atomic.Xaddint64"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.consistentHeapStats).release"
"(*runtime.pageAlloc).scavengeOne" "runtime.lock"
"(*runtime.pageAlloc).scavengeOne" "(runtime.offAddr).lessThan"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.pallocBits).free"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.pageAlloc).update"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.pageAlloc).chunkOf"
"(*runtime.pageAlloc).scavengeOne" "(*runtime.pageBits).setRange"
"(*runtime.pageAlloc).scavengeOne" "runtime.unlock"
"(*runtime.pageAlloc).scavenge$1" "(*runtime.pageAlloc).scavengeOne"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*runtime.pageAlloc).scavenge$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_pipe_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_kill_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_wait4_trampoline"
"golang.org/x/tools/internal/gocommand.runCmdContext$1" "io.Copy"
"golang.org/x/tools/internal/gocommand.runCmdContext$1" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"golang.org/x/tools/internal/gocommand.runCmdContext$2" "(*context.cancelCtx).Err"
"golang.org/x/tools/internal/gocommand.runCmdContext$2" "(*os.File).Close"
"golang.org/x/tools/internal/gocommand.runCmdContext$2" "(context.emptyCtx).Done"
"golang.org/x/tools/internal/gocommand.runCmdContext$2" "(*os.File).Close"
"golang.org/x/tools/internal/gocommand.runCmdContext$2" "(context.emptyCtx).Err"
"golang.org/x/tools/internal/gocommand.runCmdContext$2" "(*context.cancelCtx).Done"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"golang.org/x/tools/internal/gocommand.runCmdContext$3" "golang.org/x/tools/internal/gocommand.runCmdContext$3$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"(*os/exec.Cmd).Wait" "errors.New"
"(*os/exec.Cmd).Wait" "errors.New"
"(*os.Process).wait" "(*os.Process).blockUntilWaitable"
"(*os.Process).setDone" "(*sync/atomic.Bool).Store"
"(*os.Process).wait" "(*os.Process).setDone"
"(*sync.RWMutex).Lock" "internal/race.Disable"
"(*sync.RWMutex).Lock" "(*sync.Mutex).Lock"
"(*sync.RWMutex).Lock" "(*sync/atomic.Int32).Add"
"(*sync.RWMutex).Lock" "sync.runtime_SemacquireRWMutex"
"(*sync.RWMutex).Lock" "(*sync/atomic.Int32).Add"
"(*sync.RWMutex).Lock" "internal/race.Enable"
"(*sync.RWMutex).Lock" "internal/race.Acquire"
"(*sync.RWMutex).Lock" "internal/race.Acquire"
"(*os.Process).wait" "(*sync.RWMutex).Lock"
"(*sync.RWMutex).Unlock" "internal/race.Release"
"(*sync.RWMutex).Unlock" "internal/race.Disable"
"(*sync.RWMutex).Unlock" "(*sync/atomic.Int32).Add"
"(*sync.RWMutex).Unlock" "internal/race.Enable"
"(*sync.RWMutex).Unlock" "sync.fatal"
"(*sync.RWMutex).Unlock" "sync.runtime_Semrelease"
"(*sync.RWMutex).Unlock" "(*sync.Mutex).Unlock"
"(*sync.RWMutex).Unlock" "internal/race.Enable"
"(*os.Process).wait" "(*sync.RWMutex).Unlock"
"syscall.wait4" "internal/abi.FuncPCABI0"
"syscall.wait4" "syscall.syscall6"
"syscall.wait4" "syscall.errnoErr"
"syscall.Wait4" "syscall.wait4"
"(*os.Process).wait" "syscall.Wait4"
"(*os.Process).wait" "os.NewSyscallError"
"(*os.Process).wait" "(*os.Process).setDone"
"(*os.Process).Wait" "(*os.Process).wait"
"(*os/exec.Cmd).Wait" "(*os.Process).Wait"
"(*os.ProcessState).success" "(syscall.WaitStatus).ExitStatus"
"(*os.ProcessState).Success" "(*os.ProcessState).success"
"(*os/exec.Cmd).Wait" "(*os.ProcessState).Success"
"(*os/exec.Cmd).awaitGoroutines" "(*os/exec.Cmd).awaitGoroutines$1"
"time.when" "time.runtimeNano"
"time.when" "time.runtimeNano"
"time.NewTimer" "time.when"
"time.NewTimer" "time.startTimer"
"(*os/exec.Cmd).awaitGoroutines" "time.NewTimer"
"(*os/exec.Cmd).awaitGoroutines" "os/exec.closeDescriptors"
"(*os/exec.Cmd).Wait" "(*os/exec.Cmd).awaitGoroutines"
"(*os/exec.Cmd).Wait" "os/exec.closeDescriptors"
"golang.org/x/tools/internal/gocommand.runCmdContext$4" "(*os/exec.Cmd).Wait"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_mkdir_trampoline"
"golang.org/x/tools/internal/gcimporter.iimportCommon$1" "fmt.Errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon$1" "fmt.Errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon$1" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "go/types.hasVarSize$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.tpWalker).isParameterized$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.kqueue_trampoline"
"runtime._LostExternalCode" "runtime._LostExternalCode"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime._LostExternalCode"
"runtime._LostSIGPROFDuringAtomic64" "runtime._LostSIGPROFDuringAtomic64"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime._LostSIGPROFDuringAtomic64"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_fork_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_setsid_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_setpgid_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_getpid_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_ioctl_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_chroot_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_setgroups_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_setgid_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_setuid_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_chdir_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_exit_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_unlink_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_rmdir_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"golang.org/x/tools/internal/gcimporter.predeclared$1" "(*go/types.Scope).Lookup"
"golang.org/x/tools/internal/gcimporter.predeclared$1" "(*go/types.Scope).Lookup"
"golang.org/x/tools/internal/gcimporter.predeclared$1" "(*go/types.object).Type"
"golang.org/x/tools/internal/gcimporter.predeclared$1" "(*go/types.object).Type"
"golang.org/x/tools/internal/gcimporter.predeclared$1" "(*go/types.object).Type"
"golang.org/x/tools/internal/gcimporter.predeclared$1" "(*go/types.Scope).Lookup"
"golang.org/x/tools/internal/gcimporter.additionalPredeclared" "(*go/types.Scope).Lookup"
"golang.org/x/tools/internal/gcimporter.additionalPredeclared" "(*go/types.Scope).Lookup"
"golang.org/x/tools/internal/gcimporter.additionalPredeclared" "(*go/types.object).Type"
"golang.org/x/tools/internal/gcimporter.additionalPredeclared" "(*go/types.object).Type"
"golang.org/x/tools/internal/gcimporter.predeclared$1" "golang.org/x/tools/internal/gcimporter.additionalPredeclared"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1" "(*golang.org/x/tools/internal/gcimporter.iimporter).trace"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_pread_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).collectMethods$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.entersyscall_gcwait"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.markroot$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*context.cancelCtx).propagateCancel$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "regexp/syntax.parse$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/sync/errgroup.Group).Go$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.typeWriter).signature$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.wbBufFlush$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.fatalthrow$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.entersyscallblock$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.kevent_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_setgroups_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_setuid_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_fstat_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_closedir_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.cgoCheckTypedBlock$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.exitsyscall$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).typInternal$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).structType$3"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "go/build/constraint.parseExpr$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "time.FixedZone$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.goready$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Named).expandUnderlying$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.osyield"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).infer$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.allocm$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/parser.parser).parseParameterList$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_dup2_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_sendto_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "go/types.parseUnion$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*runtime.pageAlloc).scavenge$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.madvise_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.malg$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).typeDecl$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_mutex_unlock_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.stopTheWorld$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*runtime.mheap).alloc$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_read_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.tracealloc$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "sync.poolCleanup"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime._LostContendedRuntimeLock"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_fork_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*encoding/json.encodeState).marshal$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcControllerCommit"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*runtime.p).destroy$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.entersyscall_sysmon"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.sigprocmask_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_shutdown_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_munmap_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_readdir_r_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.read_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.SetFinalizer$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).collectTypeParams$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.fcntl_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_setrlimit_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).objDecl$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/parser.parser).parseBinaryExpr$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_pipe_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*runtime.mLockProfile).captureStack$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.reentersyscall$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.usleep_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.runSafePointFn"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_wait4_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_exit_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).rawExpr$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcMarkTermination$3"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.asyncPreempt2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_lstat_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_cond_wait_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.entersyscallblock$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_openat_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.exitsyscallfast$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).interfaceType$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.exit_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*runtime.mheap).freeSpan$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_mkdir_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "time.initLocal"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcStart$3"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*os/exec.Cmd).Start$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcMarkTermination$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_ioctl_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pipe_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*fmt.ss).Token$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_setsockopt_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_write_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*runtime.sweepLocked).sweep$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.SetFinalizer$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*runtime.sweepLocked).sweep$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.sigpanic"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).instantiateSignature$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.asyncPreempt"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.exitsyscall$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).exprInternal$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_attr_setdetachstate_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*internal/godebug.Setting).Value$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.heapSetType$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_setpgid_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_unlink_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/go/packages.goListDriver$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "go/parser.ParseFile$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcMarkTermination$4$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).objDecl$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime._System"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/parser.parser).parsePrimaryExpr$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*internal/godebug.Setting).IncNonDefault"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.mProf_Malloc$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime._GC"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.freeSomeWbufs$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).validCycle$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.forEachP$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "go/types.hasVarSize$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_kill_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_chdir_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.copyenv"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/go/packages.goListDriver$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.Stack$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.reentersyscall$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).infer$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).instantiateSignature$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_getcwd_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_sysctl_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).funcType$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.freeStackSpans"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "flag.commandLineUsage"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "context.WithCancel$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcMarkTermination$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime._VDSO"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_stat_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.persistentalloc$1"
"(*go/parser.parser).safePos$1" "(*go/token.File).Base"
"(*go/parser.parser).safePos$1" "(*go/token.File).Size"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/parser.parser).safePos$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.gcSizes).Alignof$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_create_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.fatal$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.exitsyscallfast_reacquired$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_ptrace_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.init$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(log/slog.Value).Resolve$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "go/types.resolve$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "go/types.computeInterfaceTypeSet$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.throw$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.wirep$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.mlock_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_getpid_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*os/exec.Cmd).awaitGoroutines$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_recvfrom_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.doRecordGoroutineProfile$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.cgoCheckPtrWrite$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.getempty$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime._LostExternalCode"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcStart$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.freemcache$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_kill_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_cond_signal_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "regexp.mergeRuneSets$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_attr_getstacksize_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_recvmsg_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*log/slog.handleState).appendValue$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_mutex_init_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_mutex_lock_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.printArgs$3"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_rmdir_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.munmap_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*internal/godebug.Setting).register"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcMarkDone$3"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.mmap_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.walltime_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).instantiatedType$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*runtime.traceStringTable).put$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.traceThreadDestroy$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_close_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).typInternal$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcMarkTermination$5"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_sendmsg_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.callers$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.unifier).nify$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_fchdir_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.casgstatus$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.write_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.kqueue_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_cond_init_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.raise_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).instantiatedType$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.StdSizes).Alignof$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_fcntl_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_accept_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcBgMarkWorker$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*runtime.traceMap).put$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.sigaction_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_chmod_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_setgid_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.chansend$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "go/types.computeInterfaceTypeSet$2$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/internal/event/core.ExportPair$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*internal/lazyregexp.Regexp).build"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*runtime.rwmutex).rlock$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.markrootFreeGStacks"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.mstart_stub"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.wirep$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "flag.init$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_mmap_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_fchmod_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).validVarType$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "reflect.methodValueCall"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcStart$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*context.cancelCtx).propagateCancel$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.allocmcache$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.sigtramp"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.pthread_attr_init_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.chanrecv$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_lseek_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_fdopendir_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.mspinning"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcMarkDone$4"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(runtime.traceWriter).refill$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*runtime.mspan).setUserArenaChunkToFault$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.tpWalker).isParameterized$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "internal/poll.runtime_pollServerInit"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_pwrite_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_getrlimit_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_execve_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcResetMarkState"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.subster).typ$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.startTheWorld$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).genericExprList$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/internal/event/core.ExportPair$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_chroot_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*log/slog.Level).parse$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Checker).funcDecl$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "reflect.embeddedIfaceMethStub"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcAssistAlloc$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.unreachableMethod"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.raiseproc_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_open_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.sweepone$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "flag.isZeroValue$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.entersyscallblock_handoff"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_getsockopt_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.tracefree$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.mstart"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime._ExternalCode"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime._LostSIGPROFDuringAtomic64"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_setsid_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*flag.FlagSet).defaultUsage"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_dup_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.cgoSigtramp"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_ftruncate_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "syscall.libc_fchown_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.nanotime_trampoline"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "runtime.gcMarkDone$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.TypeParam).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Tuple).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Basic).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Signature).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Named).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Union).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Interface).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Struct).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Pointer).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Array).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Alias).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Slice).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Map).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.Chan).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(golang.org/x/tools/internal/gcimporter.anyType).Underlying"
"golang.org/x/tools/internal/aliases.aliasesDefault$1" "go/token.NewFileSet"
"os.ReadFile" "os.Open"
"os.ReadFile" "(*os.File).Close"
"os.ReadFile" "(*os.File).Stat"
"os.ReadFile" "(*os.fileStat).Size"
"os.ReadFile" "(*os.File).Read"
"go/parser.readSource" "os.ReadFile"
"go/parser.readSource" "errors.New"
"go/parser.readSource" "(*bytes.Buffer).Bytes"
"io.ReadAll" "(*fmt.ss).Read"
"io.ReadAll" "(*os.File).Read"
"io.ReadAll" "(*internal/poll.FD).Read"
"io.ReadAll" "(*io.LimitedReader).Read"
"io.ReadAll" "(*bufio.Reader).Read"
"io.ReadAll" "(*math/rand.Rand).Read"
"io.ReadAll" "(*fmt.stringReader).Read"
"io.ReadAll" "(*bytes.Reader).Read"
"io.ReadAll" "(*strings.Reader).Read"
"io.ReadAll" "(*bytes.Buffer).Read"
"go/parser.readSource" "io.ReadAll"
"go/parser.ParseFile" "go/parser.readSource"
"go/parser.ParseFile" "go/parser.ParseFile$1"
"(*go/token.FileSet).AddFile" "(*sync.RWMutex).Lock"
"(*go/token.FileSet).AddFile" "(*sync.RWMutex).Unlock"
"(*go/token.FileSet).AddFile" "fmt.Sprintf"
"(*go/token.FileSet).AddFile" "fmt.Sprintf"
"(*go/token.FileSet).AddFile" "(*sync/atomic.Pointer[go/token.File]).Store[go/token.File]"
"(*go/parser.parser).init" "(*go/token.FileSet).AddFile"
"(*go/scanner.Scanner).Init" "(*go/token.File).Size"
"(*go/scanner.Scanner).Init" "(*go/token.File).Size"
"(*go/scanner.Scanner).Init" "fmt.Sprintf"
"(*go/scanner.Scanner).Init" "(*go/token.File).Name"
"path/filepath.VolumeName" "path/filepath.volumeNameLen"
"path/filepath.VolumeName" "path/filepath.FromSlash"
"path/filepath.Split" "path/filepath.VolumeName"
"path/filepath.Split" "os.IsPathSeparator"
"(*go/scanner.Scanner).Init" "path/filepath.Split"
"(*go/token.File).AddLine" "(*sync.Mutex).Lock"
"(*go/token.File).AddLine" "(*sync.Mutex).Unlock"
"(*go/scanner.Scanner).next" "(*go/token.File).AddLine"
"(*go/token.File).Pos" "fmt.Sprintf"
"(*go/scanner.Scanner).error" "(*go/token.File).Pos"
"(*go/scanner.Scanner).error" "(*go/token.File).Position"
"(*go/parser.parser).init$1" "(*go/scanner.ErrorList).Add"
"(*go/scanner.Scanner).error" "(*go/parser.parser).init$1"
"(*go/scanner.Scanner).next" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).next" "unicode/utf8.DecodeRune"
"(*go/scanner.Scanner).next" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).next" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).next" "(*go/token.File).AddLine"
"(*go/scanner.Scanner).Init" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).Init" "(*go/scanner.Scanner).next"
"(*go/parser.parser).init" "(*go/scanner.Scanner).Init"
"(*go/parser.parser).next0" "(go/token.Token).String"
"(*go/parser.parser).next0" "(go/token.Token).IsLiteral"
"(*go/parser.parser).next0" "(go/token.Pos).IsValid"
"(*go/parser.parser).printTrace" "(*go/token.File).Position"
"(*go/parser.parser).printTrace" "fmt.Printf"
"fmt.Print" "fmt.Fprint"
"(*go/parser.parser).printTrace" "fmt.Print"
"(*go/parser.parser).printTrace" "fmt.Print"
"(*go/parser.parser).printTrace" "fmt.Println"
"(*go/parser.parser).next0" "(*go/parser.parser).printTrace"
"(*go/parser.parser).next0" "(*go/parser.parser).printTrace"
"(*go/parser.parser).next0" "(go/token.Token).IsOperator"
"(*go/parser.parser).next0" "(go/token.Token).IsKeyword"
"(*go/parser.parser).next0" "(*go/parser.parser).printTrace"
"(*go/scanner.Scanner).Scan" "(go/token.Pos).IsValid"
"(*go/scanner.Scanner).skipWhitespace" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).skipWhitespace"
"(*go/scanner.Scanner).Scan" "(*go/token.File).Pos"
"go/scanner.isLetter" "go/scanner.lower"
"go/scanner.isLetter" "go/scanner.lower"
"go/scanner.isLetter" "unicode.IsLetter"
"(*go/scanner.Scanner).Scan" "go/scanner.isLetter"
"(*go/scanner.Scanner).scanIdentifier" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanIdentifier" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanIdentifier" "go/scanner.isLetter"
"go/scanner.isDigit" "go/scanner.isDecimal"
"go/scanner.isDigit" "unicode.IsDigit"
"(*go/scanner.Scanner).scanIdentifier" "go/scanner.isDigit"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).scanIdentifier"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanNumber" "go/scanner.lower"
"(*go/scanner.Scanner).digits" "go/scanner.isDecimal"
"(*go/scanner.Scanner).digits" "(*go/scanner.Scanner).next"
"go/scanner.isHex" "go/scanner.lower"
"go/scanner.isHex" "go/scanner.lower"
"(*go/scanner.Scanner).digits" "go/scanner.isHex"
"(*go/scanner.Scanner).digits" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).digits"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanNumber" "go/scanner.litname"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).digits"
"(*go/scanner.Scanner).scanNumber" "go/scanner.litname"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).scanNumber" "go/scanner.lower"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).errorf" "fmt.Sprintf"
"(*go/scanner.Scanner).errorf" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).errorf"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).errorf"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).digits"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanNumber" "go/scanner.litname"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).errorf"
"go/scanner.invalidSep" "go/scanner.lower"
"go/scanner.invalidSep" "go/scanner.isDecimal"
"go/scanner.invalidSep" "go/scanner.isHex"
"(*go/scanner.Scanner).scanNumber" "go/scanner.invalidSep"
"(*go/scanner.Scanner).scanNumber" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).scanNumber"
"(*go/scanner.Scanner).Scan" "go/scanner.isDecimal"
"(*go/scanner.Scanner).Scan" "go/token.Lookup"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).peek"
"(*go/scanner.Scanner).Scan" "go/scanner.isDecimal"
"(*go/scanner.Scanner).scanString" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).scanString" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanEscape" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanEscape" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanEscape" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanEscape" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanEscape" "(*go/scanner.Scanner).error"
"go/scanner.digitVal" "go/scanner.lower"
"go/scanner.digitVal" "go/scanner.lower"
"go/scanner.digitVal" "go/scanner.lower"
"(*go/scanner.Scanner).scanEscape" "go/scanner.digitVal"
"(*go/scanner.Scanner).scanEscape" "fmt.Sprintf"
"(*go/scanner.Scanner).scanEscape" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanEscape" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).scanEscape" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).scanString" "(*go/scanner.Scanner).scanEscape"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).scanString"
"(*go/scanner.Scanner).scanRune" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanRune" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).scanRune" "(*go/scanner.Scanner).scanEscape"
"(*go/scanner.Scanner).scanRune" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).scanRune"
"(*go/scanner.Scanner).scanRawString" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).scanRawString" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanRawString" "go/scanner.stripCR"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).scanRawString"
"(*go/scanner.Scanner).switch2" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch2"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).peek"
"(*go/scanner.Scanner).switch3" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).switch3" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch3"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch3"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch2"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch2"
"(*go/scanner.Scanner).scanComment" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanComment" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanComment" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanComment" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).scanComment" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).scanComment" "(*go/scanner.Scanner).next"
"bytes.LastIndexByte" "internal/bytealg.LastIndexByte"
"go/scanner.trailingDigits" "bytes.LastIndexByte"
"go/scanner.trailingDigits" "strconv.ParseUint"
"(*go/scanner.Scanner).updateLineInfo" "go/scanner.trailingDigits"
"(*go/scanner.Scanner).updateLineInfo" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).updateLineInfo" "go/scanner.trailingDigits"
"(*go/scanner.Scanner).updateLineInfo" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).updateLineInfo" "(*go/scanner.Scanner).error"
"(*go/scanner.Scanner).updateLineInfo" "(*go/token.File).Pos"
"(*go/scanner.Scanner).updateLineInfo" "(*go/token.File).Position"
"(*go/token.File).AddLineColumnInfo" "(*sync.Mutex).Lock"
"(*go/token.File).AddLineColumnInfo" "(*sync.Mutex).Unlock"
"(*go/scanner.Scanner).updateLineInfo" "(*go/token.File).AddLineColumnInfo"
"(*go/scanner.Scanner).updateLineInfo" "path/filepath.Clean"
"(*go/scanner.Scanner).updateLineInfo" "path/filepath.IsAbs"
"(*go/scanner.Scanner).updateLineInfo" "path/filepath.Join"
"(*go/scanner.Scanner).scanComment" "(*go/scanner.Scanner).updateLineInfo"
"bytes.HasPrefix" "bytes.Equal"
"(*go/scanner.Scanner).scanComment" "bytes.HasPrefix"
"(*go/scanner.Scanner).scanComment" "go/scanner.stripCR"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).scanComment"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch2"
"(*go/scanner.Scanner).Scan" "(*go/token.File).Pos"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch2"
"(*go/scanner.Scanner).switch4" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).switch4" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).switch4" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch4"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch4"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch2"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch2"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch3"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).next"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch2"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).switch3"
"(*go/token.File).Offset" "fmt.Sprintf"
"(*go/scanner.Scanner).Scan" "(*go/token.File).Offset"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).errorf"
"(*go/scanner.Scanner).Scan" "(*go/token.File).Offset"
"(*go/scanner.Scanner).Scan" "(*go/scanner.Scanner).errorf"
"(*go/parser.parser).next0" "(*go/scanner.Scanner).Scan"
"go/build/constraint.splitGoBuild" "strings.Contains"
"go/build/constraint.splitGoBuild" "strings.HasPrefix"
"go/build/constraint.splitGoBuild" "strings.TrimSpace"
"go/build/constraint.splitGoBuild" "strings.TrimSpace"
"go/build/constraint.Parse" "go/build/constraint.splitGoBuild"
"go/build/constraint.parseExpr" "go/build/constraint.parseExpr$1"
"(*go/build/constraint.exprParser).lex" "unicode.IsLetter"
"(*go/build/constraint.exprParser).lex" "unicode.IsDigit"
"(*go/build/constraint.exprParser).lex" "unicode/utf8.DecodeRuneInString"
"(*go/build/constraint.exprParser).not" "(*go/build/constraint.exprParser).lex"
"(*go/build/constraint.exprParser).not" "(*go/build/constraint.exprParser).lex"
"(*go/build/constraint.exprParser).atom" "(*go/build/constraint.exprParser).atom$1"
"(*go/build/constraint.exprParser).atom" "(*go/build/constraint.exprParser).or"
"(*go/build/constraint.exprParser).atom" "(*go/build/constraint.exprParser).lex"
"(*go/build/constraint.exprParser).atom" "(*go/build/constraint.exprParser).lex"
"(*go/build/constraint.exprParser).atom" "go/build/constraint.tag"
"(*go/build/constraint.exprParser).not" "(*go/build/constraint.exprParser).atom"
"(*go/build/constraint.exprParser).not" "(*go/build/constraint.exprParser).atom"
"(*go/build/constraint.exprParser).not" "go/build/constraint.not"
"(*go/build/constraint.exprParser).and" "(*go/build/constraint.exprParser).not"
"(*go/build/constraint.exprParser).and" "(*go/build/constraint.exprParser).not"
"(*go/build/constraint.exprParser).and" "go/build/constraint.and"
"(*go/build/constraint.exprParser).or" "(*go/build/constraint.exprParser).and"
"(*go/build/constraint.exprParser).or" "(*go/build/constraint.exprParser).and"
"(*go/build/constraint.exprParser).or" "go/build/constraint.or"
"go/build/constraint.parseExpr" "(*go/build/constraint.exprParser).or"
"go/build/constraint.Parse" "go/build/constraint.parseExpr"
"go/build/constraint.splitPlusBuild" "strings.Contains"
"go/build/constraint.splitPlusBuild" "strings.HasPrefix"
"go/build/constraint.splitPlusBuild" "strings.TrimSpace"
"go/build/constraint.splitPlusBuild" "strings.HasPrefix"
"go/build/constraint.splitPlusBuild" "strings.TrimSpace"
"go/build/constraint.Parse" "go/build/constraint.splitPlusBuild"
"strings.FieldsFunc" "fmt.notSpace"
"strings.FieldsFunc" "unicode.IsSpace"
"strings.FieldsFunc" "(*golang.org/x/tools/go/packages.golistState).invokeGo$1"
"strings.FieldsFunc" "math/big.ratTok"
"strings.Fields" "strings.FieldsFunc"
"go/build/constraint.parsePlusBuildExpr" "strings.Fields"
"go/build/constraint.parsePlusBuildExpr" "strings.Split"
"go/build/constraint.parsePlusBuildExpr" "strings.HasPrefix"
"go/build/constraint.parsePlusBuildExpr" "go/build/constraint.tag"
"go/build/constraint.parsePlusBuildExpr" "strings.HasPrefix"
"go/build/constraint.isValidTag" "unicode.IsLetter"
"go/build/constraint.isValidTag" "unicode.IsDigit"
"go/build/constraint.parsePlusBuildExpr" "go/build/constraint.isValidTag"
"go/build/constraint.parsePlusBuildExpr" "go/build/constraint.tag"
"go/build/constraint.parsePlusBuildExpr" "go/build/constraint.tag"
"go/build/constraint.parsePlusBuildExpr" "go/build/constraint.not"
"go/build/constraint.parsePlusBuildExpr" "go/build/constraint.and"
"go/build/constraint.parsePlusBuildExpr" "go/build/constraint.or"
"go/build/constraint.parsePlusBuildExpr" "go/build/constraint.tag"
"go/build/constraint.Parse" "go/build/constraint.parsePlusBuildExpr"
"(*go/parser.parser).next0" "go/build/constraint.Parse"
"(*go/parser.parser).next0" "strings.HasPrefix"
"go/build/constraint.minVersion" "go/build/constraint.minVersion"
"go/build/constraint.minVersion" "go/build/constraint.minVersion"
"go/build/constraint.minVersion" "go/build/constraint.orVersion"
"go/build/constraint.minVersion" "go/build/constraint.andVersion"
"go/build/constraint.minVersion" "go/build/constraint.minVersion"
"go/build/constraint.minVersion" "go/build/constraint.minVersion"
"go/build/constraint.minVersion" "go/build/constraint.andVersion"
"go/build/constraint.minVersion" "go/build/constraint.orVersion"
"go/build/constraint.minVersion" "go/build/constraint.minVersion"
"go/build/constraint.minVersion" "strings.Cut"
"go/build/constraint.minVersion" "strconv.Atoi"
"go/build/constraint.GoVersion" "go/build/constraint.minVersion"
"go/build/constraint.GoVersion" "strconv.Itoa"
"(*go/parser.parser).next0" "go/build/constraint.GoVersion"
"(*go/parser.parser).next" "(*go/parser.parser).next0"
"(*go/token.File).Line" "(*go/token.File).Position"
"(*go/parser.parser).next" "(*go/token.File).Line"
"(*go/parser.parser).next" "(*go/token.File).Line"
"(*go/parser.parser).consumeCommentGroup" "(*go/token.File).Line"
"(*go/parser.parser).consumeComment" "(*go/token.File).Line"
"(*go/parser.parser).consumeComment" "(*go/parser.parser).next0"
"(*go/parser.parser).consumeCommentGroup" "(*go/parser.parser).consumeComment"
"(*go/parser.parser).consumeCommentGroup" "(*go/token.File).Line"
"(*go/parser.parser).next" "(*go/parser.parser).consumeCommentGroup"
"(*go/parser.parser).next" "(*go/token.File).Line"
"(*go/parser.parser).next" "(*go/parser.parser).consumeCommentGroup"
"(*go/parser.parser).next" "(*go/token.File).Line"
"(*go/parser.parser).init" "(*go/parser.parser).next"
"go/parser.ParseFile" "(*go/parser.parser).init"
"go/parser.trace" "(*go/parser.parser).printTrace"
"(*go/parser.parser).parseFile" "go/parser.trace"
"go/parser.un" "(*go/parser.parser).printTrace"
"(*go/parser.parser).parseFile" "go/parser.un"
"(*go/parser.parser).parseFile" "(go/scanner.ErrorList).Len"
"(*go/parser.parser).expect" "(go/token.Token).String"
"(*go/parser.parser).error" "go/parser.trace"
"(*go/parser.parser).error" "go/parser.un"
"(*go/parser.parser).error" "(*go/token.File).Position"
"(*go/parser.parser).error" "(*go/scanner.ErrorList).Add"
"(*go/parser.parser).errorExpected" "(*go/parser.parser).error"
"(*go/parser.parser).errorExpected" "(go/token.Token).IsLiteral"
"(*go/parser.parser).errorExpected" "(go/token.Token).String"
"(*go/parser.parser).expect" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).expect" "(*go/parser.parser).next"
"(*go/parser.parser).parseFile" "(*go/parser.parser).expect"
"(*go/parser.parser).parseIdent" "(*go/parser.parser).next"
"(*go/parser.parser).parseIdent" "(*go/parser.parser).expect"
"(*go/parser.parser).parseFile" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseFile" "(*go/parser.parser).error"
"(*go/parser.parser).expectSemi" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).expectSemi" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).advance" "(*go/parser.parser).next"
"(*go/parser.parser).expectSemi" "(*go/parser.parser).advance"
"(*go/parser.parser).expectSemi" "(*go/parser.parser).next"
"(*go/parser.parser).expectSemi" "(*go/parser.parser).next"
"(*go/parser.parser).parseFile" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseFile" "(go/scanner.ErrorList).Len"
"(*go/parser.parser).parseFile" "(*go/token.File).Base"
"(*go/parser.parser).parseFile" "(*go/token.File).Base"
"(*go/parser.parser).parseFile" "(*go/token.File).Size"
"(*go/parser.parser).parseGenDecl" "(go/token.Token).String"
"(*go/parser.parser).parseGenDecl" "go/parser.trace"
"(*go/parser.parser).parseGenDecl" "go/parser.un"
"(*go/parser.parser).parseGenDecl" "(*go/parser.parser).expect"
"(*go/parser.parser).parseGenDecl" "(*go/parser.parser).next"
"(*go/parser.parser).parseImportSpec" "go/parser.trace"
"(*go/parser.parser).parseImportSpec" "go/parser.un"
"(*go/parser.parser).parseImportSpec" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseImportSpec" "(*go/parser.parser).next"
"(*go/parser.parser).parseImportSpec" "(*go/parser.parser).next"
"(*go/parser.parser).parseImportSpec" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseImportSpec" "(go/token.Token).IsLiteral"
"(*go/parser.parser).parseImportSpec" "(*go/parser.parser).error"
"(*go/parser.parser).parseImportSpec" "(*go/parser.parser).next"
"(*go/parser.parser).parseImportSpec" "(*go/parser.parser).error"
"(*go/parser.parser).parseImportSpec" "(*go/parser.parser).advance"
"(*go/parser.parser).parseGenDecl" "(*go/parser.parser).parseImportSpec"
"(*go/parser.parser).parseGenDecl" "(*go/parser.parser).parseImportSpec"
"(*go/parser.parser).parseGenDecl" "(*go/parser.parser).expect"
"(*go/parser.parser).parseGenDecl" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseTypeSpec" "go/parser.trace"
"(*go/parser.parser).parseTypeSpec" "go/parser.un"
"(*go/parser.parser).parseTypeSpec" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseTypeSpec" "(*go/parser.parser).next"
"(*go/parser.parser).parseTypeSpec" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseTypeSpec" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseArrayType" "go/parser.trace"
"(*go/parser.parser).parseArrayType" "go/parser.un"
"(*go/parser.parser).parseArrayType" "(*go/parser.parser).next"
"(*go/parser.parser).parseExpr" "go/parser.trace"
"(*go/parser.parser).parseExpr" "go/parser.un"
"(*go/parser.parser).parseBinaryExpr" "go/parser.trace"
"(*go/parser.parser).parseBinaryExpr" "go/parser.un"
"go/parser.incNestLev" "(*go/parser.parser).error"
"(*go/parser.parser).parseUnaryExpr" "go/parser.incNestLev"
"(*go/parser.parser).parseUnaryExpr" "go/parser.decNestLev"
"(*go/parser.parser).parseUnaryExpr" "go/parser.trace"
"(*go/parser.parser).parseUnaryExpr" "go/parser.un"
"(*go/parser.parser).parseUnaryExpr" "(*go/parser.parser).next"
"(*go/parser.parser).parseUnaryExpr" "(*go/parser.parser).parseUnaryExpr"
"(*go/parser.parser).parseUnaryExpr" "(*go/parser.parser).next"
"(*go/parser.parser).parseUnaryExpr" "(*go/parser.parser).parseUnaryExpr"
"(*go/parser.parser).parseUnaryExpr" "(*go/parser.parser).next"
"(*go/parser.parser).parseUnaryExpr" "(*go/parser.parser).parseUnaryExpr"
"(*go/parser.parser).parseUnaryExpr" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseUnaryExpr" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parsePrimaryExpr" "go/parser.trace"
"(*go/parser.parser).parsePrimaryExpr" "go/parser.un"
"(*go/parser.parser).parseOperand" "go/parser.trace"
"(*go/parser.parser).parseOperand" "go/parser.un"
"(*go/parser.parser).parseOperand" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseOperand" "(*go/parser.parser).next"
"(*go/parser.parser).parseOperand" "(*go/parser.parser).next"
"(*go/parser.parser).parseOperand" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseOperand" "(*go/parser.parser).expect"
"(*go/parser.parser).parseFuncTypeOrLit" "go/parser.trace"
"(*go/parser.parser).parseFuncTypeOrLit" "go/parser.un"
"(*go/parser.parser).parseFuncType" "go/parser.trace"
"(*go/parser.parser).parseFuncType" "go/parser.un"
"(*go/parser.parser).parseFuncType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseParameters" "go/parser.trace"
"(*go/parser.parser).parseParameters" "go/parser.un"
"(*go/parser.parser).parseParameters" "(*go/parser.parser).next"
"(*go/parser.parser).parseParameterList" "go/parser.trace"
"(*go/parser.parser).parseParameterList" "go/parser.un"
"(*go/parser.parser).parseParameterList" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.BasicLit).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.FuncType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.CallExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.IndexExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.Ellipsis).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.ChanType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.InterfaceType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.FuncLit).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.CompositeLit).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.ParenExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseParameterList" "go/parser.assert"
"(*go/parser.parser).parseParameterList" "(*go/parser.parser).parseParameterList$1"
"(*go/parser.parser).parseParameterList" "(*go/ast.ArrayType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.SliceExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.StructType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.StarExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.MapType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.BadExpr).Pos"
"(*go/parser.parser).parseParamDecl" "go/parser.trace"
"(*go/parser.parser).parseParamDecl" "go/parser.un"
"(*go/parser.parser).embeddedElem" "go/parser.trace"
"(*go/parser.parser).embeddedElem" "go/parser.un"
"(*go/parser.parser).embeddedTerm" "go/parser.trace"
"(*go/parser.parser).embeddedTerm" "go/parser.un"
"(*go/parser.parser).embeddedTerm" "(*go/parser.parser).next"
"(*go/parser.parser).parseType" "go/parser.trace"
"(*go/parser.parser).parseType" "go/parser.un"
"(*go/parser.parser).tryIdentOrType" "go/parser.incNestLev"
"(*go/parser.parser).tryIdentOrType" "go/parser.decNestLev"
"(*go/parser.parser).parseTypeName" "go/parser.trace"
"(*go/parser.parser).parseTypeName" "go/parser.un"
"(*go/parser.parser).parseTypeName" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseTypeName" "(*go/parser.parser).next"
"(*go/parser.parser).parseTypeName" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).parseTypeName"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).expect"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).parseArrayType"
"(*go/parser.parser).parseTypeInstance" "go/parser.trace"
"(*go/parser.parser).parseTypeInstance" "go/parser.un"
"(*go/parser.parser).parseTypeInstance" "(*go/parser.parser).expect"
"(*go/parser.parser).parseTypeInstance" "(*go/parser.parser).parseType"
"(*go/parser.parser).atComma" "(*go/parser.parser).error"
"(*go/parser.parser).parseTypeInstance" "(*go/parser.parser).atComma"
"(*go/parser.parser).expectClosing" "(*go/parser.parser).error"
"(*go/parser.parser).expectClosing" "(*go/parser.parser).next"
"(*go/parser.parser).expectClosing" "(*go/parser.parser).expect"
"(*go/parser.parser).parseTypeInstance" "(*go/parser.parser).expectClosing"
"(*go/parser.parser).parseTypeInstance" "(*go/parser.parser).next"
"(*go/parser.parser).parseTypeInstance" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseTypeInstance" "go/internal/typeparams.PackIndexExpr"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).parseTypeInstance"
"(*go/parser.parser).parseStructType" "go/parser.trace"
"(*go/parser.parser).parseStructType" "go/parser.un"
"(*go/parser.parser).parseStructType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseStructType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseFieldDecl" "go/parser.trace"
"(*go/parser.parser).parseFieldDecl" "go/parser.un"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).next"
"(*go/parser.parser).parseQualifiedIdent" "go/parser.trace"
"(*go/parser.parser).parseQualifiedIdent" "go/parser.un"
"(*go/parser.parser).parseQualifiedIdent" "(*go/parser.parser).parseTypeName"
"(*go/parser.parser).parseQualifiedIdent" "(*go/parser.parser).parseTypeInstance"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).parseQualifiedIdent"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).next"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "go/parser.trace"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "go/parser.un"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "(*go/parser.parser).expect"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "(*go/parser.parser).expect"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "(*go/parser.parser).next"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "(*go/parser.parser).tryIdentOrType"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "go/internal/typeparams.PackIndexExpr"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "(go/token.Pos).IsValid"
"(*go/parser.parser).parseArrayFieldOrTypeInstance" "(*go/parser.parser).error"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).parseArrayFieldOrTypeInstance"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).error"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).next"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).error"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).next"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).parseQualifiedIdent"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).parseQualifiedIdent"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).next"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).advance"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).next"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).parseQualifiedIdent"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).parseQualifiedIdent"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).next"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).next"
"(*go/parser.parser).parseFieldDecl" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseStructType" "(*go/parser.parser).parseFieldDecl"
"(*go/parser.parser).parseStructType" "(*go/parser.parser).expect"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).parseStructType"
"(*go/parser.parser).parsePointerType" "go/parser.trace"
"(*go/parser.parser).parsePointerType" "go/parser.un"
"(*go/parser.parser).parsePointerType" "(*go/parser.parser).expect"
"(*go/parser.parser).parsePointerType" "(*go/parser.parser).parseType"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).parsePointerType"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).parseFuncType"
"(*go/parser.parser).parseInterfaceType" "go/parser.trace"
"(*go/parser.parser).parseInterfaceType" "go/parser.un"
"(*go/parser.parser).parseInterfaceType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseInterfaceType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseMethodSpec" "go/parser.trace"
"(*go/parser.parser).parseMethodSpec" "go/parser.un"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).parseTypeName"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).next"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).parseExpr"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).parseParameters"
"(*go/parser.parser).parseResult" "go/parser.trace"
"(*go/parser.parser).parseResult" "go/parser.un"
"(*go/parser.parser).parseResult" "(*go/parser.parser).parseParameters"
"(*go/parser.parser).parseResult" "(*go/parser.parser).tryIdentOrType"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).parseResult"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).parseParameterList"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).expect"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).error"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).parseParameters"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).parseResult"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).atComma"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).next"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).expectClosing"
"(*go/parser.parser).parseMethodSpec" "go/internal/typeparams.PackIndexExpr"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).atComma"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).next"
"(*go/parser.parser).parseMethodSpec" "(*go/parser.parser).parseTypeInstance"
"(*go/parser.parser).parseInterfaceType" "(*go/parser.parser).parseMethodSpec"
"(*go/parser.parser).parseInterfaceType" "(*go/parser.parser).embeddedElem"
"(*go/parser.parser).parseInterfaceType" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseInterfaceType" "(*go/parser.parser).embeddedElem"
"(*go/parser.parser).parseInterfaceType" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseInterfaceType" "(*go/parser.parser).tryIdentOrType"
"(*go/parser.parser).parseInterfaceType" "(*go/parser.parser).embeddedElem"
"(*go/parser.parser).parseInterfaceType" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseInterfaceType" "(*go/parser.parser).expect"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).parseInterfaceType"
"(*go/parser.parser).parseMapType" "go/parser.trace"
"(*go/parser.parser).parseMapType" "go/parser.un"
"(*go/parser.parser).parseMapType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseMapType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseMapType" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseMapType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseMapType" "(*go/parser.parser).parseType"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).parseMapType"
"(*go/parser.parser).parseChanType" "go/parser.trace"
"(*go/parser.parser).parseChanType" "go/parser.un"
"(*go/parser.parser).parseChanType" "(*go/parser.parser).next"
"(*go/parser.parser).parseChanType" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseChanType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseChanType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseChanType" "(*go/parser.parser).next"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).parseChanType"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).next"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).parseType"
"(*go/parser.parser).tryIdentOrType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseType" "(*go/parser.parser).tryIdentOrType"
"(*go/parser.parser).parseType" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseType" "(*go/parser.parser).advance"
"(*go/parser.parser).embeddedTerm" "(*go/parser.parser).parseType"
"(*go/parser.parser).embeddedTerm" "(*go/parser.parser).tryIdentOrType"
"(*go/parser.parser).embeddedTerm" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).embeddedTerm" "(*go/parser.parser).advance"
"(*go/parser.parser).embeddedElem" "(*go/parser.parser).embeddedTerm"
"(*go/parser.parser).embeddedElem" "(*go/parser.parser).next"
"(*go/parser.parser).embeddedElem" "(*go/parser.parser).embeddedTerm"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).embeddedElem"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).parseArrayFieldOrTypeInstance"
"(*go/parser.parser).parseDotsType" "go/parser.trace"
"(*go/parser.parser).parseDotsType" "go/parser.un"
"(*go/parser.parser).parseDotsType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseDotsType" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).parseDotsType"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).parseQualifiedIdent"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).embeddedElem"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).embeddedElem"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).parseDotsType"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).advance"
"(*go/parser.parser).parseParamDecl" "(*go/parser.parser).embeddedElem"
"(*go/parser.parser).parseParameterList" "(*go/parser.parser).parseParamDecl"
"(*go/parser.parser).parseParameterList" "(*go/parser.parser).embeddedElem"
"(*go/parser.parser).parseParameterList" "(*go/parser.parser).atComma"
"(*go/parser.parser).parseParameterList" "(*go/parser.parser).next"
"(*go/parser.parser).parseParameterList" "(*go/parser.parser).error"
"(*go/parser.parser).parseParameterList" "(go/token.Pos).IsValid"
"(*go/parser.parser).parseParameterList" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.BasicLit).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.FuncType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.CallExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.IndexExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.Ellipsis).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.ChanType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.InterfaceType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.FuncLit).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.CompositeLit).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.ParenExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.parser).parseParameterList" "go/ast.NewIdent"
"(*go/parser.parser).parseParameterList" "(*go/parser.parser).error"
"(*go/parser.parser).parseParameterList" "(*go/parser.parser).parseParameterList$1"
"(*go/parser.parser).parseParameterList" "(*go/ast.ArrayType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.SliceExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.StructType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.StarExpr).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.MapType).Pos"
"(*go/parser.parser).parseParameterList" "(*go/ast.BadExpr).Pos"
"(*go/parser.parser).parseParameters" "(*go/parser.parser).parseParameterList"
"(*go/parser.parser).parseParameters" "(*go/parser.parser).expect"
"(*go/parser.parser).parseParameters" "(*go/ast.FieldList).NumFields"
"(*go/parser.parser).parseParameters" "(*go/parser.parser).expect"
"(*go/parser.parser).parseParameters" "(*go/parser.parser).error"
"(*go/parser.parser).parseParameters" "(*go/parser.parser).parseParameterList"
"(*go/parser.parser).parseParameters" "(*go/parser.parser).expect"
"(*go/parser.parser).parseFuncType" "(*go/parser.parser).parseParameters"
"(*go/parser.parser).parseFuncType" "(*go/ast.FieldList).Pos"
"(*go/parser.parser).parseFuncType" "(*go/parser.parser).error"
"(*go/parser.parser).parseFuncType" "(*go/parser.parser).parseResult"
"(*go/parser.parser).parseFuncTypeOrLit" "(*go/parser.parser).parseFuncType"
"(*go/parser.parser).parseBody" "go/parser.trace"
"(*go/parser.parser).parseBody" "go/parser.un"
"(*go/parser.parser).parseBody" "(*go/parser.parser).expect"
"(*go/parser.parser).parseStmtList" "go/parser.trace"
"(*go/parser.parser).parseStmtList" "go/parser.un"
"(*go/parser.parser).parseStmt" "go/parser.incNestLev"
"(*go/parser.parser).parseStmt" "go/parser.decNestLev"
"(*go/parser.parser).parseStmt" "go/parser.trace"
"(*go/parser.parser).parseStmt" "go/parser.un"
"(*go/parser.parser).parseDecl" "go/parser.trace"
"(*go/parser.parser).parseDecl" "go/parser.un"
"(*go/parser.parser).parseDecl" "(*go/parser.parser).parseGenDecl"
"(*go/parser.parser).parseFuncDecl" "go/parser.trace"
"(*go/parser.parser).parseFuncDecl" "go/parser.un"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).expect"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).parseParameters"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).parseParameters"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).error"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).parseResult"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).parseBody"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).next"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).error"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).parseBody"
"(*go/parser.parser).parseFuncDecl" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseDecl" "(*go/parser.parser).parseFuncDecl"
"(*go/parser.parser).parseDecl" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseDecl" "(*go/parser.parser).advance"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).parseDecl"
"(*go/parser.parser).parseSimpleStmt" "go/parser.trace"
"(*go/parser.parser).parseSimpleStmt" "go/parser.un"
"(*go/parser.parser).parseExprList" "go/parser.trace"
"(*go/parser.parser).parseExprList" "go/parser.un"
"(*go/parser.parser).parseExprList" "(*go/parser.parser).parseExpr"
"(*go/parser.parser).parseExprList" "(*go/parser.parser).next"
"(*go/parser.parser).parseExprList" "(*go/parser.parser).parseExpr"
"(*go/parser.parser).parseList" "(*go/parser.parser).parseExprList"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).parseList"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).next"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).next"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).parseList"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.BasicLit).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.FuncType).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.CallExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.IndexExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.Ellipsis).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.ChanType).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.InterfaceType).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.FuncLit).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.CompositeLit).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.ParenExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.StructType).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.MapType).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).next"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.ArrayType).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.SliceExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.StructType).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.StarExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.MapType).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.BadExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).next"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).next"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).parseStmt"
"(*go/parser.parser).parseSimpleStmt" "(*go/parser.parser).error"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.BasicLit).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.FuncType).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.CallExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.IndexExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.Ellipsis).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.ChanType).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.InterfaceType).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.FuncLit).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.CompositeLit).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.ParenExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.SliceExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.StarExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.BadExpr).Pos"
"(*go/parser.parser).parseSimpleStmt" "(*go/ast.ArrayType).Pos"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).parseSimpleStmt"
"(*go/parser.parser).parseGoStmt" "go/parser.trace"
"(*go/parser.parser).parseGoStmt" "go/parser.un"
"(*go/parser.parser).parseGoStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseCallExpr" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseCallExpr" "go/ast.Unparen"
"(*go/parser.parser).parseCallExpr" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.BasicLit).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.FuncType).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.CallExpr).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.IndexExpr).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.Ellipsis).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.ChanType).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.InterfaceType).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.FuncLit).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.CompositeLit).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.ParenExpr).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.StarExpr).End"
"(*go/parser.parser).safePos" "(*go/parser.parser).safePos$1"
"(*go/parser.parser).safePos" "(*go/token.File).Offset"
"(*go/parser.parser).parseCallExpr" "(*go/parser.parser).safePos"
"(*go/parser.parser).parseCallExpr" "(*go/parser.parser).error"
"(*go/parser.parser).parseCallExpr" "(*go/ast.ArrayType).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.SliceExpr).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.StructType).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.StarExpr).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.MapType).Pos"
"(*go/parser.parser).parseCallExpr" "(*go/ast.BadExpr).Pos"
"(*go/parser.parser).parseCallExpr" "fmt.Sprintf"
"(*go/parser.parser).parseCallExpr" "(*go/parser.parser).error"
"(*go/parser.parser).parseCallExpr" "(*go/ast.Ident).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.BasicLit).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.FuncType).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.SelectorExpr).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.CallExpr).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.IndexExpr).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.IndexListExpr).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.Ellipsis).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.ChanType).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.InterfaceType).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.UnaryExpr).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.FuncLit).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.CompositeLit).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.KeyValueExpr).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.ParenExpr).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.TypeAssertExpr).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.BinaryExpr).End"
"(*go/parser.parser).parseCallExpr" "fmt.Sprintf"
"(*go/parser.parser).parseCallExpr" "(*go/ast.BadExpr).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.MapType).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.ArrayType).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.SliceExpr).End"
"(*go/parser.parser).parseCallExpr" "(*go/ast.StructType).End"
"(*go/parser.parser).parseGoStmt" "(*go/parser.parser).parseCallExpr"
"(*go/parser.parser).parseGoStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).parseGoStmt"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseDeferStmt" "go/parser.trace"
"(*go/parser.parser).parseDeferStmt" "go/parser.un"
"(*go/parser.parser).parseDeferStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseDeferStmt" "(*go/parser.parser).parseCallExpr"
"(*go/parser.parser).parseDeferStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).parseDeferStmt"
"(*go/parser.parser).parseReturnStmt" "go/parser.trace"
"(*go/parser.parser).parseReturnStmt" "go/parser.un"
"(*go/parser.parser).parseReturnStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseReturnStmt" "(*go/parser.parser).parseList"
"(*go/parser.parser).parseReturnStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).parseReturnStmt"
"(*go/parser.parser).parseBranchStmt" "go/parser.trace"
"(*go/parser.parser).parseBranchStmt" "go/parser.un"
"(*go/parser.parser).parseBranchStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseBranchStmt" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseBranchStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).parseBranchStmt"
"(*go/parser.parser).parseBlockStmt" "go/parser.trace"
"(*go/parser.parser).parseBlockStmt" "go/parser.un"
"(*go/parser.parser).parseBlockStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseBlockStmt" "(*go/parser.parser).parseStmtList"
"(*go/parser.parser).expect2" "(*go/parser.parser).next"
"(*go/parser.parser).expect2" "(go/token.Token).String"
"(*go/parser.parser).expect2" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseBlockStmt" "(*go/parser.parser).expect2"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).parseBlockStmt"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseIfStmt" "go/parser.incNestLev"
"(*go/parser.parser).parseIfStmt" "go/parser.decNestLev"
"(*go/parser.parser).parseIfStmt" "go/parser.trace"
"(*go/parser.parser).parseIfStmt" "go/parser.un"
"(*go/parser.parser).parseIfStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseIfHeader" "(*go/parser.parser).error"
"(*go/parser.parser).parseIfHeader" "(*go/parser.parser).next"
"(*go/parser.parser).parseIfHeader" "(*go/parser.parser).error"
"(*go/parser.parser).parseIfHeader" "(*go/parser.parser).parseSimpleStmt"
"(*go/parser.parser).parseIfHeader" "(*go/parser.parser).next"
"(*go/parser.parser).parseIfHeader" "(*go/parser.parser).expect"
"(*go/parser.parser).parseIfHeader" "(*go/parser.parser).parseSimpleStmt"
"(*go/parser.parser).makeExpr" "(*go/ast.BlockStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.LabeledStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.AssignStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.SendStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.IncDecStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.ReturnStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.BranchStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.IfStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.SwitchStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.CaseClause).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.ForStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.RangeStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.DeclStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.SelectStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.EmptyStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.BadStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.ExprStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.GoStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.DeferStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.CommClause).Pos"
"(*go/parser.parser).makeExpr" "fmt.Sprintf"
"(*go/parser.parser).makeExpr" "(*go/parser.parser).error"
"(*go/parser.parser).makeExpr" "(*go/ast.BlockStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.LabeledStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.AssignStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.SendStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.IncDecStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.ReturnStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.BranchStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.IfStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.SwitchStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.CaseClause).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.ForStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.RangeStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.DeclStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.SelectStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.EmptyStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.BadStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.ExprStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.GoStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.DeferStmt).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.CommClause).Pos"
"(*go/parser.parser).makeExpr" "(*go/ast.BlockStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.LabeledStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.AssignStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.SendStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.IncDecStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.ReturnStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.BranchStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.IfStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.SwitchStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.CaseClause).End"
"(*go/parser.parser).makeExpr" "(*go/ast.TypeSwitchStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.ForStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.RangeStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.DeclStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.SelectStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.EmptyStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.BadStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.ExprStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.GoStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.DeferStmt).End"
"(*go/parser.parser).makeExpr" "(*go/ast.CommClause).End"
"(*go/parser.parser).makeExpr" "(*go/parser.parser).safePos"
"(*go/parser.parser).parseIfHeader" "(*go/parser.parser).makeExpr"
"(*go/parser.parser).parseIfHeader" "(go/token.Pos).IsValid"
"(*go/parser.parser).parseIfHeader" "(*go/parser.parser).error"
"(*go/parser.parser).parseIfHeader" "(*go/parser.parser).error"
"(*go/parser.parser).parseIfStmt" "(*go/parser.parser).parseIfHeader"
"(*go/parser.parser).parseIfStmt" "(*go/parser.parser).parseBlockStmt"
"(*go/parser.parser).parseIfStmt" "(*go/parser.parser).next"
"(*go/parser.parser).parseIfStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseIfStmt" "(*go/parser.parser).parseIfStmt"
"(*go/parser.parser).parseIfStmt" "(*go/parser.parser).parseBlockStmt"
"(*go/parser.parser).parseIfStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseIfStmt" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).parseIfStmt"
"(*go/parser.parser).parseSwitchStmt" "go/parser.trace"
"(*go/parser.parser).parseSwitchStmt" "go/parser.un"
"(*go/parser.parser).parseSwitchStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).isTypeSwitchGuard" "go/parser.isTypeSwitchAssert"
"(*go/parser.parser).isTypeSwitchGuard" "go/parser.isTypeSwitchAssert"
"(*go/parser.parser).isTypeSwitchGuard" "(*go/parser.parser).error"
"(*go/parser.parser).parseSwitchStmt" "(*go/parser.parser).isTypeSwitchGuard"
"(*go/parser.parser).parseSwitchStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseSwitchStmt" "(*go/parser.parser).parseSimpleStmt"
"(*go/parser.parser).parseSwitchStmt" "(*go/parser.parser).next"
"(*go/parser.parser).parseSwitchStmt" "(*go/parser.parser).parseSimpleStmt"
"(*go/parser.parser).parseCaseClause" "go/parser.trace"
"(*go/parser.parser).parseCaseClause" "go/parser.un"
"(*go/parser.parser).parseCaseClause" "(*go/parser.parser).next"
"(*go/parser.parser).parseCaseClause" "(*go/parser.parser).parseList"
"(*go/parser.parser).parseCaseClause" "(*go/parser.parser).expect"
"(*go/parser.parser).parseCaseClause" "(*go/parser.parser).parseStmtList"
"(*go/parser.parser).parseCaseClause" "(*go/parser.parser).expect"
"(*go/parser.parser).parseSwitchStmt" "(*go/parser.parser).parseCaseClause"
"(*go/parser.parser).parseSwitchStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseSwitchStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseSwitchStmt" "(*go/parser.parser).makeExpr"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).parseSwitchStmt"
"(*go/parser.parser).parseSelectStmt" "go/parser.trace"
"(*go/parser.parser).parseSelectStmt" "go/parser.un"
"(*go/parser.parser).parseSelectStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseSelectStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseCommClause" "go/parser.trace"
"(*go/parser.parser).parseCommClause" "go/parser.un"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).next"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).parseList"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).expect"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).parseStmtList"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).expect"
"(*go/parser.parser).parseCommClause" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.BasicLit).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.FuncType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.CallExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.IndexExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.Ellipsis).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.ChanType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.InterfaceType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.FuncLit).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.CompositeLit).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.ParenExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.ArrayType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.StarExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseCommClause" "(*go/ast.ArrayType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.SliceExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.StructType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.StarExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.MapType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.BadExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).next"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseCommClause" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.BasicLit).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.FuncType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.CallExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.IndexExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.Ellipsis).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.ChanType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.InterfaceType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.FuncLit).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.CompositeLit).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.ParenExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.MapType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.StructType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.BadExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.ArrayType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.SliceExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.StructType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.StarExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.MapType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.BadExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).next"
"(*go/parser.parser).parseCommClause" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseCommClause" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.BasicLit).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.FuncType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.CallExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.IndexExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.Ellipsis).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.ChanType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.InterfaceType).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.FuncLit).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.CompositeLit).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.ParenExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.parser).parseCommClause" "(*go/ast.SliceExpr).Pos"
"(*go/parser.parser).parseSelectStmt" "(*go/parser.parser).parseCommClause"
"(*go/parser.parser).parseSelectStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseSelectStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).parseSelectStmt"
"(*go/parser.parser).parseForStmt" "go/parser.trace"
"(*go/parser.parser).parseForStmt" "go/parser.un"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).expect"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).parseBlockStmt"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).next"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).parseSimpleStmt"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).next"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).parseSimpleStmt"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).parseSimpleStmt"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).makeExpr"
"(*go/parser.parser).parseForStmt" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.BasicLit).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.FuncType).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.CallExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.IndexExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.Ellipsis).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.ChanType).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.InterfaceType).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.FuncLit).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.CompositeLit).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.ParenExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.MapType).Pos"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseForStmt" "(*go/parser.parser).safePos"
"(*go/parser.parser).parseForStmt" "(*go/ast.ArrayType).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.SliceExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.StructType).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.StarExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.MapType).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.BadExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.BasicLit).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.FuncType).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.CallExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.IndexExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.Ellipsis).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.ChanType).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.InterfaceType).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.FuncLit).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.CompositeLit).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.ParenExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.StarExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.BadExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.BlockStmt).End"
"(*go/parser.parser).parseForStmt" "(*go/ast.ArrayType).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.SliceExpr).Pos"
"(*go/parser.parser).parseForStmt" "(*go/ast.StructType).Pos"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).parseForStmt"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).next"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseStmt" "(*go/parser.parser).advance"
"(*go/parser.parser).parseStmtList" "(*go/parser.parser).parseStmt"
"(*go/parser.parser).parseBody" "(*go/parser.parser).parseStmtList"
"(*go/parser.parser).parseBody" "(*go/parser.parser).expect2"
"(*go/parser.parser).parseFuncTypeOrLit" "(*go/parser.parser).parseBody"
"(*go/parser.parser).parseOperand" "(*go/parser.parser).parseFuncTypeOrLit"
"(*go/parser.parser).parseOperand" "(*go/parser.parser).tryIdentOrType"
"(*go/parser.parser).parseOperand" "go/parser.assert"
"(*go/parser.parser).parseOperand" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseOperand" "(*go/parser.parser).advance"
"(*go/parser.parser).parsePrimaryExpr" "(*go/parser.parser).parseOperand"
"(*go/parser.parser).parsePrimaryExpr" "(*go/parser.parser).parsePrimaryExpr$1"
"(*go/parser.parser).parsePrimaryExpr" "go/parser.incNestLev"
"(*go/parser.parser).parsePrimaryExpr" "(*go/parser.parser).next"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "go/parser.trace"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "go/parser.un"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "(*go/parser.parser).expect"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "(*go/parser.parser).next"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "(*go/parser.parser).expect"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "(*go/parser.parser).next"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "(*go/parser.parser).next"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "(*go/parser.parser).error"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "(*go/parser.parser).error"
"(*go/parser.parser).parseIndexOrSliceOrInstance" "go/internal/typeparams.PackIndexExpr"
"(*go/parser.parser).parsePrimaryExpr" "(*go/parser.parser).parseIndexOrSliceOrInstance"
"(*go/parser.parser).parseSelector" "go/parser.trace"
"(*go/parser.parser).parseSelector" "go/parser.un"
"(*go/parser.parser).parseSelector" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parsePrimaryExpr" "(*go/parser.parser).parseSelector"
"(*go/parser.parser).parseTypeAssertion" "go/parser.trace"
"(*go/parser.parser).parseTypeAssertion" "go/parser.un"
"(*go/parser.parser).parseTypeAssertion" "(*go/parser.parser).expect"
"(*go/parser.parser).parseTypeAssertion" "(*go/parser.parser).next"
"(*go/parser.parser).parseTypeAssertion" "(*go/parser.parser).expect"
"(*go/parser.parser).parseTypeAssertion" "(*go/parser.parser).parseType"
"(*go/parser.parser).parsePrimaryExpr" "(*go/parser.parser).parseTypeAssertion"
"(*go/parser.parser).parsePrimaryExpr" "(*go/parser.parser).errorExpected"
"(*go/parser.parser).parsePrimaryExpr" "(*go/parser.parser).next"
"(*go/parser.parser).parseCallOrConversion" "go/parser.trace"
"(*go/parser.parser).parseCallOrConversion" "go/parser.un"
"(*go/parser.parser).parseCallOrConversion" "(*go/parser.parser).expect"
"(*go/parser.parser).parseCallOrConversion" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseCallOrConversion" "(*go/parser.parser).expectClosing"
"(*go/parser.parser).parseCallOrConversion" "(go/token.Pos).IsValid"
"(*go/parser.parser).parseCallOrConversion" "(*go/parser.parser).next"
"(*go/parser.parser).parseCallOrConversion" "(*go/parser.parser).atComma"
"(*go/parser.parser).parseCallOrConversion" "(*go/parser.parser).next"
"(*go/parser.parser).parsePrimaryExpr" "(*go/parser.parser).parseCallOrConversion"
"(*go/parser.parser).parsePrimaryExpr" "go/ast.Unparen"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.Ident).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.BasicLit).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.FuncType).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.CallExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.IndexExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.Ellipsis).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.ChanType).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.InterfaceType).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.FuncLit).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.CompositeLit).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.ParenExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.BadExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/parser.parser).error"
"(*go/parser.parser).parseLiteralValue" "go/parser.trace"
"(*go/parser.parser).parseLiteralValue" "go/parser.un"
"(*go/parser.parser).parseLiteralValue" "(*go/parser.parser).expect"
"(*go/parser.parser).parseElementList" "go/parser.trace"
"(*go/parser.parser).parseElementList" "go/parser.un"
"(*go/parser.parser).parseElement" "go/parser.trace"
"(*go/parser.parser).parseElement" "go/parser.un"
"(*go/parser.parser).parseValue" "go/parser.trace"
"(*go/parser.parser).parseValue" "go/parser.un"
"(*go/parser.parser).parseValue" "(*go/parser.parser).parseLiteralValue"
"(*go/parser.parser).parseValue" "(*go/parser.parser).parseExpr"
"(*go/parser.parser).parseElement" "(*go/parser.parser).parseValue"
"(*go/parser.parser).parseElement" "(*go/parser.parser).next"
"(*go/parser.parser).parseElement" "(*go/parser.parser).parseValue"
"(*go/parser.parser).parseElementList" "(*go/parser.parser).parseElement"
"(*go/parser.parser).parseElementList" "(*go/parser.parser).atComma"
"(*go/parser.parser).parseElementList" "(*go/parser.parser).next"
"(*go/parser.parser).parseLiteralValue" "(*go/parser.parser).parseElementList"
"(*go/parser.parser).parseLiteralValue" "(*go/parser.parser).expectClosing"
"(*go/parser.parser).parsePrimaryExpr" "(*go/parser.parser).parseLiteralValue"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.ArrayType).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.SliceExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.StructType).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.StarExpr).Pos"
"(*go/parser.parser).parsePrimaryExpr" "(*go/ast.MapType).Pos"
"(*go/parser.parser).parseUnaryExpr" "(*go/parser.parser).parsePrimaryExpr"
"(*go/parser.parser).parseBinaryExpr" "(*go/parser.parser).parseUnaryExpr"
"(*go/parser.parser).parseBinaryExpr" "(*go/parser.parser).parseBinaryExpr$1"
"(*go/parser.parser).parseBinaryExpr" "go/parser.incNestLev"
"(*go/parser.parser).tokPrec" "(go/token.Token).Precedence"
"(*go/parser.parser).parseBinaryExpr" "(*go/parser.parser).tokPrec"
"(*go/parser.parser).parseBinaryExpr" "(*go/parser.parser).expect"
"(*go/parser.parser).parseBinaryExpr" "(*go/parser.parser).parseBinaryExpr"
"(*go/parser.parser).parseExpr" "(*go/parser.parser).parseBinaryExpr"
"(*go/parser.parser).parseRhs" "(*go/parser.parser).parseExpr"
"(*go/parser.parser).parseArrayType" "(*go/parser.parser).parseRhs"
"(*go/parser.parser).parseArrayType" "(*go/parser.parser).error"
"(*go/parser.parser).parseArrayType" "(*go/parser.parser).next"
"(*go/parser.parser).parseArrayType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseArrayType" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseTypeSpec" "(*go/parser.parser).parseArrayType"
"(*go/parser.parser).parseTypeSpec" "(*go/parser.parser).parsePrimaryExpr"
"(*go/parser.parser).parseTypeSpec" "(*go/parser.parser).parseBinaryExpr"
"go/parser.isTypeElem" "go/parser.isTypeElem"
"go/parser.isTypeElem" "go/parser.isTypeElem"
"go/parser.isTypeElem" "go/parser.isTypeElem"
"go/parser.extractName" "go/parser.isTypeElem"
"go/parser.extractName" "go/parser.isTypeElem"
"go/parser.extractName" "go/parser.extractName"
"go/parser.extractName" "go/parser.isTypeElem"
"(*go/parser.parser).parseTypeSpec" "go/parser.extractName"
"(*go/parser.parser).parseGenericType" "go/parser.trace"
"(*go/parser.parser).parseGenericType" "go/parser.un"
"(*go/parser.parser).parseGenericType" "(*go/parser.parser).parseParameterList"
"(*go/parser.parser).parseGenericType" "(*go/parser.parser).expect"
"(*go/parser.parser).parseGenericType" "(*go/parser.parser).next"
"(*go/parser.parser).parseGenericType" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseTypeSpec" "(*go/parser.parser).parseGenericType"
"(*go/parser.parser).parseTypeSpec" "(*go/parser.parser).parseArrayType"
"(*go/parser.parser).parseTypeSpec" "(*go/parser.parser).next"
"(*go/parser.parser).parseTypeSpec" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseGenDecl" "(*go/parser.parser).parseTypeSpec"
"(*go/parser.parser).parseGenDecl" "(*go/parser.parser).parseTypeSpec"
"(*go/parser.parser).parseValueSpec" "(go/token.Token).String"
"(*go/parser.parser).parseValueSpec" "go/parser.trace"
"(*go/parser.parser).parseValueSpec" "go/parser.un"
"(*go/parser.parser).parseIdentList" "go/parser.trace"
"(*go/parser.parser).parseIdentList" "go/parser.un"
"(*go/parser.parser).parseIdentList" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseIdentList" "(*go/parser.parser).next"
"(*go/parser.parser).parseIdentList" "(*go/parser.parser).parseIdent"
"(*go/parser.parser).parseValueSpec" "(*go/parser.parser).parseIdentList"
"(*go/parser.parser).parseValueSpec" "(*go/parser.parser).expectSemi"
"(*go/parser.parser).parseValueSpec" "(*go/parser.parser).tryIdentOrType"
"(*go/parser.parser).parseValueSpec" "(*go/parser.parser).next"
"(*go/parser.parser).parseValueSpec" "(*go/parser.parser).parseList"
"(*go/parser.parser).parseValueSpec" "(*go/parser.parser).parseType"
"(*go/parser.parser).parseValueSpec" "(*go/parser.parser).next"
"(*go/parser.parser).parseValueSpec" "(*go/parser.parser).parseList"
"(*go/parser.parser).parseGenDecl" "(*go/parser.parser).parseValueSpec"
"(*go/parser.parser).parseGenDecl" "(*go/parser.parser).parseValueSpec"
"(*go/parser.parser).parseFile" "(*go/parser.parser).parseGenDecl"
"(*go/parser.parser).parseFile" "(*go/parser.parser).error"
"(*go/parser.parser).parseFile" "(*go/parser.parser).parseDecl"
"go/parser.resolveFile" "go/ast.NewScope"
"(*go/parser.resolver).Visit" "(*go/ast.Ident).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.GenDecl).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BasicLit).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BlockStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ImportSpec).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.FuncType).Pos"
"(*go/parser.resolver).Visit" "(*go/types.Scope).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.IndexExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.Field).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.TypeSpec).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.File).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.Comment).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.FieldList).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.FuncDecl).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.CallExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.CommentGroup).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ValueSpec).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BadDecl).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.Ellipsis).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ChanType).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.InterfaceType).Pos"
"(*go/parser.resolver).trace" "strings.Repeat"
"(*go/parser.resolver).sprintf" "fmt.Sprintf"
"(*go/parser.resolver).sprintf" "(*go/token.File).Position"
"(*go/parser.resolver).trace" "(*go/parser.resolver).sprintf"
"(*go/parser.resolver).trace" "fmt.Println"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).trace"
"(*go/parser.resolver).resolve" "(*go/ast.Ident).Pos"
"(*go/parser.resolver).resolve" "(*go/parser.resolver).sprintf"
"(*go/parser.resolver).resolve" "(*go/ast.Scope).Lookup"
"(*go/parser.resolver).resolve" "(*go/ast.Ident).Pos"
"(*go/parser.resolver).resolve" "(*go/parser.resolver).trace"
"(*go/parser.resolver).resolve" "go/parser.assert"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).resolve"
"(*go/parser.resolver).Visit" "(*go/ast.FuncLit).Pos"
"(*go/parser.resolver).openScope" "(*go/parser.resolver).trace"
"(*go/parser.resolver).openScope" "go/ast.NewScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).closeScope" "(*go/parser.resolver).trace"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).resolveList" "go/ast.Walk"
"(*go/parser.resolver).walkFuncType" "(*go/parser.resolver).resolveList"
"(*go/parser.resolver).walkFuncType" "(*go/parser.resolver).resolveList"
"(*go/parser.resolver).declare" "(*go/ast.Ident).Pos"
"(*go/parser.resolver).declare" "fmt.Sprintf"
"(*go/parser.resolver).declare" "go/ast.NewObj"
"(*go/parser.resolver).declare" "(*go/ast.Ident).Pos"
"(*go/parser.resolver).declare" "(*go/parser.resolver).trace"
"(*go/parser.resolver).declare" "(*go/ast.Scope).Insert"
"(*go/parser.resolver).declare" "(*go/ast.Object).Pos"
"(*go/parser.resolver).declare" "(go/token.Pos).IsValid"
"(*go/parser.resolver).declare" "(*go/parser.resolver).sprintf"
"(*go/parser.resolver).declare" "(*go/ast.Ident).Pos"
"(*go/parser.resolver).declare" "fmt.Sprintf"
"(*go/parser.resolver).declare" "(*go/parser.parser).error"
"(*go/parser.resolver).declareList" "(*go/parser.resolver).declare"
"(*go/parser.resolver).walkFuncType" "(*go/parser.resolver).declareList"
"(*go/parser.resolver).walkFuncType" "(*go/parser.resolver).declareList"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkFuncType"
"(*go/parser.resolver).openLabelScope" "go/ast.NewScope"
"(*go/parser.resolver).walkBody" "(*go/parser.resolver).openLabelScope"
"(*go/parser.resolver).closeLabelScope" "(*go/ast.Scope).Lookup"
"(*go/parser.resolver).closeLabelScope" "(*go/ast.Ident).Pos"
"(*go/parser.resolver).closeLabelScope" "fmt.Sprintf"
"(*go/parser.resolver).closeLabelScope" "(*go/parser.parser).error"
"(*go/parser.resolver).walkBody" "(*go/parser.resolver).closeLabelScope"
"(*go/parser.resolver).walkStmts" "go/ast.Walk"
"(*go/parser.resolver).walkBody" "(*go/parser.resolver).walkStmts"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkBody"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/ast.StructType).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).walkFieldList" "(*go/parser.resolver).resolveList"
"(*go/parser.resolver).walkFieldList" "(*go/parser.resolver).declareList"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkFieldList"
"(*go/parser.resolver).Visit" "(*go/ast.FuncType).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkFuncType"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).resolve"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/ast.InterfaceType).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkFieldList"
"(*go/parser.resolver).Visit" "(*go/ast.LabeledStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).declare"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).walkExprs" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkExprs"
"(*go/parser.resolver).shortVarDecl" "go/parser.assert"
"(*go/parser.resolver).shortVarDecl" "go/ast.NewObj"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.Ident).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/parser.resolver).trace"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.Scope).Insert"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.Ident).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.BasicLit).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.FuncType).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.CallExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.IndexExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.Ellipsis).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.ChanType).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.InterfaceType).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.FuncLit).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.CompositeLit).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.ParenExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.StarExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.MapType).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.BadExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.ArrayType).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/parser.parser).error"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.SliceExpr).Pos"
"(*go/parser.resolver).shortVarDecl" "(*go/ast.StructType).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).shortVarDecl"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkExprs"
"(*go/parser.resolver).Visit" "(*go/ast.BlockStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkStmts"
"(*go/parser.resolver).Visit" "(*go/ast.IfStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkExprs"
"(*go/parser.resolver).Visit" "(*go/ast.CaseClause).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkStmts"
"(*go/parser.resolver).Visit" "(*go/ast.SwitchStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/ast.Ident).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BasicLit).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.FuncType).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.SelectorExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.CallExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.IndexExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.IndexListExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.Ellipsis).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ChanType).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.InterfaceType).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkStmts"
"(*go/parser.resolver).Visit" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/ast.BlockStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.LabeledStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkStmts"
"(*go/parser.resolver).Visit" "(*go/ast.CommClause).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkStmts"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkStmts"
"(*go/parser.resolver).Visit" "(*go/ast.ForStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/ast.RangeStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.UnaryExpr).Pos"
"(*go/parser.resolver).walkLHS" "go/ast.Unparen"
"(*go/parser.resolver).walkLHS" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkLHS"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).shortVarDecl"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkExprs"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkExprs"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).declare"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).declare"
"(*go/parser.resolver).Visit" "(*go/ast.TypeSpec).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).walkTParams" "(*go/parser.resolver).declareList"
"(*go/parser.resolver).walkTParams" "(*go/parser.resolver).resolveList"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkTParams"
"(*go/parser.resolver).Visit" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/ast.FuncDecl).Pos"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).openScope"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).closeScope"
"(*go/parser.resolver).walkRecv" "(*go/parser.resolver).declare"
"(*go/parser.resolver).walkRecv" "go/ast.Walk"
"(*go/parser.resolver).walkRecv" "go/ast.Walk"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkRecv"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkTParams"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).resolveList"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).resolveList"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).declareList"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).declareList"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).declareList"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).walkBody"
"(*go/parser.resolver).Visit" "(*go/parser.resolver).declare"
"(*go/parser.resolver).Visit" "(*go/ast.FuncLit).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.FuncLit).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.CompositeLit).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.CompositeLit).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.KeyValueExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ParenExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ParenExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.TypeAssertExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BinaryExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.GoStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.GoStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.DeferStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.DeferStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.CommClause).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.CommClause).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ArrayType).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ArrayType).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.AssignStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.AssignStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.SliceExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.SliceExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.SendStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.SendStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.IncDecStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.IncDecStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ReturnStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ReturnStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BranchStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BranchStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.IfStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.IfStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.SwitchStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.SwitchStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.CaseClause).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.CaseClause).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ForStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ForStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.StructType).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.StructType).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.StarExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.StarExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.MapType).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.MapType).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BadExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BadExpr).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.RangeStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.RangeStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.DeclStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.DeclStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.SelectStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.SelectStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.EmptyStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.EmptyStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BadStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.BadStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ExprStmt).Pos"
"(*go/parser.resolver).Visit" "(*go/ast.ExprStmt).Pos"
"go/ast.Walk" "(*go/parser.resolver).Visit"
"go/ast.Walk" "(*go/parser.resolver).Visit"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.walkIdentList" "go/ast.Walk"
"go/ast.Walk" "go/ast.walkIdentList"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.walkExprList" "go/ast.Walk"
"go/ast.Walk" "go/ast.walkExprList"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.walkExprList"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.walkExprList"
"go/ast.Walk" "go/ast.walkExprList"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.walkExprList"
"go/ast.Walk" "go/ast.Walk"
"go/ast.walkStmtList" "go/ast.Walk"
"go/ast.Walk" "go/ast.walkStmtList"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.walkExprList"
"go/ast.Walk" "go/ast.walkStmtList"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.walkStmtList"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.walkIdentList"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.walkExprList"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.Walk" "go/ast.Walk"
"go/ast.walkDeclList" "go/ast.Walk"
"go/ast.Walk" "go/ast.walkDeclList"
"go/ast.Walk" "fmt.Sprintf"
"go/ast.Walk" "go/ast.Walk"
"go/parser.resolveFile" "go/ast.Walk"
"go/parser.resolveFile" "(*go/parser.resolver).closeScope"
"go/parser.resolveFile" "go/parser.assert"
"go/parser.resolveFile" "go/parser.assert"
"go/parser.resolveFile" "go/parser.assert"
"go/parser.resolveFile" "(*go/ast.Scope).Lookup"
"go/parser.resolveFile" "(*go/ast.StarExpr).Pos"
"go/parser.resolveFile" "(*go/ast.CommentGroup).Pos"
"go/parser.resolveFile" "(*go/ast.EmptyStmt).Pos"
"go/parser.resolveFile" "(*go/ast.Ident).Pos"
"go/parser.resolveFile" "(*go/ast.BasicLit).Pos"
"go/parser.resolveFile" "(*go/ast.BlockStmt).Pos"
"go/parser.resolveFile" "(*go/ast.ImportSpec).Pos"
"go/parser.resolveFile" "(*go/ast.FuncType).Pos"
"go/parser.resolveFile" "(*go/types.Scope).Pos"
"go/parser.resolveFile" "(*go/ast.BadStmt).Pos"
"go/parser.resolveFile" "(go/types.atPos).Pos"
"go/parser.resolveFile" "(*go/ast.GoStmt).Pos"
"go/parser.resolveFile" "(*go/ast.Field).Pos"
"go/parser.resolveFile" "(*go/types.object).Pos"
"go/parser.resolveFile" "(*go/ast.TypeSpec).Pos"
"go/parser.resolveFile" "(*go/ast.File).Pos"
"go/parser.resolveFile" "(*go/ast.SelectorExpr).Pos"
"go/parser.resolveFile" "(*go/ast.DeferStmt).Pos"
"go/parser.resolveFile" "(*go/ast.BadExpr).Pos"
"go/parser.resolveFile" "(*go/ast.Comment).Pos"
"go/parser.resolveFile" "(*go/ast.FieldList).Pos"
"go/parser.resolveFile" "(*go/ast.FuncDecl).Pos"
"go/parser.resolveFile" "(*go/ast.RangeStmt).Pos"
"go/parser.resolveFile" "(*go/ast.CallExpr).Pos"
"go/parser.resolveFile" "(*go/ast.SelectStmt).Pos"
"go/parser.resolveFile" "(*go/ast.Object).Pos"
"go/parser.resolveFile" "(*go/ast.IndexExpr).Pos"
"go/parser.resolveFile" "(*go/ast.IndexListExpr).Pos"
"go/parser.resolveFile" "(*go/ast.GenDecl).Pos"
"go/parser.resolveFile" "(*go/types.operand).Pos"
"go/parser.resolveFile" "(*go/ast.ValueSpec).Pos"
"go/parser.resolveFile" "(*go/ast.BadDecl).Pos"
"go/parser.resolveFile" "(*go/ast.Ident).Pos"
"go/parser.resolveFile" "(*go/parser.resolver).trace"
"go/parser.resolveFile" "(go/types.posSpan).Pos"
"go/parser.resolveFile" "(*go/ast.MapType).Pos"
"go/parser.resolveFile" "(*go/ast.Ellipsis).Pos"
"go/parser.resolveFile" "(*go/ast.ChanType).Pos"
"go/parser.resolveFile" "(*go/ast.InterfaceType).Pos"
"go/parser.resolveFile" "(*go/ast.LabeledStmt).Pos"
"go/parser.resolveFile" "(*go/ast.UnaryExpr).Pos"
"go/parser.resolveFile" "(*go/ast.FuncLit).Pos"
"go/parser.resolveFile" "(*go/ast.CompositeLit).Pos"
"go/parser.resolveFile" "(*go/ast.KeyValueExpr).Pos"
"go/parser.resolveFile" "(*go/ast.ParenExpr).Pos"
"go/parser.resolveFile" "(*go/ast.TypeAssertExpr).Pos"
"go/parser.resolveFile" "(*go/ast.BinaryExpr).Pos"
"go/parser.resolveFile" "(*go/ast.StructType).Pos"
"go/parser.resolveFile" "(*go/ast.DeclStmt).Pos"
"go/parser.resolveFile" "(*go/ast.CommClause).Pos"
"go/parser.resolveFile" "(*go/ast.ExprStmt).Pos"
"go/parser.resolveFile" "(*go/ast.ArrayType).Pos"
"go/parser.resolveFile" "(*go/ast.AssignStmt).Pos"
"go/parser.resolveFile" "(*go/ast.SliceExpr).Pos"
"go/parser.resolveFile" "(*go/ast.SendStmt).Pos"
"go/parser.resolveFile" "(*go/ast.IncDecStmt).Pos"
"go/parser.resolveFile" "(*go/ast.ReturnStmt).Pos"
"go/parser.resolveFile" "(*go/ast.BranchStmt).Pos"
"go/parser.resolveFile" "(*go/ast.IfStmt).Pos"
"go/parser.resolveFile" "(*go/ast.SwitchStmt).Pos"
"go/parser.resolveFile" "(*go/ast.CaseClause).Pos"
"go/parser.resolveFile" "(*go/ast.TypeSwitchStmt).Pos"
"go/parser.resolveFile" "(*go/ast.ForStmt).Pos"
"(*go/parser.parser).parseFile" "go/parser.resolveFile"
"go/parser.ParseFile" "(*go/parser.parser).parseFile"
"golang.org/x/tools/internal/aliases.aliasesDefault$1" "go/parser.ParseFile"
"(*go/types.Config).Check" "go/types.NewPackage"
"(*internal/godebug.Setting).Value" "(*sync.Once).Do"
"(*sync/atomic.Pointer[internal/godebug.value]).Load[internal/godebug.value]" "sync/atomic.LoadPointer"
"(*internal/godebug.Setting).Value" "(*sync/atomic.Pointer[internal/godebug.value]).Load[internal/godebug.value]"
"(*internal/bisect.Matcher).stack" "runtime.Callers"
"internal/bisect.Hash" "internal/bisect.fnvString"
"internal/bisect.Hash" "internal/bisect.fnv"
"internal/bisect.Hash" "internal/bisect.fnvUint64"
"internal/bisect.Hash" "internal/bisect.fnvUint64"
"internal/bisect.Hash" "internal/bisect.fnvUint32"
"internal/bisect.Hash" "internal/bisect.fnvUint32"
"internal/bisect.Hash" "internal/bisect.fnvUint64"
"internal/bisect.Hash" "internal/bisect.fnvUint64"
"internal/bisect.Hash" "internal/bisect.fnvUint64"
"internal/bisect.Hash" "internal/bisect.fnvString"
"internal/bisect.Hash" "internal/bisect.fnv"
"internal/bisect.Hash" "internal/bisect.fnvUint64"
"internal/bisect.Hash" "internal/bisect.fnvUint64"
"internal/bisect.Hash" "internal/bisect.fnvUint32"
"internal/bisect.Hash" "internal/bisect.fnvUint32"
"internal/bisect.Hash" "internal/bisect.fnvUint64"
"internal/bisect.Hash" "internal/bisect.fnvUint64"
"internal/bisect.Hash" "internal/bisect.fnvUint64"
"(*internal/bisect.Matcher).stack" "internal/bisect.Hash"
"(*internal/bisect.Matcher).ShouldPrint" "(*internal/bisect.Matcher).matchResult"
"(*internal/bisect.Matcher).stack" "(*internal/bisect.Matcher).ShouldPrint"
"(*internal/bisect.Matcher).ShouldEnable" "(*internal/bisect.Matcher).matchResult"
"(*internal/bisect.Matcher).stack" "(*internal/bisect.Matcher).ShouldEnable"
"(*internal/bisect.atomicPointerDedup).Load" "sync/atomic.LoadPointer"
"(*internal/bisect.Matcher).stack" "(*internal/bisect.atomicPointerDedup).Load"
"(*internal/bisect.Matcher).stack" "(*internal/bisect.Matcher).MarkerOnly"
"(*internal/bisect.atomicPointerDedup).CompareAndSwap" "sync/atomic.CompareAndSwapPointer"
"(*internal/bisect.Matcher).stack" "(*internal/bisect.atomicPointerDedup).CompareAndSwap"
"(*internal/bisect.dedup).seenLossy" "sync/atomic.LoadUint64"
"(*internal/bisect.dedup).seenLossy" "internal/bisect.fnvUint64"
"(*internal/bisect.dedup).seenLossy" "sync/atomic.StoreUint64"
"(*internal/bisect.Matcher).stack" "(*internal/bisect.dedup).seenLossy"
"(*internal/bisect.dedup).seen" "(*sync.Mutex).Lock"
"(*internal/bisect.dedup).seen" "(*sync.Mutex).Unlock"
"(*internal/bisect.Matcher).stack" "(*internal/bisect.dedup).seen"
"internal/bisect.PrintMarker" "internal/bisect.AppendMarker"
"internal/bisect.PrintMarker" "(*internal/poll.FD).Write"
"internal/bisect.PrintMarker" "(io.discard).Write"
"internal/bisect.PrintMarker" "(*internal/godebug.runtimeStderr).Write"
"internal/bisect.PrintMarker" "(*fmt.pp).Write"
"internal/bisect.PrintMarker" "(*os.File).Write"
"internal/bisect.PrintMarker" "(*crypto/md5.digest).Write"
"internal/bisect.PrintMarker" "(*os/exec.prefixSuffixSaver).Write"
"internal/bisect.PrintMarker" "(*strings.Builder).Write"
"internal/bisect.PrintMarker" "(*log/slog/internal/buffer.Buffer).Write"
"internal/bisect.PrintMarker" "(*go/ast.printer).Write"
"internal/bisect.PrintMarker" "(*bytes.Buffer).Write"
"(*internal/bisect.Matcher).stack" "internal/bisect.PrintMarker"
"internal/bisect.printStack" "internal/bisect.AppendMarker"
"internal/bisect.printStack" "runtime.CallersFrames"
"internal/bisect.printStack" "(*runtime.Frames).Next"
"(*runtime.Func).Name" "(*runtime.Func).raw"
"(*runtime.Func).Name" "(*runtime._func).isInlined"
"runtime.funcNameForPrint" "runtime.funcNamePiecesForPrint"
"(*runtime.Func).Name" "runtime.funcNameForPrint"
"(*runtime.Func).funcInfo" "(*runtime.Func).raw"
"(*runtime.Func).funcInfo" "(*runtime._func).funcInfo"
"(*runtime.Func).Name" "(*runtime.Func).funcInfo"
"(*runtime.Func).Name" "runtime.funcname"
"(*runtime.Func).Name" "runtime.funcNameForPrint"
"internal/bisect.printStack" "(*runtime.Func).Name"
"internal/bisect.printStack" "internal/bisect.appendFileLine"
"internal/bisect.printStack" "(*internal/poll.FD).Write"
"internal/bisect.printStack" "(io.discard).Write"
"internal/bisect.printStack" "(*internal/godebug.runtimeStderr).Write"
"internal/bisect.printStack" "(*fmt.pp).Write"
"internal/bisect.printStack" "(*os.File).Write"
"internal/bisect.printStack" "(*crypto/md5.digest).Write"
"internal/bisect.printStack" "(*os/exec.prefixSuffixSaver).Write"
"internal/bisect.printStack" "(*strings.Builder).Write"
"internal/bisect.printStack" "(*log/slog/internal/buffer.Buffer).Write"
"internal/bisect.printStack" "(*go/ast.printer).Write"
"internal/bisect.printStack" "(*bytes.Buffer).Write"
"(*internal/bisect.Matcher).stack" "internal/bisect.printStack"
"(*internal/bisect.Matcher).Stack" "(*internal/bisect.Matcher).stack"
"(*internal/godebug.Setting).Value" "(*internal/bisect.Matcher).Stack"
"go/types.NewChecker" "(*internal/godebug.Setting).Value"
"go/types.NewChecker" "go/types.asGoVersion"
"(*go/types.Config).Check" "go/types.NewChecker"
"(*go/types.Checker).checkFiles" "(go/types.goVersion).cmp"
"(*go/types.Checker).checkFiles" "fmt.Errorf"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).handleBailout"
"(*go/types.Checker).checkFiles$1" "fmt.Println"
"(*go/types.Checker).checkFiles$1" "fmt.Println"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).checkFiles$1"
"(*go/types.Checker).initFiles" "(*go/types.Checker).error"
"(*go/types.Checker).initFiles" "(*go/types.Checker).errorf"
"(*go/types.Checker).initFiles" "(go/types.goVersion).isValid"
"(*go/types.Checker).initFiles" "(go/types.goVersion).cmp"
"(*go/types.Checker).initFiles" "go/types.asGoVersion"
"(*go/types.Checker).initFiles" "(go/types.goVersion).isValid"
"(*go/types.Checker).initFiles" "(go/types.goVersion).cmp"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).initFiles"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).checkFiles$1"
"(*go/types.Checker).collectObjects" "(*go/types.Checker).recordDef"
"(*go/types.Checker).collectObjects" "(*go/ast.File).Pos"
"(*go/types.Checker).collectObjects" "(*go/ast.File).End"
"(*go/types.Checker).collectObjects" "(*go/ast.File).Pos"
"(*go/token.FileSet).File" "(*go/token.FileSet).file"
"(*go/types.Checker).collectObjects" "(*go/token.FileSet).File"
"(*go/types.Checker).collectObjects" "(*go/token.File).Base"
"(*go/types.Checker).collectObjects" "(*go/token.File).Base"
"(*go/types.Checker).collectObjects" "(*go/token.File).Size"
"(*go/types.Checker).filename" "(*go/ast.File).Pos"
"(*go/types.Checker).filename" "(go/token.Pos).IsValid"
"(*go/types.Checker).filename" "(*go/token.FileSet).File"
"(*go/types.Checker).filename" "(*go/token.File).Name"
"(*go/types.Checker).filename" "fmt.Sprintf"
"(*go/types.Checker).collectObjects" "(*go/types.Checker).filename"
"(*go/types.Checker).collectObjects" "go/types.NewScope"
"(*go/types.Checker).collectObjects" "(*go/types.Checker).recordScope"
"(*go/types.Checker).collectObjects" "(*go/ast.Ident).Pos"
"(*go/types.Checker).collectObjects" "(*go/token.FileSet).Position"
"strings.LastIndexAny" "strings.IndexRune"
"strings.LastIndexAny" "strings.makeASCIISet"
"strings.LastIndexAny" "(*strings.asciiSet).contains"
"strings.LastIndexAny" "unicode/utf8.DecodeLastRuneInString"
"strings.LastIndexAny" "unicode/utf8.DecodeLastRuneInString"
"strings.LastIndexAny" "strings.IndexRune"
"go/types.dir" "strings.LastIndexAny"
"(*go/types.Checker).collectObjects" "go/types.dir"
"go/types.validatedImportPath" "strconv.Unquote"
"go/types.validatedImportPath" "fmt.Errorf"
"unicode.IsGraphic" "unicode.In"
"go/types.validatedImportPath" "unicode.IsGraphic"
"go/types.validatedImportPath" "fmt.Errorf"
"go/types.validatedImportPath" "strings.ContainsRune"
"go/types.validatedImportPath" "unicode.IsSpace"
"(*go/types.Checker).collectObjects$1" "go/types.validatedImportPath"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).errorf"
"(*go/types.Checker).importPackage" "go/types.NewPackage"
"(*go/types.Checker).importPackage" "fmt.Errorf"
"(*go/types.Checker).importPackage" "fmt.Errorf"
"(*go/types.Checker).importPackage" "fmt.Errorf"
"(*go/types.Checker).importPackage" "fmt.Errorf"
"(*go/types.Checker).importPackage" "(*go/types.Checker).errorf"
"strings.LastIndex" "internal/bytealg.LastIndexByteString"
"strings.LastIndex" "internal/bytealg.HashStrRev[string]"
"(*go/types.Checker).importPackage" "strings.LastIndex"
"(*go/types.Checker).importPackage" "go/types.NewPackage"
"(*go/types.Checker).importPackage" "(*go/types.Checker).markImports"
"(*golang.org/x/tools/go/packages.loader).loadPackage$3" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.loader).loadPackage$3" "log.Fatalf"
"(*golang.org/x/tools/go/packages.loader).loadPackage$3" "(*go/types.Package).Complete"
"(golang.org/x/tools/go/packages.importerFunc).Import" "(*golang.org/x/tools/go/packages.loader).loadPackage$3"
"(*go/types.Checker).importPackage" "(golang.org/x/tools/go/packages.importerFunc).Import"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).importPackage"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).error"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).error"
"(*go/types.Checker).collectObjects$1" "(*go/ast.ImportSpec).Pos"
"(*go/types.Checker).collectObjects$1" "go/types.NewPkgName"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).recordDef"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).recordImplicit"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).declare"
"(*go/types.Checker).collectObjects$1" "go/token.IsExported"
"(*go/types.Checker).collectObjects$1" "(*go/types.Scope).Lookup"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).recordDef"
"(*go/types.Checker).collectObjects$1" "(*go/types.object).Name"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).recordDef"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).declare"
"(*go/types.object).setOrder" "go/types.assert"
"(*go/types.Checker).collectObjects$1" "(*go/types.object).setOrder"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).errorf"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).reportAltDecl"
"(*go/types.Checker).collectObjects$1" "(*go/types.Scope).insert"
"(*go/types.Checker).collectObjects$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).collectObjects$1" "go/constant.MakeInt64"
"go/types.NewConst" "go/types.colorFor"
"(*go/types.Checker).collectObjects$1" "go/types.NewConst"
"(*go/types.Checker).declarePkgObj" "(*go/types.Checker).error"
"(*go/types.Checker).declarePkgObj" "(*go/types.object).Name"
"(*go/types.Checker).declarePkgObj" "(*go/types.Checker).declare"
"(*go/types.Checker).declarePkgObj" "(*go/types.Checker).error"
"(*go/types.Checker).declarePkgObj" "go/types.assert"
"(*go/types.Checker).declarePkgObj" "(*go/types.object).setOrder"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).declarePkgObj"
"(*go/types.Checker).collectObjects$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).collectObjects$1" "go/types.NewVar"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).declarePkgObj"
"(*go/types.Checker).collectObjects$1" "(*go/ast.FieldList).NumFields"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).verifyVersionf"
"(*go/types.Checker).collectObjects$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).collectObjects$1" "go/types.NewTypeName"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).declarePkgObj"
"(*go/types.Checker).collectObjects$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).collectObjects$1" "go/types.NewFunc"
"(*go/types.Checker).collectObjects$1" "(*go/ast.FieldList).NumFields"
"(*go/types.Checker).collectObjects$1" "(*go/ast.FieldList).NumFields"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).unpackRecv"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).error"
"(*go/types.Checker).collectObjects$1" "(*go/ast.FieldList).NumFields"
"(*go/types.Checker).collectObjects$1" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).collectObjects$1" "(*go/ast.FieldList).NumFields"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).collectObjects$1"
"(*go/types.Checker).arityMatch" "(*go/types.Checker).error"
"(*go/types.Checker).arityMatch" "(*go/types.Checker).errorf"
"(*go/types.Checker).arityMatch" "(*go/types.Checker).errorf"
"(*go/types.Checker).arityMatch" "(*go/ast.ValueSpec).Pos"
"(*go/types.Checker).arityMatch" "(*go/token.FileSet).Position"
"(*go/types.Checker).arityMatch" "(*go/types.Checker).errorf"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).arityMatch"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).collectObjects$1"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).arityMatch"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).collectObjects$1"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).errorf"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).collectObjects$1"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).errorf"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).collectObjects$1"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).errorf"
"(*go/types.Checker).declStmt$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).declStmt$1" "go/constant.MakeInt64"
"(*go/types.Checker).declStmt$1" "go/types.NewConst"
"(*go/types.Checker).declStmt$1" "(*go/types.Checker).processDelayed"
"(*go/types.Checker).declStmt$1" "(*go/ast.ValueSpec).End"
"(*go/types.Checker).declStmt$1" "(*go/types.Checker).constDecl"
"(*go/types.Checker).declStmt$1" "(*go/types.Checker).declare"
"(*go/types.Checker).declStmt$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).declStmt$1" "go/types.NewVar"
"(*go/types.Checker).declStmt$1" "(*go/types.Checker).processDelayed"
"(*go/types.Checker).declStmt$1" "(*go/ast.ValueSpec).End"
"(*go/types.Checker).declStmt$1" "(*go/types.Checker).varDecl"
"(*go/types.Checker).declStmt$1" "go/types.assert"
"(*go/types.Checker).declStmt$1" "(*go/types.Checker).declare"
"(*go/types.Checker).declStmt$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).declStmt$1" "go/types.NewTypeName"
"(*go/types.Checker).declStmt$1" "(*go/ast.Ident).Pos"
"(*go/types.Checker).declStmt$1" "(*go/types.Checker).declare"
"(*go/types.Checker).declStmt$1" "(*go/types.Checker).push"
"(*go/types.Checker).declStmt$1" "(*go/types.object).setColor"
"(*go/types.Checker).declStmt$1" "(*go/types.Checker).typeDecl"
"(*go/types.Checker).declStmt$1" "(*go/types.Checker).pop"
"(*go/types.Checker).declStmt$1" "(go/types.varDecl).node"
"(*go/types.Checker).declStmt$1" "(*go/types.object).setColor"
"(*go/types.Checker).declStmt$1" "(go/types.importDecl).node"
"(*go/types.Checker).declStmt$1" "(go/types.varDecl).node"
"(*go/types.Checker).declStmt$1" "(go/types.typeDecl).node"
"(*go/types.Checker).declStmt$1" "(*go/types.Checker).errorf"
"(*go/types.Checker).declStmt$1" "(go/types.constDecl).node"
"(*go/types.Checker).declStmt$1" "(go/types.importDecl).node"
"(*go/types.Checker).declStmt$1" "(go/types.funcDecl).node"
"(*go/types.Checker).declStmt$1" "(go/types.typeDecl).node"
"(*go/types.Checker).declStmt$1" "(go/types.funcDecl).node"
"(*go/types.Checker).declStmt$1" "(go/types.constDecl).node"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).declStmt$1"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).declStmt$1"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).declStmt$1"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).declStmt$1"
"(*go/types.Checker).walkDecl" "(*go/types.Checker).declStmt$1"
"(*go/types.Checker).walkDecls" "(*go/types.Checker).walkDecl"
"(*go/types.Checker).collectObjects" "(*go/types.Checker).walkDecls"
"(*go/types.Checker).collectObjects" "(*go/types.Scope).Lookup"
"(*go/types.Checker).collectObjects" "go/types.resolve"
"(*go/types.Checker).collectObjects" "(*go/types.Checker).reportAltDecl"
"(*go/types.Checker).collectObjects" "(*go/types.object).Name"
"(*go/types.Checker).collectObjects" "(*go/types.object).Name"
"(*go/types.Checker).resolveBaseTypeName" "go/types.unparen"
"(*go/types.Checker).resolveBaseTypeName" "go/types.unparen"
"(*go/types.Checker).resolveBaseTypeName" "(*go/types.Scope).Lookup"
"(*go/types.Checker).resolveBaseTypeName" "(*go/ast.Ident).Pos"
"(*go/types.Scope).Contains" "go/types.cmpPos"
"(*go/types.Scope).Contains" "go/types.cmpPos"
"(*go/types.Checker).resolveBaseTypeName" "(*go/types.Scope).Contains"
"(*go/types.Checker).resolveBaseTypeName" "(*go/types.Scope).Lookup"
"(*go/types.Checker).resolveBaseTypeName" "(go/token.Pos).IsValid"
"(*go/types.Checker).collectObjects" "(*go/types.Checker).resolveBaseTypeName"
"(*go/types.Checker).collectObjects" "(*go/types.Checker).errorf"
"(*go/types.Checker).collectObjects" "(*go/types.object).Pkg"
"(*go/types.Checker).collectObjects" "(*go/types.Checker).reportAltDecl"
"(*go/types.Checker).collectObjects" "(*go/types.Func).Pkg"
"(*go/types.Checker).collectObjects" "(*go/types.PkgName).Imported"
"(*go/types.Checker).collectObjects" "(*go/types.Checker).errorf"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).collectObjects"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).checkFiles$1"
"(*go/types.Checker).packageObjects" "sort.Sort"
"(*go/types.Checker).packageObjects" "(*go/types.Checker).collectMethods"
"(*go/types.Checker).packageObjects" "(*go/types.Checker).objDecl"
"(*go/types.Checker).packageObjects" "(go/token.Pos).IsValid"
"(*go/types.Checker).packageObjects" "(*go/types.Checker).objDecl"
"(*go/types.Checker).packageObjects" "(*go/types.Checker).objDecl"
"(*go/types.Checker).packageObjects" "(*go/types.Checker).objDecl"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).packageObjects"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).checkFiles$1"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).processDelayed"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).checkFiles$1"
"(*go/types.TypeParam).cleanup" "(*go/types.TypeParam).iface"
"(*go/types.Checker).cleanup" "(*go/types.TypeParam).cleanup"
"(*go/types.Checker).cleanup" "(*go/types.Checker).cleanup"
"(*go/types.Named).cleanup" "go/types.assert"
"(*go/types.Named).cleanup" "(*go/types.Named).TypeArgs"
"(*go/types.Named).cleanup" "(*go/types.TypeList).Len"
"(*go/types.Named).cleanup" "(*go/types.Named).under"
"(*go/types.Checker).cleanup" "(*go/types.Named).cleanup"
"(*go/types.Interface).cleanup" "(*go/types.Interface).typeSet"
"(*go/types.Checker).cleanup" "(*go/types.Interface).cleanup"
"(*go/types.Alias).cleanup" "go/types.Unalias"
"(*go/types.Checker).cleanup" "(*go/types.Alias).cleanup"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).cleanup"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).checkFiles$1"
"go/types.dependencyGraph" "(*go/types.nodeSet).add"
"go/types.dependencyGraph" "(*go/types.nodeSet).add"
"go/types.dependencyGraph" "sort.Slice"
"go/types.dependencyGraph" "(*go/types.nodeSet).add"
"go/types.dependencyGraph" "(*go/types.nodeSet).add"
"(*go/types.Checker).initOrder" "go/types.dependencyGraph"
"container/heap.Init" "(go/types.nodeQueue).Len"
"container/heap.down" "(go/types.nodeQueue).Less"
"container/heap.down" "(go/types.nodeQueue).Less"
"container/heap.down" "(go/types.nodeQueue).Swap"
"container/heap.Init" "container/heap.down"
"(*go/types.Checker).initOrder" "container/heap.Init"
"(*go/types.Checker).initOrder" "fmt.Printf"
"(*go/types.Checker).initOrder" "fmt.Println"
"(*go/types.Checker).initOrder" "fmt.Println"
"(*go/types.Checker).initOrder" "fmt.Println"
"(*go/types.Checker).initOrder" "fmt.Println"
"(*go/types.Checker).initOrder" "(*go/types.object).Name"
"(*go/types.Checker).initOrder" "fmt.Printf"
"(*go/types.Checker).initOrder" "fmt.Printf"
"(*go/types.Checker).initOrder" "fmt.Println"
"(*go/types.Checker).initOrder" "(*go/types.object).Name"
"(*go/types.Checker).initOrder" "(*go/types.object).order"
"(*go/types.Checker).initOrder" "fmt.Printf"
"(*go/types.Checker).initOrder" "(*go/types.declInfo).hasInitializer"
"(*go/types.Checker).initOrder" "(*go/types.object).Name"
"(*go/types.Checker).initOrder" "fmt.Printf"
"container/heap.Pop" "(go/types.nodeQueue).Len"
"container/heap.Pop" "(go/types.nodeQueue).Swap"
"container/heap.Pop" "container/heap.down"
"container/heap.Pop" "(*go/types.nodeQueue).Pop"
"(*go/types.Checker).initOrder" "container/heap.Pop"
"(*go/types.Checker).initOrder" "(*go/types.object).Name"
"(*go/types.Checker).initOrder" "fmt.Printf"
"go/types.findPath" "go/types.findPath"
"(*go/types.Checker).initOrder" "go/types.findPath"
"(*go/types.Checker).initOrder" "fmt.Println"
"(*go/types.Checker).initOrder" "fmt.Printf"
"container/heap.Fix" "(go/types.nodeQueue).Len"
"container/heap.Fix" "container/heap.down"
"container/heap.up" "(go/types.nodeQueue).Swap"
"container/heap.up" "(go/types.nodeQueue).Less"
"container/heap.Fix" "container/heap.up"
"(*go/types.Checker).initOrder" "container/heap.Fix"
"(*go/types.Checker).initOrder" "(*go/types.object).Name"
"(*go/types.Checker).initOrder" "(*go/types.object).Name"
"(*go/types.Checker).initOrder" "fmt.Printf"
"(*go/types.Checker).initOrder" "fmt.Println"
"(*go/types.Checker).initOrder" "fmt.Println"
"(*go/types.Checker).reportCycle" "(*go/types.object).Name"
"(*go/types.Checker).reportCycle" "(*go/types.object).Name"
"(*go/types.Checker).reportCycle" "(*go/types.object).Name"
"(*go/types.Checker).reportCycle" "(*go/types.Checker).errorf"
"(*go/types.Checker).reportCycle" "(*go/types.object).Name"
"(*go/types.Checker).reportCycle" "(*go/types.Checker).errorf"
"(*go/types.Checker).reportCycle" "(*go/types.Checker).errorf"
"(*go/types.Checker).reportCycle" "(*go/types.Checker).errorf"
"(*go/types.Checker).initOrder" "(*go/types.Checker).reportCycle"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).initOrder"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).checkFiles$1"
"(*go/types.Checker).errorUnusedPkg" "strings.LastIndex"
"(*go/types.Checker).errorUnusedPkg" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).errorUnusedPkg" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).unusedImports" "(*go/types.Checker).errorUnusedPkg"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).unusedImports"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).checkFiles$1"
"(*go/types.Checker).recordUntyped" "(*go/ast.Ident).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/types.Checker).dump"
"(*go/types.Checker).recordUntyped" "go/types.unreachable"
"(*go/types.Checker).recordUntyped" "(*go/types.Checker).recordTypeAndValue"
"(*go/types.Checker).recordUntyped" "go/types.isTyped"
"(*go/types.Checker).recordUntyped" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.MapType).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).recordUntyped" "(*go/ast.StructType).Pos"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).recordUntyped"
"(*go/types.Checker).reportInstanceLoop" "(*go/types.Checker).error"
"(*go/types.Checker).reportInstanceLoop" "go/types.RelativeTo"
"(*go/types.Checker).reportInstanceLoop" "(*go/types.object).Type"
"(*go/types.Checker).reportInstanceLoop" "(*go/types.object).Name"
"(*go/types.Checker).reportInstanceLoop" "go/types.TypeString"
"(*go/types.Checker).reportInstanceLoop" "(*go/types.Checker).errorf"
"(*go/types.Checker).reportInstanceLoop" "(*go/types.object).Name"
"(*go/types.Checker).reportInstanceLoop" "go/types.TypeString"
"(*go/types.Checker).reportInstanceLoop" "(*go/types.Checker).errorf"
"(*go/types.Checker).monomorph" "(*go/types.Checker).reportInstanceLoop"
"(*go/types.Checker).checkFiles" "(*go/types.Checker).monomorph"
"(*go/types.Checker).Files" "(*go/types.Checker).checkFiles"
"(*go/types.Config).Check" "(*go/types.Checker).Files"
"golang.org/x/tools/internal/aliases.aliasesDefault$1" "(*go/types.Config).Check"
"golang.org/x/tools/internal/aliases.aliasesDefault$1" "(*go/types.Package).Scope"
"golang.org/x/tools/internal/aliases.aliasesDefault$1" "(*go/types.Scope).Lookup"
"golang.org/x/tools/internal/aliases.aliasesDefault$1" "(*go/types.object).Type"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*go/types.monoGraph).assign$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"math/big.NewFloat" "math.IsNaN"
"math/big.NewFloat" "(*math/big.Float).SetFloat64"
"math/big.three$1" "math/big.NewFloat"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "math/big.three$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "go/ast.fprint$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/types.unifier).nify$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.fcntl_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.pipe_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.munmap_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "runtime.madvise_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*go/parser.parser).safePos$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "syscall.libc_ptrace_trampoline"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "math/big.three$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "go/ast.fprint$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"(*golang.org/x/tools/go/packages.golistState).invokeGo" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirsModules" "(*golang.org/x/tools/go/packages.golistState).invokeGo"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirsModules" "(*golang.org/x/tools/go/packages.golistState).invokeGo"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirsModules" "encoding/json.NewDecoder"
"(*encoding/json.Decoder).More" "(*encoding/json.Decoder).peek"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirsModules" "(*encoding/json.Decoder).More"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirsModules" "(*encoding/json.Decoder).Decode"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirsModules" "path/filepath.Abs"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1" "(*golang.org/x/tools/go/packages.golistState).determineRootDirsModules"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.sigtramp"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_execve_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*runtime.sweepLocked).sweep$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcMarkDone$4"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "internal/poll.runtime_pollServerInit"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.SetFinalizer$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_pwrite_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_getrlimit_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.startTheWorld$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.asyncPreempt"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcResetMarkState"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.subster).typ$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.exitsyscall$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.heapSetType$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcAssistAlloc$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*log/slog.Level).parse$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*internal/godebug.Setting).Value$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).funcDecl$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "reflect.embeddedIfaceMethStub"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "go/parser.ParseFile$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.entersyscallblock_handoff"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.unreachableMethod"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_open_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/go/packages.goListDriver$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.sweepone$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "flag.isZeroValue$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_getsockopt_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).objDecl$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.tracefree$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*internal/godebug.Setting).IncNonDefault"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.mstart"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.mProf_Malloc$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*flag.FlagSet).defaultUsage"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_dup_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.cgoSigtramp"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_ftruncate_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).validCycle$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.forEachP$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcMarkDone$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.Stack$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.copyenv"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_fchown_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/go/packages.goListDriver$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.nanotime_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).funcType$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.freeStackSpans"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_pread_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_getcwd_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_sysctl_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).collectMethods$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*context.cancelCtx).propagateCancel$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "regexp/syntax.parse$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/sync/errgroup.Group).Go$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.typeWriter).signature$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.wbBufFlush$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.kevent_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcMarkTermination$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "flag.commandLineUsage"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.fatalthrow$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "context.WithCancel$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.entersyscallblock$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.persistentalloc$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_fstat_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_closedir_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_stat_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.cgoCheckTypedBlock$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.gcSizes).Alignof$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.goready$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "go/types.computeInterfaceTypeSet$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Named).expandUnderlying$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.osyield"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.init$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(log/slog.Value).Resolve$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "time.FixedZone$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "go/types.resolve$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.exitsyscall$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).typInternal$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.allocm$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_dup2_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.throw$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_sendto_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.wirep$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*os/exec.Cmd).awaitGoroutines$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_recvfrom_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.doRecordGoroutineProfile$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.cgoCheckPtrWrite$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.getempty$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.stopTheWorld$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*runtime.mheap).alloc$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcStart$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).typeDecl$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_mutex_unlock_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_mutex_lock_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_cond_signal_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "regexp.mergeRuneSets$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.tracealloc$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_read_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_recvmsg_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*log/slog.handleState).appendValue$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_mutex_init_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "sync.poolCleanup"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*internal/godebug.Setting).register"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime._LostContendedRuntimeLock"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcMarkDone$3"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).exprInternal$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).instantiatedType$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).instantiatedType$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).structType$3"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).interfaceType$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.reentersyscall$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.reentersyscall$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.entersyscall_sysmon"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.runSafePointFn"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.entersyscall_gcwait"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*runtime.traceMap).put$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.fatal$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.write_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(runtime.traceWriter).refill$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.mmap_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.sigprocmask_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.sigaction_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.gcMarkTermination$4$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*runtime.mspan).setUserArenaChunkToFault$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.exitsyscallfast_reacquired$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*runtime.traceStringTable).put$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*runtime.rwmutex).rlock$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.traceThreadDestroy$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.malg$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.allocmcache$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.freemcache$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/internal/event/core.ExportPair$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/internal/event/core.ExportPair$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "go/types.parseUnion$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime._VDSO"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime._ExternalCode"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime._GC"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime._System"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.sigpanic"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.raiseproc_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.markrootFreeGStacks"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.markroot$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.walltime_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_attr_init_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_attr_getstacksize_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_attr_setdetachstate_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.mstart_stub"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "go/build/constraint.parseExpr$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/parser.parser).parsePrimaryExpr$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/parser.parser).parseBinaryExpr$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/parser.parser).parseParameterList$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).infer$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).infer$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).instantiateSignature$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).instantiateSignature$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.Checker).genericExprList$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.printArgs$3"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.freeSomeWbufs$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_kill_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.mlock_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pthread_create_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*runtime.pageAlloc).scavenge$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_pipe_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_kill_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_wait4_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_mkdir_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "go/types.hasVarSize$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.tpWalker).isParameterized$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.kqueue_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime._LostExternalCode"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime._LostSIGPROFDuringAtomic64"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_fork_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_setsid_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_setpgid_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_getpid_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_ioctl_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_chroot_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_setgroups_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_setgid_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_setuid_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_chdir_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_exit_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_unlink_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_rmdir_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/types.unifier).nify$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.fcntl_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.pipe_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.munmap_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "runtime.madvise_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*go/parser.parser).safePos$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "syscall.libc_ptrace_trampoline"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "math/big.three$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "go/ast.fprint$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"(*golang.org/x/tools/go/packages.golistState).writeOverlays$3" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).rawExpr$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).validVarType$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).typInternal$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).typInternal$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.stopTheWorld$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.startTheWorld$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.wirep$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.wirep$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.kevent_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.read_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.raise_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.cgoSigtramp"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.sigtramp"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.forEachP$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcMarkTermination$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcMarkTermination$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcControllerCommit"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcMarkTermination$3"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.freeStackSpans"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcMarkTermination$5"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.exitsyscallfast$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.allocm$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.mstart"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.getempty$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*runtime.p).destroy$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcAssistAlloc$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*runtime.mheap).alloc$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.mProf_Malloc$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.Stack$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*os/exec.Cmd).awaitGoroutines$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).exprInternal$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).instantiatedType$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).instantiatedType$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).structType$3"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).interfaceType$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.reentersyscall$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.reentersyscall$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.entersyscall_sysmon"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.runSafePointFn"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.entersyscall_gcwait"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*runtime.traceMap).put$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.fatal$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.write_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(runtime.traceWriter).refill$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.mmap_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.sigprocmask_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.sigaction_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.gcMarkTermination$4$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*runtime.mspan).setUserArenaChunkToFault$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.exitsyscallfast_reacquired$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*runtime.traceStringTable).put$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*runtime.rwmutex).rlock$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.traceThreadDestroy$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.malg$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.allocmcache$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.freemcache$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/event/core.ExportPair$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/event/core.ExportPair$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "go/types.parseUnion$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime._VDSO"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime._ExternalCode"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime._GC"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime._System"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.sigpanic"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.raiseproc_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.markrootFreeGStacks"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.markroot$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.walltime_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_attr_init_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_attr_getstacksize_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_attr_setdetachstate_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.mstart_stub"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "go/build/constraint.parseExpr$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/parser.parser).parsePrimaryExpr$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/parser.parser).parseBinaryExpr$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/parser.parser).parseParameterList$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).infer$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).infer$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).instantiateSignature$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).instantiateSignature$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.Checker).genericExprList$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.printArgs$3"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.freeSomeWbufs$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_kill_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.mlock_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pthread_create_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*runtime.pageAlloc).scavenge$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_pipe_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_kill_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_wait4_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_mkdir_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "go/types.hasVarSize$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.tpWalker).isParameterized$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.kqueue_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime._LostExternalCode"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime._LostSIGPROFDuringAtomic64"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_fork_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_setsid_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_setpgid_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_getpid_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_ioctl_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_chroot_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_setgroups_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_setgid_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_setuid_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_chdir_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_exit_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_unlink_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_rmdir_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/types.unifier).nify$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.fcntl_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.pipe_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.munmap_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "runtime.madvise_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*go/parser.parser).safePos$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "syscall.libc_ptrace_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "math/big.three$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "go/ast.fprint$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"(*golang.org/x/tools/internal/gocommand.Runner).Run" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"golang.org/x/tools/internal/gocommand.GoVersion" "(*golang.org/x/tools/internal/gocommand.Runner).Run"
"golang.org/x/tools/internal/gocommand.GoVersion" "(*bytes.Buffer).String"
"golang.org/x/tools/internal/gocommand.GoVersion" "fmt.Errorf"
"golang.org/x/tools/internal/gocommand.GoVersion" "strings.Fields"
"fmt.newScanState" "(*sync.Pool).Get"
"fmt.Fscanf" "fmt.newScanState"
"(*fmt.ss).doScanf" "fmt.errorHandler"
"(*fmt.ss).advance" "unicode/utf8.DecodeRuneInString"
"(*fmt.ss).advance" "fmt.isSpace"
"(*fmt.ss).advance" "fmt.isSpace"
"(*fmt.ss).advance" "unicode/utf8.DecodeRuneInString"
"(*fmt.ss).getRune" "(*fmt.ss).ReadRune"
"(*fmt.ss).getRune" "(*fmt.ss).error"
"(*fmt.ss).advance" "(*fmt.ss).getRune"
"(*fmt.ss).advance" "(*fmt.ss).getRune"
"(*fmt.ss).advance" "fmt.isSpace"
"(*fmt.ss).errorString" "errors.New"
"(*fmt.ss).advance" "(*fmt.ss).errorString"
"(*fmt.ss).advance" "(*fmt.ss).getRune"
"(*fmt.ss).advance" "fmt.isSpace"
"(*fmt.ss).advance" "(*fmt.ss).errorString"
"(*fmt.ss).advance" "(*fmt.ss).errorString"
"(*fmt.ss).advance" "(*fmt.ss).getRune"
"(*fmt.ss).advance" "fmt.isSpace"
"(*fmt.ss).advance" "(*fmt.ss).UnreadRune"
"(*fmt.ss).mustReadRune" "(*fmt.ss).getRune"
"(*fmt.ss).mustReadRune" "(*fmt.ss).error"
"(*fmt.ss).advance" "(*fmt.ss).mustReadRune"
"(*fmt.ss).advance" "(*fmt.ss).errorString"
"(*fmt.ss).advance" "unicode/utf8.DecodeRuneInString"
"(*fmt.ss).advance" "(*fmt.ss).UnreadRune"
"(*fmt.ss).doScanf" "(*fmt.ss).advance"
"(*fmt.ss).doScanf" "fmt.parsenum"
"(*fmt.ss).doScanf" "(*fmt.ss).errorString"
"(*fmt.ss).doScanf" "unicode/utf8.DecodeRuneInString"
"(*fmt.ss).SkipSpace" "(*fmt.ss).getRune"
"(*fmt.ss).peek" "(*fmt.ss).getRune"
"(*fmt.ss).peek" "(*fmt.ss).UnreadRune"
"(*fmt.ss).peek" "fmt.indexRune"
"(*fmt.ss).SkipSpace" "(*fmt.ss).peek"
"(*fmt.ss).SkipSpace" "fmt.isSpace"
"(*fmt.ss).SkipSpace" "(*fmt.ss).errorString"
"(*fmt.ss).SkipSpace" "(*fmt.ss).UnreadRune"
"(*fmt.ss).doScanf" "(*fmt.ss).SkipSpace"
"(*fmt.ss).scanPercent" "(*fmt.ss).SkipSpace"
"(*fmt.ss).notEOF" "(*fmt.ss).getRune"
"(*fmt.ss).notEOF" "(*fmt.ss).UnreadRune"
"(*fmt.ss).scanPercent" "(*fmt.ss).notEOF"
"(*fmt.ss).consume" "(*fmt.ss).getRune"
"(*fmt.ss).consume" "fmt.indexRune"
"(*fmt.ss).consume" "(*fmt.buffer).writeRune"
"(*fmt.ss).consume" "(*fmt.ss).UnreadRune"
"(*fmt.ss).accept" "(*fmt.ss).consume"
"(*fmt.ss).scanPercent" "(*fmt.ss).accept"
"(*fmt.ss).scanPercent" "(*fmt.ss).errorString"
"(*fmt.ss).doScanf" "(*fmt.ss).scanPercent"
"(*fmt.ss).doScanf" "(*fmt.ss).errorString"
"(*math/big.Float).Scan" "(*fmt.ss).SkipSpace"
"(*math/big.Float).Scan" "(*math/big.Float).scan"
"(*fmt.ss).scanOne" "(*math/big.Float).Scan"
"(*math/big.Int).Scan" "(*fmt.ss).SkipSpace"
"(*math/big.Int).Scan" "errors.New"
"(*math/big.Int).Scan" "(*math/big.Int).scan"
"(*fmt.ss).scanOne" "(*math/big.Int).Scan"
"(*fmt.ss).Token" "(*fmt.ss).Token$1"
"(*fmt.ss).token" "(*fmt.ss).SkipSpace"
"(*fmt.ss).token" "(*fmt.ss).getRune"
"(*fmt.ss).token" "fmt.notSpace"
"(*fmt.ss).token" "unicode.IsSpace"
"(*fmt.ss).token" "(*fmt.ss).UnreadRune"
"(*fmt.ss).token" "(*fmt.buffer).writeRune"
"(*fmt.ss).token" "(*golang.org/x/tools/go/packages.golistState).invokeGo$1"
"(*fmt.ss).token" "math/big.ratTok"
"(*fmt.ss).Token" "(*fmt.ss).token"
"(*math/big.Rat).Scan" "(*fmt.ss).Token"
"(*math/big.Rat).Scan" "(*math/big.Rat).SetString"
"(*math/big.Rat).Scan" "errors.New"
"(*math/big.Rat).Scan" "errors.New"
"(*math/big.Rat).Scan" "strings.ContainsRune"
"(*fmt.ss).scanOne" "(*math/big.Rat).Scan"
"(*fmt.ss).scanOne" "(*fmt.ss).error"
"(*fmt.ss).scanBool" "(*fmt.ss).SkipSpace"
"(*fmt.ss).scanBool" "(*fmt.ss).notEOF"
"(*fmt.ss).okVerb" "(*fmt.ss).errorString"
"(*fmt.ss).scanBool" "(*fmt.ss).okVerb"
"(*fmt.ss).scanBool" "(*fmt.ss).getRune"
"(*fmt.ss).scanBool" "(*fmt.ss).accept"
"(*fmt.ss).scanBool" "(*fmt.ss).accept"
"(*fmt.ss).scanBool" "(*fmt.ss).error"
"(*fmt.ss).scanBool" "(*fmt.ss).accept"
"(*fmt.ss).scanBool" "(*fmt.ss).accept"
"(*fmt.ss).scanBool" "(*fmt.ss).error"
"(*fmt.ss).scanBool" "(*fmt.ss).accept"
"(*fmt.ss).scanBool" "(*fmt.ss).accept"
"(*fmt.ss).scanBool" "(*fmt.ss).accept"
"(*fmt.ss).scanOne" "(*fmt.ss).scanBool"
"(*fmt.ss).scanComplex" "(*fmt.ss).okVerb"
"(*fmt.ss).scanComplex" "(*fmt.ss).SkipSpace"
"(*fmt.ss).scanComplex" "(*fmt.ss).notEOF"
"(*fmt.ss).complexTokens" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).floatToken" "(*fmt.ss).accept"
"(*fmt.ss).complexTokens" "(*fmt.ss).floatToken"
"(*fmt.ss).complexTokens" "(*fmt.ss).accept"
"(*fmt.ss).complexTokens" "(*fmt.ss).error"
"(*fmt.ss).complexTokens" "(*fmt.ss).floatToken"
"(*fmt.ss).complexTokens" "(*fmt.ss).accept"
"(*fmt.ss).complexTokens" "(*fmt.ss).error"
"(*fmt.ss).complexTokens" "(*fmt.ss).error"
"(*fmt.ss).complexTokens" "(*fmt.ss).accept"
"(*fmt.ss).scanComplex" "(*fmt.ss).complexTokens"
"(*fmt.ss).convertFloat" "fmt.indexRune"
"(*fmt.ss).convertFloat" "strconv.ParseFloat"
"(*fmt.ss).convertFloat" "strconv.ParseFloat"
"(*fmt.ss).convertFloat" "fmt.hasX"
"(*fmt.ss).convertFloat" "strconv.Atoi"
"(*fmt.ss).convertFloat" "(*fmt.ss).error"
"(*fmt.ss).convertFloat" "math.Ldexp"
"(*fmt.ss).convertFloat" "(*fmt.ss).error"
"(*fmt.ss).convertFloat" "(*fmt.ss).error"
"(*fmt.ss).scanComplex" "(*fmt.ss).convertFloat"
"(*fmt.ss).scanComplex" "(*fmt.ss).convertFloat"
"(*fmt.ss).scanOne" "(*fmt.ss).scanComplex"
"(*fmt.ss).scanOne" "(*fmt.ss).scanComplex"
"(*fmt.ss).scanRune" "(*fmt.ss).notEOF"
"(*fmt.ss).scanRune" "(*fmt.ss).getRune"
"(*fmt.ss).scanRune" "(*fmt.ss).errorString"
"(*fmt.ss).scanInt" "(*fmt.ss).scanRune"
"(*fmt.ss).scanInt" "(*fmt.ss).SkipSpace"
"(*fmt.ss).scanInt" "(*fmt.ss).notEOF"
"(*fmt.ss).getBase" "(*fmt.ss).okVerb"
"(*fmt.ss).scanInt" "(*fmt.ss).getBase"
"(*fmt.ss).scanInt" "(*fmt.ss).consume"
"(*fmt.ss).scanNumber" "(*fmt.ss).notEOF"
"(*fmt.ss).scanNumber" "(*fmt.ss).accept"
"(*fmt.ss).scanNumber" "(*fmt.ss).errorString"
"(*fmt.ss).scanNumber" "(*fmt.ss).accept"
"(*fmt.ss).scanInt" "(*fmt.ss).scanNumber"
"(*fmt.ss).scanInt" "strconv.ParseInt"
"(*fmt.ss).scanInt" "(*fmt.ss).accept"
"(*fmt.ss).scanInt" "(*fmt.ss).errorString"
"(*fmt.ss).scanInt" "(*fmt.ss).consume"
"(*fmt.ss).scanBasePrefix" "(*fmt.ss).peek"
"(*fmt.ss).scanBasePrefix" "(*fmt.ss).accept"
"(*fmt.ss).scanBasePrefix" "(*fmt.ss).peek"
"(*fmt.ss).scanBasePrefix" "(*fmt.ss).consume"
"(*fmt.ss).scanBasePrefix" "(*fmt.ss).consume"
"(*fmt.ss).scanBasePrefix" "(*fmt.ss).peek"
"(*fmt.ss).scanBasePrefix" "(*fmt.ss).consume"
"(*fmt.ss).scanBasePrefix" "(*fmt.ss).peek"
"(*fmt.ss).scanInt" "(*fmt.ss).scanBasePrefix"
"(*fmt.ss).scanInt" "(*fmt.ss).error"
"(*fmt.ss).scanInt" "(*fmt.ss).errorString"
"(*fmt.ss).scanOne" "(*fmt.ss).scanInt"
"(*fmt.ss).scanOne" "(*fmt.ss).scanInt"
"(*fmt.ss).scanOne" "(*fmt.ss).scanInt"
"(*fmt.ss).scanOne" "(*fmt.ss).scanInt"
"(*fmt.ss).scanOne" "(*fmt.ss).scanInt"
"(*fmt.ss).scanUint" "(*fmt.ss).scanRune"
"(*fmt.ss).scanUint" "(*fmt.ss).SkipSpace"
"(*fmt.ss).scanUint" "(*fmt.ss).notEOF"
"(*fmt.ss).scanUint" "(*fmt.ss).getBase"
"(*fmt.ss).scanUint" "(*fmt.ss).consume"
"(*fmt.ss).scanUint" "(*fmt.ss).scanNumber"
"(*fmt.ss).scanUint" "strconv.ParseUint"
"(*fmt.ss).scanUint" "(*fmt.ss).errorString"
"(*fmt.ss).scanUint" "(*fmt.ss).consume"
"(*fmt.ss).scanUint" "(*fmt.ss).scanBasePrefix"
"(*fmt.ss).scanUint" "(*fmt.ss).error"
"(*fmt.ss).scanUint" "(*fmt.ss).errorString"
"(*fmt.ss).scanOne" "(*fmt.ss).scanUint"
"(*fmt.ss).scanOne" "(*fmt.ss).scanUint"
"(*fmt.ss).scanOne" "(*fmt.ss).scanUint"
"(*fmt.ss).scanOne" "(*fmt.ss).scanUint"
"(*fmt.ss).scanOne" "(*fmt.ss).scanUint"
"(*fmt.ss).scanOne" "(*fmt.ss).scanUint"
"(*fmt.ss).scanOne" "(*fmt.ss).okVerb"
"(*fmt.ss).scanOne" "(*fmt.ss).SkipSpace"
"(*fmt.ss).scanOne" "(*fmt.ss).notEOF"
"(*fmt.ss).scanOne" "(*fmt.ss).floatToken"
"(*fmt.ss).scanOne" "(*fmt.ss).convertFloat"
"(*fmt.ss).scanOne" "(*fmt.ss).okVerb"
"(*fmt.ss).scanOne" "(*fmt.ss).SkipSpace"
"(*fmt.ss).scanOne" "(*fmt.ss).notEOF"
"(*fmt.ss).scanOne" "(*fmt.ss).floatToken"
"(*fmt.ss).scanOne" "(*fmt.ss).convertFloat"
"(*fmt.ss).convertString" "(*fmt.ss).okVerb"
"(*fmt.ss).convertString" "(*fmt.ss).SkipSpace"
"(*fmt.ss).convertString" "(*fmt.ss).notEOF"
"(*fmt.ss).quotedString" "(*fmt.ss).notEOF"
"(*fmt.ss).quotedString" "(*fmt.ss).getRune"
"(*fmt.ss).quotedString" "(*fmt.buffer).writeByte"
"(*fmt.ss).quotedString" "(*fmt.ss).mustReadRune"
"(*fmt.ss).quotedString" "(*fmt.buffer).writeRune"
"(*fmt.ss).quotedString" "(*fmt.ss).errorString"
"(*fmt.ss).quotedString" "(*fmt.ss).mustReadRune"
"(*fmt.ss).quotedString" "(*fmt.buffer).writeRune"
"(*fmt.ss).quotedString" "(*fmt.ss).mustReadRune"
"(*fmt.ss).quotedString" "(*fmt.buffer).writeRune"
"(*fmt.ss).quotedString" "strconv.Unquote"
"(*fmt.ss).quotedString" "(*fmt.ss).error"
"(*fmt.ss).convertString" "(*fmt.ss).quotedString"
"(*fmt.ss).hexString" "(*fmt.ss).notEOF"
"(*fmt.ss).hexByte" "(*fmt.ss).getRune"
"(*fmt.ss).hexByte" "fmt.hexDigit"
"(*fmt.ss).hexByte" "(*fmt.ss).UnreadRune"
"(*fmt.ss).hexByte" "(*fmt.ss).mustReadRune"
"(*fmt.ss).hexByte" "fmt.hexDigit"
"(*fmt.ss).hexByte" "(*fmt.ss).errorString"
"(*fmt.ss).hexString" "(*fmt.ss).hexByte"
"(*fmt.ss).hexString" "(*fmt.buffer).writeByte"
"(*fmt.ss).hexString" "(*fmt.ss).errorString"
"(*fmt.ss).convertString" "(*fmt.ss).hexString"
"(*fmt.ss).convertString" "(*fmt.ss).token"
"(*fmt.ss).scanOne" "(*fmt.ss).convertString"
"(*fmt.ss).scanOne" "(*fmt.ss).convertString"
"(*fmt.ss).scanOne" "reflect.ValueOf"
"(*fmt.ss).scanOne" "(reflect.Value).Kind"
"(*fmt.ss).scanOne" "(reflect.Value).Type"
"(*fmt.ss).scanOne" "(*reflect.rtype).String"
"(*fmt.ss).scanOne" "(*fmt.ss).errorString"
"(*fmt.ss).scanOne" "(reflect.Value).Elem"
"(*fmt.ss).scanOne" "(reflect.Value).Kind"
"(*fmt.ss).scanOne" "(*fmt.ss).scanBool"
"(*fmt.ss).scanOne" "(reflect.Value).SetBool"
"(*fmt.ss).scanOne" "(reflect.Value).Type"
"(*fmt.ss).scanOne" "(*reflect.rtype).Bits"
"(*fmt.ss).scanOne" "(*fmt.ss).scanInt"
"(*fmt.ss).scanOne" "(reflect.Value).SetInt"
"(*fmt.ss).scanOne" "(reflect.Value).Type"
"(*fmt.ss).scanOne" "(*reflect.rtype).Bits"
"(*fmt.ss).scanOne" "(*fmt.ss).scanUint"
"(*fmt.ss).scanOne" "(reflect.Value).SetUint"
"(*fmt.ss).scanOne" "(*fmt.ss).convertString"
"(*fmt.ss).scanOne" "(reflect.Value).SetString"
"(*fmt.ss).scanOne" "(reflect.Value).Type"
"(*fmt.ss).scanOne" "(*reflect.rtype).Elem"
"(*fmt.ss).scanOne" "(*reflect.rtype).Kind"
"(*fmt.ss).scanOne" "(*fmt.ss).SkipSpace"
"(*fmt.ss).scanOne" "(*fmt.ss).notEOF"
"(*fmt.ss).scanOne" "(*fmt.ss).floatToken"
"(*fmt.ss).scanOne" "(reflect.Value).Type"
"(*fmt.ss).scanOne" "(*reflect.rtype).Bits"
"(*fmt.ss).scanOne" "(*fmt.ss).convertFloat"
"(*fmt.ss).scanOne" "(reflect.Value).SetFloat"
"(*fmt.ss).scanOne" "(reflect.Value).Type"
"(*fmt.ss).scanOne" "(*reflect.rtype).String"
"(*fmt.ss).scanOne" "(*fmt.ss).errorString"
"(*fmt.ss).scanOne" "(*fmt.ss).convertString"
"(*fmt.ss).scanOne" "reflect.MakeSlice"
"(*fmt.ss).scanOne" "(reflect.Value).Set"
"(*fmt.ss).scanOne" "(reflect.Value).Index"
"(*fmt.ss).scanOne" "(reflect.Value).SetUint"
"(*fmt.ss).scanOne" "(reflect.Value).Type"
"(*fmt.ss).scanOne" "(*reflect.rtype).Bits"
"(*fmt.ss).scanOne" "(*fmt.ss).scanComplex"
"(reflect.Value).SetComplex" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetComplex" "(reflect.flag).kind"
"(reflect.Value).SetComplex" "(reflect.flag).kind"
"(*fmt.ss).scanOne" "(reflect.Value).SetComplex"
"(*fmt.ss).scanOne" "(reflect.Value).Type"
"(*fmt.ss).scanOne" "(*reflect.rtype).String"
"(*fmt.ss).scanOne" "(*fmt.ss).errorString"
"(*fmt.ss).doScanf" "(*fmt.ss).scanOne"
"(*fmt.ss).doScanf" "(*fmt.ss).errorString"
"fmt.Fscanf" "(*fmt.ss).doScanf"
"(*fmt.ss).free" "(*sync.Pool).Put"
"fmt.Fscanf" "(*fmt.ss).free"
"fmt.Sscanf" "fmt.Fscanf"
"golang.org/x/tools/internal/gocommand.GoVersion" "fmt.Sscanf"
"golang.org/x/tools/internal/gocommand.GoVersion" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).getGoVersion$1" "golang.org/x/tools/internal/gocommand.GoVersion"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"(*go/types.Checker).processDelayed" "(*go/types.operand).Pos"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).collectTypeParams$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).funcType$2"
"(*go/types.Checker).processDelayed" "(*go/ast.ValueSpec).Pos"
"(*go/types.Checker).processDelayed" "runtime.usleep_trampoline"
"(*go/types.Checker).processDelayed" "runtime.doRecordGoroutineProfile$1"
"(*go/types.Checker).processDelayed" "runtime.pthread_mutex_init_trampoline"
"(*go/types.Checker).processDelayed" "runtime.pthread_cond_init_trampoline"
"(*go/types.Checker).processDelayed" "runtime.pthread_mutex_lock_trampoline"
"(*go/types.Checker).processDelayed" "runtime.pthread_mutex_unlock_trampoline"
"(*go/types.Checker).processDelayed" "runtime.pthread_cond_wait_trampoline"
"(*go/types.Checker).processDelayed" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"(*go/types.Checker).processDelayed" "runtime._LostContendedRuntimeLock"
"(*go/types.Checker).processDelayed" "(*runtime.mLockProfile).captureStack$1"
"(*go/types.Checker).processDelayed" "runtime.pthread_cond_signal_trampoline"
"(*go/types.Checker).processDelayed" "runtime.tracefree$1"
"(*go/types.Checker).processDelayed" "(*runtime.mheap).freeSpan$1"
"(*go/types.Checker).processDelayed" "runtime.gcMarkDone$2"
"(*go/types.Checker).processDelayed" "runtime.gcMarkDone$3"
"(*go/types.Checker).processDelayed" "runtime.gcMarkDone$4"
"(*go/types.Checker).processDelayed" "runtime.entersyscallblock$1"
"(*go/types.Checker).processDelayed" "runtime.entersyscallblock$2"
"(*go/types.Checker).processDelayed" "runtime.entersyscallblock_handoff"
"(*go/types.Checker).processDelayed" "runtime.exitsyscall$1"
"(*go/types.Checker).processDelayed" "runtime.exitsyscall$2"
"(*go/types.Checker).processDelayed" "runtime.cgoCheckPtrWrite$1"
"(*go/types.Checker).processDelayed" "(*internal/lazyregexp.Regexp).build"
"(*go/types.Checker).processDelayed" "regexp.mergeRuneSets$1"
"(*go/types.Checker).processDelayed" "runtime.unreachableMethod"
"(*go/types.Checker).processDelayed" "runtime.heapSetType$1"
"(*go/types.Checker).processDelayed" "runtime.tracealloc$1"
"(*go/types.Checker).processDelayed" "syscall.libc_chmod_trampoline"
"(*go/types.Checker).processDelayed" "(*go/ast.BadDecl).Pos"
"(*go/types.Checker).processDelayed" "(*os/exec.Cmd).Start$1"
"(*go/types.Checker).processDelayed" "(*context.cancelCtx).propagateCancel$1"
"(*go/types.Checker).processDelayed" "(*context.cancelCtx).propagateCancel$2"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).rawExpr$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).validVarType$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).typInternal$1"
"(*go/types.Checker).processDelayed" "(go/types.posSpan).Pos"
"(*go/types.Checker).processDelayed" "runtime.pipe_trampoline"
"(*go/types.Checker).processDelayed" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).typInternal$2"
"(*go/types.Checker).processDelayed" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).processDelayed" "runtime.stopTheWorld$1"
"(*go/types.Checker).processDelayed" "runtime.startTheWorld$1"
"(*go/types.Checker).processDelayed" "runtime.wirep$1"
"(*go/types.Checker).processDelayed" "runtime.wirep$2"
"(*go/types.Checker).processDelayed" "runtime.kevent_trampoline"
"(*go/types.Checker).processDelayed" "runtime.read_trampoline"
"(*go/types.Checker).processDelayed" "runtime.raise_trampoline"
"(*go/types.Checker).processDelayed" "runtime.cgoSigtramp"
"(*go/types.Checker).processDelayed" "runtime.sigtramp"
"(*go/types.Checker).processDelayed" "runtime.forEachP$1"
"(*go/types.Checker).processDelayed" "runtime.gcMarkTermination$1"
"(*go/types.Checker).processDelayed" "runtime.gcMarkTermination$2"
"(*go/types.Checker).processDelayed" "runtime.gcControllerCommit"
"(*go/types.Checker).processDelayed" "runtime.gcMarkTermination$3"
"(*go/types.Checker).processDelayed" "runtime.freeStackSpans"
"(*go/types.Checker).processDelayed" "runtime.gcMarkTermination$5"
"(*go/types.Checker).processDelayed" "runtime.exitsyscallfast$1"
"(*go/types.Checker).processDelayed" "runtime.allocm$1"
"(*go/types.Checker).processDelayed" "runtime.mstart"
"(*go/types.Checker).processDelayed" "runtime.getempty$1"
"(*go/types.Checker).processDelayed" "(*runtime.p).destroy$1"
"(*go/types.Checker).processDelayed" "runtime.gcAssistAlloc$1"
"(*go/types.Checker).processDelayed" "(*runtime.mheap).alloc$1"
"(*go/types.Checker).processDelayed" "runtime.mProf_Malloc$1"
"(*go/types.Checker).processDelayed" "(*go/ast.LabeledStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).processDelayed" "runtime.Stack$1"
"(*go/types.Checker).processDelayed" "(*os/exec.Cmd).awaitGoroutines$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"(*go/types.Checker).processDelayed" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).exprInternal$1"
"(*go/types.Checker).processDelayed" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).instantiatedType$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).instantiatedType$2"
"(*go/types.Checker).processDelayed" "(*go/types.unifier).nify$1"
"(*go/types.Checker).processDelayed" "(*go/parser.parser).safePos$1"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).structType$3"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).interfaceType$2"
"(*go/types.Checker).processDelayed" "math/big.three$1"
"(*go/types.Checker).processDelayed" "runtime.reentersyscall$1"
"(*go/types.Checker).processDelayed" "runtime.reentersyscall$2"
"(*go/types.Checker).processDelayed" "runtime.entersyscall_sysmon"
"(*go/types.Checker).processDelayed" "runtime.runSafePointFn"
"(*go/types.Checker).processDelayed" "runtime.entersyscall_gcwait"
"(*go/types.Checker).processDelayed" "(*runtime.traceMap).put$1"
"(*go/types.Checker).processDelayed" "runtime.fatal$1"
"(*go/types.Checker).processDelayed" "runtime.write_trampoline"
"(*go/types.Checker).processDelayed" "(runtime.traceWriter).refill$1"
"(*go/types.Checker).processDelayed" "runtime.mmap_trampoline"
"(*go/types.Checker).processDelayed" "runtime.sigprocmask_trampoline"
"(*go/types.Checker).processDelayed" "runtime.sigaction_trampoline"
"(*go/types.Checker).processDelayed" "runtime.gcMarkTermination$4$1"
"(*go/types.Checker).processDelayed" "(*runtime.mspan).setUserArenaChunkToFault$1"
"(*go/types.Checker).processDelayed" "runtime.exitsyscallfast_reacquired$1"
"(*go/types.Checker).processDelayed" "(*runtime.traceStringTable).put$1"
"(*go/types.Checker).processDelayed" "(*runtime.rwmutex).rlock$1"
"(*go/types.Checker).processDelayed" "runtime.traceThreadDestroy$1"
"(*go/types.Checker).processDelayed" "runtime.malg$1"
"(*go/types.Checker).processDelayed" "runtime.allocmcache$1"
"(*go/types.Checker).processDelayed" "runtime.freemcache$1"
"(*go/types.Checker).processDelayed" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.AssignStmt).Pos"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/internal/event/core.ExportPair$1"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/internal/event/core.ExportPair$2"
"(*go/types.Checker).processDelayed" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).processDelayed" "go/types.parseUnion$1"
"(*go/types.Checker).processDelayed" "(*go/ast.SendStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.IncDecStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.ReturnStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.BranchStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.IfStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.SwitchStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.CaseClause).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.ForStmt).Pos"
"(*go/types.Checker).processDelayed" "runtime._VDSO"
"(*go/types.Checker).processDelayed" "runtime._ExternalCode"
"(*go/types.Checker).processDelayed" "runtime._GC"
"(*go/types.Checker).processDelayed" "runtime._System"
"(*go/types.Checker).processDelayed" "runtime.sigpanic"
"(*go/types.Checker).processDelayed" "runtime.raiseproc_trampoline"
"(*go/types.Checker).processDelayed" "runtime.markrootFreeGStacks"
"(*go/types.Checker).processDelayed" "runtime.markroot$1"
"(*go/types.Checker).processDelayed" "runtime.walltime_trampoline"
"(*go/types.Checker).processDelayed" "runtime.pthread_attr_init_trampoline"
"(*go/types.Checker).processDelayed" "runtime.pthread_attr_getstacksize_trampoline"
"(*go/types.Checker).processDelayed" "runtime.pthread_attr_setdetachstate_trampoline"
"(*go/types.Checker).processDelayed" "runtime.mstart_stub"
"(*go/types.Checker).processDelayed" "go/build/constraint.parseExpr$1"
"(*go/types.Checker).processDelayed" "(*go/ast.StructType).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.MapType).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).processDelayed" "(*go/parser.parser).parsePrimaryExpr$1"
"(*go/types.Checker).processDelayed" "(*go/parser.parser).parseBinaryExpr$1"
"(*go/types.Checker).processDelayed" "(*go/parser.parser).parseParameterList$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).infer$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).infer$2"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).instantiateSignature$1"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).instantiateSignature$2"
"(*go/types.Checker).processDelayed" "(*go/types.Checker).genericExprList$1"
"(*go/types.Checker).processDelayed" "(*go/ast.RangeStmt).Pos"
"(*go/types.Checker).processDelayed" "runtime.printArgs$3"
"(*go/types.Checker).processDelayed" "runtime.freeSomeWbufs$1"
"(*go/types.Checker).processDelayed" "runtime.pthread_kill_trampoline"
"(*go/types.Checker).processDelayed" "runtime.mlock_trampoline"
"(*go/types.Checker).processDelayed" "runtime.pthread_create_trampoline"
"(*go/types.Checker).processDelayed" "(*runtime.pageAlloc).scavenge$1"
"(*go/types.Checker).processDelayed" "(*go/ast.DeclStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.SelectStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.EmptyStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.BadStmt).Pos"
"(*go/types.Checker).processDelayed" "syscall.libc_pipe_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_kill_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_wait4_trampoline"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"(*go/types.Checker).processDelayed" "syscall.libc_mkdir_trampoline"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"(*go/types.Checker).processDelayed" "go/types.hasVarSize$1"
"(*go/types.Checker).processDelayed" "(*go/types.tpWalker).isParameterized$1"
"(*go/types.Checker).processDelayed" "runtime.kqueue_trampoline"
"(*go/types.Checker).processDelayed" "runtime._LostExternalCode"
"(*go/types.Checker).processDelayed" "runtime._LostSIGPROFDuringAtomic64"
"(*go/types.Checker).processDelayed" "(*go/ast.ExprStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.GoStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.DeferStmt).Pos"
"(*go/types.Checker).processDelayed" "(*go/ast.CommClause).Pos"
"(*go/types.Checker).processDelayed" "syscall.libc_fork_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_setsid_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_setpgid_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_getpid_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_ioctl_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_chroot_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_setgroups_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_setgid_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_setuid_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_chdir_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_exit_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_unlink_trampoline"
"(*go/types.Checker).processDelayed" "syscall.libc_rmdir_trampoline"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"(*go/types.Checker).processDelayed" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"(*go/types.Checker).processDelayed" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"(*go/types.Checker).stmt" "(*go/types.Checker).processDelayed"
"(*go/types.Checker).declStmt" "(*go/types.Checker).walkDecl"
"(*go/types.Checker).stmt" "(*go/types.Checker).declStmt"
"(*go/types.Checker).stmt" "(*go/types.Checker).stmt"
"(*go/types.Checker).stmt" "(*go/types.Checker).rawExpr"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "(*go/types.Checker).expr"
"(*go/types.Checker).stmt" "(*go/types.Checker).expr"
"(*go/types.Checker).stmt" "go/types.coreType"
"(*go/types.Checker).stmt" "go/types.inNode"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "go/types.inNode"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "go/types.inNode"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "(*go/types.Checker).assignment"
"(*go/types.Checker).stmt" "(*go/types.Checker).expr"
"(*go/types.Checker).stmt" "go/types.inNode"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "go/types.allNumeric"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "(*go/ast.Ident).Pos"
"(*go/types.Checker).stmt" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).stmt" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).stmt" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).stmt" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).stmt" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).stmt" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).stmt" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).stmt" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).stmt" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).stmt" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).stmt" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).stmt" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).stmt" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).stmt" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).stmt" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).stmt" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).stmt" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).stmt" "(*go/ast.MapType).End"
"(*go/types.Checker).stmt" "(*go/ast.BadExpr).End"
"(*go/types.Checker).stmt" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).stmt" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).stmt" "(*go/types.Checker).binary"
"(*go/types.Checker).lhsVar" "go/types.unparen"
"(*go/types.Checker).lhsVar" "(*go/types.Checker).recordDef"
"(*go/types.Checker).lhsVar" "(*go/types.environment).lookup"
"(*go/types.Checker).lhsVar" "(*go/types.Checker).expr"
"(*go/types.Checker).lhsVar" "go/types.isValid"
"(*go/types.Checker).lhsVar" "(*go/types.Checker).expr"
"(*go/types.Checker).lhsVar" "(*go/types.Checker).errorf"
"(*go/types.Checker).lhsVar" "go/types.ExprString"
"(*go/types.Checker).lhsVar" "(*go/types.Checker).errorf"
"(*go/types.Checker).assignVar" "(*go/types.Checker).lhsVar"
"(*go/types.Checker).assignVar" "go/types.isValid"
"(*go/types.Checker).assignVar" "(*go/types.Checker).use"
"(*go/types.Checker).assignVar" "go/types.under"
"(*go/types.Checker).assignVar" "(*go/types.Checker).expr"
"(*go/types.Checker).assignVar" "go/types.ExprString"
"(*go/types.Checker).assignVar" "go/types.newTarget"
"(*go/types.Checker).assignVar" "(*go/types.Checker).assignment"
"(*go/types.Checker).stmt" "(*go/types.Checker).assignVar"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "go/types.inNode"
"(*go/types.Checker).useLHS" "(*go/types.Checker).useN"
"(*go/types.Checker).shortVarDecl" "(*go/types.Checker).useLHS"
"(*go/types.Checker).shortVarDecl" "(*go/types.Checker).errorf"
"(*go/types.Checker).shortVarDecl" "(*go/types.Scope).Lookup"
"(*go/types.Checker).shortVarDecl" "(*go/types.Checker).errorf"
"(*go/types.Checker).shortVarDecl" "(*go/types.Checker).recordUse"
"(*go/types.Checker).shortVarDecl" "(*go/ast.Ident).Pos"
"(*go/types.Checker).shortVarDecl" "go/types.NewVar"
"(*go/types.Checker).shortVarDecl" "(*go/types.Checker).errorf"
"(*go/types.Checker).shortVarDecl" "(*go/types.Checker).recordDef"
"(*go/types.Checker).shortVarDecl" "(*go/types.Checker).initVars"
"(*go/types.Checker).shortVarDecl" "(*go/types.Checker).processDelayed"
"(*go/types.Checker).shortVarDecl" "(*go/ast.Ident).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.SliceExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.MapType).End"
"(*go/types.Checker).shortVarDecl" "(*go/types.Checker).declare"
"(*go/types.Checker).shortVarDecl" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.StructType).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.MapType).Pos"
"(*go/types.Checker).shortVarDecl" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).shortVarDecl" "go/types.NewVar"
"(*go/types.Checker).shortVarDecl" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).shortVarDecl" "(*go/ast.Ident).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.BasicLit).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.FuncType).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.SelectorExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.CallExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.IndexExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.IndexListExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.Ellipsis).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.ChanType).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.InterfaceType).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.UnaryExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.FuncLit).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.CompositeLit).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.KeyValueExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.ParenExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.TypeAssertExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.BinaryExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.BadExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.StarExpr).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.StructType).End"
"(*go/types.Checker).shortVarDecl" "(*go/ast.ArrayType).End"
"(*go/types.Checker).stmt" "(*go/types.Checker).shortVarDecl"
"(*go/types.Checker).assignVars" "go/types.unparen"
"(*go/types.Checker).assignVars" "(*go/types.Checker).assignVar"
"(*go/types.Checker).assignVars" "(*go/types.Checker).useLHS"
"(*go/types.Checker).assignVars" "(*go/types.Checker).use"
"(*go/types.Checker).assignVars" "(*go/types.Checker).multiExpr"
"(*go/types.Checker).assignVars" "(*go/types.Checker).assignError"
"(*go/types.Checker).assignVars" "(*go/types.Checker).assignVar"
"(*go/types.Checker).assignVars" "(*go/types.Checker).recordCommaOkTypes"
"(*go/types.Checker).assignVars" "(*go/types.Checker).assignError"
"(*go/types.Checker).assignVars" "(*go/types.Checker).useLHS"
"(*go/types.Checker).stmt" "(*go/types.Checker).assignVars"
"(*go/types.Checker).stmt" "go/types.inNode"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "go/types.assignOp"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "(*go/types.Checker).binary"
"(*go/types.Checker).stmt" "(*go/types.Checker).assignVar"
"(*go/types.Checker).suspendedCall" "(*go/types.Checker).rawExpr"
"(*go/types.Checker).suspendedCall" "(*go/types.Checker).errorf"
"(*go/types.Checker).suspendedCall" "go/types.unreachable"
"(*go/types.Checker).stmt" "(*go/types.Checker).suspendedCall"
"(*go/types.Checker).stmt" "(*go/types.Checker).suspendedCall"
"(*go/types.Checker).stmt" "(*go/types.Tuple).Len"
"(*go/types.Checker).stmt" "(*go/types.Tuple).Len"
"(*go/types.Checker).stmt" "(*go/types.environment).lookup"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "(*go/types.Checker).initVars"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/types.Checker).openScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).closeScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).stmtList"
"(*go/types.Checker).stmt" "(*go/types.Checker).openScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).closeScope"
"(*go/types.Checker).simpleStmt" "(*go/types.Checker).stmt"
"(*go/types.Checker).stmt" "(*go/types.Checker).simpleStmt"
"(*go/types.Checker).stmt" "(*go/types.Checker).expr"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/types.Checker).stmt"
"(*go/types.Checker).stmt" "go/types.allBoolean"
"(*go/types.Checker).stmt" "(*go/types.Checker).stmt"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/types.Checker).openScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).closeScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).simpleStmt"
"(*go/types.Checker).stmt" "(*go/types.Checker).expr"
"(*go/types.Checker).stmt" "(*go/types.Checker).assignment"
"(*go/types.Checker).multipleDefaults" "(*go/types.Checker).error"
"(*go/types.Checker).multipleDefaults" "(*go/ast.BlockStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.LabeledStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.AssignStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.SendStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.IncDecStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.ReturnStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.BranchStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.IfStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.SwitchStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.CaseClause).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.TypeSwitchStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.ForStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/token.FileSet).Position"
"(*go/types.Checker).multipleDefaults" "(*go/types.Checker).errorf"
"(*go/types.Checker).multipleDefaults" "(*go/ast.RangeStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.DeclStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.SelectStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.EmptyStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.BadStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.ExprStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.GoStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.DeferStmt).Pos"
"(*go/types.Checker).multipleDefaults" "(*go/ast.CommClause).Pos"
"(*go/types.Checker).stmt" "(*go/types.Checker).multipleDefaults"
"(*go/types.Checker).stmt" "go/constant.MakeBool"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "go/types.hasNil"
"(*go/types.Checker).stmt" "go/types.Comparable"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).caseValues" "(*go/types.Checker).expr"
"(*go/types.Checker).caseValues" "(*go/types.Checker).convertUntyped"
"(*go/types.Checker).caseValues" "(*go/types.Checker).comparison"
"go/types.goVal" "go/constant.Float64Val"
"go/types.goVal" "(go/constant.floatVal).Kind"
"go/types.goVal" "go/constant.StringVal"
"go/types.goVal" "(go/constant.unknownVal).Kind"
"go/types.goVal" "(go/constant.int64Val).Kind"
"go/types.goVal" "(go/constant.boolVal).Kind"
"go/types.goVal" "(go/constant.complexVal).Kind"
"go/types.goVal" "go/constant.Int64Val"
"go/types.goVal" "(go/constant.intVal).Kind"
"go/types.goVal" "go/constant.Uint64Val"
"go/types.goVal" "(go/constant.ratVal).Kind"
"go/types.goVal" "(*go/constant.stringVal).Kind"
"(*go/types.Checker).caseValues" "go/types.goVal"
"(*go/types.Checker).caseValues" "go/types.Identical"
"(*go/types.Checker).caseValues" "(*go/types.operand).Pos"
"(*go/types.Checker).caseValues" "(*go/types.Checker).errorf"
"(*go/types.Checker).caseValues" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/types.Checker).caseValues"
"(*go/types.Checker).stmt" "(*go/types.Checker).openScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).stmtList"
"(*go/types.Checker).stmt" "(*go/types.Checker).closeScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).openScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).closeScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).simpleStmt"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).stmt" "(*go/types.Checker).recordDef"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/types.Checker).expr"
"(*go/types.Checker).stmt" "go/types.isTypeParam"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "(*go/types.Checker).multipleDefaults"
"(*go/types.Checker).stmt" "go/types.under"
"(*go/types.Checker).stmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).isNil" "go/types.unparen"
"(*go/types.Checker).isNil" "(*go/types.environment).lookup"
"(*go/types.Checker).caseTypes" "(*go/types.Checker).isNil"
"(*go/types.Checker).caseTypes" "(*go/types.Checker).expr"
"(*go/types.Checker).caseTypes" "(*go/types.Checker).varType"
"(*go/types.Checker).caseTypes" "go/types.isValid"
"(*go/types.Checker).caseTypes" "go/types.Identical"
"(*go/types.Checker).caseTypes" "go/types.TypeString"
"(*go/types.Checker).caseTypes" "(*go/types.Checker).errorf"
"(*go/types.Checker).caseTypes" "(*go/types.Checker).error"
"(*go/types.Checker).caseTypes" "(*go/types.Checker).typeAssertion"
"(*go/types.Checker).stmt" "(*go/types.Checker).caseTypes"
"(*go/types.Checker).stmt" "(*go/types.Checker).openScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).stmtList"
"(*go/types.Checker).stmt" "(*go/types.Checker).closeScope"
"(*go/types.Checker).stmt" "(*go/ast.Ident).Pos"
"(*go/types.Checker).stmt" "go/types.NewVar"
"(*go/types.Checker).stmt" "(*go/ast.CaseClause).Pos"
"(*go/types.Checker).stmt" "(*go/ast.Ident).End"
"(*go/types.Checker).stmt" "(*go/ast.BasicLit).End"
"(*go/types.Checker).stmt" "(*go/ast.FuncType).End"
"(*go/types.Checker).stmt" "(*go/ast.SelectorExpr).End"
"(*go/types.Checker).stmt" "(*go/ast.CallExpr).End"
"(*go/types.Checker).stmt" "(*go/ast.IndexExpr).End"
"(*go/types.Checker).stmt" "(*go/ast.IndexListExpr).End"
"(*go/types.Checker).stmt" "(*go/ast.Ellipsis).End"
"(*go/types.Checker).stmt" "(*go/ast.ChanType).End"
"(*go/types.Checker).stmt" "(*go/ast.InterfaceType).End"
"(*go/types.Checker).stmt" "(*go/ast.UnaryExpr).End"
"(*go/types.Checker).stmt" "(*go/ast.FuncLit).End"
"(*go/types.Checker).stmt" "(*go/ast.CompositeLit).End"
"(*go/types.Checker).stmt" "(*go/ast.KeyValueExpr).End"
"(*go/types.Checker).stmt" "(*go/ast.ParenExpr).End"
"(*go/types.Checker).stmt" "(*go/ast.TypeAssertExpr).End"
"(*go/types.Checker).stmt" "(*go/ast.BinaryExpr).End"
"(*go/types.Checker).stmt" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).stmt" "(*go/ast.MapType).Pos"
"(*go/types.Checker).stmt" "(*go/ast.StarExpr).End"
"(*go/types.Checker).stmt" "(*go/ast.ArrayType).End"
"(*go/types.Checker).stmt" "(*go/ast.SliceExpr).End"
"(*go/types.Checker).stmt" "(*go/types.Checker).declare"
"(*go/types.Checker).stmt" "(*go/types.Checker).recordImplicit"
"(*go/types.Checker).stmt" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).stmt" "(*go/types.Checker).multipleDefaults"
"(*go/types.Checker).stmt" "go/types.unparen"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/types.Checker).openScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).stmt"
"(*go/types.Checker).stmt" "(*go/types.Checker).stmtList"
"(*go/types.Checker).stmt" "(*go/types.Checker).closeScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).openScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).closeScope"
"(*go/types.Checker).stmt" "(*go/types.Checker).simpleStmt"
"(*go/types.Checker).stmt" "(*go/types.Checker).expr"
"(*go/types.Checker).stmt" "(*go/types.Checker).simpleStmt"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "go/types.allBoolean"
"(*go/types.Checker).stmt" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).stmt" "(*go/types.Checker).use"
"(*go/types.Checker).stmt" "(*go/types.Checker).stmt"
"(*go/types.Checker).rangeStmt" "go/types.inNode"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).expr"
"go/types.rangeKeyVal" "go/types.coreType"
"go/types.rangeKeyVal" "go/types.arrayPtrDeref"
"go/types.rangeKeyVal" "go/types.rangeKeyVal$1"
"go/types.rangeKeyVal" "go/types.isString"
"go/types.rangeKeyVal" "go/types.isInteger"
"go/types.rangeKeyVal" "go/types.rangeKeyVal$1"
"(*go/types.Checker).rangeStmt$2" "(*go/types.Checker).allowVersion"
"go/types.rangeKeyVal" "(*go/types.Checker).rangeStmt$2"
"go/types.rangeKeyVal" "go/types.rangeKeyVal$1"
"go/types.rangeKeyVal" "(*go/types.Signature).Recv"
"go/types.rangeKeyVal" "go/types.assert"
"go/types.rangeKeyVal" "(*go/types.Signature).Params"
"go/types.rangeKeyVal" "(*go/types.Tuple).Len"
"go/types.rangeKeyVal" "go/types.rangeKeyVal$1"
"go/types.rangeKeyVal" "go/types.rangeKeyVal$1"
"go/types.rangeKeyVal" "(*go/types.Signature).Params"
"go/types.rangeKeyVal" "(*go/types.Tuple).At"
"go/types.rangeKeyVal" "(*go/types.object).Type"
"go/types.rangeKeyVal$2" "go/types.coreType"
"go/types.rangeKeyVal" "go/types.rangeKeyVal$2"
"go/types.rangeKeyVal" "go/types.rangeKeyVal$1"
"go/types.rangeKeyVal" "(*go/types.Signature).Results"
"go/types.rangeKeyVal" "(*go/types.Tuple).Len"
"go/types.rangeKeyVal" "(*go/types.Signature).Params"
"go/types.rangeKeyVal" "(*go/types.Tuple).At"
"go/types.rangeKeyVal" "(*go/types.object).Type"
"go/types.rangeKeyVal" "go/types.rangeKeyVal$2"
"go/types.rangeKeyVal" "(*go/types.Signature).Recv"
"go/types.rangeKeyVal" "go/types.assert"
"go/types.rangeKeyVal" "(*go/types.Signature).Params"
"go/types.rangeKeyVal" "(*go/types.Tuple).Len"
"go/types.rangeKeyVal" "go/types.rangeKeyVal$1"
"go/types.rangeKeyVal" "go/types.rangeKeyVal$1"
"go/types.rangeKeyVal" "(*go/types.Signature).Results"
"go/types.rangeKeyVal" "(*go/types.Tuple).Len"
"go/types.rangeKeyVal" "(*go/types.Signature).Params"
"go/types.rangeKeyVal" "(*go/types.Tuple).Len"
"go/types.rangeKeyVal" "(*go/types.Signature).Results"
"go/types.rangeKeyVal" "(*go/types.Tuple).At"
"go/types.rangeKeyVal" "(*go/types.object).Type"
"go/types.rangeKeyVal" "go/types.isBoolean"
"go/types.rangeKeyVal" "(*go/types.Signature).Params"
"go/types.rangeKeyVal" "(*go/types.Tuple).At"
"go/types.rangeKeyVal" "(*go/types.object).Type"
"go/types.rangeKeyVal" "(*go/types.Signature).Params"
"go/types.rangeKeyVal" "(*go/types.Tuple).Len"
"go/types.rangeKeyVal" "(*go/types.Signature).Params"
"go/types.rangeKeyVal" "(*go/types.Tuple).At"
"go/types.rangeKeyVal" "(*go/types.object).Type"
"(*go/types.Checker).rangeStmt" "go/types.rangeKeyVal"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).openScope"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).closeScope"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).rangeStmt" "go/types.isInteger"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).stmt"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).rangeStmt$1"
"(*go/types.Checker).rangeStmt" "(*go/ast.Ident).Pos"
"(*go/types.Checker).rangeStmt" "go/types.NewVar"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).recordDef"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).errorf"
"(*go/types.Checker).rangeStmt" "(*go/ast.Ident).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.BasicLit).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.FuncType).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.SelectorExpr).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.CallExpr).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.IndexExpr).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.IndexListExpr).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.Ellipsis).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.ChanType).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.InterfaceType).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.UnaryExpr).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.FuncLit).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.CompositeLit).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.KeyValueExpr).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.ParenExpr).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.TypeAssertExpr).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.BinaryExpr).Pos"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).assignVar"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).assignVar"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).assignment"
"(*go/types.Checker).rangeStmt" "(*go/ast.ArrayType).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.SliceExpr).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.StructType).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.StarExpr).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.MapType).Pos"
"(*go/types.Checker).rangeStmt" "(*go/ast.BadExpr).Pos"
"(*go/types.Checker).rangeStmt" "go/types.NewVar"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).initVar"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).initVar"
"(*go/types.Checker).rangeStmt" "(*go/ast.BlockStmt).Pos"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).error"
"(*go/types.Checker).rangeStmt" "(*go/types.Checker).declare"
"(*go/types.Checker).stmt" "(*go/types.Checker).rangeStmt"
"(*go/types.Checker).stmt" "(*go/types.Checker).error"
"(*go/types.Checker).stmt" "(*go/ast.StructType).Pos"
"(*go/types.Checker).stmt" "(*go/ast.StructType).End"
"(*go/types.Checker).stmtList" "(*go/types.Checker).stmt"
"(*go/types.Checker).funcBody" "(*go/types.Checker).stmtList"
"(*go/types.Checker).labels" "(*go/ast.BlockStmt).Pos"
"(*go/types.Checker).labels" "(*go/ast.BlockStmt).End"
"(*go/types.Checker).labels" "go/types.NewScope"
"(*go/types.Checker).blockBranches$4" "(*go/ast.GenDecl).Pos"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$1"
"(*go/types.Checker).blockBranches$4" "(*go/ast.Ident).Pos"
"(*go/types.Checker).blockBranches$4" "go/types.NewLabel"
"(*go/types.Checker).blockBranches$4" "(*go/types.Scope).Insert"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$4"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).reportAltDecl"
"(*go/types.block).insert" "(*go/types.block).gotoTarget"
"(*go/types.block).insert" "go/types.assert"
"(*go/types.Checker).blockBranches$4" "(*go/types.block).insert"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).recordDef"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).recordUse"
"(*go/types.Checker).blockBranches$2" "(go/token.Pos).IsValid"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$2"
"(*go/types.Checker).blockBranches$4" "(*go/token.FileSet).Position"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).blockBranches$4" "(*go/types.Scope).Lookup"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).recordUse"
"(*go/types.Checker).blockBranches$4" "(*go/types.block).enclosingTarget"
"(*go/types.Checker).blockBranches$4" "(*go/types.block).enclosingTarget"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).errorf"
"(*go/types.Checker).blockBranches$4" "(*go/types.block).gotoTarget"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).errorf"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).errorf"
"(*go/types.Checker).blockBranches$4" "(*go/ast.AssignStmt).Pos"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$1"
"(*go/types.Checker).blockBranches$3" "(*go/types.Checker).blockBranches"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$3"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$4"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$4"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$3"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$4"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$4"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$3"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$4"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$4"
"(*go/types.Checker).blockBranches$4" "(*go/types.Checker).blockBranches$4"
"(*go/types.Checker).blockBranches" "(*go/types.Checker).blockBranches$4"
"(*go/types.Checker).labels" "(*go/types.Checker).blockBranches"
"(*go/types.Checker).labels" "(*go/types.Scope).Lookup"
"(*go/types.Checker).labels" "(*go/types.Checker).errorf"
"(*go/types.Checker).labels" "go/types.resolve"
"(*go/types.Checker).labels" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).funcBody" "(*go/types.Checker).labels"
"(*go/types.Checker).funcBody" "(*go/types.Tuple).Len"
"(*go/types.Checker).funcBody" "(*go/types.Checker).error"
"(*go/types.Checker).usage" "go/types.resolve"
"(*go/types.Checker).usage" "sort.Slice"
"(*go/types.Checker).usage" "(*go/types.Checker).softErrorf"
"(*go/types.Checker).usage" "(*go/types.Checker).usage"
"(*go/types.Checker).funcBody" "(*go/types.Checker).usage"
"(*go/types.Checker).isTerminating" "(*go/types.Checker).isTerminating"
"(*go/types.Checker).isTerminating" "go/types.unparen"
"(*go/types.Checker).isTerminatingList" "(*go/types.Checker).isTerminating"
"(*go/types.Checker).isTerminating" "(*go/types.Checker).isTerminatingList"
"(*go/types.Checker).isTerminating" "(*go/types.Checker).isTerminating"
"(*go/types.Checker).isTerminating" "(*go/types.Checker).isTerminating"
"(*go/types.Checker).isTerminatingSwitch" "(*go/types.Checker).isTerminatingList"
"go/types.hasBreak" "go/types.hasBreak"
"go/types.hasBreak" "go/types.hasBreakList"
"go/types.hasBreak" "go/types.hasBreak"
"go/types.hasBreak" "go/types.hasBreak"
"go/types.hasBreak" "go/types.hasBreakList"
"go/types.hasBreak" "go/types.hasBreak"
"go/types.hasBreak" "go/types.hasBreak"
"go/types.hasBreak" "go/types.hasBreakList"
"go/types.hasBreak" "go/types.hasBreak"
"go/types.hasBreak" "go/types.hasBreak"
"go/types.hasBreak" "go/types.unreachable"
"go/types.hasBreak" "go/types.hasBreak"
"go/types.hasBreakList" "go/types.hasBreak"
"(*go/types.Checker).isTerminatingSwitch" "go/types.hasBreakList"
"(*go/types.Checker).isTerminating" "(*go/types.Checker).isTerminatingSwitch"
"(*go/types.Checker).isTerminating" "(*go/types.Checker).isTerminatingSwitch"
"(*go/types.Checker).isTerminating" "(*go/types.Checker).isTerminatingList"
"(*go/types.Checker).isTerminating" "go/types.hasBreakList"
"(*go/types.Checker).isTerminating" "go/types.unreachable"
"(*go/types.Checker).isTerminating" "go/types.hasBreak"
"(*go/types.Checker).funcBody" "(*go/types.Checker).isTerminating"
"(*go/types.Checker).funcDecl$1" "(*go/types.Checker).funcBody"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).funcDecl$1"
"runtime.tryRecordGoroutineProfile" "(*log/slog.Level).parse$1"
"runtime.tryRecordGoroutineProfile" "runtime.gcStart$2"
"runtime.tryRecordGoroutineProfile" "(*internal/godebug.Setting).Value$1"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/go/packages.goListDriver$1"
"runtime.tryRecordGoroutineProfile" "runtime.sweepone$1"
"runtime.tryRecordGoroutineProfile" "flag.isZeroValue$1"
"runtime.tryRecordGoroutineProfile" "go/parser.ParseFile$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_read_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_recvmsg_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_open_trampoline"
"runtime.tryRecordGoroutineProfile" "sync.poolCleanup"
"runtime.tryRecordGoroutineProfile" "syscall.libc_getsockopt_trampoline"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).objDecl$2"
"runtime.tryRecordGoroutineProfile" "syscall.libc_close_trampoline"
"runtime.tryRecordGoroutineProfile" "(*internal/godebug.Setting).IncNonDefault"
"runtime.tryRecordGoroutineProfile" "(*encoding/json.encodeState).marshal$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_dup_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_readdir_r_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_sendmsg_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.callers$1"
"runtime.tryRecordGoroutineProfile" "(*flag.FlagSet).defaultUsage"
"runtime.tryRecordGoroutineProfile" "syscall.libc_shutdown_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_munmap_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.casgstatus$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).validCycle$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_fchdir_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.SetFinalizer$2"
"runtime.tryRecordGoroutineProfile" "syscall.libc_ftruncate_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_fcntl_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_setrlimit_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_accept_trampoline"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/go/packages.goListDriver$2"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).objDecl$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.StdSizes).Alignof$1"
"runtime.tryRecordGoroutineProfile" "syscall.copyenv"
"runtime.tryRecordGoroutineProfile" "syscall.libc_fchown_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.nanotime_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.acquirem"
"(*runtime.goroutineProfileStateHolder).CompareAndSwap" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.tryRecordGoroutineProfile" "(*runtime.goroutineProfileStateHolder).CompareAndSwap"
"runtime.doRecordGoroutineProfile" "runtime.readgstatus"
"runtime.doRecordGoroutineProfile" "runtime.throw"
"runtime.doRecordGoroutineProfile" "(*runtime/internal/atomic.Int64).Add"
"runtime.doRecordGoroutineProfile" "runtime.systemstack"
"runtime.tryRecordGoroutineProfile" "runtime.doRecordGoroutineProfile"
"(*runtime.goroutineProfileStateHolder).Store" "(*runtime/internal/atomic.Uint32).Store"
"runtime.tryRecordGoroutineProfile" "(*runtime.goroutineProfileStateHolder).Store"
"runtime.tryRecordGoroutineProfile" "runtime.releasem"
"runtime.tryRecordGoroutineProfile" "runtime.exit_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.wbBufFlush$1"
"runtime.tryRecordGoroutineProfile" "(*runtime.sweepLocked).sweep$1"
"runtime.tryRecordGoroutineProfile" "(*runtime.sweepLocked).sweep$2"
"runtime.tryRecordGoroutineProfile" "runtime.gcBgMarkWorker$2"
"runtime.tryRecordGoroutineProfile" "runtime.mspinning"
"runtime.tryRecordGoroutineProfile" "reflect.embeddedIfaceMethStub"
"runtime.tryRecordGoroutineProfile" "(*internal/godebug.Setting).register"
"runtime.tryRecordGoroutineProfile" "runtime.persistentalloc$1"
"runtime.tryRecordGoroutineProfile" "(*log/slog.handleState).appendValue$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).collectTypeParams$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).funcType$2"
"runtime.tryRecordGoroutineProfile" "runtime.usleep_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.doRecordGoroutineProfile$1"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_mutex_init_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_cond_init_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_mutex_lock_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_mutex_unlock_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_cond_wait_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime._LostContendedRuntimeLock"
"runtime.tryRecordGoroutineProfile" "(*runtime.mLockProfile).captureStack$1"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_cond_signal_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.tracefree$1"
"runtime.tryRecordGoroutineProfile" "(*runtime.mheap).freeSpan$1"
"runtime.tryRecordGoroutineProfile" "runtime.gcMarkDone$2"
"runtime.tryRecordGoroutineProfile" "runtime.gcMarkDone$3"
"runtime.tryRecordGoroutineProfile" "runtime.gcMarkDone$4"
"runtime.tryRecordGoroutineProfile" "runtime.entersyscallblock$1"
"runtime.tryRecordGoroutineProfile" "runtime.entersyscallblock$2"
"runtime.tryRecordGoroutineProfile" "runtime.entersyscallblock_handoff"
"runtime.tryRecordGoroutineProfile" "runtime.exitsyscall$1"
"runtime.tryRecordGoroutineProfile" "runtime.exitsyscall$2"
"runtime.tryRecordGoroutineProfile" "runtime.cgoCheckPtrWrite$1"
"runtime.tryRecordGoroutineProfile" "(*internal/lazyregexp.Regexp).build"
"runtime.tryRecordGoroutineProfile" "regexp.mergeRuneSets$1"
"runtime.tryRecordGoroutineProfile" "runtime.unreachableMethod"
"runtime.tryRecordGoroutineProfile" "runtime.heapSetType$1"
"runtime.tryRecordGoroutineProfile" "runtime.tracealloc$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_chmod_trampoline"
"runtime.tryRecordGoroutineProfile" "(*os/exec.Cmd).Start$1"
"runtime.tryRecordGoroutineProfile" "(*context.cancelCtx).propagateCancel$1"
"runtime.tryRecordGoroutineProfile" "(*context.cancelCtx).propagateCancel$2"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).rawExpr$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).validVarType$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).typInternal$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).typInternal$2"
"runtime.tryRecordGoroutineProfile" "runtime.stopTheWorld$1"
"runtime.tryRecordGoroutineProfile" "runtime.startTheWorld$1"
"runtime.tryRecordGoroutineProfile" "runtime.wirep$1"
"runtime.tryRecordGoroutineProfile" "runtime.wirep$2"
"runtime.tryRecordGoroutineProfile" "runtime.kevent_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.read_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.raise_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.cgoSigtramp"
"runtime.tryRecordGoroutineProfile" "runtime.sigtramp"
"runtime.tryRecordGoroutineProfile" "runtime.forEachP$1"
"runtime.tryRecordGoroutineProfile" "runtime.gcMarkTermination$1"
"runtime.tryRecordGoroutineProfile" "runtime.gcMarkTermination$2"
"runtime.tryRecordGoroutineProfile" "runtime.gcControllerCommit"
"runtime.tryRecordGoroutineProfile" "runtime.gcMarkTermination$3"
"runtime.tryRecordGoroutineProfile" "runtime.freeStackSpans"
"runtime.tryRecordGoroutineProfile" "runtime.gcMarkTermination$5"
"runtime.tryRecordGoroutineProfile" "runtime.exitsyscallfast$1"
"runtime.tryRecordGoroutineProfile" "runtime.allocm$1"
"runtime.tryRecordGoroutineProfile" "runtime.mstart"
"runtime.tryRecordGoroutineProfile" "runtime.getempty$1"
"runtime.tryRecordGoroutineProfile" "(*runtime.p).destroy$1"
"runtime.tryRecordGoroutineProfile" "runtime.gcAssistAlloc$1"
"runtime.tryRecordGoroutineProfile" "(*runtime.mheap).alloc$1"
"runtime.tryRecordGoroutineProfile" "runtime.mProf_Malloc$1"
"runtime.tryRecordGoroutineProfile" "runtime.Stack$1"
"runtime.tryRecordGoroutineProfile" "(*os/exec.Cmd).awaitGoroutines$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).exprInternal$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).instantiatedType$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).instantiatedType$2"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).structType$3"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).interfaceType$2"
"runtime.tryRecordGoroutineProfile" "runtime.reentersyscall$1"
"runtime.tryRecordGoroutineProfile" "runtime.reentersyscall$2"
"runtime.tryRecordGoroutineProfile" "runtime.entersyscall_sysmon"
"runtime.tryRecordGoroutineProfile" "runtime.runSafePointFn"
"runtime.tryRecordGoroutineProfile" "runtime.entersyscall_gcwait"
"runtime.tryRecordGoroutineProfile" "(*runtime.traceMap).put$1"
"runtime.tryRecordGoroutineProfile" "runtime.fatal$1"
"runtime.tryRecordGoroutineProfile" "runtime.write_trampoline"
"runtime.tryRecordGoroutineProfile" "(runtime.traceWriter).refill$1"
"runtime.tryRecordGoroutineProfile" "runtime.mmap_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.sigprocmask_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.sigaction_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.gcMarkTermination$4$1"
"runtime.tryRecordGoroutineProfile" "(*runtime.mspan).setUserArenaChunkToFault$1"
"runtime.tryRecordGoroutineProfile" "runtime.exitsyscallfast_reacquired$1"
"runtime.tryRecordGoroutineProfile" "(*runtime.traceStringTable).put$1"
"runtime.tryRecordGoroutineProfile" "(*runtime.rwmutex).rlock$1"
"runtime.tryRecordGoroutineProfile" "runtime.traceThreadDestroy$1"
"runtime.tryRecordGoroutineProfile" "runtime.malg$1"
"runtime.tryRecordGoroutineProfile" "runtime.allocmcache$1"
"runtime.tryRecordGoroutineProfile" "runtime.freemcache$1"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/internal/event/core.ExportPair$1"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/internal/event/core.ExportPair$2"
"runtime.tryRecordGoroutineProfile" "go/types.parseUnion$1"
"runtime.tryRecordGoroutineProfile" "runtime._VDSO"
"runtime.tryRecordGoroutineProfile" "runtime._ExternalCode"
"runtime.tryRecordGoroutineProfile" "runtime._GC"
"runtime.tryRecordGoroutineProfile" "runtime._System"
"runtime.tryRecordGoroutineProfile" "runtime.sigpanic"
"runtime.tryRecordGoroutineProfile" "runtime.raiseproc_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.markrootFreeGStacks"
"runtime.tryRecordGoroutineProfile" "runtime.markroot$1"
"runtime.tryRecordGoroutineProfile" "runtime.walltime_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_attr_init_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_attr_getstacksize_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_attr_setdetachstate_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.mstart_stub"
"runtime.tryRecordGoroutineProfile" "go/build/constraint.parseExpr$1"
"runtime.tryRecordGoroutineProfile" "(*go/parser.parser).parsePrimaryExpr$1"
"runtime.tryRecordGoroutineProfile" "(*go/parser.parser).parseBinaryExpr$1"
"runtime.tryRecordGoroutineProfile" "(*go/parser.parser).parseParameterList$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).infer$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).infer$2"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).instantiateSignature$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).instantiateSignature$2"
"runtime.tryRecordGoroutineProfile" "(*go/types.Checker).genericExprList$1"
"runtime.tryRecordGoroutineProfile" "runtime.printArgs$3"
"runtime.tryRecordGoroutineProfile" "runtime.freeSomeWbufs$1"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_kill_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.mlock_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.pthread_create_trampoline"
"runtime.tryRecordGoroutineProfile" "(*runtime.pageAlloc).scavenge$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_pipe_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_kill_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_wait4_trampoline"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"runtime.tryRecordGoroutineProfile" "syscall.libc_mkdir_trampoline"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"runtime.tryRecordGoroutineProfile" "go/types.hasVarSize$1"
"runtime.tryRecordGoroutineProfile" "(*go/types.tpWalker).isParameterized$1"
"runtime.tryRecordGoroutineProfile" "runtime.kqueue_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime._LostExternalCode"
"runtime.tryRecordGoroutineProfile" "runtime._LostSIGPROFDuringAtomic64"
"runtime.tryRecordGoroutineProfile" "syscall.libc_fork_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_setsid_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_setpgid_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_getpid_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_ioctl_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_chroot_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_setgroups_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_setgid_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_setuid_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_chdir_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_exit_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_unlink_trampoline"
"runtime.tryRecordGoroutineProfile" "syscall.libc_rmdir_trampoline"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"runtime.tryRecordGoroutineProfile" "(*go/types.unifier).nify$1"
"runtime.tryRecordGoroutineProfile" "runtime.fcntl_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.pipe_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.munmap_trampoline"
"runtime.tryRecordGoroutineProfile" "runtime.madvise_trampoline"
"runtime.tryRecordGoroutineProfile" "(*go/parser.parser).safePos$1"
"runtime.tryRecordGoroutineProfile" "syscall.libc_ptrace_trampoline"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"runtime.tryRecordGoroutineProfile" "math/big.three$1"
"runtime.tryRecordGoroutineProfile" "go/ast.fprint$1"
"runtime.tryRecordGoroutineProfile" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"runtime.tryRecordGoroutineProfile" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"runtime.execute" "runtime.tryRecordGoroutineProfile"
"runtime.execute" "runtime.casgstatus"
"runtime.execute" "(runtime.puintptr).ptr"
"runtime.setThreadCPUProfilerHz" "runtime.getg"
"runtime.setThreadCPUProfiler" "runtime.setThreadCPUProfilerHz"
"runtime.execute" "runtime.setThreadCPUProfiler"
"runtime.execute" "runtime.traceAcquire"
"runtime.execute" "(runtime.traceLocker).ok"
"runtime.execute" "runtime.gogo"
"runtime.execute" "(runtime.traceLocker).GoSysExit"
"runtime.execute" "(runtime.traceLocker).GoStart"
"runtime.execute" "runtime.traceRelease"
"runtime.schedule" "runtime.execute"
"runtime.schedule" "runtime.throw"
"runtime.schedule" "(runtime.puintptr).ptr"
"runtime.schedule" "runtime.throw"
"runtime.findRunnable" "runtime.getg"
"runtime.findRunnable" "(runtime.puintptr).ptr"
"runtime.findRunnable" "(*runtime/internal/atomic.Bool).Load"
"runtime.gcstopm" "runtime.getg"
"runtime.gcstopm" "(*runtime/internal/atomic.Bool).Load"
"runtime.gcstopm" "runtime.throw"
"runtime.gcstopm" "(*runtime/internal/atomic.Int32).Add"
"runtime.gcstopm" "runtime.releasep"
"runtime.gcstopm" "runtime.lock"
"runtime.gcstopm" "runtime.throw"
"runtime.gcstopm" "runtime.notewakeup"
"runtime.gcstopm" "runtime.unlock"
"runtime.gcstopm" "runtime.stopm"
"runtime.findRunnable" "runtime.gcstopm"
"runtime.findRunnable" "runtime.runSafePointFn"
"runtime.checkTimers" "(*runtime/internal/atomic.Int64).Load"
"runtime.checkTimers" "(*runtime/internal/atomic.Int64).Load"
"runtime.checkTimers" "runtime.nanotime"
"runtime.checkTimers" "runtime.getg"
"runtime.checkTimers" "(runtime.puintptr).ptr"
"runtime.checkTimers" "runtime.lock"
"runtime.checkTimers" "(*runtime/internal/atomic.Uint32).Load"
"runtime.checkTimers" "(*runtime/internal/atomic.Uint32).Load"
"runtime.adjusttimers" "(*runtime/internal/atomic.Int64).Load"
"runtime.adjusttimers" "(*runtime/internal/atomic.Int64).Store"
"runtime.verifyTimerHeap" "(*runtime/internal/atomic.Uint32).Load"
"runtime.verifyTimerHeap" "runtime.throw"
"runtime.verifyTimerHeap" "runtime.throw"
"runtime.adjusttimers" "runtime.verifyTimerHeap"
"runtime.adjusttimers" "(runtime.puintptr).ptr"
"runtime.adjusttimers" "runtime.throw"
"runtime.adjusttimers" "(*runtime/internal/atomic.Uint32).Load"
"runtime.adjusttimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.adjusttimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.dodeltimer" "(runtime.puintptr).ptr"
"runtime.dodeltimer" "runtime.throw"
"runtime.dodeltimer" "runtime.siftupTimer"
"runtime.siftdownTimer" "runtime.badTimer"
"runtime.siftdownTimer" "runtime.badTimer"
"runtime.dodeltimer" "runtime.siftdownTimer"
"runtime.updateTimer0When" "(*runtime/internal/atomic.Int64).Store"
"runtime.updateTimer0When" "(*runtime/internal/atomic.Int64).Store"
"runtime.dodeltimer" "runtime.updateTimer0When"
"runtime.dodeltimer" "(*runtime/internal/atomic.Uint32).Add"
"runtime.dodeltimer" "(*runtime/internal/atomic.Int64).Store"
"runtime.adjusttimers" "runtime.dodeltimer"
"runtime.adjusttimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.adjusttimers" "runtime.badTimer"
"runtime.adjusttimers" "(*runtime/internal/atomic.Uint32).Add"
"runtime.adjusttimers" "runtime.badTimer"
"runtime.adjusttimers" "runtime.dodeltimer"
"runtime.adjusttimers" "runtime.osyield"
"runtime.adjusttimers" "runtime.badTimer"
"runtime.addAdjustedTimers" "runtime.doaddtimer"
"runtime.addAdjustedTimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.addAdjustedTimers" "runtime.badTimer"
"runtime.adjusttimers" "runtime.addAdjustedTimers"
"runtime.adjusttimers" "runtime.verifyTimerHeap"
"runtime.checkTimers" "runtime.adjusttimers"
"runtime.checkTimers" "runtime.getg"
"runtime.checkTimers" "(runtime.puintptr).ptr"
"runtime.runtimer" "(runtime.puintptr).ptr"
"runtime.runtimer" "runtime.throw"
"runtime.runtimer" "(*runtime/internal/atomic.Uint32).Load"
"runtime.runtimer" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.runtimer" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.runOneTimer" "runtime.getg"
"runtime.runOneTimer" "(runtime.puintptr).ptr"
"runtime.runOneTimer" "internal/abi.FuncPCABIInternal"
"runtime.racegostart" "runtime.throw"
"runtime.runOneTimer" "runtime.racegostart"
"runtime.raceacquirectx" "runtime.throw"
"runtime.runOneTimer" "runtime.raceacquirectx"
"runtime.dodeltimer0" "(runtime.puintptr).ptr"
"runtime.dodeltimer0" "runtime.throw"
"runtime.dodeltimer0" "runtime.siftdownTimer"
"runtime.dodeltimer0" "runtime.updateTimer0When"
"runtime.dodeltimer0" "(*runtime/internal/atomic.Uint32).Add"
"runtime.dodeltimer0" "(*runtime/internal/atomic.Int64).Store"
"runtime.runOneTimer" "runtime.dodeltimer0"
"runtime.runOneTimer" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.runOneTimer" "runtime.siftdownTimer"
"runtime.runOneTimer" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.runOneTimer" "runtime.badTimer"
"runtime.runOneTimer" "runtime.updateTimer0When"
"runtime.runOneTimer" "runtime.badTimer"
"runtime.runOneTimer" "runtime.getg"
"runtime.runOneTimer" "runtime.unlock"
"runtime.runOneTimer" "runtime.lock"
"runtime.runOneTimer" "runtime.throw"
"runtime.runOneTimer" "(runtime.puintptr).ptr"
"runtime.runOneTimer" "runtime.getg"
"time.sendTime" "time.Now"
"runtime.runOneTimer" "time.sendTime"
"runtime.runtimer" "runtime.runOneTimer"
"runtime.runtimer" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.runtimer" "runtime.dodeltimer0"
"runtime.runtimer" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.runtimer" "runtime.badTimer"
"runtime.runtimer" "(*runtime/internal/atomic.Uint32).Add"
"runtime.runtimer" "runtime.osyield"
"runtime.runtimer" "runtime.dodeltimer0"
"runtime.runtimer" "runtime.doaddtimer"
"runtime.runtimer" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.runtimer" "runtime.badTimer"
"runtime.runtimer" "runtime.badTimer"
"runtime.runtimer" "runtime.badTimer"
"runtime.runtimer" "runtime.badTimer"
"runtime.checkTimers" "runtime.runtimer"
"runtime.clearDeletedTimers" "(*runtime/internal/atomic.Int64).Store"
"runtime.clearDeletedTimers" "(*runtime/internal/atomic.Uint32).Load"
"runtime.clearDeletedTimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.clearDeletedTimers" "runtime.siftupTimer"
"runtime.clearDeletedTimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.clearDeletedTimers" "runtime.siftupTimer"
"runtime.clearDeletedTimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.clearDeletedTimers" "runtime.badTimer"
"runtime.clearDeletedTimers" "runtime.osyield"
"runtime.clearDeletedTimers" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.clearDeletedTimers" "runtime.badTimer"
"runtime.clearDeletedTimers" "runtime.badTimer"
"runtime.clearDeletedTimers" "runtime.badTimer"
"runtime.clearDeletedTimers" "runtime.badTimer"
"runtime.clearDeletedTimers" "(*runtime/internal/atomic.Uint32).Add"
"runtime.clearDeletedTimers" "(*runtime/internal/atomic.Uint32).Add"
"runtime.clearDeletedTimers" "runtime.updateTimer0When"
"runtime.clearDeletedTimers" "runtime.verifyTimerHeap"
"runtime.checkTimers" "runtime.clearDeletedTimers"
"runtime.checkTimers" "runtime.unlock"
"runtime.checkTimers" "(*runtime/internal/atomic.Uint32).Load"
"runtime.findRunnable" "runtime.checkTimers"
"runtime.findRunnable" "runtime.traceEnabled"
"runtime.traceReader" "runtime.traceReaderAvailable"
"(*runtime/internal/atomic.UnsafePointer).CompareAndSwapNoWB" "runtime/internal/atomic.Casp1"
"(*runtime/internal/atomic.Pointer[runtime.g]).CompareAndSwapNoWB[runtime.g]" "(*runtime/internal/atomic.UnsafePointer).CompareAndSwapNoWB"
"runtime.traceReader" "(*runtime/internal/atomic.Pointer[runtime.g]).CompareAndSwapNoWB[runtime.g]"
"runtime.findRunnable" "runtime.traceReader"
"runtime.findRunnable" "runtime.traceShuttingDown"
"runtime.findRunnable" "runtime.traceAcquire"
"runtime.findRunnable" "runtime.casgstatus"
"runtime.findRunnable" "(runtime.traceLocker).ok"
"runtime.findRunnable" "(runtime.traceLocker).GoUnpark"
"runtime.findRunnable" "runtime.traceRelease"
"(*runtime.gcControllerState).findRunnableGCWorker" "runtime.throw"
"(*runtime.gcControllerState).findRunnableGCWorker" "runtime.nanotime"
"(*runtime.gcCPULimiterState).needUpdate" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).findRunnableGCWorker" "(*runtime.gcCPULimiterState).needUpdate"
"(*runtime.gcControllerState).findRunnableGCWorker" "(*runtime.gcCPULimiterState).update"
"(*runtime.gcControllerState).findRunnableGCWorker" "runtime.gcMarkWorkAvailable"
"(*runtime.gcControllerState).findRunnableGCWorker" "(*runtime.lfstack).pop"
"(*runtime.gcControllerState).findRunnableGCWorker$1" "(*runtime/internal/atomic.Int64).Load"
"(*runtime.gcControllerState).findRunnableGCWorker$1" "(*runtime/internal/atomic.Int64).CompareAndSwap"
"(*runtime.gcControllerState).findRunnableGCWorker" "(*runtime.gcControllerState).findRunnableGCWorker$1"
"(*runtime.gcControllerState).findRunnableGCWorker" "(runtime.guintptr).ptr"
"(*runtime.gcControllerState).findRunnableGCWorker" "runtime.traceAcquire"
"(*runtime.gcControllerState).findRunnableGCWorker" "runtime.casgstatus"
"(*runtime.gcControllerState).findRunnableGCWorker" "(runtime.traceLocker).ok"
"(*runtime.gcControllerState).findRunnableGCWorker" "(*runtime.lfstack).push"
"(*runtime.gcControllerState).findRunnableGCWorker" "(*runtime.lfstack).push"
"(*runtime.gcControllerState).findRunnableGCWorker" "(runtime.traceLocker).GoUnpark"
"(*runtime.gcControllerState).findRunnableGCWorker" "runtime.traceRelease"
"runtime.findRunnable" "(*runtime.gcControllerState).findRunnableGCWorker"
"runtime.findRunnable" "runtime.lock"
"runtime.globrunqget" "runtime.assertLockHeld"
"runtime.globrunqget" "(*runtime.gQueue).pop"
"runtime.globrunqget" "(*runtime.gQueue).pop"
"runtime.globrunqget" "runtime.runqput"
"runtime.findRunnable" "runtime.globrunqget"
"runtime.findRunnable" "runtime.unlock"
"runtime.findRunnable" "(*runtime/internal/atomic.Uint32).Load"
"runtime.wakefing" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.findRunnable" "runtime.wakefing"
"runtime.findRunnable" "runtime.ready"
"runtime.findRunnable" "runtime.asmcgocall"
"runtime.runqget" "(runtime.guintptr).ptr"
"runtime.runqget" "(*runtime.guintptr).cas"
"runtime.runqget" "runtime/internal/atomic.LoadAcq"
"runtime.runqget" "(runtime.guintptr).ptr"
"runtime.runqget" "runtime/internal/atomic.CasRel"
"runtime.findRunnable" "runtime.runqget"
"runtime.findRunnable" "runtime.lock"
"runtime.findRunnable" "runtime.globrunqget"
"runtime.findRunnable" "runtime.unlock"
"runtime.findRunnable" "runtime.netpollinited"
"runtime.findRunnable" "runtime.netpoll"
"runtime.findRunnable" "(*runtime.gList).empty"
"runtime.findRunnable" "(*runtime/internal/atomic.Int64).Load"
"runtime.findRunnable" "runtime.netpollAnyWaiters"
"runtime.findRunnable" "(*runtime.gList).pop"
"runtime.findRunnable" "runtime.injectglist"
"runtime.findRunnable" "runtime.netpollAdjustWaiters"
"runtime.findRunnable" "runtime.traceAcquire"
"runtime.findRunnable" "runtime.casgstatus"
"runtime.findRunnable" "(runtime.traceLocker).ok"
"runtime.findRunnable" "(runtime.traceLocker).GoUnpark"
"runtime.findRunnable" "runtime.traceRelease"
"runtime.findRunnable" "(*runtime/internal/atomic.Int32).Load"
"runtime.findRunnable" "(*runtime/internal/atomic.Int32).Load"
"(*runtime.m).becomeSpinning" "(*runtime/internal/atomic.Int32).Add"
"(*runtime.m).becomeSpinning" "(*runtime/internal/atomic.Uint32).Store"
"runtime.findRunnable" "(*runtime.m).becomeSpinning"
"runtime.stealWork" "runtime.getg"
"runtime.stealWork" "(runtime.puintptr).ptr"
"runtime.stealWork" "runtime.cheaprand"
"runtime.stealWork" "(*runtime.randomOrder).start"
"runtime.stealWork" "(*runtime.randomEnum).done"
"runtime.stealWork" "(*runtime/internal/atomic.Bool).Load"
"runtime.stealWork" "(*runtime.randomEnum).next"
"runtime.stealWork" "(*runtime.randomEnum).position"
"runtime.stealWork" "runtime.checkTimers"
"runtime.stealWork" "(*runtime.randomEnum).position"
"(runtime.pMask).read" "runtime/internal/atomic.Load"
"runtime.stealWork" "(runtime.pMask).read"
"runtime.stealWork" "(*runtime.randomEnum).position"
"runtime.stealWork" "(runtime.pMask).read"
"runtime.stealWork" "runtime.runqget"
"runtime.runqgrab" "runtime/internal/atomic.LoadAcq"
"runtime.runqgrab" "runtime/internal/atomic.LoadAcq"
"runtime.runqgrab" "(*runtime.guintptr).cas"
"runtime.runqgrab" "runtime.usleep"
"runtime.runqgrab" "runtime.osyield"
"runtime.runqgrab" "runtime/internal/atomic.CasRel"
"runtime.runqsteal" "runtime.runqgrab"
"runtime.runqsteal" "(runtime.guintptr).ptr"
"runtime.runqsteal" "runtime/internal/atomic.LoadAcq"
"runtime.runqsteal" "runtime.throw"
"runtime.runqsteal" "runtime/internal/atomic.StoreRel"
"runtime.stealWork" "runtime.runqsteal"
"runtime.findRunnable" "runtime.stealWork"
"runtime.findRunnable" "(*runtime.lfstack).pop"
"runtime.findRunnable" "runtime.beforeIdle"
"(*runtime.gcControllerState).addIdleMarkWorker" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).addIdleMarkWorker" "runtime.throw"
"(*runtime.gcControllerState).addIdleMarkWorker" "(*runtime/internal/atomic.Uint64).CompareAndSwap"
"runtime.findRunnable" "(*runtime.gcControllerState).addIdleMarkWorker"
"runtime.findRunnable" "runtime.gcMarkWorkAvailable"
"runtime.findRunnable" "(runtime.guintptr).ptr"
"runtime.findRunnable" "runtime.traceAcquire"
"runtime.findRunnable" "runtime.casgstatus"
"runtime.findRunnable" "(runtime.traceLocker).ok"
"runtime.findRunnable" "(*runtime.gcControllerState).removeIdleMarkWorker"
"runtime.findRunnable" "(runtime.traceLocker).GoUnpark"
"runtime.findRunnable" "runtime.traceRelease"
"runtime.findRunnable" "runtime.traceAcquire"
"runtime.findRunnable" "runtime.casgstatus"
"runtime.findRunnable" "(runtime.traceLocker).ok"
"runtime.findRunnable" "(runtime.traceLocker).GoUnpark"
"runtime.findRunnable" "runtime.traceRelease"
"runtime.findRunnable" "runtime.lock"
"runtime.findRunnable" "(*runtime/internal/atomic.Bool).Load"
"runtime.findRunnable" "runtime.unlock"
"runtime.findRunnable" "runtime.globrunqget"
"runtime.findRunnable" "runtime.unlock"
"runtime.findRunnable" "(*runtime.m).becomeSpinning"
"runtime.findRunnable" "runtime.unlock"
"runtime.findRunnable" "runtime.releasep"
"runtime.findRunnable" "(*runtime/internal/atomic.Uint32).Load"
"runtime.findRunnable" "runtime.throw"
"runtime.findRunnable" "runtime.pidleput"
"runtime.findRunnable" "runtime.unlock"
"runtime.findRunnable" "(*runtime/internal/atomic.Int32).Add"
"runtime.findRunnable" "runtime.netpollinited"
"runtime.findRunnable" "runtime.throw"
"runtime.findRunnable" "runtime.lock"
"runtime.findRunnable" "runtime.pidlegetSpinning"
"runtime.findRunnable" "runtime.unlock"
"runtime.checkRunqsNoP" "(runtime.pMask).read"
"runtime.checkRunqsNoP" "runtime.lock"
"runtime.checkRunqsNoP" "runtime.pidlegetSpinning"
"runtime.checkRunqsNoP" "runtime.runqempty"
"runtime.checkRunqsNoP" "runtime.unlock"
"runtime.checkRunqsNoP" "runtime.unlock"
"runtime.findRunnable" "runtime.checkRunqsNoP"
"runtime.findRunnable" "runtime.globrunqget"
"runtime.findRunnable" "runtime.throw"
"runtime.findRunnable" "runtime.unlock"
"runtime.findRunnable" "runtime.acquirep"
"runtime.findRunnable" "(*runtime.m).becomeSpinning"
"runtime.findRunnable" "runtime.acquirep"
"runtime.findRunnable" "(*runtime.m).becomeSpinning"
"runtime.checkIdleGCNoP" "runtime/internal/atomic.Load"
"runtime.checkIdleGCNoP" "runtime.gcMarkWorkAvailable"
"(*runtime.gcControllerState).needIdleMarkWorker" "(*runtime/internal/atomic.Uint64).Load"
"runtime.checkIdleGCNoP" "(*runtime.gcControllerState).needIdleMarkWorker"
"runtime.checkIdleGCNoP" "runtime.lock"
"runtime.checkIdleGCNoP" "runtime.pidlegetSpinning"
"runtime.checkIdleGCNoP" "runtime.unlock"
"runtime.checkIdleGCNoP" "runtime.pidleput"
"runtime.checkIdleGCNoP" "runtime.unlock"
"runtime.checkIdleGCNoP" "(*runtime.lfstack).pop"
"runtime.checkIdleGCNoP" "(*runtime.gcControllerState).addIdleMarkWorker"
"runtime.checkIdleGCNoP" "runtime.pidleput"
"runtime.checkIdleGCNoP" "runtime.unlock"
"runtime.checkIdleGCNoP" "(*runtime.gcControllerState).removeIdleMarkWorker"
"runtime.checkIdleGCNoP" "runtime.unlock"
"runtime.checkIdleGCNoP" "(runtime.guintptr).ptr"
"runtime.findRunnable" "runtime.checkIdleGCNoP"
"runtime.findRunnable" "runtime.acquirep"
"runtime.findRunnable" "(*runtime.m).becomeSpinning"
"runtime.findRunnable" "runtime.traceAcquire"
"runtime.findRunnable" "runtime.casgstatus"
"runtime.findRunnable" "(runtime.traceLocker).ok"
"runtime.checkTimersNoP" "(runtime.pMask).read"
"runtime.checkTimersNoP" "runtime.nobarrierWakeTime"
"runtime.findRunnable" "runtime.checkTimersNoP"
"runtime.findRunnable" "(runtime.traceLocker).GoUnpark"
"runtime.findRunnable" "runtime.traceRelease"
"runtime.findRunnable" "(*runtime/internal/atomic.Int64).Store"
"runtime.findRunnable" "runtime.stopm"
"(*runtime/internal/atomic.Int64).Swap" "runtime/internal/atomic.Xchgint64"
"runtime.findRunnable" "(*runtime/internal/atomic.Int64).Swap"
"runtime.findRunnable" "runtime.netpollAnyWaiters"
"runtime.findRunnable" "runtime.throw"
"runtime.findRunnable" "runtime.throw"
"runtime.findRunnable" "runtime.nanotime"
"runtime.findRunnable" "runtime.netpoll"
"runtime.findRunnable" "runtime.nanotime"
"runtime.findRunnable" "(*runtime/internal/atomic.Int64).Store"
"runtime.findRunnable" "(*runtime/internal/atomic.Int64).Store"
"runtime.findRunnable" "runtime.stopm"
"runtime.findRunnable" "runtime.lock"
"runtime.findRunnable" "runtime.pidleget"
"runtime.findRunnable" "runtime.unlock"
"runtime.findRunnable" "(*runtime.gList).empty"
"runtime.findRunnable" "runtime.injectglist"
"runtime.findRunnable" "runtime.netpollAdjustWaiters"
"runtime.findRunnable" "runtime.acquirep"
"runtime.findRunnable" "(*runtime.gList).empty"
"runtime.findRunnable" "(*runtime.gList).pop"
"runtime.findRunnable" "runtime.injectglist"
"runtime.findRunnable" "runtime.netpollAdjustWaiters"
"runtime.findRunnable" "runtime.traceAcquire"
"runtime.findRunnable" "runtime.casgstatus"
"runtime.findRunnable" "(runtime.traceLocker).ok"
"runtime.findRunnable" "(runtime.traceLocker).GoUnpark"
"runtime.findRunnable" "runtime.traceRelease"
"runtime.findRunnable" "(*runtime.m).becomeSpinning"
"runtime.findRunnable" "(*runtime/internal/atomic.Int64).Load"
"runtime.findRunnable" "runtime.netpollinited"
"runtime.findRunnable" "runtime.netpollBreak"
"runtime.schedule" "runtime.findRunnable"
"runtime.schedule" "runtime.lock"
"runtime.schedule" "runtime.lock"
"runtime.schedule" "(*runtime/internal/atomic.Bool).Load"
"runtime.resetspinning" "runtime.getg"
"runtime.resetspinning" "runtime.throw"
"runtime.resetspinning" "(*runtime/internal/atomic.Int32).Add"
"runtime.resetspinning" "runtime.throw"
"runtime.resetspinning" "runtime.wakep"
"runtime.schedule" "runtime.resetspinning"
"runtime.schedule" "runtime.lock"
"runtime.schedule" "runtime.schedEnabled"
"runtime.schedule" "runtime.schedEnabled"
"runtime.schedule" "runtime.unlock"
"runtime.schedule" "(*runtime.gQueue).pushBack"
"runtime.schedule" "runtime.unlock"
"runtime.schedule" "runtime.wakep"
"runtime.startlockedm" "(runtime.muintptr).ptr"
"runtime.startlockedm" "runtime.getg"
"runtime.startlockedm" "runtime.throw"
"runtime.startlockedm" "runtime.throw"
"runtime.startlockedm" "runtime.incidlelocked"
"runtime.startlockedm" "runtime.releasep"
"runtime.startlockedm" "(*runtime.puintptr).set"
"runtime.startlockedm" "runtime.notewakeup"
"runtime.startlockedm" "runtime.stopm"
"runtime.schedule" "runtime.startlockedm"
"runtime.schedule" "runtime.execute"
"runtime.park_m" "runtime.schedule"
"runtime.park_m" "runtime.traceAcquire"
"runtime.park_m" "runtime.casgstatus"
"runtime.park_m" "(runtime.traceLocker).ok"
"runtime.park_m" "(runtime.traceLocker).GoUnpark"
"runtime.park_m" "runtime.traceRelease"
"runtime.park_m" "runtime.execute"
"runtime.parkunlock_c" "runtime.unlock"
"runtime.park_m" "runtime.parkunlock_c"
"runtime.finalizercommit" "runtime.unlock"
"runtime.finalizercommit" "(*runtime/internal/atomic.Uint32).Or"
"runtime.park_m" "runtime.finalizercommit"
"runtime.gcBgMarkWorker$1" "(runtime.muintptr).ptr"
"runtime.gcBgMarkWorker$1" "runtime.releasem"
"runtime.gcBgMarkWorker$1" "(*runtime.lfstack).push"
"runtime.park_m" "runtime.gcBgMarkWorker$1"
"runtime.forEachG" "runtime.park_m"
"runtime.forEachG" "runtime.preemptPark"
"runtime.forEachG" "runtime.gopreempt_m"
"runtime.forEachG" "runtime.gcResetMarkState$1"
"runtime.forEachG" "runtime.gosched_m"
"runtime.forEachG" "runtime.unlock"
"runtime.forEachG" "runtime.schedtrace$1"
"runtime.forEachG" "runtime.tracebackothers$1"
"runtime.forEachG" "runtime.goyield_m"
"runtime.forEachG" "runtime.exitsyscall0"
"runtime.forEachG" "runtime.checkdead$1"
"runtime.forEachG" "runtime.goschedguarded_m"
"runtime.forEachG" "runtime.gcMarkRootCheck$1"
"runtime.schedtrace" "runtime.forEachG"
"runtime.schedtrace" "runtime.unlock"
"runtime.schedtrace" "(runtime.guintptr).ptr"
"runtime.startpanic_m" "runtime.schedtrace"
"runtime.freezetheworld" "(*runtime/internal/atomic.Bool).Store"
"runtime.freezetheworld" "runtime.usleep"
"runtime.freezetheworld" "(*runtime/internal/atomic.Bool).Store"
"runtime.freezetheworld" "runtime.preemptall"
"runtime.freezetheworld" "runtime.usleep"
"runtime.freezetheworld" "runtime.preemptall"
"runtime.freezetheworld" "runtime.usleep"
"runtime.freezetheworld" "runtime.usleep"
"runtime.startpanic_m" "runtime.freezetheworld"
"runtime.startpanic_m" "runtime.exit"
"runtime.startpanic_m" "runtime.exit"
"runtime.fatalthrow$1" "runtime.startpanic_m"
"runtime.dopanic_m" "runtime.signame"
"runtime.dopanic_m" "runtime.gotraceback"
"runtime.dopanic_m" "runtime.unlock"
"runtime.dopanic_m" "(*runtime/internal/atomic.Uint32).Add"
"runtime.dopanic_m" "runtime.goroutineheader"
"runtime.dopanic_m" "runtime.traceback"
"runtime.dopanic_m" "runtime.traceback"
"runtime.dopanic_m" "runtime.tracebackothers"
"runtime.dopanic_m" "runtime.lock"
"runtime.dopanic_m" "runtime.lock"
"runtime.printDebugLog" "runtime.printlock"
"runtime.printDebugLog" "runtime/internal/atomic.Loaduintptr"
"runtime.printDebugLog" "runtime.printunlock"
"runtime.printDebugLog" "runtime.sysAllocOS"
"runtime.printDebugLog" "runtime.printunlock"
"(*runtime.debugLogReader).peek" "(*runtime.debugLogReader).readUint16LEAt"
"(*runtime.debugLogReader).peek" "(*runtime.debugLogReader).readUint64LEAt"
"(*runtime.debugLogReader).peek" "(*runtime.debugLogReader).readUint64LEAt"
"runtime.printDebugLog" "(*runtime.debugLogReader).peek"
"runtime.printDebugLog" "runtime.printunlock"
"(*runtime.debugLogReader).header" "(*runtime.debugLogReader).readUint16LEAt"
"(*runtime.debugLogReader).header" "(*runtime.debugLogReader).uvarint"
"(*runtime.debugLogReader).header" "(*runtime.debugLogReader).uvarint"
"(*runtime.debugLogReader).varint" "(*runtime.debugLogReader).uvarint"
"(*runtime.debugLogReader).header" "(*runtime.debugLogReader).varint"
"runtime.printDebugLog" "(*runtime.debugLogReader).header"
"runtime.printDebugLog" "runtime.itoaDiv"
"runtime.printDebugLog" "runtime.noescape"
"runtime.slicebytetostringtmp" "runtime.getcallerpc"
"runtime.slicebytetostringtmp" "internal/abi.FuncPCABIInternal"
"runtime.racereadrangepc" "runtime.throw"
"runtime.slicebytetostringtmp" "runtime.racereadrangepc"
"runtime.msanread" "runtime.throw"
"runtime.slicebytetostringtmp" "runtime.msanread"
"runtime.asanread" "runtime.throw"
"runtime.slicebytetostringtmp" "runtime.asanread"
"runtime.printDebugLog" "runtime.slicebytetostringtmp"
"runtime.printDebugLog" "(*runtime.debugLogReader).peek"
"(*runtime.debugLogReader).printVal" "(*runtime.debugLogReader).varint"
"(*runtime.debugLogReader).printVal" "(*runtime.debugLogReader).uvarint"
"(*runtime.debugLogReader).printVal" "(*runtime.debugLogReader).uvarint"
"(*runtime.debugLogReader).printVal" "(*runtime.debugLogReader).uvarint"
"(*runtime.debugLogReader).printVal" "(*runtime.debugLogReader).uvarint"
"(*runtime.debugLogReader).printVal" "(*runtime.debugLogReader).uvarint"
"(*runtime.debugLogReader).printVal" "runtime.gwrite"
"(*runtime.debugLogReader).printVal" "(*runtime.debugLogReader).uvarint"
"(*runtime.debugLogReader).printVal" "(*runtime.debugLogReader).uvarint"
"runtime.printDebugLogPC" "runtime.findfunc"
"runtime.printDebugLogPC" "(runtime.funcInfo).valid"
"runtime.printDebugLogPC" "(runtime.funcInfo).valid"
"runtime.printDebugLogPC" "(runtime.funcInfo).entry"
"runtime.printDebugLogPC" "runtime.funcname"
"runtime.printDebugLogPC" "runtime.funcline"
"runtime.printDebugLogPC" "(runtime.funcInfo).entry"
"(*runtime.debugLogReader).printVal" "runtime.printDebugLogPC"
"(*runtime.debugLogReader).printVal" "(*runtime.debugLogReader).uvarint"
"(*runtime.debugLogReader).printVal" "(*runtime.debugLogReader).uvarint"
"(*runtime.debugLogReader).printVal" "runtime.printDebugLogPC"
"runtime.printDebugLog" "(*runtime.debugLogReader).printVal"
"runtime.dopanic_m" "runtime.printDebugLog"
"runtime.fatalthrow$1" "runtime.dopanic_m"
"runtime.unblocksig" "runtime.sigaddset"
"runtime.unblocksig" "runtime.sigprocmask"
"runtime.dieFromSignal" "runtime.unblocksig"
"runtime.dieFromSignal" "runtime/internal/atomic.Store"
"runtime.raise" "internal/abi.FuncPCABI0"
"runtime.raise" "runtime.libcCall"
"runtime.dieFromSignal" "runtime.raise"
"runtime.dieFromSignal" "runtime.osyield"
"runtime.dieFromSignal" "runtime.osyield"
"runtime.dieFromSignal" "runtime.osyield"
"runtime.setsig" "internal/abi.FuncPCABIInternal"
"runtime.sigaction" "internal/abi.FuncPCABI0"
"runtime.sigaction" "runtime.libcCall"
"runtime.sigaction" "runtime.KeepAlive"
"runtime.sigaction" "runtime.KeepAlive"
"runtime.setsig" "runtime.sigaction"
"runtime.setsig" "internal/abi.FuncPCABI0"
"runtime.setsig" "internal/abi.FuncPCABI0"
"runtime.dieFromSignal" "runtime.setsig"
"runtime.dieFromSignal" "runtime.raise"
"runtime.dieFromSignal" "runtime.osyield"
"runtime.dieFromSignal" "runtime.osyield"
"runtime.dieFromSignal" "runtime.osyield"
"runtime.dieFromSignal" "runtime.exit"
"runtime.crash" "runtime.dieFromSignal"
"runtime.fatalthrow$1" "runtime.crash"
"runtime.fatalthrow$1" "runtime.exit"
"flag.commandLineUsage" "runtime.fatalthrow$1"
"flag.commandLineUsage" "runtime.goready$1"
"flag.commandLineUsage" "runtime.gcResetMarkState"
"flag.commandLineUsage" "runtime.gcStart$1"
"flag.commandLineUsage" "runtime.gcStart$2"
"flag.commandLineUsage" "runtime.gcStart$3"
"flag.commandLineUsage" "(*internal/godebug.Setting).IncNonDefault"
"flag.commandLineUsage" "go/types.computeInterfaceTypeSet$1"
"flag.commandLineUsage" "syscall.libc_dup_trampoline"
"flag.commandLineUsage" "syscall.libc_openat_trampoline"
"flag.commandLineUsage" "syscall.libc_fdopendir_trampoline"
"flag.commandLineUsage" "syscall.libc_closedir_trampoline"
"flag.commandLineUsage" "syscall.libc_readdir_r_trampoline"
"flag.commandLineUsage" "syscall.libc_recvmsg_trampoline"
"flag.commandLineUsage" "syscall.libc_sendmsg_trampoline"
"flag.commandLineUsage" "syscall.libc_lstat_trampoline"
"flag.commandLineUsage" "syscall.libc_stat_trampoline"
"flag.commandLineUsage" "syscall.libc_open_trampoline"
"flag.commandLineUsage" "runtime.callers$1"
"flag.commandLineUsage" "golang.org/x/tools/go/packages.goListDriver$1"
"flag.commandLineUsage" "golang.org/x/tools/go/packages.goListDriver$2"
"flag.commandLineUsage" "(*go/types.Named).expandUnderlying$1"
"flag.commandLineUsage" "(*go/types.Checker).objDecl$1"
"flag.commandLineUsage" "(*go/types.Checker).objDecl$2"
"flag.commandLineUsage" "(*internal/godebug.Setting).Value$1"
"flag.commandLineUsage" "runtime.casgstatus$1"
"flag.commandLineUsage" "runtime.osyield"
"flag.commandLineUsage" "runtime.nanotime_trampoline"
"flag.commandLineUsage" "runtime.cgoCheckTypedBlock$1"
"flag.commandLineUsage" "runtime.sweepone$1"
"flag.commandLineUsage" "flag.isZeroValue$1"
"flag.commandLineUsage" "go/types.computeInterfaceTypeSet$2$1"
"flag.commandLineUsage" "regexp/syntax.parse$1"
"flag.commandLineUsage" "syscall.libc_sysctl_trampoline"
"flag.commandLineUsage" "go/parser.ParseFile$1"
"flag.commandLineUsage" "(*golang.org/x/sync/errgroup.Group).Go$1"
"flag.commandLineUsage" "context.WithCancel$1"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"flag.commandLineUsage" "(*go/types.Checker).validCycle$1"
"flag.commandLineUsage" "(*go/types.Checker).typeDecl$1"
"flag.commandLineUsage" "(*go/types.Checker).collectMethods$1"
"flag.commandLineUsage" "(*go/types.Checker).funcDecl$1"
"flag.commandLineUsage" "(*go/types.subster).typ$2"
"flag.commandLineUsage" "(*go/types.typeWriter).signature$1"
"flag.commandLineUsage" "(*encoding/json.encodeState).marshal$1"
"flag.commandLineUsage" "runtime.exit_trampoline"
"flag.commandLineUsage" "runtime.wbBufFlush$1"
"flag.commandLineUsage" "(*runtime.sweepLocked).sweep$1"
"flag.commandLineUsage" "(*runtime.sweepLocked).sweep$2"
"flag.commandLineUsage" "runtime.gcBgMarkWorker$2"
"flag.commandLineUsage" "runtime.mspinning"
"flag.commandLineUsage" "reflect.embeddedIfaceMethStub"
"flag.commandLineUsage" "(*internal/godebug.Setting).register"
"flag.commandLineUsage" "runtime.persistentalloc$1"
"flag.commandLineUsage" "(*log/slog.handleState).appendValue$1"
"flag.commandLineUsage" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"flag.commandLineUsage" "(*go/types.Checker).collectTypeParams$1"
"flag.commandLineUsage" "(*go/types.Checker).funcType$2"
"flag.commandLineUsage" "runtime.usleep_trampoline"
"flag.commandLineUsage" "runtime.doRecordGoroutineProfile$1"
"flag.commandLineUsage" "runtime.pthread_mutex_init_trampoline"
"flag.commandLineUsage" "runtime.pthread_cond_init_trampoline"
"flag.commandLineUsage" "runtime.pthread_mutex_lock_trampoline"
"flag.commandLineUsage" "runtime.pthread_mutex_unlock_trampoline"
"flag.commandLineUsage" "runtime.pthread_cond_wait_trampoline"
"flag.commandLineUsage" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"flag.commandLineUsage" "runtime._LostContendedRuntimeLock"
"flag.commandLineUsage" "(*runtime.mLockProfile).captureStack$1"
"flag.commandLineUsage" "runtime.pthread_cond_signal_trampoline"
"flag.commandLineUsage" "runtime.tracefree$1"
"flag.commandLineUsage" "(*runtime.mheap).freeSpan$1"
"flag.commandLineUsage" "runtime.gcMarkDone$2"
"flag.commandLineUsage" "runtime.gcMarkDone$3"
"flag.commandLineUsage" "runtime.gcMarkDone$4"
"flag.commandLineUsage" "runtime.entersyscallblock$1"
"flag.commandLineUsage" "runtime.entersyscallblock$2"
"flag.commandLineUsage" "runtime.entersyscallblock_handoff"
"flag.commandLineUsage" "runtime.exitsyscall$1"
"flag.commandLineUsage" "runtime.exitsyscall$2"
"flag.commandLineUsage" "runtime.cgoCheckPtrWrite$1"
"flag.commandLineUsage" "(*internal/lazyregexp.Regexp).build"
"flag.commandLineUsage" "regexp.mergeRuneSets$1"
"flag.commandLineUsage" "runtime.unreachableMethod"
"flag.commandLineUsage" "runtime.heapSetType$1"
"flag.commandLineUsage" "runtime.tracealloc$1"
"flag.commandLineUsage" "syscall.libc_chmod_trampoline"
"flag.commandLineUsage" "(*os/exec.Cmd).Start$1"
"flag.commandLineUsage" "(*context.cancelCtx).propagateCancel$1"
"flag.commandLineUsage" "(*context.cancelCtx).propagateCancel$2"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"flag.commandLineUsage" "(*go/types.Checker).rawExpr$1"
"flag.commandLineUsage" "(*go/types.Checker).validVarType$1"
"flag.commandLineUsage" "(*go/types.Checker).typInternal$1"
"flag.commandLineUsage" "(*go/types.Checker).typInternal$2"
"flag.commandLineUsage" "runtime.stopTheWorld$1"
"flag.commandLineUsage" "runtime.startTheWorld$1"
"flag.commandLineUsage" "runtime.wirep$1"
"flag.commandLineUsage" "runtime.wirep$2"
"flag.commandLineUsage" "runtime.kevent_trampoline"
"flag.commandLineUsage" "runtime.read_trampoline"
"flag.commandLineUsage" "runtime.raise_trampoline"
"flag.commandLineUsage" "runtime.cgoSigtramp"
"flag.commandLineUsage" "runtime.sigtramp"
"flag.commandLineUsage" "runtime.forEachP$1"
"flag.commandLineUsage" "runtime.gcMarkTermination$1"
"flag.commandLineUsage" "runtime.gcMarkTermination$2"
"flag.commandLineUsage" "runtime.gcControllerCommit"
"flag.commandLineUsage" "runtime.gcMarkTermination$3"
"flag.commandLineUsage" "runtime.freeStackSpans"
"flag.commandLineUsage" "runtime.gcMarkTermination$5"
"flag.commandLineUsage" "runtime.exitsyscallfast$1"
"flag.commandLineUsage" "runtime.allocm$1"
"flag.commandLineUsage" "runtime.mstart"
"flag.commandLineUsage" "runtime.getempty$1"
"flag.commandLineUsage" "(*runtime.p).destroy$1"
"flag.commandLineUsage" "runtime.gcAssistAlloc$1"
"flag.commandLineUsage" "(*runtime.mheap).alloc$1"
"flag.commandLineUsage" "runtime.mProf_Malloc$1"
"flag.commandLineUsage" "runtime.Stack$1"
"flag.commandLineUsage" "(*os/exec.Cmd).awaitGoroutines$1"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"flag.commandLineUsage" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"flag.commandLineUsage" "(*go/types.Checker).exprInternal$1"
"flag.commandLineUsage" "(*go/types.Checker).instantiatedType$1"
"flag.commandLineUsage" "(*go/types.Checker).instantiatedType$2"
"flag.commandLineUsage" "(*go/types.Checker).structType$3"
"flag.commandLineUsage" "(*go/types.Checker).interfaceType$2"
"flag.commandLineUsage" "runtime.reentersyscall$1"
"flag.commandLineUsage" "runtime.reentersyscall$2"
"flag.commandLineUsage" "runtime.entersyscall_sysmon"
"flag.commandLineUsage" "runtime.runSafePointFn"
"flag.commandLineUsage" "runtime.entersyscall_gcwait"
"flag.commandLineUsage" "(*runtime.traceMap).put$1"
"flag.commandLineUsage" "runtime.fatal$1"
"flag.commandLineUsage" "runtime.write_trampoline"
"flag.commandLineUsage" "(runtime.traceWriter).refill$1"
"flag.commandLineUsage" "runtime.mmap_trampoline"
"flag.commandLineUsage" "runtime.sigprocmask_trampoline"
"flag.commandLineUsage" "runtime.sigaction_trampoline"
"flag.commandLineUsage" "runtime.gcMarkTermination$4$1"
"flag.commandLineUsage" "(*runtime.mspan).setUserArenaChunkToFault$1"
"flag.commandLineUsage" "runtime.exitsyscallfast_reacquired$1"
"flag.commandLineUsage" "(*runtime.traceStringTable).put$1"
"flag.commandLineUsage" "(*runtime.rwmutex).rlock$1"
"flag.commandLineUsage" "runtime.traceThreadDestroy$1"
"flag.commandLineUsage" "runtime.malg$1"
"flag.commandLineUsage" "runtime.allocmcache$1"
"flag.commandLineUsage" "runtime.freemcache$1"
"flag.commandLineUsage" "golang.org/x/tools/internal/event/core.ExportPair$1"
"flag.commandLineUsage" "golang.org/x/tools/internal/event/core.ExportPair$2"
"flag.commandLineUsage" "go/types.parseUnion$1"
"flag.commandLineUsage" "runtime._VDSO"
"flag.commandLineUsage" "runtime._ExternalCode"
"flag.commandLineUsage" "runtime._GC"
"flag.commandLineUsage" "runtime._System"
"flag.commandLineUsage" "runtime.sigpanic"
"flag.commandLineUsage" "runtime.raiseproc_trampoline"
"flag.commandLineUsage" "runtime.markrootFreeGStacks"
"flag.commandLineUsage" "runtime.markroot$1"
"flag.commandLineUsage" "runtime.walltime_trampoline"
"flag.commandLineUsage" "runtime.pthread_attr_init_trampoline"
"flag.commandLineUsage" "runtime.pthread_attr_getstacksize_trampoline"
"flag.commandLineUsage" "runtime.pthread_attr_setdetachstate_trampoline"
"flag.commandLineUsage" "runtime.mstart_stub"
"flag.commandLineUsage" "go/build/constraint.parseExpr$1"
"flag.commandLineUsage" "(*go/parser.parser).parsePrimaryExpr$1"
"flag.commandLineUsage" "(*go/parser.parser).parseBinaryExpr$1"
"flag.commandLineUsage" "(*go/parser.parser).parseParameterList$1"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"flag.commandLineUsage" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"flag.commandLineUsage" "(*go/types.Checker).infer$1"
"flag.commandLineUsage" "(*go/types.Checker).infer$2"
"flag.commandLineUsage" "(*go/types.Checker).instantiateSignature$1"
"flag.commandLineUsage" "(*go/types.Checker).instantiateSignature$2"
"flag.commandLineUsage" "(*go/types.Checker).genericExprList$1"
"flag.commandLineUsage" "runtime.printArgs$3"
"flag.commandLineUsage" "runtime.freeSomeWbufs$1"
"flag.commandLineUsage" "runtime.pthread_kill_trampoline"
"flag.commandLineUsage" "runtime.mlock_trampoline"
"flag.commandLineUsage" "runtime.pthread_create_trampoline"
"flag.commandLineUsage" "(*runtime.pageAlloc).scavenge$1"
"flag.commandLineUsage" "syscall.libc_pipe_trampoline"
"flag.commandLineUsage" "syscall.libc_kill_trampoline"
"flag.commandLineUsage" "syscall.libc_wait4_trampoline"
"flag.commandLineUsage" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"flag.commandLineUsage" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"flag.commandLineUsage" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"flag.commandLineUsage" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"flag.commandLineUsage" "syscall.libc_mkdir_trampoline"
"flag.commandLineUsage" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"flag.commandLineUsage" "go/types.hasVarSize$1"
"flag.commandLineUsage" "(*go/types.tpWalker).isParameterized$1"
"flag.commandLineUsage" "runtime.kqueue_trampoline"
"flag.commandLineUsage" "runtime._LostExternalCode"
"flag.commandLineUsage" "runtime._LostSIGPROFDuringAtomic64"
"flag.commandLineUsage" "syscall.libc_fork_trampoline"
"flag.commandLineUsage" "syscall.libc_setsid_trampoline"
"flag.commandLineUsage" "syscall.libc_setpgid_trampoline"
"flag.commandLineUsage" "syscall.libc_getpid_trampoline"
"flag.commandLineUsage" "syscall.libc_ioctl_trampoline"
"flag.commandLineUsage" "syscall.libc_chroot_trampoline"
"flag.commandLineUsage" "syscall.libc_setgroups_trampoline"
"flag.commandLineUsage" "syscall.libc_setgid_trampoline"
"flag.commandLineUsage" "syscall.libc_setuid_trampoline"
"flag.commandLineUsage" "syscall.libc_chdir_trampoline"
"flag.commandLineUsage" "syscall.libc_exit_trampoline"
"flag.commandLineUsage" "syscall.libc_unlink_trampoline"
"flag.commandLineUsage" "syscall.libc_rmdir_trampoline"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"flag.commandLineUsage" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"flag.commandLineUsage" "(*go/types.unifier).nify$1"
"flag.commandLineUsage" "runtime.fcntl_trampoline"
"flag.commandLineUsage" "runtime.pipe_trampoline"
"flag.commandLineUsage" "runtime.munmap_trampoline"
"flag.commandLineUsage" "runtime.madvise_trampoline"
"flag.commandLineUsage" "(*go/parser.parser).safePos$1"
"flag.commandLineUsage" "syscall.libc_ptrace_trampoline"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"flag.commandLineUsage" "math/big.three$1"
"flag.commandLineUsage" "go/ast.fprint$1"
"flag.commandLineUsage" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"flag.commandLineUsage" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"golang.org/x/tools/go/packages.goListDriver" "flag.commandLineUsage"
"golang.org/x/tools/go/packages.goListDriver" "runtime.chansend$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.asyncPreempt2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.fatalthrow$1"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_lstat_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_fstat_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_openat_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_closedir_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_stat_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "flag.init$1"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_mmap_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.gcSizes).Alignof$1"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_fchmod_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcStart$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.init$1"
"golang.org/x/tools/go/packages.goListDriver" "(log/slog.Value).Resolve$1"
"golang.org/x/tools/go/packages.goListDriver" "time.initLocal"
"golang.org/x/tools/go/packages.goListDriver" "time.FixedZone$1"
"golang.org/x/tools/go/packages.goListDriver" "reflect.methodValueCall"
"golang.org/x/tools/go/packages.goListDriver" "go/types.resolve$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.goready$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcStart$3"
"golang.org/x/tools/go/packages.goListDriver" "go/types.computeInterfaceTypeSet$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.chanrecv$1"
"golang.org/x/tools/go/packages.goListDriver" "(*fmt.ss).Token$1"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_lseek_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_setsockopt_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_write_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_fdopendir_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_execve_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_dup2_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "internal/poll.runtime_pollServerInit"
"golang.org/x/tools/go/packages.goListDriver" "runtime.throw$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.SetFinalizer$1"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_pwrite_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_sendto_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_getrlimit_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.asyncPreempt"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_recvfrom_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcResetMarkState"
"golang.org/x/tools/go/packages.goListDriver" "(*log/slog.Level).parse$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcStart$2"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_read_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_recvmsg_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_open_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "sync.poolCleanup"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_getsockopt_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_close_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "(*internal/godebug.Setting).IncNonDefault"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/go/packages.newDeduper"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/go/packages.goListDriver$1"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/go/packages.goListDriver$1"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/go/packages.goListDriver$2"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/go/packages.goListDriver$2"
"golang.org/x/tools/go/packages.goListDriver" "strings.Index"
"golang.org/x/tools/go/packages.goListDriver" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "(*golang.org/x/tools/go/packages.golistState).getGoVersion"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.usesExportData"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "golang.org/x/tools/go/packages.jsonFlag$1"
"golang.org/x/tools/go/packages.jsonFlag" "strings.Join"
"golang.org/x/tools/go/packages.golistargs" "golang.org/x/tools/go/packages.jsonFlag"
"golang.org/x/tools/go/packages.golistargs" "fmt.Sprintf"
"golang.org/x/tools/go/packages.golistargs" "fmt.Sprintf"
"golang.org/x/tools/go/packages.golistargs" "golang.org/x/tools/go/packages.usesExportData"
"golang.org/x/tools/go/packages.golistargs" "fmt.Sprintf"
"golang.org/x/tools/go/packages.golistargs" "fmt.Sprintf"
"golang.org/x/tools/go/packages.golistargs" "golang.org/x/tools/go/packages.usesExportData"
"golang.org/x/tools/go/packages.golistargs" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "golang.org/x/tools/go/packages.golistargs"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "(*golang.org/x/tools/go/packages.golistState).invokeGo"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "encoding/json.NewDecoder"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "(*encoding/json.Decoder).More"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "(*encoding/json.Decoder).Decode"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "path/filepath.IsAbs"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).getPkgPath" "path/filepath.Abs"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirs" "(*golang.org/x/tools/go/packages.golistState).getEnv"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirs" "(*sync.Once).Do"
"(*golang.org/x/tools/go/packages.golistState).determineRootDirs" "(*sync.Once).Do"
"(*golang.org/x/tools/go/packages.golistState).getPkgPath" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs"
"(*golang.org/x/tools/go/packages.golistState).getPkgPath" "strings.HasPrefix"
"path/filepath.Rel" "path/filepath.VolumeName"
"path/filepath.Rel" "path/filepath.VolumeName"
"path/filepath.Rel" "path/filepath.Clean"
"path/filepath.Rel" "path/filepath.Clean"
"path/filepath.Rel" "path/filepath.sameWord"
"path/filepath.Rel" "path/filepath.volumeNameLen"
"path/filepath.Rel" "errors.New"
"path/filepath.Rel" "path/filepath.sameWord"
"path/filepath.Rel" "path/filepath.sameWord"
"path/filepath.Rel" "errors.New"
"path/filepath.Rel" "strings.Count"
"(*golang.org/x/tools/go/packages.golistState).getPkgPath" "path/filepath.Rel"
"(*golang.org/x/tools/go/packages.golistState).getPkgPath" "path/filepath.ToSlash"
"path.Clean" "(*path.lazybuf).append"
"path.Clean" "(*path.lazybuf).index"
"path.Clean" "(*path.lazybuf).append"
"path.Clean" "(*path.lazybuf).append"
"path.Clean" "(*path.lazybuf).append"
"path.Clean" "(*path.lazybuf).append"
"path.Clean" "(*path.lazybuf).append"
"path.Clean" "(*path.lazybuf).string"
"path.Join" "path.Clean"
"(*golang.org/x/tools/go/packages.golistState).getPkgPath" "path.Join"
"(*golang.org/x/tools/go/packages.golistState).getPkgPath" "path/filepath.ToSlash"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "(*golang.org/x/tools/go/packages.golistState).getPkgPath"
"golang.org/x/tools/go/packages.absJoin" "path/filepath.IsAbs"
"golang.org/x/tools/go/packages.absJoin" "path/filepath.Join"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "golang.org/x/tools/go/packages.absJoin"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "golang.org/x/tools/go/packages.absJoin"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "golang.org/x/tools/go/packages.otherFiles"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "golang.org/x/tools/go/packages.absJoin"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "golang.org/x/tools/go/packages.absJoin"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "golang.org/x/tools/go/packages.absJoin"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "golang.org/x/tools/go/packages.absJoin"
"reflect.DeepEqual" "reflect.ValueOf"
"reflect.DeepEqual" "reflect.ValueOf"
"reflect.DeepEqual" "(reflect.Value).Type"
"reflect.DeepEqual" "(reflect.Value).Type"
"reflect.deepValueEqual" "(reflect.Value).IsValid"
"reflect.deepValueEqual" "(reflect.Value).IsValid"
"reflect.deepValueEqual" "(reflect.Value).IsValid"
"reflect.deepValueEqual" "(reflect.Value).Type"
"reflect.deepValueEqual" "(reflect.Value).Type"
"reflect.deepValueEqual" "(reflect.Value).IsValid"
"reflect.deepValueEqual$1" "(reflect.Value).Kind"
"reflect.deepValueEqual$1" "(reflect.Value).typ"
"reflect.deepValueEqual$1" "(reflect.Value).IsNil"
"reflect.deepValueEqual$1" "(reflect.Value).IsNil"
"reflect.deepValueEqual" "reflect.deepValueEqual$1"
"reflect.deepValueEqual$2" "(reflect.Value).Kind"
"reflect.deepValueEqual$2" "(reflect.Value).pointer"
"reflect.deepValueEqual" "reflect.deepValueEqual$2"
"reflect.deepValueEqual" "reflect.deepValueEqual$2"
"reflect.deepValueEqual" "(reflect.Value).Kind"
"reflect.deepValueEqual" "(reflect.Value).Type"
"reflect.deepValueEqual" "(reflect.Value).IsNil"
"reflect.deepValueEqual" "(reflect.Value).IsNil"
"reflect.deepValueEqual" "(reflect.Value).Len"
"reflect.deepValueEqual" "(reflect.Value).Index"
"reflect.deepValueEqual" "(reflect.Value).Index"
"reflect.deepValueEqual" "reflect.deepValueEqual"
"reflect.deepValueEqual" "(reflect.Value).IsNil"
"reflect.deepValueEqual" "(reflect.Value).Len"
"reflect.deepValueEqual" "(reflect.Value).Len"
"reflect.deepValueEqual" "(reflect.Value).UnsafePointer"
"reflect.deepValueEqual" "(reflect.Value).UnsafePointer"
"reflect.deepValueEqual" "(reflect.Value).Type"
"reflect.deepValueEqual" "(*reflect.rtype).Elem"
"reflect.deepValueEqual" "(*reflect.rtype).Kind"
"reflect.deepValueEqual" "(reflect.Value).Bytes"
"reflect.deepValueEqual" "(reflect.Value).Bytes"
"reflect.deepValueEqual" "internal/bytealg.Equal"
"reflect.deepValueEqual" "(reflect.Value).Len"
"reflect.deepValueEqual" "(reflect.Value).Index"
"reflect.deepValueEqual" "(reflect.Value).Index"
"reflect.deepValueEqual" "reflect.deepValueEqual"
"reflect.deepValueEqual" "(reflect.Value).UnsafePointer"
"reflect.deepValueEqual" "(reflect.Value).UnsafePointer"
"reflect.deepValueEqual" "(reflect.Value).IsNil"
"reflect.deepValueEqual" "(reflect.Value).IsNil"
"reflect.deepValueEqual" "(reflect.Value).Elem"
"reflect.deepValueEqual" "(reflect.Value).Elem"
"reflect.deepValueEqual" "reflect.deepValueEqual"
"reflect.deepValueEqual" "(reflect.Value).IsNil"
"reflect.deepValueEqual" "(reflect.Value).NumField"
"reflect.deepValueEqual" "(reflect.Value).Elem"
"reflect.deepValueEqual" "(reflect.Value).Elem"
"reflect.deepValueEqual" "reflect.deepValueEqual"
"reflect.deepValueEqual" "(reflect.Value).IsNil"
"reflect.deepValueEqual" "(reflect.Value).IsNil"
"reflect.deepValueEqual" "(reflect.Value).Field"
"reflect.deepValueEqual" "(reflect.Value).Field"
"reflect.deepValueEqual" "reflect.deepValueEqual"
"reflect.deepValueEqual" "(reflect.Value).IsNil"
"reflect.deepValueEqual" "(reflect.Value).Len"
"reflect.deepValueEqual" "(reflect.Value).Len"
"reflect.deepValueEqual" "(reflect.Value).UnsafePointer"
"reflect.deepValueEqual" "(reflect.Value).UnsafePointer"
"reflect.deepValueEqual" "(reflect.Value).MapRange"
"reflect.deepValueEqual" "(*reflect.MapIter).Value"
"reflect.deepValueEqual" "(*reflect.MapIter).Key"
"reflect.deepValueEqual" "(reflect.Value).MapIndex"
"reflect.deepValueEqual" "(reflect.Value).IsValid"
"reflect.deepValueEqual" "(*reflect.MapIter).Next"
"reflect.deepValueEqual" "reflect.deepValueEqual"
"reflect.deepValueEqual" "(reflect.Value).IsValid"
"reflect.deepValueEqual" "(reflect.Value).Int"
"reflect.deepValueEqual" "(reflect.Value).Int"
"reflect.deepValueEqual" "(reflect.Value).IsNil"
"reflect.deepValueEqual" "(reflect.Value).Uint"
"reflect.deepValueEqual" "(reflect.Value).Uint"
"reflect.deepValueEqual" "(reflect.Value).String"
"reflect.deepValueEqual" "(reflect.Value).String"
"reflect.deepValueEqual" "(reflect.Value).Bool"
"reflect.deepValueEqual" "(reflect.Value).Bool"
"reflect.deepValueEqual" "(reflect.Value).Float"
"reflect.deepValueEqual" "(reflect.Value).Float"
"reflect.deepValueEqual" "(reflect.Value).Complex"
"reflect.deepValueEqual" "(reflect.Value).Complex"
"reflect.deepValueEqual" "reflect.valueInterface"
"reflect.deepValueEqual" "reflect.valueInterface"
"reflect.DeepEqual" "reflect.deepValueEqual"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "reflect.DeepEqual"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "strings.Contains"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "strings.IndexByte"
"path/filepath.Ext" "os.IsPathSeparator"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "path/filepath.Ext"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "log.Fatalf"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "path/filepath.IsAbs"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "path/filepath.Join"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "path/filepath.IsAbs"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse$1" "strings.Split"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse$1" "strings.TrimSpace"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse$1" "path/filepath.IsAbs"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse$1" "path/filepath.Join"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse$1" "os.Stat"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$1"
"(*golang.org/x/tools/go/packages.golistState).shouldAddFilenameFromError" "(*golang.org/x/tools/go/packages.golistState).getGoVersion"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "(*golang.org/x/tools/go/packages.golistState).shouldAddFilenameFromError"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$1"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "strings.TrimSpace"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.golistState).createDriverResponse" "sort.Slice"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse"
"(*golang.org/x/tools/go/packages.responseDeduper).addAll" "(*golang.org/x/tools/go/packages.responseDeduper).addPackage"
"(*golang.org/x/tools/go/packages.responseDeduper).addAll" "(*golang.org/x/tools/go/packages.responseDeduper).addRoot"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.responseDeduper).addAll"
"path/filepath.Dir" "path/filepath.VolumeName"
"path/filepath.Dir" "path/filepath.Clean"
"path/filepath.Dir" "os.IsPathSeparator"
"(*golang.org/x/tools/go/packages.golistState).runContainsQueries" "path/filepath.Dir"
"(*golang.org/x/tools/go/packages.golistState).runContainsQueries" "path/filepath.Abs"
"(*golang.org/x/tools/go/packages.golistState).runContainsQueries" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.golistState).runContainsQueries" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse"
"(*golang.org/x/tools/go/packages.golistState).adhocPackage" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse"
"(*golang.org/x/tools/go/packages.golistState).adhocPackage" "path/filepath.ToSlash"
"(*golang.org/x/tools/go/packages.golistState).adhocPackage" "path/filepath.ToSlash"
"path/filepath.Base" "path/filepath.VolumeName"
"path/filepath.Base" "os.IsPathSeparator"
"path/filepath.Base" "os.IsPathSeparator"
"(*golang.org/x/tools/go/packages.golistState).adhocPackage" "path/filepath.Base"
"(*golang.org/x/tools/go/packages.golistState).adhocPackage" "path/filepath.Join"
"(*golang.org/x/tools/go/packages.golistState).runContainsQueries" "(*golang.org/x/tools/go/packages.golistState).adhocPackage"
"(*golang.org/x/tools/go/packages.golistState).runContainsQueries" "(*golang.org/x/tools/go/packages.responseDeduper).addPackage"
"(*golang.org/x/tools/go/packages.golistState).runContainsQueries" "path/filepath.Base"
"(*golang.org/x/tools/go/packages.golistState).runContainsQueries" "path/filepath.Base"
"(*golang.org/x/tools/go/packages.golistState).runContainsQueries" "(*golang.org/x/tools/go/packages.responseDeduper).addRoot"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).runContainsQueries"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Named).expandUnderlying$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).objDecl$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).objDecl$2"
"golang.org/x/tools/go/packages.goListDriver" "(*internal/godebug.Setting).Value$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.casgstatus$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.osyield"
"golang.org/x/tools/go/packages.goListDriver" "runtime.nanotime_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.cgoCheckTypedBlock$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.sweepone$1"
"golang.org/x/tools/go/packages.goListDriver" "flag.isZeroValue$1"
"golang.org/x/tools/go/packages.goListDriver" "go/types.computeInterfaceTypeSet$2$1"
"golang.org/x/tools/go/packages.goListDriver" "regexp/syntax.parse$1"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_sysctl_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "go/parser.ParseFile$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/sync/errgroup.Group).Go$1"
"golang.org/x/tools/go/packages.goListDriver" "context.WithCancel$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).validCycle$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).typeDecl$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).collectMethods$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).funcDecl$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.subster).typ$2"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.typeWriter).signature$1"
"golang.org/x/tools/go/packages.goListDriver" "(*encoding/json.encodeState).marshal$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.exit_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.wbBufFlush$1"
"golang.org/x/tools/go/packages.goListDriver" "(*runtime.sweepLocked).sweep$1"
"golang.org/x/tools/go/packages.goListDriver" "(*runtime.sweepLocked).sweep$2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcBgMarkWorker$2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.mspinning"
"golang.org/x/tools/go/packages.goListDriver" "reflect.embeddedIfaceMethStub"
"golang.org/x/tools/go/packages.goListDriver" "(*internal/godebug.Setting).register"
"golang.org/x/tools/go/packages.goListDriver" "runtime.persistentalloc$1"
"golang.org/x/tools/go/packages.goListDriver" "(*log/slog.handleState).appendValue$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).collectTypeParams$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).funcType$2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.usleep_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.doRecordGoroutineProfile$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_mutex_init_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_cond_init_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_mutex_lock_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_mutex_unlock_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_cond_wait_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime._LostContendedRuntimeLock"
"golang.org/x/tools/go/packages.goListDriver" "(*runtime.mLockProfile).captureStack$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_cond_signal_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.tracefree$1"
"golang.org/x/tools/go/packages.goListDriver" "(*runtime.mheap).freeSpan$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcMarkDone$2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcMarkDone$3"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcMarkDone$4"
"golang.org/x/tools/go/packages.goListDriver" "runtime.entersyscallblock$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.entersyscallblock$2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.entersyscallblock_handoff"
"golang.org/x/tools/go/packages.goListDriver" "runtime.exitsyscall$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.exitsyscall$2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.cgoCheckPtrWrite$1"
"golang.org/x/tools/go/packages.goListDriver" "(*internal/lazyregexp.Regexp).build"
"golang.org/x/tools/go/packages.goListDriver" "regexp.mergeRuneSets$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.unreachableMethod"
"golang.org/x/tools/go/packages.goListDriver" "runtime.heapSetType$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.tracealloc$1"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_chmod_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "(*os/exec.Cmd).Start$1"
"golang.org/x/tools/go/packages.goListDriver" "(*context.cancelCtx).propagateCancel$1"
"golang.org/x/tools/go/packages.goListDriver" "(*context.cancelCtx).propagateCancel$2"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).rawExpr$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).validVarType$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).typInternal$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).typInternal$2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.stopTheWorld$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.startTheWorld$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.wirep$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.wirep$2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.kevent_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.read_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.raise_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.cgoSigtramp"
"golang.org/x/tools/go/packages.goListDriver" "runtime.sigtramp"
"golang.org/x/tools/go/packages.goListDriver" "runtime.forEachP$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcMarkTermination$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcMarkTermination$2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcControllerCommit"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcMarkTermination$3"
"golang.org/x/tools/go/packages.goListDriver" "runtime.freeStackSpans"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcMarkTermination$5"
"golang.org/x/tools/go/packages.goListDriver" "runtime.exitsyscallfast$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.allocm$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.mstart"
"golang.org/x/tools/go/packages.goListDriver" "runtime.getempty$1"
"golang.org/x/tools/go/packages.goListDriver" "(*runtime.p).destroy$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcAssistAlloc$1"
"golang.org/x/tools/go/packages.goListDriver" "(*runtime.mheap).alloc$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.mProf_Malloc$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.Stack$1"
"golang.org/x/tools/go/packages.goListDriver" "(*os/exec.Cmd).awaitGoroutines$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).exprInternal$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).instantiatedType$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).instantiatedType$2"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).structType$3"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).interfaceType$2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.reentersyscall$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.reentersyscall$2"
"golang.org/x/tools/go/packages.goListDriver" "runtime.entersyscall_sysmon"
"golang.org/x/tools/go/packages.goListDriver" "runtime.runSafePointFn"
"golang.org/x/tools/go/packages.goListDriver" "runtime.entersyscall_gcwait"
"golang.org/x/tools/go/packages.goListDriver" "(*runtime.traceMap).put$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.fatal$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.write_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "(runtime.traceWriter).refill$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.mmap_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.sigprocmask_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.sigaction_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.gcMarkTermination$4$1"
"golang.org/x/tools/go/packages.goListDriver" "(*runtime.mspan).setUserArenaChunkToFault$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.exitsyscallfast_reacquired$1"
"golang.org/x/tools/go/packages.goListDriver" "(*runtime.traceStringTable).put$1"
"golang.org/x/tools/go/packages.goListDriver" "(*runtime.rwmutex).rlock$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.traceThreadDestroy$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.malg$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.allocmcache$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.freemcache$1"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/internal/event/core.ExportPair$1"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/internal/event/core.ExportPair$2"
"golang.org/x/tools/go/packages.goListDriver" "go/types.parseUnion$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime._VDSO"
"golang.org/x/tools/go/packages.goListDriver" "runtime._ExternalCode"
"golang.org/x/tools/go/packages.goListDriver" "runtime._GC"
"golang.org/x/tools/go/packages.goListDriver" "runtime._System"
"golang.org/x/tools/go/packages.goListDriver" "runtime.sigpanic"
"golang.org/x/tools/go/packages.goListDriver" "runtime.raiseproc_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.markrootFreeGStacks"
"golang.org/x/tools/go/packages.goListDriver" "runtime.markroot$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.walltime_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_attr_init_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_attr_getstacksize_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_attr_setdetachstate_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.mstart_stub"
"golang.org/x/tools/go/packages.goListDriver" "go/build/constraint.parseExpr$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/parser.parser).parsePrimaryExpr$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/parser.parser).parseBinaryExpr$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/parser.parser).parseParameterList$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).infer$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).infer$2"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).instantiateSignature$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).instantiateSignature$2"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.Checker).genericExprList$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.printArgs$3"
"golang.org/x/tools/go/packages.goListDriver" "runtime.freeSomeWbufs$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_kill_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.mlock_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pthread_create_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "(*runtime.pageAlloc).scavenge$1"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_pipe_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_kill_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_wait4_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_mkdir_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"golang.org/x/tools/go/packages.goListDriver" "go/types.hasVarSize$1"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.tpWalker).isParameterized$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.kqueue_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime._LostExternalCode"
"golang.org/x/tools/go/packages.goListDriver" "runtime._LostSIGPROFDuringAtomic64"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_fork_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_setsid_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_setpgid_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_getpid_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_ioctl_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_chroot_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_setgroups_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_setgid_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_setuid_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_chdir_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_exit_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_unlink_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_rmdir_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"golang.org/x/tools/go/packages.goListDriver" "(*go/types.unifier).nify$1"
"golang.org/x/tools/go/packages.goListDriver" "runtime.fcntl_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.pipe_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.munmap_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "runtime.madvise_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "(*go/parser.parser).safePos$1"
"golang.org/x/tools/go/packages.goListDriver" "syscall.libc_ptrace_trampoline"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"golang.org/x/tools/go/packages.goListDriver" "math/big.three$1"
"golang.org/x/tools/go/packages.goListDriver" "go/ast.fprint$1"
"golang.org/x/tools/go/packages.goListDriver" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"golang.org/x/tools/go/packages.goListDriver" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"golang.org/x/tools/go/packages.callDriverOnChunks$1" "golang.org/x/tools/go/packages.goListDriver"
"golang.org/x/tools/go/packages.findExternalDriver$1" "encoding/json.Marshal"
"golang.org/x/tools/go/packages.findExternalDriver$1" "fmt.Errorf"
"os/exec.Command" "(*internal/godebug.Setting).Value"
"os/exec.Command" "path/filepath.Base"
"os/exec.Command" "runtime.SetFinalizer"
"runtime.Stack" "runtime.stopTheWorld"
"runtime.Stack" "runtime.getg"
"runtime.Stack" "runtime.getcallersp"
"runtime.Stack" "runtime.getcallerpc"
"runtime.Stack" "runtime.systemstack"
"runtime.Stack" "runtime.startTheWorld"
"os/exec.Command" "runtime.Stack"
"bytes.IndexByte" "internal/bytealg.IndexByte"
"bytes.Index" "bytes.IndexByte"
"bytes.Index" "bytes.Equal"
"bytes.Index" "internal/bytealg.Index"
"bytes.Index" "bytes.IndexByte"
"bytes.Index" "internal/bytealg.Cutover"
"bytes.Index" "bytes.Equal"
"bytes.Index" "internal/bytealg.Index"
"bytes.Index" "bytes.IndexByte"
"bytes.Index" "bytes.Equal"
"internal/bytealg.IndexRabinKarp[[]byte]" "internal/bytealg.HashStr[[]byte]"
"bytes.Index" "internal/bytealg.IndexRabinKarp[[]byte]"
"os/exec.Command" "bytes.Index"
"os/exec.LookPath" "strings.Contains"
"os/exec.findExecutable" "os.Stat"
"os/exec.findExecutable" "(*os.fileStat).Mode"
"os/exec.findExecutable" "(io/fs.FileMode).IsDir"
"os/exec.findExecutable" "internal/syscall/unix.Eaccess"
"os/exec.LookPath" "os/exec.findExecutable"
"os/exec.LookPath" "os.Getenv"
"os/exec.LookPath" "path/filepath.SplitList"
"os/exec.LookPath" "path/filepath.Join"
"os/exec.LookPath" "os/exec.findExecutable"
"os/exec.LookPath" "path/filepath.IsAbs"
"os/exec.LookPath" "(*internal/godebug.Setting).Value"
"os/exec.LookPath" "(*internal/godebug.Setting).IncNonDefault"
"os/exec.Command" "os/exec.LookPath"
"os/exec.Command" "os/exec.lookExtensions"
"os/exec.Command" "path/filepath.IsAbs"
"os/exec.CommandContext" "os/exec.Command"
"golang.org/x/tools/go/packages.findExternalDriver$1" "os/exec.CommandContext"
"golang.org/x/tools/go/packages.findExternalDriver$1" "bytes.NewReader"
"(*os/exec.Cmd).Start" "errors.New"
"(*os/exec.Cmd).Start" "(*os/exec.Cmd).Start$1"
"(*os/exec.Cmd).Start" "errors.New"
"(*os/exec.Cmd).Start" "os/exec.lookExtensions"
"(*os/exec.Cmd).Start" "path/filepath.IsAbs"
"(*os/exec.Cmd).Start" "errors.New"
"(*os/exec.Cmd).writerDescriptor" "os.OpenFile"
"os.Pipe" "(*sync.RWMutex).RLock"
"syscall.pipe" "internal/abi.FuncPCABI0"
"syscall.pipe" "syscall.rawSyscall"
"syscall.pipe" "syscall.errnoErr"
"syscall.Pipe" "syscall.pipe"
"os.Pipe" "syscall.Pipe"
"os.Pipe" "(*sync.RWMutex).RUnlock"
"os.Pipe" "os.NewSyscallError"
"os.Pipe" "syscall.CloseOnExec"
"os.Pipe" "syscall.CloseOnExec"
"os.Pipe" "(*sync.RWMutex).RUnlock"
"os.Pipe" "os.newFile"
"os.Pipe" "os.newFile"
"(*os/exec.Cmd).writerDescriptor" "os.Pipe"
"(*os/exec.Cmd).childStderr" "(*os/exec.Cmd).writerDescriptor"
"os/exec.interfaceEqual" "os/exec.interfaceEqual$1"
"(*os/exec.Cmd).childStderr" "os/exec.interfaceEqual"
"(*os/exec.Cmd).Start" "(*os/exec.Cmd).childStderr"
"(*os/exec.Cmd).Start" "(*os/exec.Cmd).argv"
"os.StartProcess" "internal/testlog.Open"
"os.startProcess" "os.Stat"
"syscall.Environ" "(*sync.Once).Do"
"syscall.Environ" "(*sync.RWMutex).RLock"
"syscall.Environ" "(*sync.RWMutex).RUnlock"
"internal/syscall/execenv.Default" "syscall.Environ"
"os.startProcess" "internal/syscall/execenv.Default"
"os.startProcess" "(*os.File).Fd"
"syscall.forkExec" "syscall.BytePtrFromString"
"syscall.SlicePtrFromStrings" "internal/bytealg.IndexByteString"
"syscall.forkExec" "syscall.SlicePtrFromStrings"
"syscall.forkExec" "syscall.SlicePtrFromStrings"
"syscall.forkExec" "syscall.BytePtrFromString"
"syscall.forkExec" "syscall.BytePtrFromString"
"syscall.forkExec" "errors.New"
"syscall.forkExec" "errors.New"
"syscall.acquireForkLock" "(*sync.RWMutex).Lock"
"syscall.forkExec" "syscall.acquireForkLock"
"syscall.forkExecPipe" "syscall.Pipe"
"syscall.forkExecPipe" "syscall.fcntl"
"syscall.forkExecPipe" "syscall.fcntl"
"syscall.forkExec" "syscall.forkExecPipe"
"syscall.releaseForkLock" "(*sync.RWMutex).Unlock"
"syscall.forkExec" "syscall.releaseForkLock"
"(*sync/atomic.Pointer[syscall.Rlimit]).Load[syscall.Rlimit]" "sync/atomic.LoadPointer"
"syscall.forkAndExecInChild" "(*sync/atomic.Pointer[syscall.Rlimit]).Load[syscall.Rlimit]"
"syscall.forkAndExecInChild" "syscall.runtime_BeforeFork"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "syscall.runtime_AfterFork"
"syscall.forkAndExecInChild" "syscall.runtime_AfterFork"
"syscall.ptrace" "internal/abi.FuncPCABI0"
"syscall.ptrace" "syscall.syscall6"
"syscall.ptrace" "syscall.errnoErr"
"syscall.forkAndExecInChild" "syscall.ptrace"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "syscall.runtime_AfterForkInChild"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkAndExecInChild" "internal/abi.FuncPCABI0"
"syscall.forkAndExecInChild" "syscall.rawSyscall"
"syscall.forkExec" "syscall.forkAndExecInChild"
"syscall.forkExec" "syscall.Close"
"syscall.forkExec" "syscall.Close"
"syscall.forkExec" "syscall.releaseForkLock"
"syscall.forkExec" "syscall.releaseForkLock"
"syscall.forkExec" "syscall.Close"
"syscall.readlen" "internal/abi.FuncPCABI0"
"syscall.readlen" "syscall.syscall"
"syscall.readlen" "syscall.errnoErr"
"syscall.forkExec" "syscall.readlen"
"syscall.forkExec" "syscall.Close"
"syscall.forkExec" "syscall.Wait4"
"syscall.forkExec" "syscall.Wait4"
"syscall.StartProcess" "syscall.forkExec"
"os.startProcess" "syscall.StartProcess"
"os.startProcess" "runtime.KeepAlive"
"os.newProcess" "runtime.SetFinalizer"
"os.startProcess" "os.newProcess"
"os.StartProcess" "os.startProcess"
"(*os/exec.Cmd).Start" "os.StartProcess"
"(*os/exec.Cmd).watchCtx" "os.Mkdir$1"
"(*os/exec.Cmd).watchCtx" "(*os.Process).Kill"
"(*os/exec.Cmd).watchCtx" "os.Remove$2"
"(*os/exec.Cmd).watchCtx" "errors.Is"
"(*os/exec.Cmd).watchCtx" "os.removeAllFrom$1"
"(*os/exec.Cmd).watchCtx" "(*context.cancelCtx).Done"
"(*os/exec.Cmd).watchCtx" "(context.emptyCtx).Done"
"(*os/exec.Cmd).watchCtx" "os.removeAllFrom$2"
"(*os/exec.Cmd).watchCtx" "(*os/exec.Cmd).writerDescriptor$1"
"(*os/exec.Cmd).watchCtx" "errors.Is"
"(*os/exec.Cmd).watchCtx" "(*internal/poll.FD).Fchown$1"
"(*os/exec.Cmd).watchCtx" "(*internal/poll.FD).Fstat$1"
"(*os/exec.Cmd).watchCtx" "(*internal/poll.FD).Fsync$1"
"(*os/exec.Cmd).watchCtx" "os.newFile$1"
"(*os/exec.Cmd).watchCtx" "golang.org/x/tools/go/packages.callDriverOnChunks$1"
"(*os/exec.Cmd).watchCtx" "os.chmod$1"
"(*os/exec.Cmd).watchCtx" "(*internal/poll.FD).Fchmod$1"
"(*os/exec.Cmd).watchCtx" "(*internal/poll.FD).Ftruncate$1"
"(*os/exec.Cmd).watchCtx" "os.lstatNolog$1"
"(*os/exec.Cmd).watchCtx" "os.statNolog$1"
"(*os/exec.Cmd).watchCtx" "os/exec.CommandContext$1"
"(*os/exec.Cmd).watchCtx" "(*os/exec.Cmd).childStdin$1"
"(*os/exec.Cmd).watchCtx" "os.Remove$1"
"(*os/exec.Cmd).watchCtx" "(context.emptyCtx).Err"
"(*os/exec.Cmd).watchCtx" "time.NewTimer"
"(*os/exec.Cmd).watchCtx" "os/exec.closeDescriptors"
"(*os/exec.Cmd).watchCtx" "os.removeAllFrom$3"
"(*os/exec.Cmd).watchCtx" "(*context.cancelCtx).Err"
"(*os/exec.Cmd).Start" "(*os/exec.Cmd).watchCtx"
"(*os/exec.Cmd).Start" "(context.emptyCtx).Done"
"(*os/exec.Cmd).Start" "(*context.cancelCtx).Done"
"(*os/exec.Cmd).Start" "(context.emptyCtx).Done"
"(*os/exec.Cmd).childStdin" "os.Open"
"(*os/exec.Cmd).childStdin" "os.Pipe"
"(*os/exec.Cmd).Start" "(*os/exec.Cmd).childStdin"
"(*os/exec.Cmd).environ" "internal/syscall/execenv.Default"
"os/exec.dedupEnvCase" "errors.New"
"os/exec.dedupEnvCase" "strings.Index"
"os/exec.dedupEnvCase" "strings.IndexByte"
"os/exec.dedupEnvCase" "strings.Index"
"strings.ToLower" "strings.Map"
"strings.ToLower" "(*strings.Builder).Grow"
"strings.ToLower" "(*strings.Builder).WriteString"
"strings.ToLower" "(*strings.Builder).WriteByte"
"strings.ToLower" "(*strings.Builder).WriteString"
"strings.ToLower" "(*strings.Builder).String"
"os/exec.dedupEnvCase" "strings.ToLower"
"os/exec.dedupEnv" "os/exec.dedupEnvCase"
"(*os/exec.Cmd).environ" "os/exec.dedupEnv"
"os.Environ" "syscall.Environ"
"(*os/exec.Cmd).environ" "os.Environ"
"(*os/exec.Cmd).environ" "path/filepath.Abs"
"os/exec.addCriticalEnv" "strings.Cut"
"os/exec.addCriticalEnv" "os.Getenv"
"os/exec.addCriticalEnv" "strings.EqualFold"
"(*os/exec.Cmd).environ" "os/exec.addCriticalEnv"
"(*os/exec.Cmd).Start" "(*os/exec.Cmd).environ"
"(*os/exec.Cmd).Start" "(context.emptyCtx).Err"
"(*os/exec.Cmd).childStdout" "(*os/exec.Cmd).writerDescriptor"
"(*os/exec.Cmd).Start" "(*os/exec.Cmd).childStdout"
"(*os/exec.Cmd).Start" "(*context.cancelCtx).Done"
"(*os/exec.Cmd).Start$2" "(*internal/poll.FD).Fchmod$1"
"(*os/exec.Cmd).Start$2" "(*internal/poll.FD).Ftruncate$1"
"(*os/exec.Cmd).Start$2" "os.lstatNolog$1"
"(*os/exec.Cmd).Start$2" "os.statNolog$1"
"(*os/exec.Cmd).Start$2" "os/exec.CommandContext$1"
"(*os/exec.Cmd).Start$2" "(*os/exec.Cmd).childStdin$1"
"(*os/exec.Cmd).Start$2" "(*internal/poll.FD).Fchown$1"
"(*os/exec.Cmd).Start$2" "(*internal/poll.FD).Fstat$1"
"(*os/exec.Cmd).Start$2" "(*internal/poll.FD).Fsync$1"
"(*os/exec.Cmd).Start$2" "os.newFile$1"
"(*os/exec.Cmd).Start$2" "golang.org/x/tools/go/packages.callDriverOnChunks$1"
"(*os/exec.Cmd).Start$2" "os.chmod$1"
"(*os/exec.Cmd).Start$2" "(*os/exec.Cmd).writerDescriptor$1"
"(*os/exec.Cmd).Start$2" "os.Mkdir$1"
"(*os/exec.Cmd).Start$2" "os.Remove$1"
"(*os/exec.Cmd).Start$2" "os.Remove$2"
"(*os/exec.Cmd).Start$2" "os.removeAllFrom$1"
"(*os/exec.Cmd).Start$2" "os.removeAllFrom$2"
"(*os/exec.Cmd).Start$2" "os.removeAllFrom$3"
"(*os/exec.Cmd).Start" "(*os/exec.Cmd).Start$2"
"(*os/exec.Cmd).Start" "(*context.cancelCtx).Err"
"(*os/exec.Cmd).Run" "(*os/exec.Cmd).Start"
"(*os/exec.Cmd).Run" "(*os/exec.Cmd).Wait"
"golang.org/x/tools/go/packages.findExternalDriver$1" "(*os/exec.Cmd).Run"
"golang.org/x/tools/go/packages.findExternalDriver$1" "fmt.Errorf"
"golang.org/x/tools/go/packages.findExternalDriver$1" "(*bytes.Buffer).Bytes"
"strings.SplitN" "strings.genSplit"
"golang.org/x/tools/go/packages.cmdDebugStr" "strings.SplitN"
"golang.org/x/tools/go/packages.cmdDebugStr" "strconv.Quote"
"golang.org/x/tools/go/packages.cmdDebugStr" "strings.Join"
"golang.org/x/tools/go/packages.cmdDebugStr" "fmt.Sprintf"
"golang.org/x/tools/go/packages.cmdDebugStr" "strings.Contains"
"golang.org/x/tools/go/packages.findExternalDriver$1" "golang.org/x/tools/go/packages.cmdDebugStr"
"golang.org/x/tools/go/packages.findExternalDriver$1" "fmt.Fprintf"
"golang.org/x/tools/go/packages.findExternalDriver$1" "(*bytes.Buffer).Bytes"
"golang.org/x/tools/go/packages.findExternalDriver$1" "encoding/json.Unmarshal"
"golang.org/x/tools/go/packages.findExternalDriver$1" "os.Getenv"
"golang.org/x/tools/go/packages.callDriverOnChunks$1" "golang.org/x/tools/go/packages.findExternalDriver$1"
"os.ignoringEINTR" "golang.org/x/tools/go/packages.callDriverOnChunks$1"
"os.ignoringEINTR" "os.chmod$1"
"os.ignoringEINTR" "os/exec.CommandContext$1"
"os.ignoringEINTR" "(*os/exec.Cmd).childStdin$1"
"os.ignoringEINTR" "(*os/exec.Cmd).writerDescriptor$1"
"os.ignoringEINTR" "os.Mkdir$1"
"os.ignoringEINTR" "os.Remove$1"
"os.ignoringEINTR" "os.Remove$2"
"os.ignoringEINTR" "os.removeAllFrom$1"
"os.ignoringEINTR" "os.removeAllFrom$2"
"os.ignoringEINTR" "os.removeAllFrom$3"
"os.statNolog" "os.ignoringEINTR"
"os.statNolog" "os.fillFileStatFromSys"
"os.Stat" "os.statNolog"
"os.openFileNolog" "os.Stat"
"os.openFileNolog" "os.IsNotExist"
"os.openFileNolog" "os.syscallMode"
"os.open" "syscall.Open"
"os.openFileNolog" "os.open"
"os.openFileNolog" "os.setStickyBit"
"os.openFileNolog" "syscall.CloseOnExec"
"os.openFileNolog" "internal/syscall/unix.HasNonblockFlag"
"os.openFileNolog" "os.newFile"
"os.OpenFile" "os.openFileNolog"
"os.Open" "os.OpenFile"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "os.Open"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "(*os.File).Close"
"bufio.NewReaderSize" "(*bufio.Reader).reset"
"bufio.NewReader" "bufio.NewReaderSize"
"golang.org/x/tools/go/gcexportdata.NewReader" "bufio.NewReader"
"(*bufio.Reader).ReadSlice" "bytes.IndexByte"
"(*bufio.Reader).ReadSlice" "(*bufio.Reader).readErr"
"(*bufio.Reader).ReadSlice" "(*bufio.Reader).Buffered"
"(*bufio.Reader).ReadSlice" "(*bufio.Reader).fill"
"golang.org/x/tools/internal/gcimporter.FindExportData" "(*bufio.Reader).ReadSlice"
"golang.org/x/tools/internal/gcimporter.FindExportData" "fmt.Errorf"
"golang.org/x/tools/internal/gcimporter.readGopackHeader" "io.ReadFull"
"golang.org/x/tools/internal/gcimporter.readGopackHeader" "fmt.Printf"
"golang.org/x/tools/internal/gcimporter.readGopackHeader" "strings.TrimSpace"
"golang.org/x/tools/internal/gcimporter.readGopackHeader" "strconv.Atoi"
"golang.org/x/tools/internal/gcimporter.readGopackHeader" "fmt.Errorf"
"golang.org/x/tools/internal/gcimporter.readGopackHeader" "strings.TrimSpace"
"golang.org/x/tools/internal/gcimporter.FindExportData" "golang.org/x/tools/internal/gcimporter.readGopackHeader"
"golang.org/x/tools/internal/gcimporter.FindExportData" "strings.HasPrefix"
"golang.org/x/tools/internal/gcimporter.FindExportData" "fmt.Errorf"
"golang.org/x/tools/internal/gcimporter.FindExportData" "(*bufio.Reader).ReadSlice"
"golang.org/x/tools/internal/gcimporter.FindExportData" "fmt.Errorf"
"golang.org/x/tools/internal/gcimporter.FindExportData" "fmt.Errorf"
"golang.org/x/tools/internal/gcimporter.FindExportData" "(*bufio.Reader).ReadSlice"
"golang.org/x/tools/internal/gcimporter.FindExportData" "fmt.Errorf"
"golang.org/x/tools/go/gcexportdata.NewReader" "golang.org/x/tools/internal/gcimporter.FindExportData"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "golang.org/x/tools/go/gcexportdata.NewReader"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData$1" "(*golang.org/x/tools/go/packages.loader).loadFromExportData$1"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "(*golang.org/x/tools/go/packages.loader).loadFromExportData$1"
"golang.org/x/tools/go/gcexportdata.readAll" "io.ReadFull"
"golang.org/x/tools/go/gcexportdata.readAll" "io.ReadAll"
"golang.org/x/tools/go/gcexportdata.Read" "golang.org/x/tools/go/gcexportdata.readAll"
"golang.org/x/tools/go/gcexportdata.Read" "fmt.Errorf"
"golang.org/x/tools/go/gcexportdata.Read" "bytes.HasPrefix"
"golang.org/x/tools/go/gcexportdata.Read" "fmt.Errorf"
"golang.org/x/tools/go/gcexportdata.Read" "fmt.Errorf"
"golang.org/x/tools/go/gcexportdata.Read" "fmt.Errorf"
"golang.org/x/tools/internal/gcimporter.IImportData" "golang.org/x/tools/internal/gcimporter.GetPackagesFromMap"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "bytes.NewReader"
"encoding/binary.ReadUvarint" "(*bytes.Buffer).ReadByte"
"encoding/binary.ReadUvarint" "(*bytes.Reader).ReadByte"
"encoding/binary.ReadUvarint" "(math/big.byteReader).ReadByte"
"encoding/binary.ReadUvarint" "(*strings.Reader).ReadByte"
"encoding/binary.ReadUvarint" "(*bufio.Reader).ReadByte"
"(*golang.org/x/tools/internal/gcimporter.intReader).uint64" "encoding/binary.ReadUvarint"
"golang.org/x/tools/internal/gcimporter.errorf" "fmt.Sprintf"
"(*golang.org/x/tools/internal/gcimporter.intReader).uint64" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"(*bytes.Reader).Seek" "errors.New"
"(*bytes.Reader).Seek" "errors.New"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*bytes.Reader).Seek"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*bytes.Reader).Seek"
"(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines" "(*sync.Once).Do"
"(*go/token.File).SetLines" "(*sync.Mutex).Lock"
"(*go/token.File).SetLines" "(*sync.Mutex).Unlock"
"(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines" "(*go/token.File).SetLines"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines"
"golang.org/x/tools/internal/gcimporter.predeclared" "(*sync.Once).Do"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/internal/gcimporter.predeclared"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.iimporter).stringAt" "encoding/binary.Uvarint"
"(*golang.org/x/tools/internal/gcimporter.iimporter).stringAt" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.iimporter).stringAt"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.iimporter).stringAt"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/internal/gcimporter.assert"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.iimporter).stringAt"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.operand).assignableTo$2"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "log.Printf"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/go/packages.newLoader$1"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.subster).typ$3"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.subster).typ$1"
"golang.org/x/tools/internal/gcimporter.GetPackagesFromMap$1" "go/types.NewPackage"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/internal/gcimporter.GetPackagesFromMap$1"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Package).Path"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Package).Path"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Package).Name"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Package).Name"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.iimporter).pkgAt" "(*golang.org/x/tools/internal/gcimporter.iimporter).stringAt"
"(*golang.org/x/tools/internal/gcimporter.iimporter).pkgAt" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.iimporter).pkgAt"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.iimporter).pkgAt"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Package).SetImports"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "sort.Sort"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Package).SetImports"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Package).Complete"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "sort.Strings"
"(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl" "(*golang.org/x/tools/internal/gcimporter.iimporter).trace"
"(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl" "(*go/types.Package).Scope"
"(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl" "(*go/types.Scope).Lookup"
"(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl" "(*bytes.Reader).Reset"
"(*golang.org/x/tools/internal/gcimporter.importReader).byte" "(*bytes.Reader).ReadByte"
"(*golang.org/x/tools/internal/gcimporter.importReader).byte" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).byte"
"(*golang.org/x/tools/internal/gcimporter.importReader).uint64" "encoding/binary.ReadUvarint"
"(*golang.org/x/tools/internal/gcimporter.importReader).uint64" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).posv2" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.iimporter).fileAt" "bytes.NewReader"
"(*golang.org/x/tools/internal/gcimporter.iimporter).decodeFile" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.iimporter).decodeFile" "(*golang.org/x/tools/internal/gcimporter.iimporter).stringAt"
"(*golang.org/x/tools/internal/gcimporter.iimporter).decodeFile" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.iimporter).decodeFile" "(*go/token.FileSet).AddFile"
"(*golang.org/x/tools/internal/gcimporter.iimporter).decodeFile" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.iimporter).decodeFile" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.iimporter).decodeFile" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.iimporter).decodeFile" "(*golang.org/x/tools/internal/gcimporter.intReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.iimporter).decodeFile" "(*go/token.File).SetLines"
"(*golang.org/x/tools/internal/gcimporter.iimporter).decodeFile" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.iimporter).fileAt" "(*golang.org/x/tools/internal/gcimporter.iimporter).decodeFile"
"(*golang.org/x/tools/internal/gcimporter.importReader).posv2" "(*golang.org/x/tools/internal/gcimporter.iimporter).fileAt"
"(*golang.org/x/tools/internal/gcimporter.importReader).posv2" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).posv2" "(*go/token.File).Pos"
"(*golang.org/x/tools/internal/gcimporter.importReader).pos" "(*golang.org/x/tools/internal/gcimporter.importReader).posv2"
"encoding/binary.ReadVarint" "encoding/binary.ReadUvarint"
"(*golang.org/x/tools/internal/gcimporter.importReader).int64" "encoding/binary.ReadVarint"
"(*golang.org/x/tools/internal/gcimporter.importReader).int64" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).posv1" "(*golang.org/x/tools/internal/gcimporter.importReader).int64"
"(*golang.org/x/tools/internal/gcimporter.importReader).posv1" "(*golang.org/x/tools/internal/gcimporter.importReader).int64"
"(*golang.org/x/tools/internal/gcimporter.importReader).string" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).string" "(*golang.org/x/tools/internal/gcimporter.iimporter).stringAt"
"(*golang.org/x/tools/internal/gcimporter.importReader).posv1" "(*golang.org/x/tools/internal/gcimporter.importReader).string"
"(*golang.org/x/tools/internal/gcimporter.importReader).pos" "(*golang.org/x/tools/internal/gcimporter.importReader).posv1"
"(*golang.org/x/tools/internal/gcimporter.importReader).posv0" "(*golang.org/x/tools/internal/gcimporter.importReader).int64"
"(*golang.org/x/tools/internal/gcimporter.importReader).posv0" "(*golang.org/x/tools/internal/gcimporter.importReader).int64"
"(*golang.org/x/tools/internal/gcimporter.importReader).posv0" "(*golang.org/x/tools/internal/gcimporter.importReader).string"
"(*golang.org/x/tools/internal/gcimporter.importReader).pos" "(*golang.org/x/tools/internal/gcimporter.importReader).posv0"
"(*golang.org/x/tools/internal/gcimporter.fakeFileSet).pos" "(*go/token.FileSet).AddFile"
"(*golang.org/x/tools/internal/gcimporter.fakeFileSet).pos" "(*go/token.File).Base"
"(*golang.org/x/tools/internal/gcimporter.importReader).pos" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).pos"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).pos"
"(*golang.org/x/tools/internal/gcimporter.importReader).typ" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"golang.org/x/tools/internal/gcimporter.canReuse" "golang.org/x/tools/internal/aliases.Unalias"
"golang.org/x/tools/internal/gcimporter.canReuse" "(*go/types.Interface).NumEmbeddeds"
"golang.org/x/tools/internal/gcimporter.canReuse" "(*go/types.Interface).NumExplicitMethods"
"(*golang.org/x/tools/internal/gcimporter.iimporter).typAt" "golang.org/x/tools/internal/gcimporter.canReuse"
"(*golang.org/x/tools/internal/gcimporter.iimporter).typAt" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.iimporter).typAt" "(*bytes.Reader).Reset"
"(*golang.org/x/tools/internal/gcimporter.importReader).kind" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).kind"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.iimporter).trace"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"(*golang.org/x/tools/internal/gcimporter.importReader).qualifiedIdent" "(*golang.org/x/tools/internal/gcimporter.importReader).string"
"(*golang.org/x/tools/internal/gcimporter.importReader).pkg" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).pkg" "(*golang.org/x/tools/internal/gcimporter.iimporter).pkgAt"
"(*golang.org/x/tools/internal/gcimporter.importReader).qualifiedIdent" "(*golang.org/x/tools/internal/gcimporter.importReader).pkg"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).qualifiedIdent"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*go/types.Package).Scope"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*go/types.Scope).Lookup"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*go/types.object).Type"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.NewPointer"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.NewSlice"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.NewArray"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"golang.org/x/tools/internal/gcimporter.chanDir" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "golang.org/x/tools/internal/gcimporter.chanDir"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.NewChan"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.NewMap"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).pkg"
"(*golang.org/x/tools/internal/gcimporter.importReader).paramList" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).param" "(*golang.org/x/tools/internal/gcimporter.importReader).pos"
"(*golang.org/x/tools/internal/gcimporter.importReader).ident" "(*golang.org/x/tools/internal/gcimporter.importReader).string"
"(*golang.org/x/tools/internal/gcimporter.importReader).param" "(*golang.org/x/tools/internal/gcimporter.importReader).ident"
"(*golang.org/x/tools/internal/gcimporter.importReader).param" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).param" "go/types.NewParam"
"(*golang.org/x/tools/internal/gcimporter.importReader).paramList" "(*golang.org/x/tools/internal/gcimporter.importReader).param"
"(*golang.org/x/tools/internal/gcimporter.importReader).paramList" "go/types.NewTuple"
"(*golang.org/x/tools/internal/gcimporter.importReader).signature" "(*golang.org/x/tools/internal/gcimporter.importReader).paramList"
"(*golang.org/x/tools/internal/gcimporter.importReader).signature" "(*golang.org/x/tools/internal/gcimporter.importReader).paramList"
"(*golang.org/x/tools/internal/gcimporter.importReader).signature" "(*go/types.Tuple).Len"
"(*golang.org/x/tools/internal/gcimporter.importReader).bool" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).signature" "(*golang.org/x/tools/internal/gcimporter.importReader).bool"
"(*golang.org/x/tools/internal/gcimporter.importReader).signature" "go/types.NewSignatureType"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).signature"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).pkg"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).pkg"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"go/types.NewStruct" "(*go/types.objset).insert"
"go/types.NewStruct" "(*go/types.Struct).markComplete"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.NewStruct"
"(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject" "(*golang.org/x/tools/internal/gcimporter.importReader).string"
"(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject" "(*golang.org/x/tools/internal/gcimporter.importReader).pkg"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "strings.IndexByte"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Package).Scope"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Scope).Lookup"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Package).Path"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Func).Pkg"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.object).Pkg"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Named).NumMethods"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Interface).NumMethods"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Interface).Method"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Named).Obj"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Interface).NumMethods"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Named).NumMethods"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Named).Method"
"strings.TrimLeft" "strings.trimLeftByte"
"strings.TrimLeft" "strings.makeASCIISet"
"strings.TrimLeft" "strings.trimLeftASCII"
"strings.TrimLeft" "strings.trimLeftUnicode"
"golang.org/x/tools/go/types/objectpath.Object" "strings.TrimLeft"
"golang.org/x/tools/go/types/objectpath.Object" "strconv.Atoi"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.object).Type"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Alias).Obj"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.TypeParam).Obj"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "golang.org/x/tools/internal/aliases.Unalias"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Chan).Elem"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Slice).Elem"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Array).Elem"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Pointer).Elem"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Map).Elem"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Map).Key"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Signature).Params"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Signature).Results"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Named).Underlying"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Signature).TypeParams"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Named).TypeParams"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.TypeParamList).Len"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.TypeParamList).At"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.TypeParam).Constraint"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Tuple).Len"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Tuple).At"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Struct).NumFields"
"golang.org/x/tools/go/types/objectpath.Object" "fmt.Errorf"
"golang.org/x/tools/go/types/objectpath.Object" "(*go/types.Struct).Field"
"(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject" "golang.org/x/tools/go/types/objectpath.Object"
"(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject" "log.Printf"
"(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject" "golang.org/x/tools/go/packages.newLoader$1"
"(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject" "(*go/types.subster).typ$3"
"(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject" "(*go/types.subster).typ$1"
"(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject" "(*go/types.operand).assignableTo$2"
"(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject" "(*go/types.operand).convertibleTo$1"
"(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject" "(*go/types.Checker).incomparableCause$1"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).pos"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).ident"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).bool"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).string"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.NewField"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).pos"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"golang.org/x/tools/internal/gcimporter.newInterface" "go/types.NewInterfaceType"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "golang.org/x/tools/internal/gcimporter.newInterface"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).objectPathObject"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).pos"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).ident"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.NewVar"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).signature"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.NewFunc"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).qualifiedIdent"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).pos"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"go/types.Instantiate" "go/types.NewContext"
"go/types.Instantiate" "(*go/types.Checker).instance"
"go/types.Instantiate" "(*go/types.Named).TypeParams"
"go/types.Instantiate" "(*go/types.TypeParamList).list"
"go/types.Instantiate" "(*go/types.Signature).TypeParams"
"go/types.Instantiate" "(*go/types.TypeParamList).list"
"go/types.Instantiate" "fmt.Errorf"
"go/types.Instantiate" "(*go/types.Checker).verify"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.Instantiate"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).bool"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.NewTerm"
"(*golang.org/x/tools/internal/gcimporter.importReader).doType" "go/types.NewUnion"
"(*golang.org/x/tools/internal/gcimporter.iimporter).typAt" "(*golang.org/x/tools/internal/gcimporter.importReader).doType"
"(*golang.org/x/tools/internal/gcimporter.iimporter).typAt" "golang.org/x/tools/internal/gcimporter.canReuse"
"(*golang.org/x/tools/internal/gcimporter.importReader).typ" "(*golang.org/x/tools/internal/gcimporter.iimporter).typAt"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"golang.org/x/tools/internal/aliases.enabled" "os.Getenv"
"golang.org/x/tools/internal/aliases.enabled" "strings.Split"
"golang.org/x/tools/internal/aliases.aliasesDefault" "(*sync.Once).Do"
"golang.org/x/tools/internal/aliases.enabled" "golang.org/x/tools/internal/aliases.aliasesDefault"
"golang.org/x/tools/internal/aliases.NewAlias" "golang.org/x/tools/internal/aliases.enabled"
"golang.org/x/tools/internal/aliases.NewAlias" "go/types.NewTypeName"
"go/types.NewAlias" "(*go/types.Checker).newAlias"
"go/types.NewAlias" "go/types.unalias"
"golang.org/x/tools/internal/aliases.newAlias" "go/types.NewAlias"
"golang.org/x/tools/internal/aliases.newAlias" "golang.org/x/tools/internal/aliases.Unalias"
"golang.org/x/tools/internal/aliases.NewAlias" "golang.org/x/tools/internal/aliases.newAlias"
"golang.org/x/tools/internal/aliases.NewAlias" "go/types.NewTypeName"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "golang.org/x/tools/internal/aliases.NewAlias"
"(*golang.org/x/tools/internal/gcimporter.importReader).declare" "(*go/types.Func).Pkg"
"(*golang.org/x/tools/internal/gcimporter.importReader).declare" "(*go/types.object).Pkg"
"(*golang.org/x/tools/internal/gcimporter.importReader).declare" "(*go/types.Package).Scope"
"(*golang.org/x/tools/internal/gcimporter.importReader).declare" "(*go/types.Scope).Insert"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).declare"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*golang.org/x/tools/internal/gcimporter.importReader).int64"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.TypeParam).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Tuple).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Basic).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Signature).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Named).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Union).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Interface).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Struct).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Pointer).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Array).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Alias).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Slice).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Map).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Chan).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(golang.org/x/tools/internal/gcimporter.anyType).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Basic).Info"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*golang.org/x/tools/internal/gcimporter.importReader).bool"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "go/constant.MakeBool"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*golang.org/x/tools/internal/gcimporter.importReader).string"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "go/constant.MakeString"
"golang.org/x/tools/internal/gcimporter.intSize" "(*go/types.Basic).Info"
"golang.org/x/tools/internal/gcimporter.intSize" "(*go/types.Basic).Kind"
"golang.org/x/tools/internal/gcimporter.intSize" "(*go/types.Basic).Info"
"golang.org/x/tools/internal/gcimporter.intSize" "(*go/types.Basic).Kind"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpint" "golang.org/x/tools/internal/gcimporter.intSize"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpint" "(*bytes.Reader).ReadByte"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpint" "(*math/big.Int).SetInt64"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpint" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpint" "io.ReadFull"
"(math/big.nat).setBytes" "(math/big.nat).make"
"math/big.bigEndianWord" "(encoding/binary.bigEndian).Uint64"
"math/big.bigEndianWord" "(encoding/binary.bigEndian).Uint32"
"(math/big.nat).setBytes" "math/big.bigEndianWord"
"(math/big.nat).setBytes" "(math/big.nat).norm"
"(*math/big.Int).SetBytes" "(math/big.nat).setBytes"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpint" "(*math/big.Int).SetBytes"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpint" "(*math/big.Int).Neg"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*golang.org/x/tools/internal/gcimporter.importReader).mpint"
"go/constant.Make" "go/constant.makeInt"
"go/constant.Make" "go/constant.makeRat"
"go/constant.Make" "go/constant.makeFloat"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "go/constant.Make"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpfloat" "(*golang.org/x/tools/internal/gcimporter.importReader).mpint"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpfloat" "(*math/big.Float).SetInt"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpfloat" "(*math/big.Float).Sign"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpfloat" "(*golang.org/x/tools/internal/gcimporter.importReader).int64"
"(*math/big.Float).SetMantExp" "(*math/big.Float).validate"
"(*math/big.Float).SetMantExp" "(*math/big.Float).validate"
"(*math/big.Float).SetMantExp" "(*math/big.Float).Copy"
"(*math/big.Float).SetMantExp" "(*math/big.Float).setExpAndRound"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpfloat" "(*math/big.Float).SetMantExp"
"(*golang.org/x/tools/internal/gcimporter.importReader).mpfloat" "go/constant.Make"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*golang.org/x/tools/internal/gcimporter.importReader).mpfloat"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*golang.org/x/tools/internal/gcimporter.importReader).mpfloat"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*golang.org/x/tools/internal/gcimporter.importReader).mpfloat"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "go/constant.MakeImag"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "go/constant.BinaryOp"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "(*go/types.Basic).Kind"
"(*golang.org/x/tools/internal/gcimporter.importReader).value" "go/constant.MakeUnknown"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).value"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "go/types.NewConst"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).declare"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "go/types.NewTypeName"
"go/types.NewNamed" "go/types.asNamed"
"go/types.NewNamed" "(*go/types.Checker).newNamed"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "go/types.NewNamed"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).declare"
"(*golang.org/x/tools/internal/gcimporter.importReader).tparamList" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).tparamList" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).tparamList" "golang.org/x/tools/internal/aliases.Unalias"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).tparamList"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).signature"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "go/types.NewFunc"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).declare"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).tparamList"
"(*go/types.Named).SetTypeParams" "go/types.assert"
"(*go/types.Named).SetTypeParams" "(*go/types.Named).resolve"
"(*go/types.Named).SetTypeParams" "go/types.bindTParams"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Named).SetTypeParams"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.iimporter).typAt"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.TypeParam).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Tuple).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Basic).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Signature).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Named).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Union).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Interface).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Struct).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Pointer).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Array).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Alias).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Slice).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Map).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Chan).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(golang.org/x/tools/internal/gcimporter.anyType).Underlying"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Named).SetUnderlying"
"golang.org/x/tools/internal/gcimporter.isInterface" "golang.org/x/tools/internal/aliases.Unalias"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "golang.org/x/tools/internal/gcimporter.isInterface"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).uint64"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).pos"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).ident"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).param"
"golang.org/x/tools/internal/typesinternal.ReceiverNamed" "(*go/types.object).Type"
"golang.org/x/tools/internal/typesinternal.ReceiverNamed" "golang.org/x/tools/internal/aliases.Unalias"
"golang.org/x/tools/internal/typesinternal.ReceiverNamed" "(*go/types.Pointer).Elem"
"golang.org/x/tools/internal/typesinternal.ReceiverNamed" "golang.org/x/tools/internal/aliases.Unalias"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "golang.org/x/tools/internal/typesinternal.ReceiverNamed"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Named).TypeArgs"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.TypeList).Len"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.TypeList).Len"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).signature"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "go/types.NewFunc"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Named).AddMethod"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.TypeList).At"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "golang.org/x/tools/internal/aliases.Unalias"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "go/types.NewVar"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).declare"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.tparamName" "strings.LastIndex"
"golang.org/x/tools/internal/gcimporter.tparamName" "golang.org/x/tools/internal/gcimporter.errorf"
"golang.org/x/tools/internal/gcimporter.tparamName" "strings.HasPrefix"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "golang.org/x/tools/internal/gcimporter.tparamName"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "go/types.NewTypeName"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "go/types.NewTypeParam"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).bool"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*golang.org/x/tools/internal/gcimporter.importReader).typ"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "golang.org/x/tools/internal/aliases.Unalias"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.importReader).obj" "(*go/types.Interface).MarkImplicit"
"(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl" "(*golang.org/x/tools/internal/gcimporter.importReader).obj"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Package).MarkComplete"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.TypeParam).SetConstraint"
"(*go/types.Interface).Complete" "(*go/types.Interface).typeSet"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Interface).Complete"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.TypeParam).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Tuple).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Basic).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Signature).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Named).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Union).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Interface).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Struct).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Pointer).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Array).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Alias).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Slice).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Map).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Chan).Underlying"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Interface).Complete"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.operand).convertibleTo$1"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(*go/types.Checker).incomparableCause$1"
"golang.org/x/tools/internal/gcimporter.iimportCommon" "(golang.org/x/tools/internal/gcimporter.anyType).Underlying"
"golang.org/x/tools/internal/gcimporter.IImportData" "golang.org/x/tools/internal/gcimporter.iimportCommon"
"golang.org/x/tools/go/gcexportdata.Read" "golang.org/x/tools/internal/gcimporter.IImportData"
"golang.org/x/tools/internal/gcimporter.UImportData" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"golang.org/x/tools/internal/gcimporter.UImportData" "strings.LastIndex"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "strings.NewReader"
"encoding/binary.Read" "encoding/binary.intDataSize"
"encoding/binary.Read" "io.ReadFull"
"encoding/binary.Read" "reflect.ValueOf"
"encoding/binary.Read" "(reflect.Value).Kind"
"(*encoding/binary.decoder).value" "(reflect.Value).Kind"
"(*encoding/binary.decoder).value" "(reflect.Value).Len"
"(*encoding/binary.decoder).value" "(reflect.Value).Type"
"(*encoding/binary.decoder).value" "(reflect.Value).NumField"
"(*encoding/binary.decoder).value" "(reflect.Value).Index"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).value"
"(*encoding/binary.decoder).value" "(reflect.Value).Len"
"(*encoding/binary.decoder).value" "(reflect.Value).Field"
"(*encoding/binary.decoder).value" "(reflect.Value).CanSet"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).value"
"encoding/binary.dataSize" "(reflect.Value).Kind"
"encoding/binary.dataSize" "(reflect.Value).Type"
"encoding/binary.dataSize" "(*reflect.rtype).Elem"
"encoding/binary.sizeof" "(*reflect.rtype).Kind"
"encoding/binary.sizeof" "(*reflect.rtype).Elem"
"encoding/binary.sizeof" "encoding/binary.sizeof"
"encoding/binary.sizeof" "(*reflect.rtype).NumField"
"(*reflect.rtype).Len" "(*reflect.rtype).Kind"
"(*reflect.rtype).Len" "(*reflect.rtype).String"
"encoding/binary.sizeof" "(*reflect.rtype).Len"
"(*reflect.rtype).Size" "(*internal/abi.Type).Size"
"encoding/binary.sizeof" "(*reflect.rtype).Size"
"encoding/binary.sizeof" "(*reflect.rtype).Field"
"encoding/binary.sizeof" "encoding/binary.sizeof"
"encoding/binary.dataSize" "encoding/binary.sizeof"
"encoding/binary.dataSize" "(reflect.Value).Type"
"encoding/binary.dataSize" "(*sync.Map).Load"
"encoding/binary.dataSize" "(reflect.Value).Len"
"encoding/binary.dataSize" "(reflect.Value).IsValid"
"encoding/binary.dataSize" "encoding/binary.sizeof"
"encoding/binary.dataSize" "(*sync.Map).Store"
"encoding/binary.dataSize" "(reflect.Value).Type"
"encoding/binary.dataSize" "encoding/binary.sizeof"
"(*encoding/binary.decoder).skip" "encoding/binary.dataSize"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).skip"
"(*encoding/binary.decoder).value" "(*reflect.rtype).Field"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).bool"
"(*encoding/binary.decoder).value" "(reflect.Value).SetBool"
"(*encoding/binary.decoder).value" "(reflect.Value).Index"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).value"
"(*encoding/binary.decoder).int8" "(*encoding/binary.decoder).uint8"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).int8"
"(*encoding/binary.decoder).value" "(reflect.Value).SetInt"
"(*encoding/binary.decoder).uint16" "(encoding/binary.littleEndian).Uint16"
"(*encoding/binary.decoder).int16" "(*encoding/binary.decoder).uint16"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).int16"
"(*encoding/binary.decoder).value" "(reflect.Value).SetInt"
"(*encoding/binary.decoder).uint32" "(encoding/binary.littleEndian).Uint32"
"(*encoding/binary.decoder).int32" "(*encoding/binary.decoder).uint32"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).int32"
"(*encoding/binary.decoder).value" "(reflect.Value).SetInt"
"(*encoding/binary.decoder).uint64" "(encoding/binary.littleEndian).Uint64"
"(*encoding/binary.decoder).int64" "(*encoding/binary.decoder).uint64"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).int64"
"(*encoding/binary.decoder).value" "(reflect.Value).SetInt"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).uint8"
"(*encoding/binary.decoder).value" "(reflect.Value).SetUint"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).uint16"
"(*encoding/binary.decoder).value" "(reflect.Value).SetUint"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).uint32"
"(*encoding/binary.decoder).value" "(reflect.Value).SetUint"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).uint64"
"(*encoding/binary.decoder).value" "(reflect.Value).SetUint"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).uint32"
"(*encoding/binary.decoder).value" "math.Float32frombits"
"(*encoding/binary.decoder).value" "(reflect.Value).SetFloat"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).uint64"
"(*encoding/binary.decoder).value" "math.Float64frombits"
"(*encoding/binary.decoder).value" "(reflect.Value).SetFloat"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).uint32"
"(*encoding/binary.decoder).value" "math.Float32frombits"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).uint32"
"(*encoding/binary.decoder).value" "math.Float32frombits"
"(*encoding/binary.decoder).value" "(reflect.Value).SetComplex"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).uint64"
"(*encoding/binary.decoder).value" "math.Float64frombits"
"(*encoding/binary.decoder).value" "(*encoding/binary.decoder).uint64"
"(*encoding/binary.decoder).value" "math.Float64frombits"
"(*encoding/binary.decoder).value" "(reflect.Value).SetComplex"
"encoding/binary.Read" "(*encoding/binary.decoder).value"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint16"
"encoding/binary.Read" "io.ReadFull"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint16"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint64"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint32"
"encoding/binary.Read" "math.Float32frombits"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint32"
"encoding/binary.Read" "reflect.TypeOf"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint64"
"encoding/binary.Read" "encoding/binary.dataSize"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint64"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint32"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint32"
"encoding/binary.Read" "math.Float32frombits"
"encoding/binary.Read" "encoding/binary.dataSize"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint64"
"encoding/binary.Read" "math.Float64frombits"
"encoding/binary.Read" "errors.New"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint16"
"encoding/binary.Read" "(*reflect.rtype).String"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint16"
"encoding/binary.Read" "math.Float64frombits"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint32"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint64"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint32"
"encoding/binary.Read" "(reflect.Value).Elem"
"encoding/binary.Read" "(encoding/binary.littleEndian).Uint64"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "encoding/binary.Read"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "golang.org/x/tools/internal/pkgbits.assert"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "encoding/binary.Read"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "golang.org/x/tools/internal/pkgbits.assert"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "encoding/binary.Read"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "golang.org/x/tools/internal/pkgbits.assert"
"(*strings.Reader).Seek" "errors.New"
"(*strings.Reader).Seek" "errors.New"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "(*strings.Reader).Seek"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "golang.org/x/tools/internal/pkgbits.assert"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "golang.org/x/tools/internal/pkgbits.assert"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "encoding/binary.Read"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "golang.org/x/tools/internal/pkgbits.assert"
"golang.org/x/tools/internal/pkgbits.NewPkgDecoder" "fmt.Errorf"
"golang.org/x/tools/internal/gcimporter.UImportData" "golang.org/x/tools/internal/pkgbits.NewPkgDecoder"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NumElems"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NumElems"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NumElems"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines"
"golang.org/x/tools/internal/pkgbits.errorf" "fmt.Errorf"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).AbsIdx" "golang.org/x/tools/internal/pkgbits.errorf"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).DataIdx" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).AbsIdx"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NewDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).DataIdx"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NewDecoderRaw" "strings.NewReader"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "(*strings.Reader).Seek"
"golang.org/x/tools/internal/pkgbits.readUvarint" "(*strings.Reader).ReadByte"
"(*golang.org/x/tools/internal/pkgbits.Decoder).rawUvarint" "golang.org/x/tools/internal/pkgbits.readUvarint"
"(*golang.org/x/tools/internal/pkgbits.Decoder).checkErr" "golang.org/x/tools/internal/pkgbits.errorf"
"(*golang.org/x/tools/internal/pkgbits.Decoder).rawUvarint" "(*golang.org/x/tools/internal/pkgbits.Decoder).checkErr"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "(*golang.org/x/tools/internal/pkgbits.Decoder).rawUvarint"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "(*golang.org/x/tools/internal/pkgbits.Decoder).rawUvarint"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "(*golang.org/x/tools/internal/pkgbits.Decoder).rawUvarint"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "fmt.Printf"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "fmt.Printf"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "fmt.Printf"
"(*golang.org/x/tools/internal/pkgbits.Decoder).rawReloc" "golang.org/x/tools/internal/pkgbits.assert"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "(*golang.org/x/tools/internal/pkgbits.Decoder).rawReloc"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).StringIdx" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).DataIdx"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).StringIdx"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "fmt.Printf"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "fmt.Printf"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "runtime.Callers"
"golang.org/x/tools/internal/pkgbits.walkFrames" "runtime.CallersFrames"
"golang.org/x/tools/internal/pkgbits.walkFrames" "(*runtime.Frames).Next"
"strings.TrimPrefix" "strings.HasPrefix"
"golang.org/x/tools/internal/pkgbits.fmtFrames$1" "strings.TrimPrefix"
"golang.org/x/tools/internal/pkgbits.fmtFrames$1" "fmt.Sprintf"
"golang.org/x/tools/internal/pkgbits.walkFrames" "golang.org/x/tools/internal/pkgbits.fmtFrames$1"
"golang.org/x/tools/internal/pkgbits.fmtFrames" "golang.org/x/tools/internal/pkgbits.walkFrames"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "golang.org/x/tools/internal/pkgbits.fmtFrames"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "fmt.Printf"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Sync" "os.Exit"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NewDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Uint64" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Uint64" "(*golang.org/x/tools/internal/pkgbits.Decoder).rawUvarint"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Len" "(*golang.org/x/tools/internal/pkgbits.Decoder).Uint64"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Len" "golang.org/x/tools/internal/pkgbits.assert"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NewDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NewDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NewDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NewDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NewDecoder" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NewDecoderRaw"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NewDecoder" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).newReader" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).NewDecoder"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gcimporter.pkgReader).newReader"
"(*golang.org/x/tools/internal/gcimporter.reader).pkg" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Reloc" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Reloc" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Reloc" "(*golang.org/x/tools/internal/pkgbits.Decoder).rawReloc"
"(*golang.org/x/tools/internal/gcimporter.reader).pkg" "(*golang.org/x/tools/internal/pkgbits.Decoder).Reloc"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).pkgIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).newReader"
"(*golang.org/x/tools/internal/pkgbits.Decoder).String" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.Decoder).String" "(*golang.org/x/tools/internal/pkgbits.Decoder).Reloc"
"(*golang.org/x/tools/internal/pkgbits.Decoder).String" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).StringIdx"
"(*golang.org/x/tools/internal/gcimporter.reader).doPkg" "(*golang.org/x/tools/internal/pkgbits.Decoder).String"
"(*golang.org/x/tools/internal/gcimporter.reader).doPkg" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).PkgPath"
"(*golang.org/x/tools/internal/gcimporter.reader).doPkg" "(*golang.org/x/tools/internal/pkgbits.Decoder).String"
"(*golang.org/x/tools/internal/gcimporter.reader).doPkg" "go/types.NewPackage"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).pkgIdx" "(*golang.org/x/tools/internal/gcimporter.reader).doPkg"
"(*golang.org/x/tools/internal/gcimporter.reader).pkg" "(*golang.org/x/tools/internal/gcimporter.pkgReader).pkgIdx"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gcimporter.reader).pkg"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Bool" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Bool" "(*strings.Reader).ReadByte"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Bool" "(*golang.org/x/tools/internal/pkgbits.Decoder).checkErr"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Bool" "golang.org/x/tools/internal/pkgbits.assert"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/gcimporter.assert"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/pkgbits.Decoder).Reloc"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).TempDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).DataIdx"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).TempDecoderRaw" "(*strings.Reader).Reset"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).TempDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).TempDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).TempDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).TempDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).TempDecoderRaw" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).TempDecoder" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).TempDecoderRaw"
"(*golang.org/x/tools/internal/pkgbits.PkgDecoder).TempDecoder" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).tempReader" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).TempDecoder"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).tempReader"
"(*golang.org/x/tools/internal/gcimporter.reader).ident" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/gcimporter.reader).ident" "(*golang.org/x/tools/internal/gcimporter.reader).pkg"
"(*golang.org/x/tools/internal/gcimporter.reader).ident" "(*golang.org/x/tools/internal/pkgbits.Decoder).String"
"(*golang.org/x/tools/internal/gcimporter.reader).qualifiedIdent" "(*golang.org/x/tools/internal/gcimporter.reader).ident"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).qualifiedIdent"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "golang.org/x/tools/internal/gcimporter.assert"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Code" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Code" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).Code"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).retireReader" "(*golang.org/x/tools/internal/pkgbits.PkgDecoder).RetireDecoder"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).retireReader"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "golang.org/x/tools/internal/gcimporter.splitVargenSuffix"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "golang.org/x/tools/internal/gcimporter.assert"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Package).Scope"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Scope).Lookup"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objDictIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).tempReader"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objDictIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objDictIdx" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objDictIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.reader).typInfo" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/gcimporter.reader).typInfo" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/gcimporter.reader).typInfo" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.reader).typInfo" "(*golang.org/x/tools/internal/pkgbits.Decoder).Reloc"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objDictIdx" "(*golang.org/x/tools/internal/gcimporter.reader).typInfo"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objDictIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objDictIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).Reloc"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objDictIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objDictIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).retireReader"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objDictIdx"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).newReader"
"(*golang.org/x/tools/internal/gcimporter.reader).pos" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/gcimporter.reader).pos" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/gcimporter.reader).posBase" "(*golang.org/x/tools/internal/pkgbits.Decoder).Reloc"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).posBaseIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).tempReader"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).posBaseIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).String"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).posBaseIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).posBaseIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).retireReader"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).posBaseIdx" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Uint" "(*golang.org/x/tools/internal/pkgbits.Decoder).Uint64"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Uint" "golang.org/x/tools/internal/pkgbits.assert"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).posBaseIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).Uint"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).posBaseIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).Uint"
"(*golang.org/x/tools/internal/gcimporter.reader).posBase" "(*golang.org/x/tools/internal/gcimporter.pkgReader).posBaseIdx"
"(*golang.org/x/tools/internal/gcimporter.reader).pos" "(*golang.org/x/tools/internal/gcimporter.reader).posBase"
"(*golang.org/x/tools/internal/gcimporter.reader).pos" "(*golang.org/x/tools/internal/pkgbits.Decoder).Uint"
"(*golang.org/x/tools/internal/gcimporter.reader).pos" "(*golang.org/x/tools/internal/pkgbits.Decoder).Uint"
"(*golang.org/x/tools/internal/gcimporter.reader).pos" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).pos"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/gcimporter.reader).typ" "(*golang.org/x/tools/internal/gcimporter.reader).typInfo"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).typIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).tempReader"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/pkgbits.Decoder).Code"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.reader).obj" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/gcimporter.reader).obj" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/gcimporter.reader).obj" "golang.org/x/tools/internal/gcimporter.assert"
"(*golang.org/x/tools/internal/gcimporter.reader).obj" "(*golang.org/x/tools/internal/pkgbits.Decoder).Reloc"
"(*golang.org/x/tools/internal/gcimporter.reader).obj" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx"
"golang.org/x/tools/internal/gcimporter.pkgScope" "(*go/types.Package).Scope"
"(*golang.org/x/tools/internal/gcimporter.reader).obj" "golang.org/x/tools/internal/gcimporter.pkgScope"
"(*golang.org/x/tools/internal/gcimporter.reader).obj" "(*go/types.Scope).Lookup"
"(*golang.org/x/tools/internal/gcimporter.reader).obj" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.reader).obj" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/gcimporter.reader).obj"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*go/types.object).Type"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "go/types.Instantiate"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*go/types.object).Type"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/pkgbits.Decoder).Uint64"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "go/types.NewArray"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "go/types.NewChan"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "go/types.NewMap"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "go/types.NewPointer"
"(*golang.org/x/tools/internal/gcimporter.reader).signature" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/gcimporter.reader).params" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/gcimporter.reader).params" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.reader).param" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/gcimporter.reader).param" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/gcimporter.reader).localIdent" "(*golang.org/x/tools/internal/gcimporter.reader).ident"
"(*golang.org/x/tools/internal/gcimporter.reader).param" "(*golang.org/x/tools/internal/gcimporter.reader).localIdent"
"(*golang.org/x/tools/internal/gcimporter.reader).param" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.reader).param" "go/types.NewParam"
"(*golang.org/x/tools/internal/gcimporter.reader).params" "(*golang.org/x/tools/internal/gcimporter.reader).param"
"(*golang.org/x/tools/internal/gcimporter.reader).params" "go/types.NewTuple"
"(*golang.org/x/tools/internal/gcimporter.reader).signature" "(*golang.org/x/tools/internal/gcimporter.reader).params"
"(*golang.org/x/tools/internal/gcimporter.reader).signature" "(*golang.org/x/tools/internal/gcimporter.reader).params"
"(*golang.org/x/tools/internal/gcimporter.reader).signature" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/gcimporter.reader).signature" "go/types.NewSignatureType"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/gcimporter.reader).signature"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "go/types.NewSlice"
"(*golang.org/x/tools/internal/gcimporter.reader).structType" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.reader).structType" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/gcimporter.reader).selector" "(*golang.org/x/tools/internal/gcimporter.reader).ident"
"(*golang.org/x/tools/internal/gcimporter.reader).structType" "(*golang.org/x/tools/internal/gcimporter.reader).selector"
"(*golang.org/x/tools/internal/gcimporter.reader).structType" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.reader).structType" "(*golang.org/x/tools/internal/pkgbits.Decoder).String"
"(*golang.org/x/tools/internal/gcimporter.reader).structType" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/gcimporter.reader).structType" "go/types.NewField"
"(*golang.org/x/tools/internal/gcimporter.reader).structType" "go/types.NewStruct"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/gcimporter.reader).structType"
"(*golang.org/x/tools/internal/gcimporter.reader).interfaceType" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.reader).interfaceType" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.reader).interfaceType" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/gcimporter.reader).interfaceType" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/gcimporter.reader).interfaceType" "(*golang.org/x/tools/internal/gcimporter.reader).selector"
"(*golang.org/x/tools/internal/gcimporter.reader).interfaceType" "(*golang.org/x/tools/internal/gcimporter.reader).signature"
"(*golang.org/x/tools/internal/gcimporter.reader).interfaceType" "go/types.NewFunc"
"(*golang.org/x/tools/internal/gcimporter.reader).interfaceType" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.reader).interfaceType" "go/types.NewInterfaceType"
"(*golang.org/x/tools/internal/gcimporter.reader).interfaceType" "(*go/types.Interface).MarkImplicit"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/gcimporter.reader).interfaceType"
"(*golang.org/x/tools/internal/gcimporter.reader).unionType" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.reader).unionType" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/gcimporter.reader).unionType" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.reader).unionType" "go/types.NewTerm"
"(*golang.org/x/tools/internal/gcimporter.reader).unionType" "go/types.NewUnion"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "(*golang.org/x/tools/internal/gcimporter.reader).unionType"
"(*golang.org/x/tools/internal/gcimporter.reader).doTyp" "golang.org/x/tools/internal/gcimporter.errorf"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).typIdx" "(*golang.org/x/tools/internal/gcimporter.reader).doTyp"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).typIdx" "golang.org/x/tools/internal/gcimporter.assert"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).typIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).retireReader"
"(*golang.org/x/tools/internal/gcimporter.reader).typ" "(*golang.org/x/tools/internal/gcimporter.pkgReader).typIdx"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "golang.org/x/tools/internal/aliases.NewAlias"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$1" "(*go/types.Package).Scope"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$1" "(*go/types.Scope).Insert"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Value" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Value" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "(*golang.org/x/tools/internal/pkgbits.Decoder).Code"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "go/constant.MakeBool"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "(*golang.org/x/tools/internal/pkgbits.Decoder).String"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "go/constant.MakeString"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Int64" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/pkgbits.Decoder).rawVarint" "(*golang.org/x/tools/internal/pkgbits.Decoder).rawUvarint"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Int64" "(*golang.org/x/tools/internal/pkgbits.Decoder).rawVarint"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "(*golang.org/x/tools/internal/pkgbits.Decoder).Int64"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "go/constant.MakeInt64"
"(*golang.org/x/tools/internal/pkgbits.Decoder).bigInt" "(*golang.org/x/tools/internal/pkgbits.Decoder).String"
"(*golang.org/x/tools/internal/pkgbits.Decoder).bigInt" "(*math/big.Int).SetBytes"
"(*golang.org/x/tools/internal/pkgbits.Decoder).bigInt" "(*golang.org/x/tools/internal/pkgbits.Decoder).Bool"
"(*golang.org/x/tools/internal/pkgbits.Decoder).bigInt" "(*math/big.Int).Neg"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "(*golang.org/x/tools/internal/pkgbits.Decoder).bigInt"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "go/constant.Make"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "(*golang.org/x/tools/internal/pkgbits.Decoder).bigInt"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "(*golang.org/x/tools/internal/pkgbits.Decoder).bigInt"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "(*math/big.Rat).SetFrac"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "go/constant.Make"
"(*golang.org/x/tools/internal/pkgbits.Decoder).bigFloat" "(*math/big.Float).SetPrec"
"(*golang.org/x/tools/internal/pkgbits.Decoder).bigFloat" "(*golang.org/x/tools/internal/pkgbits.Decoder).String"
"(*golang.org/x/tools/internal/pkgbits.Decoder).bigFloat" "(*math/big.Float).UnmarshalText"
"(*golang.org/x/tools/internal/pkgbits.Decoder).bigFloat" "golang.org/x/tools/internal/pkgbits.assert"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "(*golang.org/x/tools/internal/pkgbits.Decoder).bigFloat"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "go/constant.Make"
"(*golang.org/x/tools/internal/pkgbits.Decoder).scalar" "fmt.Errorf"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Value" "(*golang.org/x/tools/internal/pkgbits.Decoder).scalar"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Value" "(*golang.org/x/tools/internal/pkgbits.Decoder).scalar"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Value" "go/constant.MakeImag"
"(*golang.org/x/tools/internal/pkgbits.Decoder).Value" "go/constant.BinaryOp"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).Value"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "go/types.NewConst"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames" "(*golang.org/x/tools/internal/gcimporter.reader).localIdent"
"(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames" "go/types.NewTypeName"
"(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames" "go/types.NewTypeParam"
"(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames" "(*golang.org/x/tools/internal/gcimporter.pkgReader).typIdx"
"(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames" "(*golang.org/x/tools/internal/gcimporter.pkgReader).later"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).signature"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "go/types.NewFunc"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "go/types.NewTypeName"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "go/types.NewNamed"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Named).SetTypeParams"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.TypeParam).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Tuple).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Basic).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Signature).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Named).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Union).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Interface).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Struct).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Pointer).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Array).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Alias).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Slice).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Map).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Chan).Underlying"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).typ"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "go/types.NewVar"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$1"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.monoGraph).assign$2"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.pkgReader).laterFor"
"(*golang.org/x/tools/internal/gcimporter.reader).method" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"(*golang.org/x/tools/internal/gcimporter.reader).method" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/gcimporter.reader).method" "(*golang.org/x/tools/internal/gcimporter.reader).selector"
"(*golang.org/x/tools/internal/gcimporter.reader).method" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames"
"(*golang.org/x/tools/internal/gcimporter.reader).method" "(*golang.org/x/tools/internal/gcimporter.reader).param"
"(*golang.org/x/tools/internal/gcimporter.reader).method" "(*golang.org/x/tools/internal/gcimporter.reader).signature"
"(*golang.org/x/tools/internal/gcimporter.reader).method" "(*golang.org/x/tools/internal/gcimporter.reader).pos"
"(*golang.org/x/tools/internal/gcimporter.reader).method" "go/types.NewFunc"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*golang.org/x/tools/internal/gcimporter.reader).method"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(*go/types.Named).AddMethod"
"(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx" "(golang.org/x/tools/internal/gcimporter.anyType).Underlying"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/pkgbits.Decoder).Len"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/gcimporter.assert"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/pkgbits.Decoder).Sync"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "flag.commandLineUsage"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "context.WithCancel$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcMarkTermination$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime._VDSO"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_stat_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.persistentalloc$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.gcSizes).Alignof$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_create_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.fatal$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.exitsyscallfast_reacquired$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.init$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(log/slog.Value).Resolve$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "go/types.resolve$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "go/types.computeInterfaceTypeSet$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.throw$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.wirep$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.mlock_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*os/exec.Cmd).awaitGoroutines$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_recvfrom_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.doRecordGoroutineProfile$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.cgoCheckPtrWrite$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.getempty$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcStart$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.freemcache$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_kill_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_cond_signal_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "regexp.mergeRuneSets$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_attr_getstacksize_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_recvmsg_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*log/slog.handleState).appendValue$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_mutex_init_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_mutex_lock_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.printArgs$3"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*internal/godebug.Setting).register"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcMarkDone$3"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.mmap_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.walltime_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).instantiatedType$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*runtime.traceStringTable).put$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.traceThreadDestroy$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_close_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).typInternal$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcMarkTermination$5"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_sendmsg_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.callers$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_fchdir_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.casgstatus$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.write_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_cond_init_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.raise_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).instantiatedType$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.StdSizes).Alignof$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_fcntl_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_accept_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcBgMarkWorker$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*runtime.traceMap).put$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.sigaction_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_chmod_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.chansend$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "go/types.computeInterfaceTypeSet$2$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/event/core.ExportPair$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*internal/lazyregexp.Regexp).build"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*runtime.rwmutex).rlock$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.markrootFreeGStacks"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.mstart_stub"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.wirep$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "flag.init$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_mmap_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_fchmod_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).validVarType$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "reflect.methodValueCall"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcStart$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*context.cancelCtx).propagateCancel$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.allocmcache$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.sigtramp"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_attr_init_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.chanrecv$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_lseek_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_fdopendir_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.mspinning"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcMarkDone$4"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(runtime.traceWriter).refill$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*runtime.mspan).setUserArenaChunkToFault$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "internal/poll.runtime_pollServerInit"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_pwrite_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_getrlimit_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_execve_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcResetMarkState"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.subster).typ$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.startTheWorld$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).genericExprList$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/event/core.ExportPair$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*log/slog.Level).parse$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).funcDecl$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "reflect.embeddedIfaceMethStub"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcAssistAlloc$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.unreachableMethod"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.raiseproc_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_open_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.sweepone$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "flag.isZeroValue$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.entersyscallblock_handoff"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_getsockopt_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.tracefree$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.mstart"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime._ExternalCode"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*flag.FlagSet).defaultUsage"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_dup_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.cgoSigtramp"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_ftruncate_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_fchown_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.nanotime_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcMarkDone$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_pread_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).collectMethods$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.entersyscall_gcwait"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.markroot$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*context.cancelCtx).propagateCancel$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "regexp/syntax.parse$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/sync/errgroup.Group).Go$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.typeWriter).signature$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.wbBufFlush$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.fatalthrow$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.entersyscallblock$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.kevent_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_fstat_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_closedir_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.cgoCheckTypedBlock$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.exitsyscall$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).typInternal$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).structType$3"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "go/build/constraint.parseExpr$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "time.FixedZone$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.goready$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Named).expandUnderlying$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.osyield"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).infer$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.allocm$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/parser.parser).parseParameterList$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_dup2_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_sendto_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "go/types.parseUnion$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*runtime.pageAlloc).scavenge$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.malg$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).typeDecl$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_mutex_unlock_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.stopTheWorld$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*runtime.mheap).alloc$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_read_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.tracealloc$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "sync.poolCleanup"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime._LostContendedRuntimeLock"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*encoding/json.encodeState).marshal$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcControllerCommit"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*runtime.p).destroy$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.entersyscall_sysmon"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.sigprocmask_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_shutdown_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_munmap_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_readdir_r_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.read_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.SetFinalizer$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).collectTypeParams$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_setrlimit_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).objDecl$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/parser.parser).parseBinaryExpr$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_pipe_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*runtime.mLockProfile).captureStack$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.reentersyscall$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.usleep_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.runSafePointFn"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_wait4_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).rawExpr$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcMarkTermination$3"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.asyncPreempt2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_lstat_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_cond_wait_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.entersyscallblock$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_openat_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.exitsyscallfast$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).interfaceType$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.exit_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*runtime.mheap).freeSpan$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_mkdir_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "time.initLocal"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcStart$3"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*os/exec.Cmd).Start$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcMarkTermination$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*fmt.ss).Token$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_setsockopt_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_write_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*runtime.sweepLocked).sweep$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.SetFinalizer$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*runtime.sweepLocked).sweep$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.sigpanic"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).instantiateSignature$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.asyncPreempt"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.exitsyscall$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).exprInternal$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_attr_setdetachstate_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*internal/godebug.Setting).Value$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.heapSetType$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/go/packages.goListDriver$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "go/parser.ParseFile$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.gcMarkTermination$4$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).objDecl$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime._System"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/parser.parser).parsePrimaryExpr$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*internal/godebug.Setting).IncNonDefault"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.mProf_Malloc$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime._GC"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.freeSomeWbufs$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).validCycle$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.forEachP$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pthread_kill_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.copyenv"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/go/packages.goListDriver$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.Stack$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.reentersyscall$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).infer$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).instantiateSignature$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_getcwd_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_sysctl_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Checker).funcType$2"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.freeStackSpans"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Interface).Complete"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "sort.Sort"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Package).SetImports"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.Package).MarkComplete"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "go/types.hasVarSize$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.tpWalker).isParameterized$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.kqueue_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime._LostExternalCode"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime._LostSIGPROFDuringAtomic64"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_fork_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_setsid_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_setpgid_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_getpid_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_ioctl_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_chroot_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_setgroups_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_setgid_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_setuid_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_chdir_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_exit_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_unlink_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_rmdir_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/types.unifier).nify$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.fcntl_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.pipe_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.munmap_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "runtime.madvise_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*go/parser.parser).safePos$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "syscall.libc_ptrace_trampoline"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "math/big.three$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "go/ast.fprint$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"golang.org/x/tools/internal/gcimporter.readUnifiedPackage" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"golang.org/x/tools/internal/gcimporter.UImportData" "golang.org/x/tools/internal/gcimporter.readUnifiedPackage"
"golang.org/x/tools/go/gcexportdata.Read" "golang.org/x/tools/internal/gcimporter.UImportData"
"golang.org/x/tools/go/gcexportdata.Read" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "golang.org/x/tools/go/gcexportdata.Read"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "fmt.Errorf"
"log.Panicf" "fmt.Sprintf"
"log.Panicf" "(*log.Logger).Output"
"(*golang.org/x/tools/go/packages.loader).loadFromExportData" "log.Panicf"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*golang.org/x/tools/go/packages.loader).loadFromExportData"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "runtime.Version"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "fmt.Sscanf"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*errors.errorString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(runtime.errorString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.InvalidUnmarshalError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*io/fs.PathError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(syscall.Errno).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.UnmarshalTypeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(context.deadlineExceededError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*golang.org/x/tools/go/packages.loader).loadPackage$1"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*internal/poll.DeadlineExceededError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*fmt.wrapError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*fmt.wrapErrors).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(runtime.plainError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*go/build/constraint.SyntaxError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*reflect.ValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*strconv.NumError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*time.ParseError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(internal/poll.errNetClosing).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*go/types.ArgumentError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*os.SyscallError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.UnsupportedValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.UnsupportedTypeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*internal/reflectlite.ValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.MarshalerError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(golang.org/x/tools/go/packages.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(go/scanner.ErrorList).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(go/types.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(runtime.errorAddressString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*regexp/syntax.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*runtime.TypeAssertionError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*os/exec.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.SyntaxError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*internal/bisect.parseError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*os/exec.ExitError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(os/exec.wrappedError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*go/ast.ImportSpec).Pos"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(encoding/base64.CorruptInputError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*internal/reflectlite.ValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(time.fileSizeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*golang.org/x/tools/go/packages.loader).loadPackage$1"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(go/scanner.ErrorList).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(math/big.ErrNaN).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(math/big.ErrNaN).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(go/scanner.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.InvalidUnmarshalError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "fmt.Sprintf"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*golang.org/x/tools/go/packages.loader).loadPackage$1"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*golang.org/x/tools/go/packages.loader).loadFromExportData"
"(*golang.org/x/tools/go/packages.loader).parseFiles" "(context.emptyCtx).Err"
"(*golang.org/x/tools/go/packages.loader).parseFiles" "(*context.cancelCtx).Err"
"(*golang.org/x/tools/go/packages.loader).parseFiles" "(*sync.WaitGroup).Wait"
"(*golang.org/x/tools/go/packages.loader).parseFiles" "(*sync.WaitGroup).Add"
"(*golang.org/x/tools/go/packages.loader).parseFile" "(*sync.Mutex).Lock"
"(*golang.org/x/tools/go/packages.loader).parseFile" "(*sync.Mutex).Unlock"
"(*golang.org/x/tools/go/packages.loader).parseFile" "(*sync.Mutex).Unlock"
"golang.org/x/tools/go/packages.sameFile" "path/filepath.Base"
"golang.org/x/tools/go/packages.sameFile" "path/filepath.Base"
"golang.org/x/tools/go/packages.sameFile" "strings.EqualFold"
"golang.org/x/tools/go/packages.sameFile" "os.Stat"
"golang.org/x/tools/go/packages.sameFile" "os.Stat"
"golang.org/x/tools/go/packages.sameFile" "os.SameFile"
"(*golang.org/x/tools/go/packages.loader).parseFile" "golang.org/x/tools/go/packages.sameFile"
"(*golang.org/x/tools/go/packages.loader).parseFile" "os.ReadFile"
"golang.org/x/tools/go/packages.newLoader$2" "go/parser.ParseFile"
"(*golang.org/x/tools/go/packages.loader).parseFile" "golang.org/x/tools/go/packages.newLoader$2"
"(*golang.org/x/tools/go/packages.loader).parseFiles$1" "(*golang.org/x/tools/go/packages.loader).parseFile"
"(*golang.org/x/tools/go/packages.loader).parseFiles$1" "(*sync.WaitGroup).Done"
"(*golang.org/x/tools/go/packages.loader).parseFiles" "(*golang.org/x/tools/go/packages.loader).parseFiles$1"
"(*golang.org/x/tools/go/packages.loader).parseFiles" "(*context.cancelCtx).Err"
"(*golang.org/x/tools/go/packages.loader).parseFiles" "(context.emptyCtx).Err"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*golang.org/x/tools/go/packages.loader).parseFiles"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*golang.org/x/tools/go/packages.loader).loadPackage$1"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "golang.org/x/tools/internal/versions.InitFileVersions"
"golang.org/x/tools/internal/typesinternal.SetUsesCgo" "reflect.ValueOf"
"golang.org/x/tools/internal/typesinternal.SetUsesCgo" "(reflect.Value).Elem"
"(reflect.Value).FieldByName" "(reflect.flag).mustBe"
"(reflect.Value).FieldByName" "(reflect.Value).typ"
"(reflect.Value).FieldByName" "reflect.toRType"
"(*reflect.rtype).FieldByName" "(*reflect.rtype).Kind"
"(*reflect.rtype).FieldByName" "(*reflect.rtype).String"
"(*reflect.structType).FieldByName" "(internal/abi.Name).Name"
"(*reflect.structType).FieldByName" "(*reflect.structType).Field"
"(*reflect.structType).FieldByName" "(*internal/abi.StructField).Embedded"
"(*reflect.structType).FieldByNameFunc" "(internal/abi.Name).Name"
"(*reflect.structType).FieldByNameFunc" "(*internal/abi.StructField).Embedded"
"(*reflect.structType).FieldByNameFunc" "(*internal/abi.Type).Kind"
"(*reflect.structType).FieldByNameFunc" "(*reflect.structType).FieldByName$1"
"(*reflect.structType).FieldByNameFunc" "(*internal/abi.Type).Elem"
"(*reflect.structType).FieldByNameFunc" "(*reflect.structType).Field"
"(*reflect.structType).FieldByNameFunc" "(*internal/abi.Type).Kind"
"(*reflect.structType).FieldByNameFunc" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$1"
"(*reflect.structType).FieldByName" "(*reflect.structType).FieldByNameFunc"
"(*reflect.rtype).FieldByName" "(*reflect.structType).FieldByName"
"(reflect.Value).FieldByName" "(*reflect.rtype).FieldByName"
"(reflect.Value).FieldByIndex" "(reflect.Value).Field"
"(reflect.Value).FieldByIndex" "(reflect.flag).mustBe"
"(reflect.Value).FieldByIndex" "(reflect.Value).Kind"
"(reflect.Value).FieldByIndex" "(reflect.Value).Field"
"(reflect.Value).FieldByIndex" "(reflect.Value).IsNil"
"(reflect.Value).FieldByIndex" "(reflect.Value).typ"
"(reflect.Value).FieldByIndex" "(*internal/abi.Type).Elem"
"(reflect.Value).FieldByIndex" "(*internal/abi.Type).Kind"
"(reflect.Value).FieldByIndex" "(reflect.Value).Elem"
"(reflect.Value).FieldByName" "(reflect.Value).FieldByIndex"
"golang.org/x/tools/internal/typesinternal.SetUsesCgo" "(reflect.Value).FieldByName"
"golang.org/x/tools/internal/typesinternal.SetUsesCgo" "(reflect.Value).IsValid"
"golang.org/x/tools/internal/typesinternal.SetUsesCgo" "(reflect.Value).FieldByName"
"golang.org/x/tools/internal/typesinternal.SetUsesCgo" "(reflect.Value).IsValid"
"(reflect.Value).UnsafeAddr" "(reflect.Value).typ"
"(reflect.Value).UnsafeAddr" "reflect.escapes"
"golang.org/x/tools/internal/typesinternal.SetUsesCgo" "(reflect.Value).UnsafeAddr"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "golang.org/x/tools/internal/typesinternal.SetUsesCgo"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "go/types.NewChecker"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*go/types.Checker).Files"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*golang.org/x/tools/go/packages.loader).loadPackage$1"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*errors.errorString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(runtime.errorString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "strings.HasPrefix"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*io/fs.PathError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(syscall.Errno).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.UnmarshalTypeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(context.deadlineExceededError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(time.fileSizeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*internal/poll.DeadlineExceededError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*fmt.wrapError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*fmt.wrapErrors).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(runtime.plainError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*go/build/constraint.SyntaxError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*reflect.ValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*strconv.NumError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*time.ParseError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(internal/poll.errNetClosing).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*go/types.ArgumentError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*os.SyscallError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.UnsupportedValueError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.UnsupportedTypeError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(encoding/base64.CorruptInputError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.MarshalerError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(golang.org/x/tools/go/packages.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(go/scanner.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(go/types.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(runtime.errorAddressString).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*regexp/syntax.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*runtime.TypeAssertionError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*os/exec.Error).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*encoding/json.SyntaxError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*internal/bisect.parseError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*os/exec.ExitError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(os/exec.wrappedError).Error"
"(*golang.org/x/tools/go/packages.loader).loadPackage" "(*golang.org/x/tools/go/packages.loader).loadPackage$1"
"(*golang.org/x/tools/go/packages.loader).loadRecursive$1" "(*golang.org/x/tools/go/packages.loader).loadPackage"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_dup2_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.throw$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_sendto_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_recvfrom_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.doRecordGoroutineProfile$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.cgoCheckPtrWrite$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcStart$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).typeDecl$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_mutex_unlock_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_mutex_lock_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_cond_signal_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "regexp.mergeRuneSets$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.tracealloc$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_read_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_recvmsg_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*log/slog.handleState).appendValue$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_mutex_init_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "sync.poolCleanup"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*internal/godebug.Setting).register"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime._LostContendedRuntimeLock"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcMarkDone$3"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_close_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*encoding/json.encodeState).marshal$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.callers$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_shutdown_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_munmap_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_readdir_r_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_sendmsg_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_fchdir_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.SetFinalizer$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.casgstatus$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).collectTypeParams$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).objDecl$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcBgMarkWorker$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_cond_init_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.StdSizes).Alignof$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_fcntl_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_setrlimit_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_accept_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.mLockProfile).captureStack$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.usleep_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_chmod_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_cond_wait_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.entersyscallblock$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.chansend$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.asyncPreempt2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_lstat_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "go/types.computeInterfaceTypeSet$2$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_openat_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*internal/lazyregexp.Regexp).build"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.mheap).freeSpan$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "flag.init$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_mmap_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_fchmod_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.exit_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*os/exec.Cmd).Start$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*context.cancelCtx).propagateCancel$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "time.initLocal"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "reflect.methodValueCall"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcStart$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcStart$3"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_write_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_fdopendir_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.sweepLocked).sweep$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.mspinning"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.chanrecv$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*fmt.ss).Token$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_lseek_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_setsockopt_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_execve_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.sweepLocked).sweep$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcMarkDone$4"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "internal/poll.runtime_pollServerInit"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.SetFinalizer$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_pwrite_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_getrlimit_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.asyncPreempt"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcResetMarkState"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.subster).typ$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.exitsyscall$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.heapSetType$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*log/slog.Level).parse$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*internal/godebug.Setting).Value$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).funcDecl$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "reflect.embeddedIfaceMethStub"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "go/parser.ParseFile$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.entersyscallblock_handoff"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.unreachableMethod"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_open_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/go/packages.goListDriver$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.sweepone$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "flag.isZeroValue$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_getsockopt_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).objDecl$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.tracefree$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*internal/godebug.Setting).IncNonDefault"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*flag.FlagSet).defaultUsage"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_dup_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_ftruncate_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).validCycle$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcMarkDone$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.copyenv"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_fchown_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/go/packages.goListDriver$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.nanotime_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).funcType$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_pread_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_getcwd_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_sysctl_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).collectMethods$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*context.cancelCtx).propagateCancel$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "regexp/syntax.parse$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/sync/errgroup.Group).Go$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.typeWriter).signature$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.wbBufFlush$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "flag.commandLineUsage"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.fatalthrow$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "context.WithCancel$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.entersyscallblock$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.persistentalloc$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_fstat_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_closedir_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_stat_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.cgoCheckTypedBlock$1"
"(*golang.org/x/tools/internal/gocommand.Runner).initialize" "(*sync.Once).Do"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gocommand.Runner).initialize"
"(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent" "(context.emptyCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent" "(*context.cancelCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent" "(*context.cancelCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "os/exec.Command"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "reflect.ValueOf"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "(reflect.Value).Elem"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "(reflect.Value).FieldByName"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "(reflect.Value).IsValid"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "reflect.ValueOf"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "(reflect.Value).Set"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "os.Environ"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "time.Now"
"time.Since" "time.runtimeNano"
"time.Since" "time.subMono"
"time.Since" "time.Now"
"(time.Time).Sub" "time.subMono"
"(time.Time).Sub" "(*time.Time).sec"
"(time.Time).Sub" "(*time.Time).sec"
"(time.Time).Sub" "(*time.Time).nsec"
"(time.Time).Sub" "(*time.Time).nsec"
"(time.Time).Add" "(*time.Time).nsec"
"(time.Time).Add" "(*time.Time).addSec"
"(time.Time).Add" "(*time.Time).stripMono"
"(time.Time).Sub" "(time.Time).Add"
"(time.Time).Equal" "(*time.Time).sec"
"(time.Time).Equal" "(*time.Time).sec"
"(time.Time).Equal" "(*time.Time).nsec"
"(time.Time).Equal" "(*time.Time).nsec"
"(time.Time).Sub" "(time.Time).Equal"
"(time.Time).Before" "(*time.Time).sec"
"(time.Time).Before" "(*time.Time).sec"
"(time.Time).Before" "(*time.Time).nsec"
"(time.Time).Before" "(*time.Time).nsec"
"(time.Time).Sub" "(time.Time).Before"
"time.Since" "(time.Time).Sub"
"(*golang.org/x/tools/internal/gocommand.Invocation).run$5" "time.Since"
"golang.org/x/tools/internal/gocommand.cmdDebugStr" "strings.SplitN"
"golang.org/x/tools/internal/gocommand.cmdDebugStr" "strconv.Quote"
"golang.org/x/tools/internal/gocommand.cmdDebugStr" "strings.Join"
"golang.org/x/tools/internal/gocommand.cmdDebugStr" "fmt.Sprintf"
"golang.org/x/tools/internal/gocommand.cmdDebugStr" "strings.Contains"
"(*golang.org/x/tools/internal/gocommand.Invocation).run$5" "golang.org/x/tools/internal/gocommand.cmdDebugStr"
"(*golang.org/x/tools/internal/gocommand.Invocation).run$5" "log.Printf"
"(*golang.org/x/tools/internal/gocommand.Invocation).run$5" "golang.org/x/tools/go/packages.newLoader$1"
"(*golang.org/x/tools/internal/gocommand.Invocation).run$5" "(*go/types.subster).typ$3"
"(*golang.org/x/tools/internal/gocommand.Invocation).run$5" "(*go/types.subster).typ$1"
"(*golang.org/x/tools/internal/gocommand.Invocation).run$5" "(*go/types.operand).assignableTo$2"
"(*golang.org/x/tools/internal/gocommand.Invocation).run$5" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(*golang.org/x/tools/internal/gocommand.Invocation).run$5" "(*go/types.operand).convertibleTo$1"
"(*golang.org/x/tools/internal/gocommand.Invocation).run$5" "(*go/types.Checker).incomparableCause$1"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "(*golang.org/x/tools/internal/gocommand.Invocation).run$5"
"golang.org/x/tools/internal/gocommand.runCmdContext" "(*os/exec.Cmd).Start"
"golang.org/x/tools/internal/gocommand.runCmdContext" "os.Pipe"
"golang.org/x/tools/internal/gocommand.runCmdContext" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"golang.org/x/tools/internal/gocommand.runCmdContext" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"golang.org/x/tools/internal/gocommand.runCmdContext" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"golang.org/x/tools/internal/gocommand.runCmdContext" "(*os.File).Close"
"golang.org/x/tools/internal/gocommand.runCmdContext" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"golang.org/x/tools/internal/gocommand.runCmdContext" "time.NewTimer"
"golang.org/x/tools/internal/gocommand.runCmdContext" "(*time.Timer).Stop"
"golang.org/x/tools/internal/gocommand.runCmdContext" "log.Printf"
"golang.org/x/tools/internal/gocommand.runCmdContext" "(context.emptyCtx).Done"
"golang.org/x/tools/internal/gocommand.runCmdContext" "(*context.cancelCtx).Done"
"golang.org/x/tools/internal/gocommand.runCmdContext" "(*time.Timer).Stop"
"golang.org/x/tools/internal/gocommand.runCmdContext" "(*os.Process).Kill"
"golang.org/x/tools/internal/gocommand.runCmdContext" "(*context.cancelCtx).Done"
"golang.org/x/tools/internal/gocommand.runCmdContext" "(context.emptyCtx).Done"
"golang.org/x/tools/internal/gocommand.runCmdContext" "errors.Is"
"golang.org/x/tools/internal/gocommand.runCmdContext" "time.NewTimer"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "fmt.Sprintf"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "fmt.Fprintln"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "fmt.Fprintln"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "fmt.Fprintln"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "os/exec.Command"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "(*os/exec.Cmd).Run"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "fmt.Sprintf"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "fmt.Fprintln"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "fmt.Fprintln"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "os/exec.Command"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "(*os/exec.Cmd).Run"
"golang.org/x/tools/internal/gocommand.HandleHangingGoCommand" "fmt.Sprintf"
"golang.org/x/tools/internal/gocommand.runCmdContext" "golang.org/x/tools/internal/gocommand.HandleHangingGoCommand"
"golang.org/x/tools/internal/gocommand.runCmdContext" "(*os.Process).Signal"
"(*golang.org/x/tools/internal/gocommand.Invocation).run" "golang.org/x/tools/internal/gocommand.runCmdContext"
"(*golang.org/x/tools/internal/gocommand.Invocation).runWithFriendlyError" "(*golang.org/x/tools/internal/gocommand.Invocation).run"
"(*golang.org/x/tools/internal/gocommand.Invocation).runWithFriendlyError" "fmt.Errorf"
"(*golang.org/x/tools/internal/gocommand.Invocation).runWithFriendlyError" "(context.emptyCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Invocation).runWithFriendlyError" "(context.emptyCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Invocation).runWithFriendlyError" "(*context.cancelCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Invocation).runWithFriendlyError" "(*context.cancelCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Invocation).runWithFriendlyError" "fmt.Errorf"
"(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent" "(*golang.org/x/tools/internal/gocommand.Invocation).runWithFriendlyError"
"(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent" "(*context.cancelCtx).Done"
"(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent" "(context.emptyCtx).Done"
"(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent" "(context.emptyCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent"
"golang.org/x/tools/internal/event.Error" "(*golang.org/x/tools/internal/event/keys.String).Of"
"(*golang.org/x/tools/internal/event/keys.Error).Of" "golang.org/x/tools/internal/event/label.OfValue"
"golang.org/x/tools/internal/event.Error" "(*golang.org/x/tools/internal/event/keys.Error).Of"
"golang.org/x/tools/internal/event.Error" "golang.org/x/tools/internal/event/core.MakeEvent"
"golang.org/x/tools/internal/event/core.Export" "sync/atomic.LoadPointer"
"golang.org/x/tools/internal/event/core.Export" "golang.org/x/tools/internal/event/core.deliver"
"golang.org/x/tools/internal/event.Error" "golang.org/x/tools/internal/event/core.Export"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/event.Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*bytes.Buffer).Reset"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*bytes.Buffer).Reset"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(*golang.org/x/tools/internal/gocommand.Runner).initialize"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(*context.cancelCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(*context.cancelCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(*context.cancelCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(context.emptyCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(*context.cancelCtx).Done"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(context.emptyCtx).Done"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(context.emptyCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(*golang.org/x/tools/internal/gocommand.Invocation).runWithFriendlyError"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(*context.cancelCtx).Done"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(*context.cancelCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(context.emptyCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(context.emptyCtx).Err"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(context.emptyCtx).Done"
"(*golang.org/x/tools/internal/gocommand.Runner).runPiped" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*errors.errorString).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(runtime.errorString).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*io/fs.PathError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(syscall.Errno).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.munmap_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(context.deadlineExceededError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_rmdir_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*internal/poll.DeadlineExceededError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*fmt.wrapError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*fmt.wrapErrors).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(runtime.plainError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.madvise_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*reflect.ValueError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*strconv.NumError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*time.ParseError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(internal/poll.errNetClosing).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.ArgumentError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*os.SyscallError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*encoding/json.UnsupportedValueError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_ptrace_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_unlink_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/parser.parser).safePos$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(golang.org/x/tools/go/packages.Error).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "go/ast.fprint$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(go/types.Error).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*regexp/syntax.Error).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.TypeAssertionError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*os/exec.Error).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*encoding/json.SyntaxError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*internal/bisect.parseError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*os/exec.ExitError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.fcntl_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*internal/reflectlite.ValueError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(time.fileSizeError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.unifier).nify$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(go/scanner.ErrorList).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "math/big.three$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(go/scanner.Error).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*encoding/json.InvalidUnmarshalError).Error"
"regexp.newOnePassMachine" "(*sync.Pool).Get"
"(*regexp.Regexp).doOnePass" "regexp.newOnePassMachine"
"(*regexp.inputs).init" "(*regexp.inputs).newReader"
"(*regexp.inputs).init" "(*regexp.inputs).newBytes"
"(*regexp.inputs).init" "(*regexp.inputs).newString"
"(*regexp.Regexp).doOnePass" "(*regexp.inputs).init"
"(*regexp.Regexp).doOnePass" "regexp.newLazyFlag"
"(regexp.lazyFlag).match" "regexp/syntax.IsWordChar"
"(regexp.lazyFlag).match" "regexp/syntax.IsWordChar"
"(*regexp.Regexp).doOnePass" "(regexp.lazyFlag).match"
"(*regexp/syntax.Inst).MatchRunePos" "unicode.SimpleFold"
"(*regexp/syntax.Inst).MatchRunePos" "unicode.SimpleFold"
"(*regexp/syntax.Inst).MatchRune" "(*regexp/syntax.Inst).MatchRunePos"
"(*regexp.Regexp).doOnePass" "(*regexp/syntax.Inst).MatchRune"
"regexp.onePassNext" "(*regexp/syntax.Inst).MatchRunePos"
"(*regexp.Regexp).doOnePass" "regexp.onePassNext"
"(*regexp.Regexp).doOnePass" "(regexp.lazyFlag).match"
"(*regexp.Regexp).doOnePass" "regexp.newLazyFlag"
"regexp.freeOnePassMachine" "(*regexp.inputs).clear"
"regexp.freeOnePassMachine" "(*sync.Pool).Put"
"(*regexp.Regexp).doOnePass" "regexp.freeOnePassMachine"
"(*regexp.Regexp).doOnePass" "regexp.freeOnePassMachine"
"(*regexp.inputBytes).step" "unicode/utf8.DecodeRune"
"(*regexp.Regexp).doOnePass" "(*regexp.inputBytes).step"
"(*regexp.Regexp).doOnePass" "(*regexp.inputBytes).step"
"(*regexp.inputBytes).context" "unicode/utf8.DecodeLastRune"
"(*regexp.inputBytes).context" "regexp.newLazyFlag"
"(*regexp.inputBytes).context" "unicode/utf8.DecodeRune"
"(*regexp.Regexp).doOnePass" "(*regexp.inputBytes).context"
"(*regexp.inputBytes).hasPrefix" "bytes.HasPrefix"
"(*regexp.Regexp).doOnePass" "(*regexp.inputBytes).hasPrefix"
"(*regexp.Regexp).doOnePass" "(*regexp.inputBytes).canCheckPrefix"
"(*regexp.Regexp).doOnePass" "(*regexp.inputBytes).step"
"(*regexp.Regexp).doOnePass" "(*regexp.inputBytes).step"
"(*regexp.Regexp).doOnePass" "(*regexp.inputBytes).context"
"(*regexp.Regexp).doOnePass" "(*regexp.inputBytes).step"
"(*regexp.inputString).step" "unicode/utf8.DecodeRuneInString"
"(*regexp.Regexp).doOnePass" "(*regexp.inputString).step"
"(*regexp.Regexp).doOnePass" "(*regexp.inputString).step"
"(*regexp.inputString).context" "unicode/utf8.DecodeLastRuneInString"
"(*regexp.inputString).context" "regexp.newLazyFlag"
"(*regexp.inputString).context" "unicode/utf8.DecodeRuneInString"
"(*regexp.Regexp).doOnePass" "(*regexp.inputString).context"
"(*regexp.inputString).hasPrefix" "strings.HasPrefix"
"(*regexp.Regexp).doOnePass" "(*regexp.inputString).hasPrefix"
"(*regexp.Regexp).doOnePass" "(*regexp.inputString).canCheckPrefix"
"(*regexp.Regexp).doOnePass" "(*regexp.inputString).step"
"(*regexp.Regexp).doOnePass" "(*regexp.inputString).step"
"(*regexp.Regexp).doOnePass" "(*regexp.inputString).context"
"(*regexp.Regexp).doOnePass" "(*regexp.inputString).step"
"(*regexp.inputReader).step" "(*strings.Reader).ReadRune"
"(*regexp.inputReader).step" "(*fmt.ss).ReadRune"
"(*regexp.inputReader).step" "(*bytes.Reader).ReadRune"
"(*regexp.inputReader).step" "(*bytes.Buffer).ReadRune"
"(*regexp.inputReader).step" "(*bufio.Reader).ReadRune"
"(*regexp.inputReader).step" "(*fmt.readRune).ReadRune"
"(*regexp.Regexp).doOnePass" "(*regexp.inputReader).step"
"(*regexp.Regexp).doOnePass" "(*regexp.inputReader).step"
"(*regexp.Regexp).doOnePass" "(*regexp.inputReader).context"
"(*regexp.Regexp).doOnePass" "(*regexp.inputReader).hasPrefix"
"(*regexp.Regexp).doOnePass" "(*regexp.inputReader).canCheckPrefix"
"(*regexp.Regexp).doOnePass" "(*regexp.inputReader).step"
"(*regexp.Regexp).doOnePass" "(*regexp.inputReader).step"
"(*regexp.Regexp).doOnePass" "(*regexp.inputReader).context"
"(*regexp.Regexp).doOnePass" "(*regexp.inputReader).step"
"(*regexp.Regexp).doExecute" "(*regexp.Regexp).doOnePass"
"regexp.newBitState" "(*sync.Pool).Get"
"(*regexp.Regexp).backtrack" "regexp.newBitState"
"(*regexp.Regexp).backtrack" "(*regexp.inputs).init"
"(*regexp.Regexp).backtrack" "(*regexp.bitState).reset"
"(*regexp.bitState).push" "(*regexp.bitState).shouldVisit"
"(*regexp.Regexp).tryBacktrack" "(*regexp.bitState).push"
"(*regexp.Regexp).tryBacktrack" "(*regexp.bitState).shouldVisit"
"(*regexp.Regexp).tryBacktrack" "(*regexp.bitState).push"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputBytes).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputString).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputReader).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp/syntax.Inst).MatchRune"
"(*regexp.Regexp).tryBacktrack" "(*regexp.bitState).push"
"(*regexp.Regexp).tryBacktrack" "(*regexp.bitState).push"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputBytes).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputString).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputReader).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputBytes).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputString).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputReader).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputBytes).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputString).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputReader).step"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputBytes).context"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputString).context"
"(*regexp.Regexp).tryBacktrack" "(*regexp.inputReader).context"
"(*regexp.Regexp).tryBacktrack" "(regexp.lazyFlag).match"
"(*regexp.Regexp).tryBacktrack" "(*regexp.bitState).push"
"(*regexp.Regexp).backtrack" "(*regexp.Regexp).tryBacktrack"
"regexp.freeBitState" "(*regexp.inputs).clear"
"regexp.freeBitState" "(*sync.Pool).Put"
"(*regexp.Regexp).backtrack" "regexp.freeBitState"
"(*regexp.Regexp).backtrack" "regexp.freeBitState"
"(*regexp.Regexp).backtrack" "regexp.freeBitState"
"(*regexp.Regexp).backtrack" "(*regexp.Regexp).tryBacktrack"
"(*regexp.Regexp).backtrack" "regexp.freeBitState"
"(*regexp.inputBytes).index" "bytes.Index"
"(*regexp.Regexp).backtrack" "(*regexp.inputBytes).index"
"(*regexp.Regexp).backtrack" "(*regexp.inputBytes).step"
"(*regexp.inputString).index" "strings.Index"
"(*regexp.Regexp).backtrack" "(*regexp.inputString).index"
"(*regexp.Regexp).backtrack" "(*regexp.inputString).step"
"(*regexp.Regexp).backtrack" "(*regexp.inputReader).index"
"(*regexp.Regexp).backtrack" "(*regexp.inputReader).step"
"(*regexp.Regexp).doExecute" "(*regexp.Regexp).backtrack"
"(*regexp.Regexp).get" "(*sync.Pool).Get"
"(*regexp.Regexp).doExecute" "(*regexp.Regexp).get"
"(*regexp.Regexp).doExecute" "(*regexp.inputs).init"
"(*regexp.Regexp).doExecute" "(*regexp.machine).init"
"(*regexp.machine).match" "regexp.newLazyFlag"
"(*regexp.machine).match" "(*regexp.machine).clear"
"(*regexp.machine).match" "regexp.newLazyFlag"
"(*regexp.machine).step" "(*regexp/syntax.Inst).MatchRune"
"(*regexp.machine).add" "(*regexp.machine).add"
"(*regexp.machine).add" "(regexp.lazyFlag).match"
"(*regexp.machine).add" "(*regexp.machine).add"
"(*regexp.machine).add" "(*regexp.machine).alloc"
"(*regexp.machine).step" "(*regexp.machine).add"
"(*regexp.machine).match" "(*regexp.machine).step"
"(*regexp.machine).match" "(*regexp.machine).add"
"(*regexp.machine).match" "(*regexp.inputBytes).step"
"(*regexp.machine).match" "(*regexp.inputBytes).step"
"(*regexp.machine).match" "(*regexp.inputBytes).context"
"(*regexp.machine).match" "(*regexp.inputBytes).index"
"(*regexp.machine).match" "(*regexp.inputBytes).canCheckPrefix"
"(*regexp.machine).match" "(*regexp.inputBytes).step"
"(*regexp.machine).match" "(*regexp.inputBytes).step"
"(*regexp.machine).match" "(*regexp.inputBytes).step"
"(*regexp.machine).match" "(*regexp.inputString).step"
"(*regexp.machine).match" "(*regexp.inputString).step"
"(*regexp.machine).match" "(*regexp.inputString).context"
"(*regexp.machine).match" "(*regexp.inputString).index"
"(*regexp.machine).match" "(*regexp.inputString).canCheckPrefix"
"(*regexp.machine).match" "(*regexp.inputString).step"
"(*regexp.machine).match" "(*regexp.inputString).step"
"(*regexp.machine).match" "(*regexp.inputString).step"
"(*regexp.machine).match" "(*regexp.inputReader).step"
"(*regexp.machine).match" "(*regexp.inputReader).step"
"(*regexp.machine).match" "(*regexp.inputReader).context"
"(*regexp.machine).match" "(*regexp.inputReader).index"
"(*regexp.machine).match" "(*regexp.inputReader).canCheckPrefix"
"(*regexp.machine).match" "(*regexp.inputReader).step"
"(*regexp.machine).match" "(*regexp.inputReader).step"
"(*regexp.machine).match" "(*regexp.inputReader).step"
"(*regexp.Regexp).doExecute" "(*regexp.machine).match"
"(*regexp.Regexp).put" "(*regexp.inputs).clear"
"(*regexp.Regexp).put" "(*sync.Pool).Put"
"(*regexp.Regexp).doExecute" "(*regexp.Regexp).put"
"(*regexp.Regexp).doExecute" "(*regexp.Regexp).put"
"(*regexp.Regexp).doMatch" "(*regexp.Regexp).doExecute"
"(*regexp.Regexp).MatchString" "(*regexp.Regexp).doMatch"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*regexp.Regexp).MatchString"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).rawExpr$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).validVarType$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).typInternal$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).typInternal$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.stopTheWorld$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.startTheWorld$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.wirep$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.wirep$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.kevent_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.read_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.raise_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.cgoSigtramp"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.sigtramp"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.forEachP$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcMarkTermination$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcMarkTermination$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcControllerCommit"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcMarkTermination$3"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.freeStackSpans"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcMarkTermination$5"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.exitsyscallfast$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.allocm$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.mstart"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.getempty$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.p).destroy$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcAssistAlloc$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.mheap).alloc$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.mProf_Malloc$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.Stack$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(os/exec.wrappedError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*os/exec.Cmd).awaitGoroutines$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).exprInternal$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).instantiatedType$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).instantiatedType$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).structType$3"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).interfaceType$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.reentersyscall$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.reentersyscall$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.entersyscall_sysmon"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.runSafePointFn"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.entersyscall_gcwait"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.traceMap).put$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.fatal$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.write_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(runtime.traceWriter).refill$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.mmap_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.sigprocmask_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.sigaction_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.gcMarkTermination$4$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.mspan).setUserArenaChunkToFault$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.exitsyscallfast_reacquired$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.traceStringTable).put$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.rwmutex).rlock$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.traceThreadDestroy$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.malg$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.allocmcache$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.freemcache$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*encoding/json.UnmarshalTypeError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/event/core.ExportPair$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/event/core.ExportPair$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "go/types.parseUnion$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime._VDSO"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime._ExternalCode"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime._GC"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime._System"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.sigpanic"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.raiseproc_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.markrootFreeGStacks"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.markroot$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.walltime_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_attr_init_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_attr_getstacksize_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_attr_setdetachstate_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.mstart_stub"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "go/build/constraint.parseExpr$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/build/constraint.SyntaxError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/parser.parser).parsePrimaryExpr$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/parser.parser).parseBinaryExpr$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/parser.parser).parseParameterList$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).infer$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).infer$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).instantiateSignature$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).instantiateSignature$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.Checker).genericExprList$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*encoding/json.MarshalerError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*encoding/json.UnsupportedTypeError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.printArgs$3"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.freeSomeWbufs$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_kill_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.mlock_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pthread_create_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*runtime.pageAlloc).scavenge$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_pipe_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_kill_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_wait4_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(encoding/base64.CorruptInputError).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_mkdir_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(math/big.ErrNaN).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.pipe_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "go/types.hasVarSize$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*go/types.tpWalker).isParameterized$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime.kqueue_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime._LostExternalCode"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "runtime._LostSIGPROFDuringAtomic64"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(runtime.errorAddressString).Error"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_fork_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_setsid_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_setpgid_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_getpid_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_ioctl_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_chroot_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_setgroups_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_setgid_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_setuid_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_chdir_trampoline"
"(*golang.org/x/tools/internal/gocommand.Runner).RunRaw" "syscall.libc_exit_trampoline"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*golang.org/x/tools/internal/gocommand.Runner).RunRaw"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*errors.errorString).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(runtime.errorString).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(go/scanner.ErrorList).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*io/fs.PathError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(syscall.Errno).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*encoding/json.UnmarshalTypeError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(context.deadlineExceededError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*encoding/json.InvalidUnmarshalError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*internal/poll.DeadlineExceededError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*fmt.wrapError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*fmt.wrapErrors).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(runtime.plainError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*go/build/constraint.SyntaxError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*reflect.ValueError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*strconv.NumError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*time.ParseError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(internal/poll.errNetClosing).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*go/types.ArgumentError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*os.SyscallError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*encoding/json.UnsupportedValueError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*encoding/json.UnsupportedTypeError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(time.fileSizeError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*encoding/json.MarshalerError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(golang.org/x/tools/go/packages.Error).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(math/big.ErrNaN).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(go/types.Error).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(runtime.errorAddressString).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*regexp/syntax.Error).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*runtime.TypeAssertionError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*os/exec.Error).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*encoding/json.SyntaxError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*internal/bisect.parseError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "strings.Contains"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*bytes.Buffer).String"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "strings.Fields"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*golang.org/x/tools/internal/gocommand.Runner).Run"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "strings.Contains"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*bytes.Buffer).String"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "strings.TrimSpace"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*bytes.Buffer).String"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*bytes.Buffer).String"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "fmt.Errorf"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*os/exec.ExitError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(os/exec.wrappedError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(go/scanner.Error).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(encoding/base64.CorruptInputError).Error"
"golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist" "(*internal/reflectlite.ValueError).Error"
"golang.org/x/tools/go/packages.goListDriver$1" "golang.org/x/tools/go/internal/packagesdriver.GetSizesForArgsGolist"
"runtime.clearpools" "golang.org/x/tools/go/packages.goListDriver$1"
"runtime.clearpools" "runtime.sweepone$1"
"runtime.clearpools" "sync.poolCleanup"
"runtime.clearpools" "syscall.libc_getsockopt_trampoline"
"runtime.clearpools" "(*go/types.Checker).objDecl$2"
"runtime.clearpools" "syscall.libc_close_trampoline"
"runtime.clearpools" "(*internal/godebug.Setting).IncNonDefault"
"runtime.clearpools" "(*flag.FlagSet).defaultUsage"
"runtime.clearpools" "syscall.libc_shutdown_trampoline"
"runtime.clearpools" "syscall.libc_munmap_trampoline"
"runtime.clearpools" "syscall.libc_dup_trampoline"
"runtime.clearpools" "syscall.libc_readdir_r_trampoline"
"runtime.clearpools" "syscall.libc_sendmsg_trampoline"
"runtime.clearpools" "runtime.callers$1"
"runtime.clearpools" "syscall.libc_fchdir_trampoline"
"runtime.clearpools" "runtime.SetFinalizer$2"
"runtime.clearpools" "syscall.libc_ftruncate_trampoline"
"runtime.clearpools" "runtime.casgstatus$1"
"runtime.clearpools" "(*go/types.Checker).objDecl$1"
"runtime.clearpools" "(*go/types.StdSizes).Alignof$1"
"runtime.clearpools" "syscall.copyenv"
"runtime.clearpools" "syscall.libc_fchown_trampoline"
"runtime.clearpools" "syscall.libc_fcntl_trampoline"
"runtime.clearpools" "syscall.libc_setrlimit_trampoline"
"runtime.clearpools" "syscall.libc_accept_trampoline"
"runtime.clearpools" "golang.org/x/tools/go/packages.goListDriver$2"
"runtime.clearpools" "runtime.nanotime_trampoline"
"runtime.clearpools" "syscall.libc_pread_trampoline"
"runtime.clearpools" "syscall.libc_getcwd_trampoline"
"runtime.clearpools" "flag.commandLineUsage"
"runtime.clearpools" "runtime.chansend$1"
"runtime.clearpools" "runtime.asyncPreempt2"
"runtime.clearpools" "runtime.fatalthrow$1"
"runtime.clearpools" "syscall.libc_lstat_trampoline"
"runtime.clearpools" "syscall.libc_fstat_trampoline"
"runtime.clearpools" "syscall.libc_openat_trampoline"
"runtime.clearpools" "syscall.libc_closedir_trampoline"
"runtime.clearpools" "syscall.libc_stat_trampoline"
"runtime.clearpools" "runtime.cgoCheckTypedBlock$1"
"runtime.clearpools" "flag.init$1"
"runtime.clearpools" "syscall.libc_mmap_trampoline"
"runtime.clearpools" "(*go/types.gcSizes).Alignof$1"
"runtime.clearpools" "syscall.libc_fchmod_trampoline"
"runtime.clearpools" "runtime.gcStart$1"
"runtime.clearpools" "runtime.init$1"
"runtime.clearpools" "(log/slog.Value).Resolve$1"
"runtime.clearpools" "time.initLocal"
"runtime.clearpools" "time.FixedZone$1"
"runtime.clearpools" "reflect.methodValueCall"
"runtime.clearpools" "go/types.resolve$1"
"runtime.clearpools" "runtime.goready$1"
"runtime.clearpools" "runtime.gcStart$3"
"runtime.clearpools" "go/types.computeInterfaceTypeSet$1"
"runtime.clearpools" "(*go/types.Named).expandUnderlying$1"
"runtime.clearpools" "runtime.osyield"
"runtime.clearpools" "runtime.chanrecv$1"
"runtime.clearpools" "(*fmt.ss).Token$1"
"runtime.clearpools" "syscall.libc_lseek_trampoline"
"runtime.clearpools" "syscall.libc_setsockopt_trampoline"
"runtime.clearpools" "syscall.libc_write_trampoline"
"runtime.clearpools" "syscall.libc_fdopendir_trampoline"
"runtime.clearpools" "syscall.libc_execve_trampoline"
"runtime.clearpools" "syscall.libc_dup2_trampoline"
"runtime.clearpools" "internal/poll.runtime_pollServerInit"
"runtime.clearpools" "runtime.throw$1"
"runtime.clearpools" "runtime.SetFinalizer$1"
"runtime.clearpools" "syscall.libc_pwrite_trampoline"
"runtime.clearpools" "syscall.libc_sendto_trampoline"
"runtime.clearpools" "syscall.libc_getrlimit_trampoline"
"runtime.clearpools" "runtime.asyncPreempt"
"runtime.clearpools" "syscall.libc_recvfrom_trampoline"
"runtime.clearpools" "runtime.gcResetMarkState"
"runtime.clearpools" "runtime.atomicstorep"
"runtime.clearpools" "runtime.lock"
"runtime.clearpools" "runtime.unlock"
"runtime.clearpools" "runtime.lock"
"runtime.clearpools" "runtime.unlock"
"runtime.clearpools" "flag.isZeroValue$1"
"runtime.clearpools" "go/types.computeInterfaceTypeSet$2$1"
"runtime.clearpools" "regexp/syntax.parse$1"
"runtime.clearpools" "syscall.libc_sysctl_trampoline"
"runtime.clearpools" "go/parser.ParseFile$1"
"runtime.clearpools" "(*golang.org/x/sync/errgroup.Group).Go$1"
"runtime.clearpools" "context.WithCancel$1"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"runtime.clearpools" "(*go/types.Checker).validCycle$1"
"runtime.clearpools" "(*go/types.Checker).typeDecl$1"
"runtime.clearpools" "(*go/types.Checker).collectMethods$1"
"runtime.clearpools" "(*go/types.Checker).funcDecl$1"
"runtime.clearpools" "(*go/types.subster).typ$2"
"runtime.clearpools" "(*go/types.typeWriter).signature$1"
"runtime.clearpools" "(*encoding/json.encodeState).marshal$1"
"runtime.clearpools" "runtime.exit_trampoline"
"runtime.clearpools" "runtime.wbBufFlush$1"
"runtime.clearpools" "(*runtime.sweepLocked).sweep$1"
"runtime.clearpools" "(*runtime.sweepLocked).sweep$2"
"runtime.clearpools" "runtime.gcBgMarkWorker$2"
"runtime.clearpools" "runtime.mspinning"
"runtime.clearpools" "reflect.embeddedIfaceMethStub"
"runtime.clearpools" "(*internal/godebug.Setting).register"
"runtime.clearpools" "runtime.persistentalloc$1"
"runtime.clearpools" "(*log/slog.handleState).appendValue$1"
"runtime.clearpools" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"runtime.clearpools" "(*go/types.Checker).collectTypeParams$1"
"runtime.clearpools" "(*go/types.Checker).funcType$2"
"runtime.clearpools" "runtime.usleep_trampoline"
"runtime.clearpools" "runtime.doRecordGoroutineProfile$1"
"runtime.clearpools" "runtime.pthread_mutex_init_trampoline"
"runtime.clearpools" "runtime.pthread_cond_init_trampoline"
"runtime.clearpools" "runtime.pthread_mutex_lock_trampoline"
"runtime.clearpools" "runtime.pthread_mutex_unlock_trampoline"
"runtime.clearpools" "runtime.pthread_cond_wait_trampoline"
"runtime.clearpools" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"runtime.clearpools" "runtime._LostContendedRuntimeLock"
"runtime.clearpools" "(*runtime.mLockProfile).captureStack$1"
"runtime.clearpools" "runtime.pthread_cond_signal_trampoline"
"runtime.clearpools" "runtime.tracefree$1"
"runtime.clearpools" "(*runtime.mheap).freeSpan$1"
"runtime.clearpools" "runtime.gcMarkDone$2"
"runtime.clearpools" "runtime.gcMarkDone$3"
"runtime.clearpools" "runtime.gcMarkDone$4"
"runtime.clearpools" "runtime.entersyscallblock$1"
"runtime.clearpools" "runtime.entersyscallblock$2"
"runtime.clearpools" "runtime.entersyscallblock_handoff"
"runtime.clearpools" "runtime.exitsyscall$1"
"runtime.clearpools" "runtime.exitsyscall$2"
"runtime.clearpools" "runtime.cgoCheckPtrWrite$1"
"runtime.clearpools" "(*internal/lazyregexp.Regexp).build"
"runtime.clearpools" "regexp.mergeRuneSets$1"
"runtime.clearpools" "runtime.unreachableMethod"
"runtime.clearpools" "runtime.heapSetType$1"
"runtime.clearpools" "runtime.tracealloc$1"
"runtime.clearpools" "syscall.libc_chmod_trampoline"
"runtime.clearpools" "(*os/exec.Cmd).Start$1"
"runtime.clearpools" "(*context.cancelCtx).propagateCancel$1"
"runtime.clearpools" "(*context.cancelCtx).propagateCancel$2"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"runtime.clearpools" "(*go/types.Checker).rawExpr$1"
"runtime.clearpools" "(*go/types.Checker).validVarType$1"
"runtime.clearpools" "(*go/types.Checker).typInternal$1"
"runtime.clearpools" "(*go/types.Checker).typInternal$2"
"runtime.clearpools" "runtime.stopTheWorld$1"
"runtime.clearpools" "runtime.startTheWorld$1"
"runtime.clearpools" "runtime.wirep$1"
"runtime.clearpools" "runtime.wirep$2"
"runtime.clearpools" "runtime.kevent_trampoline"
"runtime.clearpools" "runtime.read_trampoline"
"runtime.clearpools" "runtime.raise_trampoline"
"runtime.clearpools" "runtime.cgoSigtramp"
"runtime.clearpools" "runtime.sigtramp"
"runtime.clearpools" "runtime.forEachP$1"
"runtime.clearpools" "runtime.gcMarkTermination$1"
"runtime.clearpools" "runtime.gcMarkTermination$2"
"runtime.clearpools" "runtime.gcControllerCommit"
"runtime.clearpools" "runtime.gcMarkTermination$3"
"runtime.clearpools" "runtime.freeStackSpans"
"runtime.clearpools" "runtime.gcMarkTermination$5"
"runtime.clearpools" "runtime.exitsyscallfast$1"
"runtime.clearpools" "runtime.allocm$1"
"runtime.clearpools" "runtime.mstart"
"runtime.clearpools" "runtime.getempty$1"
"runtime.clearpools" "(*runtime.p).destroy$1"
"runtime.clearpools" "runtime.gcAssistAlloc$1"
"runtime.clearpools" "(*runtime.mheap).alloc$1"
"runtime.clearpools" "runtime.mProf_Malloc$1"
"runtime.clearpools" "runtime.Stack$1"
"runtime.clearpools" "(*os/exec.Cmd).awaitGoroutines$1"
"runtime.clearpools" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"runtime.clearpools" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"runtime.clearpools" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"runtime.clearpools" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"runtime.clearpools" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"runtime.clearpools" "(*go/types.Checker).exprInternal$1"
"runtime.clearpools" "(*go/types.Checker).instantiatedType$1"
"runtime.clearpools" "(*go/types.Checker).instantiatedType$2"
"runtime.clearpools" "(*go/types.Checker).structType$3"
"runtime.clearpools" "(*go/types.Checker).interfaceType$2"
"runtime.clearpools" "runtime.reentersyscall$1"
"runtime.clearpools" "runtime.reentersyscall$2"
"runtime.clearpools" "runtime.entersyscall_sysmon"
"runtime.clearpools" "runtime.runSafePointFn"
"runtime.clearpools" "runtime.entersyscall_gcwait"
"runtime.clearpools" "(*runtime.traceMap).put$1"
"runtime.clearpools" "runtime.fatal$1"
"runtime.clearpools" "runtime.write_trampoline"
"runtime.clearpools" "(runtime.traceWriter).refill$1"
"runtime.clearpools" "runtime.mmap_trampoline"
"runtime.clearpools" "runtime.sigprocmask_trampoline"
"runtime.clearpools" "runtime.sigaction_trampoline"
"runtime.clearpools" "runtime.gcMarkTermination$4$1"
"runtime.clearpools" "(*runtime.mspan).setUserArenaChunkToFault$1"
"runtime.clearpools" "runtime.exitsyscallfast_reacquired$1"
"runtime.clearpools" "(*runtime.traceStringTable).put$1"
"runtime.clearpools" "(*runtime.rwmutex).rlock$1"
"runtime.clearpools" "runtime.traceThreadDestroy$1"
"runtime.clearpools" "runtime.malg$1"
"runtime.clearpools" "runtime.allocmcache$1"
"runtime.clearpools" "runtime.freemcache$1"
"runtime.clearpools" "golang.org/x/tools/internal/event/core.ExportPair$1"
"runtime.clearpools" "golang.org/x/tools/internal/event/core.ExportPair$2"
"runtime.clearpools" "go/types.parseUnion$1"
"runtime.clearpools" "runtime._VDSO"
"runtime.clearpools" "runtime._ExternalCode"
"runtime.clearpools" "runtime._GC"
"runtime.clearpools" "runtime._System"
"runtime.clearpools" "runtime.sigpanic"
"runtime.clearpools" "runtime.raiseproc_trampoline"
"runtime.clearpools" "runtime.markrootFreeGStacks"
"runtime.clearpools" "runtime.markroot$1"
"runtime.clearpools" "runtime.walltime_trampoline"
"runtime.clearpools" "runtime.pthread_attr_init_trampoline"
"runtime.clearpools" "runtime.pthread_attr_getstacksize_trampoline"
"runtime.clearpools" "runtime.pthread_attr_setdetachstate_trampoline"
"runtime.clearpools" "runtime.mstart_stub"
"runtime.clearpools" "go/build/constraint.parseExpr$1"
"runtime.clearpools" "(*go/parser.parser).parsePrimaryExpr$1"
"runtime.clearpools" "(*go/parser.parser).parseBinaryExpr$1"
"runtime.clearpools" "(*go/parser.parser).parseParameterList$1"
"runtime.clearpools" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"runtime.clearpools" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"runtime.clearpools" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"runtime.clearpools" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"runtime.clearpools" "(*go/types.Checker).infer$1"
"runtime.clearpools" "(*go/types.Checker).infer$2"
"runtime.clearpools" "(*go/types.Checker).instantiateSignature$1"
"runtime.clearpools" "(*go/types.Checker).instantiateSignature$2"
"runtime.clearpools" "(*go/types.Checker).genericExprList$1"
"runtime.clearpools" "runtime.printArgs$3"
"runtime.clearpools" "runtime.freeSomeWbufs$1"
"runtime.clearpools" "runtime.pthread_kill_trampoline"
"runtime.clearpools" "runtime.mlock_trampoline"
"runtime.clearpools" "runtime.pthread_create_trampoline"
"runtime.clearpools" "(*runtime.pageAlloc).scavenge$1"
"runtime.clearpools" "syscall.libc_pipe_trampoline"
"runtime.clearpools" "syscall.libc_kill_trampoline"
"runtime.clearpools" "syscall.libc_wait4_trampoline"
"runtime.clearpools" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"runtime.clearpools" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"runtime.clearpools" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"runtime.clearpools" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"runtime.clearpools" "syscall.libc_mkdir_trampoline"
"runtime.clearpools" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"runtime.clearpools" "go/types.hasVarSize$1"
"runtime.clearpools" "(*go/types.tpWalker).isParameterized$1"
"runtime.clearpools" "runtime.kqueue_trampoline"
"runtime.clearpools" "runtime._LostExternalCode"
"runtime.clearpools" "runtime._LostSIGPROFDuringAtomic64"
"runtime.clearpools" "syscall.libc_fork_trampoline"
"runtime.clearpools" "syscall.libc_setsid_trampoline"
"runtime.clearpools" "syscall.libc_setpgid_trampoline"
"runtime.clearpools" "syscall.libc_getpid_trampoline"
"runtime.clearpools" "syscall.libc_ioctl_trampoline"
"runtime.clearpools" "syscall.libc_chroot_trampoline"
"runtime.clearpools" "syscall.libc_setgroups_trampoline"
"runtime.clearpools" "syscall.libc_setgid_trampoline"
"runtime.clearpools" "syscall.libc_setuid_trampoline"
"runtime.clearpools" "syscall.libc_chdir_trampoline"
"runtime.clearpools" "syscall.libc_exit_trampoline"
"runtime.clearpools" "syscall.libc_unlink_trampoline"
"runtime.clearpools" "syscall.libc_rmdir_trampoline"
"runtime.clearpools" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"runtime.clearpools" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"runtime.clearpools" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"runtime.clearpools" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"runtime.clearpools" "(*go/types.unifier).nify$1"
"runtime.clearpools" "runtime.fcntl_trampoline"
"runtime.clearpools" "runtime.pipe_trampoline"
"runtime.clearpools" "runtime.munmap_trampoline"
"runtime.clearpools" "runtime.madvise_trampoline"
"runtime.clearpools" "(*go/parser.parser).safePos$1"
"runtime.clearpools" "syscall.libc_ptrace_trampoline"
"runtime.clearpools" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"runtime.clearpools" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"runtime.clearpools" "math/big.three$1"
"runtime.clearpools" "go/ast.fprint$1"
"runtime.clearpools" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"runtime.clearpools" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"runtime.gcStart" "runtime.clearpools"
"runtime.gcStart" "(*runtime/internal/atomic.Uint32).Add"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Int64).Store"
"(*runtime.gcControllerState).startCycle" "(*runtime.gcControllerState).revise"
"(*runtime.gcControllerState).setMaxIdleMarkWorkers" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.gcControllerState).setMaxIdleMarkWorkers" "runtime.throw"
"(*runtime.gcControllerState).setMaxIdleMarkWorkers" "(*runtime/internal/atomic.Uint64).CompareAndSwap"
"(*runtime.gcControllerState).startCycle" "(*runtime.gcControllerState).setMaxIdleMarkWorkers"
"(*runtime.gcControllerState).startCycle" "(*runtime.gcControllerState).setMaxIdleMarkWorkers"
"(*runtime.gcControllerState).startCycle" "(*runtime.gcControllerState).setMaxIdleMarkWorkers"
"(*runtime.gcControllerState).startCycle" "(*runtime.gcControllerState).heapGoal"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Float64).Load"
"(*runtime.gcControllerState).startCycle" "(*runtime/internal/atomic.Uint64).Load"
"runtime.gcStart" "(*runtime.gcControllerState).startCycle"
"runtime.gcStart" "(*runtime.gcCPULimiterState).startGCTransition"
"runtime.gcStart" "runtime.schedEnableUser"
"runtime.gcStart" "runtime.setGCPhase"
"runtime.gcStart" "runtime.gcBgMarkPrepare"
"runtime.gcMarkRootPrepare" "runtime.assertWorldStopped"
"runtime.gcMarkRootPrepare" "runtime.activeModules"
"runtime.gcMarkRootPrepare$1" "runtime.divRoundUp"
"runtime.gcMarkRootPrepare" "runtime.gcMarkRootPrepare$1"
"runtime.gcMarkRootPrepare" "runtime.activeModules"
"runtime.gcMarkRootPrepare" "runtime.gcMarkRootPrepare$1"
"runtime.allGsSnapshot" "runtime.assertWorldStoppedOrLockHeld"
"runtime.gcMarkRootPrepare" "runtime.allGsSnapshot"
"runtime.gcStart" "runtime.gcMarkRootPrepare"
"runtime.gcMarkTinyAllocs" "runtime.assertWorldStopped"
"runtime.gcMarkTinyAllocs" "runtime.findObject"
"runtime.gcMarkTinyAllocs" "runtime.greyobject"
"runtime.gcStart" "runtime.gcMarkTinyAllocs"
"runtime.gcStart" "runtime/internal/atomic.Store"
"runtime.gcStart" "runtime.acquirem"
"runtime.gcStart" "runtime.systemstack"
"runtime.gcStart" "runtime.semrelease"
"runtime.gcStart" "runtime.releasem"
"runtime.gcStart" "runtime.Gosched"
"runtime.gcStart" "runtime.semrelease"
"runtime.mallocgc" "runtime.gcStart"
"runtime.mallocgc" "runtime.add"
"runtime.rawstring" "runtime.mallocgc"
"runtime.gostring" "runtime.rawstring"
"runtime.gostring" "runtime.memmove"
"runtime.expandCgoFrames" "runtime.gostring"
"runtime.expandCgoFrames" "runtime.gostring"
"runtime.expandCgoFrames" "runtime.callCgoSymbolizer"
"runtime.expandCgoFrames" "runtime.callCgoSymbolizer"
"(*runtime.Frames).Next" "runtime.expandCgoFrames"
"(*runtime.Frames).Next" "runtime.newInlineUnwinder"
"(*runtime.Frames).Next" "(*runtime.inlineUnwinder).srcFunc"
"(*runtime.Frames).Next" "(*runtime.inlineUnwinder).isInlined"
"(*runtime.Frames).Next" "(runtime.srcFunc).name"
"(*runtime.Frames).Next" "runtime.funcNameForPrint"
"(*runtime.Frames).Next" "(runtime.funcInfo).valid"
"(*runtime.Frames).Next" "runtime.funcline1"
"runtime.Caller" "(*runtime.Frames).Next"
"go/types.assert" "runtime.Caller"
"go/types.assert" "fmt.Sprintf"
"(*go/types.StdSizes).Alignof$1" "go/types.assert"
"(*sync.Once).doSlow" "(*go/types.StdSizes).Alignof$1"
"(*sync.Once).doSlow" "syscall.copyenv"
"(*sync.Once).doSlow" "syscall.libc_fchown_trampoline"
"(*sync.Once).doSlow" "syscall.libc_fcntl_trampoline"
"(*sync.Once).doSlow" "syscall.libc_pread_trampoline"
"(*sync.Once).doSlow" "syscall.libc_getcwd_trampoline"
"(*sync.Once).doSlow" "runtime.fatalthrow$1"
"(*sync.Once).doSlow" "flag.commandLineUsage"
"(*sync.Once).doSlow" "runtime.chansend$1"
"(*sync.Once).doSlow" "runtime.asyncPreempt2"
"(*sync.Once).doSlow" "syscall.libc_fstat_trampoline"
"(*sync.Once).doSlow" "flag.init$1"
"(*sync.Once).doSlow" "syscall.libc_mmap_trampoline"
"(*sync.Once).doSlow" "(*go/types.gcSizes).Alignof$1"
"(*sync.Once).doSlow" "syscall.libc_fchmod_trampoline"
"(*sync.Once).doSlow" "reflect.methodValueCall"
"(*sync.Once).doSlow" "go/types.resolve$1"
"(*sync.Once).doSlow" "runtime.goready$1"
"(*sync.Once).doSlow" "runtime.gcStart$1"
"(*sync.Once).doSlow" "runtime.init$1"
"(*sync.Once).doSlow" "(log/slog.Value).Resolve$1"
"(*sync.Once).doSlow" "time.initLocal"
"(*sync.Once).doSlow" "time.FixedZone$1"
"(*sync.Once).doSlow" "runtime.gcStart$3"
"(*sync.Once).doSlow" "go/types.computeInterfaceTypeSet$1"
"(*sync.Once).doSlow" "syscall.libc_write_trampoline"
"(*sync.Once).doSlow" "runtime.chanrecv$1"
"(*sync.Once).doSlow" "(*fmt.ss).Token$1"
"(*sync.Once).doSlow" "syscall.libc_lseek_trampoline"
"(*sync.Once).doSlow" "syscall.libc_setsockopt_trampoline"
"(*sync.Once).doSlow" "syscall.libc_pwrite_trampoline"
"(*sync.Once).doSlow" "syscall.libc_sendto_trampoline"
"(*sync.Once).doSlow" "syscall.libc_getrlimit_trampoline"
"(*sync.Once).doSlow" "syscall.libc_execve_trampoline"
"(*sync.Once).doSlow" "syscall.libc_dup2_trampoline"
"(*sync.Once).doSlow" "internal/poll.runtime_pollServerInit"
"(*sync.Once).doSlow" "runtime.throw$1"
"(*sync.Once).doSlow" "runtime.SetFinalizer$1"
"(*sync.Once).doSlow" "runtime.gcResetMarkState"
"(*sync.Once).doSlow" "runtime.asyncPreempt"
"(*sync.Once).doSlow" "syscall.libc_recvfrom_trampoline"
"(*sync.Once).doSlow" "(*log/slog.Level).parse$1"
"(*sync.Once).doSlow" "runtime.gcStart$2"
"(*sync.Once).doSlow" "syscall.libc_read_trampoline"
"(*sync.Once).doSlow" "sync.poolCleanup"
"(*sync.Once).doSlow" "syscall.libc_getsockopt_trampoline"
"(*sync.Once).doSlow" "syscall.libc_close_trampoline"
"(*sync.Once).doSlow" "(*internal/godebug.Setting).IncNonDefault"
"(*sync.Once).doSlow" "syscall.libc_dup_trampoline"
"(*sync.Once).doSlow" "syscall.libc_openat_trampoline"
"(*sync.Once).doSlow" "syscall.libc_fdopendir_trampoline"
"(*sync.Once).doSlow" "syscall.libc_closedir_trampoline"
"(*sync.Once).doSlow" "syscall.libc_readdir_r_trampoline"
"(*sync.Once).doSlow" "syscall.libc_recvmsg_trampoline"
"(*sync.Once).doSlow" "syscall.libc_sendmsg_trampoline"
"(*sync.Once).doSlow" "syscall.libc_lstat_trampoline"
"(*sync.Once).doSlow" "syscall.libc_stat_trampoline"
"(*sync.Once).doSlow" "syscall.libc_open_trampoline"
"(*sync.Once).doSlow" "runtime.callers$1"
"(*sync.Once).doSlow" "golang.org/x/tools/go/packages.goListDriver$1"
"(*sync.Once).doSlow" "golang.org/x/tools/go/packages.goListDriver$2"
"(*sync.Once).doSlow" "(*go/types.Named).expandUnderlying$1"
"(*sync.Once).doSlow" "(*go/types.Checker).objDecl$1"
"(*sync.Once).doSlow" "(*go/types.Checker).objDecl$2"
"(*sync.Once).doSlow" "(*internal/godebug.Setting).Value$1"
"(*sync.Once).doSlow" "runtime.casgstatus$1"
"(*sync.Once).doSlow" "runtime.osyield"
"(*sync.Once).doSlow" "runtime.nanotime_trampoline"
"(*sync.Once).doSlow" "runtime.cgoCheckTypedBlock$1"
"(*sync.Once).doSlow" "runtime.sweepone$1"
"(*sync.Once).doSlow" "flag.isZeroValue$1"
"(*sync.Once).doSlow" "go/types.computeInterfaceTypeSet$2$1"
"(*sync.Once).doSlow" "regexp/syntax.parse$1"
"(*sync.Once).doSlow" "syscall.libc_sysctl_trampoline"
"(*sync.Once).doSlow" "go/parser.ParseFile$1"
"(*sync.Once).doSlow" "(*golang.org/x/sync/errgroup.Group).Go$1"
"(*sync.Once).doSlow" "context.WithCancel$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"(*sync.Once).doSlow" "(*go/types.Checker).validCycle$1"
"(*sync.Once).doSlow" "(*go/types.Checker).typeDecl$1"
"(*sync.Once).doSlow" "(*go/types.Checker).collectMethods$1"
"(*sync.Once).doSlow" "(*go/types.Checker).funcDecl$1"
"(*sync.Once).doSlow" "(*go/types.subster).typ$2"
"(*sync.Once).doSlow" "(*go/types.typeWriter).signature$1"
"(*sync.Once).doSlow" "(*encoding/json.encodeState).marshal$1"
"(*sync.Once).doSlow" "runtime.exit_trampoline"
"(*sync.Once).doSlow" "runtime.wbBufFlush$1"
"(*sync.Once).doSlow" "(*runtime.sweepLocked).sweep$1"
"(*sync.Once).doSlow" "(*runtime.sweepLocked).sweep$2"
"(*sync.Once).doSlow" "runtime.gcBgMarkWorker$2"
"(*sync.Once).doSlow" "runtime.mspinning"
"(*sync.Once).doSlow" "reflect.embeddedIfaceMethStub"
"(*sync.Once).doSlow" "(*internal/godebug.Setting).register"
"(*sync.Once).doSlow" "runtime.persistentalloc$1"
"(*sync.Once).doSlow" "(*log/slog.handleState).appendValue$1"
"(*sync.Once).doSlow" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"(*sync.Once).doSlow" "(*go/types.Checker).collectTypeParams$1"
"(*sync.Once).doSlow" "(*go/types.Checker).funcType$2"
"(*sync.Once).doSlow" "runtime.usleep_trampoline"
"(*sync.Once).doSlow" "runtime.doRecordGoroutineProfile$1"
"(*sync.Once).doSlow" "runtime.pthread_mutex_init_trampoline"
"(*sync.Once).doSlow" "runtime.pthread_cond_init_trampoline"
"(*sync.Once).doSlow" "runtime.pthread_mutex_lock_trampoline"
"(*sync.Once).doSlow" "runtime.pthread_mutex_unlock_trampoline"
"(*sync.Once).doSlow" "runtime.pthread_cond_wait_trampoline"
"(*sync.Once).doSlow" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"(*sync.Once).doSlow" "runtime._LostContendedRuntimeLock"
"(*sync.Once).doSlow" "(*runtime.mLockProfile).captureStack$1"
"(*sync.Once).doSlow" "runtime.pthread_cond_signal_trampoline"
"(*sync.Once).doSlow" "runtime.tracefree$1"
"(*sync.Once).doSlow" "(*runtime.mheap).freeSpan$1"
"(*sync.Once).doSlow" "runtime.gcMarkDone$2"
"(*sync.Once).doSlow" "runtime.gcMarkDone$3"
"(*sync.Once).doSlow" "runtime.gcMarkDone$4"
"(*sync.Once).doSlow" "runtime.entersyscallblock$1"
"(*sync.Once).doSlow" "runtime.entersyscallblock$2"
"(*sync.Once).doSlow" "runtime.entersyscallblock_handoff"
"(*sync.Once).doSlow" "runtime.exitsyscall$1"
"(*sync.Once).doSlow" "runtime.exitsyscall$2"
"(*sync.Once).doSlow" "runtime.cgoCheckPtrWrite$1"
"(*sync.Once).doSlow" "(*internal/lazyregexp.Regexp).build"
"(*sync.Once).doSlow" "regexp.mergeRuneSets$1"
"(*sync.Once).doSlow" "runtime.unreachableMethod"
"(*sync.Once).doSlow" "runtime.heapSetType$1"
"(*sync.Once).doSlow" "runtime.tracealloc$1"
"(*sync.Once).doSlow" "syscall.libc_chmod_trampoline"
"(*sync.Once).doSlow" "(*os/exec.Cmd).Start$1"
"(*sync.Once).doSlow" "(*context.cancelCtx).propagateCancel$1"
"(*sync.Once).doSlow" "(*context.cancelCtx).propagateCancel$2"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"(*sync.Once).doSlow" "(*go/types.Checker).rawExpr$1"
"(*sync.Once).doSlow" "(*go/types.Checker).validVarType$1"
"(*sync.Once).doSlow" "(*go/types.Checker).typInternal$1"
"(*sync.Once).doSlow" "(*go/types.Checker).typInternal$2"
"(*sync.Once).doSlow" "runtime.stopTheWorld$1"
"(*sync.Once).doSlow" "runtime.startTheWorld$1"
"(*sync.Once).doSlow" "runtime.wirep$1"
"(*sync.Once).doSlow" "runtime.wirep$2"
"(*sync.Once).doSlow" "runtime.kevent_trampoline"
"(*sync.Once).doSlow" "runtime.read_trampoline"
"(*sync.Once).doSlow" "runtime.raise_trampoline"
"(*sync.Once).doSlow" "runtime.cgoSigtramp"
"(*sync.Once).doSlow" "runtime.sigtramp"
"(*sync.Once).doSlow" "runtime.forEachP$1"
"(*sync.Once).doSlow" "runtime.gcMarkTermination$1"
"(*sync.Once).doSlow" "runtime.gcMarkTermination$2"
"(*sync.Once).doSlow" "runtime.gcControllerCommit"
"(*sync.Once).doSlow" "runtime.gcMarkTermination$3"
"(*sync.Once).doSlow" "runtime.freeStackSpans"
"(*sync.Once).doSlow" "runtime.gcMarkTermination$5"
"(*sync.Once).doSlow" "runtime.exitsyscallfast$1"
"(*sync.Once).doSlow" "runtime.allocm$1"
"(*sync.Once).doSlow" "runtime.mstart"
"(*sync.Once).doSlow" "runtime.getempty$1"
"(*sync.Once).doSlow" "(*runtime.p).destroy$1"
"(*sync.Once).doSlow" "runtime.gcAssistAlloc$1"
"(*sync.Once).doSlow" "(*runtime.mheap).alloc$1"
"(*sync.Once).doSlow" "runtime.mProf_Malloc$1"
"(*sync.Once).doSlow" "runtime.Stack$1"
"(*sync.Once).doSlow" "(*os/exec.Cmd).awaitGoroutines$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"(*sync.Once).doSlow" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"(*sync.Once).doSlow" "(*go/types.Checker).exprInternal$1"
"(*sync.Once).doSlow" "(*go/types.Checker).instantiatedType$1"
"(*sync.Once).doSlow" "(*go/types.Checker).instantiatedType$2"
"(*sync.Once).doSlow" "(*go/types.Checker).structType$3"
"(*sync.Once).doSlow" "(*go/types.Checker).interfaceType$2"
"(*sync.Once).doSlow" "runtime.reentersyscall$1"
"(*sync.Once).doSlow" "runtime.reentersyscall$2"
"(*sync.Once).doSlow" "runtime.entersyscall_sysmon"
"(*sync.Once).doSlow" "runtime.runSafePointFn"
"(*sync.Once).doSlow" "runtime.entersyscall_gcwait"
"(*sync.Once).doSlow" "(*runtime.traceMap).put$1"
"(*sync.Once).doSlow" "runtime.fatal$1"
"(*sync.Once).doSlow" "runtime.write_trampoline"
"(*sync.Once).doSlow" "(runtime.traceWriter).refill$1"
"(*sync.Once).doSlow" "runtime.mmap_trampoline"
"(*sync.Once).doSlow" "runtime.sigprocmask_trampoline"
"(*sync.Once).doSlow" "runtime.sigaction_trampoline"
"(*sync.Once).doSlow" "runtime.gcMarkTermination$4$1"
"(*sync.Once).doSlow" "(*runtime.mspan).setUserArenaChunkToFault$1"
"(*sync.Once).doSlow" "runtime.exitsyscallfast_reacquired$1"
"(*sync.Once).doSlow" "(*runtime.traceStringTable).put$1"
"(*sync.Once).doSlow" "(*runtime.rwmutex).rlock$1"
"(*sync.Once).doSlow" "runtime.traceThreadDestroy$1"
"(*sync.Once).doSlow" "runtime.malg$1"
"(*sync.Once).doSlow" "runtime.allocmcache$1"
"(*sync.Once).doSlow" "runtime.freemcache$1"
"(*sync.Once).doSlow" "golang.org/x/tools/internal/event/core.ExportPair$1"
"(*sync.Once).doSlow" "golang.org/x/tools/internal/event/core.ExportPair$2"
"(*sync.Once).doSlow" "go/types.parseUnion$1"
"(*sync.Once).doSlow" "runtime._VDSO"
"(*sync.Once).doSlow" "runtime._ExternalCode"
"(*sync.Once).doSlow" "runtime._GC"
"(*sync.Once).doSlow" "runtime._System"
"(*sync.Once).doSlow" "runtime.sigpanic"
"(*sync.Once).doSlow" "runtime.raiseproc_trampoline"
"(*sync.Once).doSlow" "runtime.markrootFreeGStacks"
"(*sync.Once).doSlow" "runtime.markroot$1"
"(*sync.Once).doSlow" "runtime.walltime_trampoline"
"(*sync.Once).doSlow" "runtime.pthread_attr_init_trampoline"
"(*sync.Once).doSlow" "runtime.pthread_attr_getstacksize_trampoline"
"(*sync.Once).doSlow" "runtime.pthread_attr_setdetachstate_trampoline"
"(*sync.Once).doSlow" "runtime.mstart_stub"
"(*sync.Once).doSlow" "go/build/constraint.parseExpr$1"
"(*sync.Once).doSlow" "(*go/parser.parser).parsePrimaryExpr$1"
"(*sync.Once).doSlow" "(*go/parser.parser).parseBinaryExpr$1"
"(*sync.Once).doSlow" "(*go/parser.parser).parseParameterList$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"(*sync.Once).doSlow" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"(*sync.Once).doSlow" "(*go/types.Checker).infer$1"
"(*sync.Once).doSlow" "(*go/types.Checker).infer$2"
"(*sync.Once).doSlow" "(*go/types.Checker).instantiateSignature$1"
"(*sync.Once).doSlow" "(*go/types.Checker).instantiateSignature$2"
"(*sync.Once).doSlow" "(*go/types.Checker).genericExprList$1"
"(*sync.Once).doSlow" "runtime.printArgs$3"
"(*sync.Once).doSlow" "runtime.freeSomeWbufs$1"
"(*sync.Once).doSlow" "runtime.pthread_kill_trampoline"
"(*sync.Once).doSlow" "runtime.mlock_trampoline"
"(*sync.Once).doSlow" "runtime.pthread_create_trampoline"
"(*sync.Once).doSlow" "(*runtime.pageAlloc).scavenge$1"
"(*sync.Once).doSlow" "syscall.libc_pipe_trampoline"
"(*sync.Once).doSlow" "syscall.libc_kill_trampoline"
"(*sync.Once).doSlow" "syscall.libc_wait4_trampoline"
"(*sync.Once).doSlow" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"(*sync.Once).doSlow" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"(*sync.Once).doSlow" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"(*sync.Once).doSlow" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"(*sync.Once).doSlow" "syscall.libc_mkdir_trampoline"
"(*sync.Once).doSlow" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"(*sync.Once).doSlow" "go/types.hasVarSize$1"
"(*sync.Once).doSlow" "(*go/types.tpWalker).isParameterized$1"
"(*sync.Once).doSlow" "runtime.kqueue_trampoline"
"(*sync.Once).doSlow" "runtime._LostExternalCode"
"(*sync.Once).doSlow" "runtime._LostSIGPROFDuringAtomic64"
"(*sync.Once).doSlow" "syscall.libc_fork_trampoline"
"(*sync.Once).doSlow" "syscall.libc_setsid_trampoline"
"(*sync.Once).doSlow" "syscall.libc_setpgid_trampoline"
"(*sync.Once).doSlow" "syscall.libc_getpid_trampoline"
"(*sync.Once).doSlow" "syscall.libc_ioctl_trampoline"
"(*sync.Once).doSlow" "syscall.libc_chroot_trampoline"
"(*sync.Once).doSlow" "syscall.libc_setgroups_trampoline"
"(*sync.Once).doSlow" "syscall.libc_setgid_trampoline"
"(*sync.Once).doSlow" "syscall.libc_setuid_trampoline"
"(*sync.Once).doSlow" "syscall.libc_chdir_trampoline"
"(*sync.Once).doSlow" "syscall.libc_exit_trampoline"
"(*sync.Once).doSlow" "syscall.libc_unlink_trampoline"
"(*sync.Once).doSlow" "syscall.libc_rmdir_trampoline"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"(*sync.Once).doSlow" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"(*sync.Once).doSlow" "(*go/types.unifier).nify$1"
"(*sync.Once).doSlow" "runtime.fcntl_trampoline"
"(*sync.Once).doSlow" "runtime.pipe_trampoline"
"(*sync.Once).doSlow" "runtime.munmap_trampoline"
"(*sync.Once).doSlow" "runtime.madvise_trampoline"
"(*sync.Once).doSlow" "(*go/parser.parser).safePos$1"
"(*sync.Once).doSlow" "syscall.libc_ptrace_trampoline"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"(*sync.Once).doSlow" "math/big.three$1"
"(*sync.Once).doSlow" "go/ast.fprint$1"
"(*sync.Once).doSlow" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"(*sync.Once).doSlow" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"(*sync.Once).Do" "(*sync.Once).doSlow"
"(*time.Location).get" "(*sync.Once).Do"
"(time.Time).abs" "(*time.Location).get"
"(time.Time).abs" "(*time.Time).unixSec"
"(time.Time).abs" "(*time.Location).lookup"
"(time.Time).GoString" "(time.Time).abs"
"(time.Time).GoString" "time.absDate"
"(time.Time).GoString" "time.absClock"
"(time.Time).GoString" "time.appendInt"
"(time.Time).GoString" "time.appendInt"
"(time.Time).GoString" "time.appendInt"
"(time.Time).GoString" "time.appendInt"
"(time.Time).GoString" "time.appendInt"
"(time.Time).GoString" "(time.Time).Nanosecond"
"(time.Time).GoString" "time.appendInt"
"(time.Time).GoString" "(time.Time).Location"
"(time.Time).GoString" "time.appendInt"
"(time.Time).GoString" "time.quote"
"(*fmt.pp).handleMethods" "(time.Time).GoString"
"(*fmt.pp).handleMethods" "(*encoding/json.SyntaxError).Error"
"(*fmt.fmt).fmtS" "(*fmt.fmt).truncateString"
"(*fmt.fmt).fmtS" "(*fmt.fmt).padString"
"(*fmt.pp).handleMethods" "(*fmt.fmt).fmtS"
"(*fmt.pp).handleMethods" "(*fmt.pp).catchPanic"
"(*fmt.pp).handleMethods" "(*errors.errorString).Error"
"(*fmt.pp).handleMethods" "(runtime.errorString).Error"
"(*fmt.pp).handleMethods" "(golang.org/x/tools/internal/gcimporter.anyType).String"
"(*fmt.pp).handleMethods" "(*io/fs.PathError).Error"
"(*fmt.pp).handleMethods" "(syscall.Errno).Error"
"(math/big.nat).String" "(math/big.nat).itoa"
"(*fmt.pp).handleMethods" "(math/big.nat).String"
"(*fmt.pp).handleMethods" "(context.deadlineExceededError).Error"
"(*go/types.operand).String" "go/types.operandString"
"(*fmt.pp).handleMethods" "(*go/types.operand).String"
"(*fmt.pp).handleMethods" "(*internal/poll.DeadlineExceededError).Error"
"(*fmt.pp).handleMethods" "(*fmt.wrapError).Error"
"(*fmt.pp).handleMethods" "(*fmt.wrapErrors).Error"
"(*fmt.pp).handleMethods" "(runtime.plainError).Error"
"(*fmt.pp).handleMethods" "(*math/big.Int).String"
"(*fmt.pp).handleMethods" "(*reflect.ValueError).Error"
"(*fmt.pp).handleMethods" "(*strconv.NumError).Error"
"(*fmt.pp).handleMethods" "(*time.ParseError).Error"
"(*fmt.pp).handleMethods" "(internal/poll.errNetClosing).Error"
"(*fmt.pp).handleMethods" "(encoding/binary.littleEndian).String"
"(*fmt.pp).handleMethods" "(*os.SyscallError).Error"
"(*fmt.pp).handleMethods" "(*encoding/json.UnsupportedValueError).Error"
"(*fmt.pp).handleMethods" "(go/constant.floatVal).String"
"(*fmt.pp).handleMethods" "(*os.ProcessState).String"
"(*math/big.Rat).String" "(*math/big.Rat).marshal"
"(*fmt.pp).handleMethods" "(*math/big.Rat).String"
"(*fmt.pp).fmtString" "(*fmt.fmt).fmtS"
"(*fmt.fmt).fmtQ" "(*fmt.fmt).truncateString"
"(*fmt.fmt).fmtQ" "(*fmt.fmt).padString"
"(*fmt.fmt).fmtQ" "strconv.CanBackquote"
"strconv.AppendQuoteToASCII" "strconv.appendQuotedWith"
"(*fmt.fmt).fmtQ" "strconv.AppendQuoteToASCII"
"(*fmt.fmt).pad" "(*fmt.buffer).write"
"(*fmt.fmt).pad" "unicode/utf8.RuneCount"
"(*fmt.fmt).pad" "(*fmt.fmt).writePadding"
"(*fmt.fmt).pad" "(*fmt.buffer).write"
"(*fmt.fmt).pad" "(*fmt.buffer).write"
"(*fmt.fmt).pad" "(*fmt.fmt).writePadding"
"(*fmt.fmt).fmtQ" "(*fmt.fmt).pad"
"(*fmt.fmt).fmtQ" "strconv.AppendQuote"
"(*fmt.fmt).fmtQ" "(*fmt.fmt).pad"
"(*fmt.pp).fmtString" "(*fmt.fmt).fmtQ"
"(*fmt.pp).fmtString" "(*fmt.fmt).fmtS"
"(*fmt.fmt).fmtSbx" "(*fmt.fmt).writePadding"
"(*fmt.fmt).fmtSbx" "(*fmt.fmt).writePadding"
"(*fmt.fmt).fmtSbx" "(*fmt.fmt).writePadding"
"(*fmt.fmt).fmtSx" "(*fmt.fmt).fmtSbx"
"(*fmt.pp).fmtString" "(*fmt.fmt).fmtSx"
"(*fmt.pp).fmtString" "(*fmt.fmt).fmtSx"
"(*fmt.pp).fmtString" "(*fmt.fmt).fmtQ"
"(*fmt.pp).fmtString" "(*fmt.pp).badVerb"
"(*fmt.pp).handleMethods" "(*fmt.pp).fmtString"
"(*fmt.pp).handleMethods" "(*fmt.pp).catchPanic"
"(log/slog.Value).append" "(log/slog.Value).Kind"
"(log/slog.Value).append" "(log/slog.Value).str"
"(log/slog.Value).append" "strconv.AppendInt"
"(log/slog.Value).append" "strconv.AppendUint"
"(log/slog.Value).float" "math.Float64frombits"
"(log/slog.Value).append" "(log/slog.Value).float"
"(log/slog.Value).append" "strconv.AppendFloat"
"(log/slog.Value).append" "(log/slog.Value).bool"
"(log/slog.Value).append" "strconv.AppendBool"
"(log/slog.Value).append" "(log/slog.Value).duration"
"(time.Duration).format" "time.fmtFrac"
"(time.Duration).format" "time.fmtInt"
"(time.Duration).format" "time.fmtFrac"
"(time.Duration).format" "time.fmtInt"
"(time.Duration).format" "time.fmtInt"
"(time.Duration).format" "time.fmtInt"
"(time.Duration).String" "(time.Duration).format"
"(log/slog.Value).append" "(time.Duration).String"
"(log/slog.Value).time" "time.Unix"
"(time.Time).In" "(*time.Time).setLoc"
"(log/slog.Value).time" "(time.Time).In"
"(log/slog.Value).append" "(log/slog.Value).time"
"(time.Time).AppendFormat" "(time.Time).appendFormatRFC3339"
"(time.Time).AppendFormat" "(time.Time).appendFormatRFC3339"
"(time.Time).appendFormat" "(time.Time).locabs"
"(time.Time).appendFormat" "time.nextStdChunk"
"(time.Time).appendFormat" "time.absDate"
"(time.Time).appendFormat" "time.absClock"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Month).String" "time.fmtInt"
"(time.Time).appendFormat" "(time.Month).String"
"(time.Time).appendFormat" "(time.Month).String"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.absWeekday"
"(time.Weekday).String" "time.fmtInt"
"(time.Time).appendFormat" "(time.Weekday).String"
"(time.Time).appendFormat" "time.absWeekday"
"(time.Time).appendFormat" "(time.Weekday).String"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "(time.Time).Nanosecond"
"(time.Time).appendFormat" "time.appendNano"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).appendFormat" "time.appendInt"
"(time.Time).AppendFormat" "(time.Time).appendFormat"
"(time.Time).Format" "(time.Time).AppendFormat"
"(time.Time).String" "(time.Time).Format"
"(time.Time).String" "time.appendInt"
"(time.Time).String" "time.appendInt"
"(time.Time).String" "time.appendInt"
"(log/slog.Value).append" "(time.Time).String"
"(log/slog.Value).append" "(log/slog.Value).group"
"fmt.Append" "fmt.newPrinter"
"fmt.Append" "(*fmt.pp).doPrint"
"fmt.Append" "(*fmt.pp).free"
"(log/slog.Value).append" "fmt.Append"
"(log/slog.Value).append" "fmt.Append"
"(log/slog.Value).append" "(log/slog.Value).Kind"
"(log/slog.Value).append" "fmt.Sprintf"
"(log/slog.Value).String" "(log/slog.Value).append"
"(*fmt.pp).handleMethods" "(log/slog.Value).String"
"(*go/types.Package).String" "fmt.Sprintf"
"(*fmt.pp).handleMethods" "(*go/types.Package).String"
"(*fmt.pp).handleMethods" "(internal/reflectlite.rtype).String"
"(*fmt.pp).handleMethods" "(github.com/worldiety/macro/ast/wdy.TypeReference).String"
"(*fmt.pp).handleMethods" "(*log/slog/internal/buffer.Buffer).String"
"(*fmt.pp).handleMethods" "(context.backgroundCtx).String"
"(*fmt.pp).handleMethods" "(*go/types.Interface).String"
"(*go/types.Var).String" "go/types.ObjectString"
"(*fmt.pp).handleMethods" "(*go/types.Var).String"
"go/build/constraint.orArg" "(*go/build/constraint.OrExpr).String"
"go/build/constraint.andArg" "(*go/build/constraint.OrExpr).String"
"go/build/constraint.andArg" "(*go/build/constraint.AndExpr).String"
"(*go/build/constraint.NotExpr).String" "(*go/build/constraint.OrExpr).String"
"(*go/build/constraint.NotExpr).String" "(*go/build/constraint.AndExpr).String"
"(*go/build/constraint.NotExpr).String" "(*go/build/constraint.NotExpr).String"
"(*go/build/constraint.NotExpr).String" "(*go/build/constraint.TagExpr).String"
"go/build/constraint.andArg" "(*go/build/constraint.NotExpr).String"
"go/build/constraint.andArg" "(*go/build/constraint.TagExpr).String"
"(*go/build/constraint.AndExpr).String" "go/build/constraint.andArg"
"(*go/build/constraint.AndExpr).String" "go/build/constraint.andArg"
"go/build/constraint.orArg" "(*go/build/constraint.AndExpr).String"
"go/build/constraint.orArg" "(*go/build/constraint.NotExpr).String"
"go/build/constraint.orArg" "(*go/build/constraint.TagExpr).String"
"(*go/build/constraint.OrExpr).String" "go/build/constraint.orArg"
"(*go/build/constraint.OrExpr).String" "go/build/constraint.orArg"
"(*fmt.pp).handleMethods" "(*go/build/constraint.OrExpr).String"
"(*fmt.pp).handleMethods" "(*reflect.rtype).String"
"encoding/json.MarshalIndent" "encoding/json.Marshal"
"encoding/json.appendIndent" "encoding/json.newScanner"
"encoding/json.appendIndent" "encoding/json.freeScanner"
"encoding/json.appendIndent" "(*encoding/json.scanner).eof"
"encoding/json.appendIndent" "encoding/json.appendNewline"
"encoding/json.appendIndent" "encoding/json.appendNewline"
"encoding/json.appendIndent" "encoding/json.appendNewline"
"encoding/json.appendIndent" "encoding/json.stateBeginValue"
"encoding/json.appendIndent" "encoding/json.stateBeginStringOrEmpty"
"encoding/json.appendIndent" "encoding/json.stateBeginValueOrEmpty"
"encoding/json.appendIndent" "encoding/json.stateInString"
"encoding/json.appendIndent" "encoding/json.stateNeg"
"encoding/json.appendIndent" "encoding/json.state0"
"encoding/json.appendIndent" "encoding/json.stateT"
"encoding/json.appendIndent" "encoding/json.stateF"
"encoding/json.appendIndent" "encoding/json.stateN"
"encoding/json.appendIndent" "encoding/json.state1"
"encoding/json.appendIndent" "encoding/json.stateEndTop"
"encoding/json.appendIndent" "encoding/json.stateEndValue"
"encoding/json.appendIndent" "encoding/json.stateBeginString"
"encoding/json.appendIndent" "encoding/json.stateInStringEsc"
"encoding/json.appendIndent" "encoding/json.stateDot"
"encoding/json.appendIndent" "encoding/json.stateE"
"encoding/json.appendIndent" "encoding/json.stateTr"
"encoding/json.appendIndent" "encoding/json.stateFa"
"encoding/json.appendIndent" "encoding/json.stateNu"
"encoding/json.appendIndent" "encoding/json.stateError"
"encoding/json.appendIndent" "encoding/json.stateInStringEscU"
"encoding/json.appendIndent" "encoding/json.stateDot0"
"encoding/json.appendIndent" "encoding/json.stateESign"
"encoding/json.appendIndent" "encoding/json.stateTru"
"encoding/json.appendIndent" "encoding/json.stateFal"
"encoding/json.appendIndent" "encoding/json.stateNul"
"encoding/json.appendIndent" "encoding/json.stateInStringEscU1"
"encoding/json.appendIndent" "encoding/json.stateE0"
"encoding/json.appendIndent" "encoding/json.stateFals"
"encoding/json.appendIndent" "encoding/json.stateInStringEscU12"
"encoding/json.appendIndent" "encoding/json.stateInStringEscU123"
"encoding/json.MarshalIndent" "encoding/json.appendIndent"
"(*github.com/worldiety/macro/ast/wdy.Union).String" "encoding/json.MarshalIndent"
"(*fmt.pp).handleMethods" "(*github.com/worldiety/macro/ast/wdy.Union).String"
"(*time.Location).String" "(*time.Location).get"
"(*fmt.pp).handleMethods" "(*time.Location).String"
"(golang.org/x/tools/internal/event/label.Label).Format" "(golang.org/x/tools/internal/event/label.Label).Valid"
"(golang.org/x/tools/internal/event/label.Label).Format" "io.WriteString"
"(golang.org/x/tools/internal/event/label.Label).Format" "(golang.org/x/tools/internal/event/label.Label).Key"
"(golang.org/x/tools/internal/event/label.Label).Format" "(*golang.org/x/tools/internal/event/keys.Value).Name"
"(golang.org/x/tools/internal/event/label.Label).Format" "(*golang.org/x/tools/internal/event/keys.Tag).Name"
"(golang.org/x/tools/internal/event/label.Label).Format" "(*golang.org/x/tools/internal/event/keys.Error).Name"
"(golang.org/x/tools/internal/event/label.Label).Format" "(*golang.org/x/tools/internal/event/keys.String).Name"
"(golang.org/x/tools/internal/event/label.Label).Format" "io.WriteString"
"(golang.org/x/tools/internal/event/label.Label).Format" "io.WriteString"
"(golang.org/x/tools/internal/event/label.Label).Format" "(golang.org/x/tools/internal/event/label.Label).Key"
"(*golang.org/x/tools/internal/event/keys.Value).From" "(golang.org/x/tools/internal/event/label.Label).UnpackValue"
"(*golang.org/x/tools/internal/event/keys.Value).Format" "(*golang.org/x/tools/internal/event/keys.Value).From"
"(*golang.org/x/tools/internal/event/keys.Value).Format" "fmt.Fprint"
"(golang.org/x/tools/internal/event/label.Label).Format" "(*golang.org/x/tools/internal/event/keys.Value).Format"
"(golang.org/x/tools/internal/event/label.Label).Format" "(*golang.org/x/tools/internal/event/keys.Tag).Format"
"(*golang.org/x/tools/internal/event/keys.Error).From" "(golang.org/x/tools/internal/event/label.Label).UnpackValue"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*golang.org/x/tools/internal/event/keys.Error).From"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*errors.errorString).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(runtime.errorString).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(go/scanner.Error).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*io/fs.PathError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(syscall.Errno).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*go/build/constraint.SyntaxError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(context.deadlineExceededError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(go/scanner.ErrorList).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*internal/poll.DeadlineExceededError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*fmt.wrapError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*fmt.wrapErrors).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(runtime.plainError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "io.WriteString"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*reflect.ValueError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*strconv.NumError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*time.ParseError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(internal/poll.errNetClosing).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*go/types.ArgumentError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*os.SyscallError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*encoding/json.UnsupportedValueError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*encoding/json.UnsupportedTypeError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(os/exec.wrappedError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*encoding/json.MarshalerError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(golang.org/x/tools/go/packages.Error).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*encoding/json.UnmarshalTypeError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(go/types.Error).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(runtime.errorAddressString).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*regexp/syntax.Error).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*runtime.TypeAssertionError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*os/exec.Error).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*encoding/json.SyntaxError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*internal/bisect.parseError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*os/exec.ExitError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(math/big.ErrNaN).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*encoding/json.InvalidUnmarshalError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(encoding/base64.CorruptInputError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(*internal/reflectlite.ValueError).Error"
"(*golang.org/x/tools/internal/event/keys.Error).Format" "(time.fileSizeError).Error"
"(golang.org/x/tools/internal/event/label.Label).Format" "(*golang.org/x/tools/internal/event/keys.Error).Format"
"(*golang.org/x/tools/internal/event/keys.String).From" "(golang.org/x/tools/internal/event/label.Label).UnpackString"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(*golang.org/x/tools/internal/event/keys.String).From"
"(*golang.org/x/tools/internal/event/keys.String).Format" "strconv.AppendQuote"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(*internal/poll.FD).Write"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(io.discard).Write"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(*internal/godebug.runtimeStderr).Write"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(*fmt.pp).Write"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(*os.File).Write"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(*crypto/md5.digest).Write"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(*os/exec.prefixSuffixSaver).Write"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(*strings.Builder).Write"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(*log/slog/internal/buffer.Buffer).Write"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(*go/ast.printer).Write"
"(*golang.org/x/tools/internal/event/keys.String).Format" "(*bytes.Buffer).Write"
"(golang.org/x/tools/internal/event/label.Label).Format" "(*golang.org/x/tools/internal/event/keys.String).Format"
"(*fmt.pp).handleMethods" "(golang.org/x/tools/internal/event/label.Label).Format"
"(*fmt.pp).handleMethods" "(*os/exec.ExitError).Error"
"(log/slog.Attr).String" "fmt.Sprintf"
"(*fmt.pp).handleMethods" "(log/slog.Attr).String"
"(*fmt.pp).handleMethods" "(*go/types.TypeParam).String"
"(*fmt.pp).handleMethods" "(go/constant.ratVal).String"
"(*fmt.pp).handleMethods" "(log/slog.Level).String"
"(*fmt.pp).handleMethods" "(*go/types.term).String"
"(*fmt.pp).handleMethods" "(encoding/json.Number).String"
"(*fmt.pp).handleMethods" "(*go/types.object).String"
"(*fmt.pp).handleMethods" "(*go/types.Tuple).String"
"(*fmt.pp).handleMethods" "(go/types.color).String"
"(*fmt.pp).handleMethods" "(go/scanner.ErrorList).Error"
"(*fmt.pp).handleMethods" "(time.Time).String"
"(*fmt.pp).handleMethods" "(*encoding/json.UnmarshalTypeError).Error"
"(*fmt.pp).handleMethods" "(*go/build/constraint.TagExpr).String"
"(*fmt.pp).handleMethods" "(go/scanner.Error).Error"
"(*go/types.Builtin).String" "go/types.ObjectString"
"(*fmt.pp).handleMethods" "(*go/types.Builtin).String"
"(*fmt.pp).handleMethods" "(go/token.Position).String"
"(*go/types.PkgName).String" "go/types.ObjectString"
"(*fmt.pp).handleMethods" "(*go/types.PkgName).String"
"(*go/ast.Scope).String" "fmt.Fprintf"
"(*go/ast.Scope).String" "fmt.Fprintln"
"(*go/ast.Scope).String" "fmt.Fprintf"
"(*go/ast.Scope).String" "(*strings.Builder).String"
"(*go/ast.Scope).String" "fmt.Fprintf"
"(*fmt.pp).handleMethods" "(*go/ast.Scope).String"
"(*fmt.pp).handleMethods" "(*go/types.Basic).String"
"(*fmt.pp).handleMethods" "(go/ast.ObjKind).String"
"(*fmt.pp).handleMethods" "(go/token.Token).String"
"(*fmt.pp).handleMethods" "(*internal/bisect.parseError).Error"
"(*fmt.pp).handleMethods" "(*go/types.Struct).String"
"(*fmt.pp).handleMethods" "(internal/abi.Kind).String"
"(*os/exec.Cmd).String" "strings.Join"
"(*os/exec.Cmd).String" "(*strings.Builder).WriteString"
"(*os/exec.Cmd).String" "(*strings.Builder).WriteByte"
"(*os/exec.Cmd).String" "(*strings.Builder).WriteString"
"(*os/exec.Cmd).String" "(*strings.Builder).String"
"(*fmt.pp).handleMethods" "(*os/exec.Cmd).String"
"(*math/big.Int).Format" "(*math/big.Int).String"
"(*math/big.Int).Format" "fmt.Fprintf"
"(*math/big.Int).Format" "fmt.Fprint"
"(*math/big.Int).Format" "(*fmt.pp).Flag"
"(*math/big.Int).Format" "(*fmt.pp).Flag"
"(*math/big.Int).Format" "(*fmt.pp).Flag"
"(*math/big.Int).Format" "(math/big.nat).utoa"
"(*math/big.Int).Format" "(*fmt.pp).Precision"
"(*math/big.Int).Format" "(*fmt.pp).Width"
"(*math/big.Int).Format" "(*fmt.pp).Flag"
"math/big.writeMultiple" "(*fmt.pp).Write"
"(*math/big.Int).Format" "math/big.writeMultiple"
"(*math/big.Int).Format" "math/big.writeMultiple"
"(*math/big.Int).Format" "math/big.writeMultiple"
"(*math/big.Int).Format" "math/big.writeMultiple"
"(*math/big.Int).Format" "(*fmt.pp).Write"
"(*math/big.Int).Format" "math/big.writeMultiple"
"(*math/big.Int).Format" "(*fmt.pp).Flag"
"(*fmt.pp).handleMethods" "(*math/big.Int).Format"
"(*fmt.pp).handleMethods" "(*go/types.Signature).String"
"(*fmt.pp).handleMethods" "(*go/types.Named).String"
"(reflect.ChanDir).String" "strconv.Itoa"
"(*fmt.pp).handleMethods" "(reflect.ChanDir).String"
"(*fmt.pp).handleMethods" "(*flag.stringValue).String"
"(*github.com/worldiety/macro/ast/wdy.Interface).String" "encoding/json.MarshalIndent"
"(*fmt.pp).handleMethods" "(*github.com/worldiety/macro/ast/wdy.Interface).String"
"(*go/types.Const).String" "go/types.ObjectString"
"(*fmt.pp).handleMethods" "(*go/types.Const).String"
"(*fmt.pp).handleMethods" "(*go/build/constraint.AndExpr).String"
"(*fmt.pp).handleMethods" "(*go/types.Chan).String"
"(*fmt.pp).handleMethods" "(*go/constant.stringVal).String"
"(*fmt.pp).handleMethods" "(io/fs.FileMode).String"
"(*go/types.TypeName).String" "go/types.ObjectString"
"(*fmt.pp).handleMethods" "(*go/types.TypeName).String"
"(*fmt.pp).handleMethods" "(*math/big.Float).String"
"(*fmt.pp).handleMethods" "(log/slog.Kind).String"
"(*fmt.pp).handleMethods" "(time.fileSizeError).Error"
"(*fmt.pp).handleMethods" "(*go/types.ArgumentError).Error"
"(*fmt.pp).handleMethods" "(runtime.lockRank).String"
"(*fmt.pp).handleMethods" "(go/constant.unknownVal).String"
"(go/types.unifyMode).String" "fmt.Sprintf"
"(*fmt.pp).handleMethods" "(go/types.unifyMode).String"
"(*go/types.Term).String" "(*go/types.term).String"
"(*fmt.pp).handleMethods" "(*go/types.Term).String"
"go/types.SelectionString" "(*bytes.Buffer).WriteString"
"go/types.SelectionString" "(*bytes.Buffer).WriteByte"
"go/types.SelectionString" "(*go/types.Selection).Recv"
"go/types.SelectionString" "go/types.WriteType"
"go/types.SelectionString" "go/types.WriteType"
"go/types.SelectionString" "(*go/types.object).Name"
"go/types.SelectionString" "fmt.Fprintf"
"(*go/types.Selection).Type" "go/types.NewTuple"
"(*go/types.Selection).Type" "(*go/types.object).Type"
"go/types.SelectionString" "(*go/types.Selection).Type"
"go/types.SelectionString" "(*bytes.Buffer).String"
"go/types.SelectionString" "(*bytes.Buffer).WriteByte"
"go/types.SelectionString" "go/types.unreachable"
"go/types.SelectionString" "go/types.WriteSignature"
"(*go/types.Selection).String" "go/types.SelectionString"
"(*fmt.pp).handleMethods" "(*go/types.Selection).String"
"(*go/types.Func).String" "go/types.ObjectString"
"(*fmt.pp).handleMethods" "(*go/types.Func).String"
"(*fmt.pp).handleMethods" "(*bytes.Buffer).String"
"(*fmt.pp).handleMethods" "(runtime.waitReason).String"
"(math/big.RoundingMode).String" "strconv.FormatInt"
"(*fmt.pp).handleMethods" "(math/big.RoundingMode).String"
"(*fmt.pp).handleMethods" "(time.Weekday).String"
"(*fmt.pp).handleMethods" "(go/types.termlist).String"
"(*fmt.pp).handleMethods" "(math/big.ErrNaN).Error"
"(*fmt.pp).handleMethods" "(*go/ast.Ident).String"
"(*fmt.pp).handleMethods" "(*go/types.Pointer).String"
"(*fmt.pp).handleMethods" "(syscall.Signal).String"
"(*fmt.pp).handleMethods" "(encoding/base64.CorruptInputError).Error"
"io/fs.FormatDirEntry" "(*os.unixDirent).Name"
"io/fs.FormatDirEntry" "(*os.unixDirent).Type"
"io/fs.FormatDirEntry" "(io/fs.FileMode).String"
"(*os.unixDirent).IsDir" "(io/fs.FileMode).IsDir"
"io/fs.FormatDirEntry" "(*os.unixDirent).IsDir"
"(*os.unixDirent).String" "io/fs.FormatDirEntry"
"(*fmt.pp).handleMethods" "(*os.unixDirent).String"
"(*fmt.pp).handleMethods" "(time.Month).String"
"(golang.org/x/tools/internal/event/core.Event).Format" "(time.Time).IsZero"
"(golang.org/x/tools/internal/event/core.Event).Format" "(time.Time).Format"
"(golang.org/x/tools/internal/event/core.Event).Format" "fmt.Fprint"
"(golang.org/x/tools/internal/event/core.Event).Format" "(golang.org/x/tools/internal/event/core.Event).Valid"
"(golang.org/x/tools/internal/event/core.Event).Format" "(golang.org/x/tools/internal/event/core.Event).Label"
"(golang.org/x/tools/internal/event/core.Event).Format" "(golang.org/x/tools/internal/event/label.Label).Valid"
"(golang.org/x/tools/internal/event/core.Event).Format" "fmt.Fprintf"
"(*fmt.pp).handleMethods" "(golang.org/x/tools/internal/event/core.Event).Format"
"(*fmt.pp).handleMethods" "(*strings.Builder).String"
"(*fmt.pp).handleMethods" "(time.Duration).String"
"(*fmt.pp).handleMethods" "(*go/types.Union).String"
"(*fmt.pp).handleMethods" "(*encoding/json.InvalidUnmarshalError).Error"
"(*fmt.pp).handleMethods" "(*encoding/json.UnsupportedTypeError).Error"
"(*go/types.Initializer).String" "(*bytes.Buffer).WriteString"
"(*go/types.Initializer).String" "go/types.WriteExpr"
"(*go/types.Initializer).String" "(*bytes.Buffer).String"
"(*go/types.Initializer).String" "(*bytes.Buffer).WriteString"
"(*go/types.Initializer).String" "(*go/types.object).Name"
"(*go/types.Initializer).String" "(*bytes.Buffer).WriteString"
"(*fmt.pp).handleMethods" "(*go/types.Initializer).String"
"(*fmt.pp).handleMethods" "(go/constant.int64Val).String"
"(*fmt.pp).handleMethods" "(*internal/reflectlite.ValueError).Error"
"(*go/types.Scope).WriteTo" "strings.Repeat"
"(*go/types.Scope).WriteTo" "fmt.Fprintf"
"(*go/types.Scope).Names" "sort.Strings"
"(*go/types.Scope).WriteTo" "(*go/types.Scope).Names"
"(*go/types.Scope).WriteTo" "(*go/types.Scope).Lookup"
"(*go/types.Scope).WriteTo" "fmt.Fprintf"
"(*go/types.Scope).WriteTo" "fmt.Fprintf"
"(*go/types.Scope).WriteTo" "(*go/types.Scope).WriteTo"
"(*go/types.Scope).String" "(*go/types.Scope).WriteTo"
"(*go/types.Scope).String" "(*strings.Builder).String"
"(*fmt.pp).handleMethods" "(*go/types.Scope).String"
"(*go/types.MethodSet).String" "(*go/types.MethodSet).Len"
"(*go/types.MethodSet).String" "fmt.Fprintln"
"(*go/types.MethodSet).String" "fmt.Fprintf"
"(*go/types.MethodSet).String" "fmt.Fprintln"
"(*go/types.MethodSet).String" "(*strings.Builder).String"
"(*fmt.pp).handleMethods" "(*go/types.MethodSet).String"
"(*go/types.Label).String" "go/types.ObjectString"
"(*fmt.pp).handleMethods" "(*go/types.Label).String"
"(*go/types._TypeSet).String" "(*go/types._TypeSet).IsEmpty"
"(*go/types._TypeSet).String" "(*go/types._TypeSet).IsAll"
"(*go/types._TypeSet).String" "(*go/types._TypeSet).hasTerms"
"(*go/types._TypeSet).String" "(*strings.Builder).WriteByte"
"(*go/types._TypeSet).String" "(*strings.Builder).WriteString"
"(*go/types._TypeSet).String" "(*strings.Builder).WriteString"
"(*go/types._TypeSet).String" "(*strings.Builder).WriteString"
"(*go/types._TypeSet).String" "(*go/types.Func).String"
"(*go/types._TypeSet).String" "(*strings.Builder).WriteString"
"(*go/types._TypeSet).String" "(*strings.Builder).WriteString"
"(*go/types._TypeSet).String" "(go/types.termlist).String"
"(*go/types._TypeSet).String" "(*strings.Builder).WriteString"
"(*go/types._TypeSet).String" "(*strings.Builder).WriteString"
"(*go/types._TypeSet).String" "(*strings.Builder).String"
"(*fmt.pp).handleMethods" "(*go/types._TypeSet).String"
"(*fmt.pp).handleMethods" "(reflect.Kind).String"
"(*go/types.Nil).String" "go/types.ObjectString"
"(*fmt.pp).handleMethods" "(*go/types.Nil).String"
"(*fmt.pp).handleMethods" "(reflect.Value).String"
"(*fmt.pp).handleMethods" "(go/constant.boolVal).String"
"(go/constant.Kind).String" "strconv.FormatInt"
"(*fmt.pp).handleMethods" "(go/constant.Kind).String"
"(*fmt.pp).handleMethods" "(*fmt.pp).fmtString"
"(*fmt.pp).handleMethods" "(go/constant.intVal).String"
"(*fmt.pp).handleMethods" "(*go/build/constraint.NotExpr).String"
"(golang.org/x/tools/internal/pkgbits.SyncMarker).String" "strconv.FormatInt"
"(*fmt.pp).handleMethods" "(golang.org/x/tools/internal/pkgbits.SyncMarker).String"
"(*fmt.pp).handleMethods" "(*golang.org/x/tools/go/packages.Package).String"
"(*fmt.pp).handleMethods" "(golang.org/x/tools/go/packages.Error).Error"
"(*fmt.pp).handleMethods" "(*encoding/json.MarshalerError).Error"
"(*fmt.pp).handleMethods" "(go/types.Error).Error"
"(math/big.Accuracy).String" "strconv.FormatInt"
"(*fmt.pp).handleMethods" "(math/big.Accuracy).String"
"(internal/types/errors.Code).String" "strconv.FormatInt"
"(*fmt.pp).handleMethods" "(internal/types/errors.Code).String"
"(*fmt.pp).handleMethods" "(os/exec.wrappedError).Error"
"(*fmt.pp).handleMethods" "(*regexp.Regexp).String"
"regexp/syntax.dumpProg" "strconv.Itoa"
"regexp/syntax.dumpProg" "(*strings.Builder).WriteString"
"regexp/syntax.bw" "(*strings.Builder).WriteString"
"regexp/syntax.dumpProg" "regexp/syntax.bw"
"regexp/syntax.u32" "strconv.FormatUint"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"strconv.QuoteToASCII" "strconv.quoteWith"
"regexp/syntax.dumpInst" "strconv.QuoteToASCII"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "strconv.QuoteToASCII"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpInst" "regexp/syntax.u32"
"regexp/syntax.dumpInst" "regexp/syntax.bw"
"regexp/syntax.dumpProg" "regexp/syntax.dumpInst"
"regexp/syntax.dumpProg" "regexp/syntax.bw"
"(*regexp/syntax.Prog).String" "regexp/syntax.dumpProg"
"(*regexp/syntax.Prog).String" "(*strings.Builder).String"
"(*fmt.pp).handleMethods" "(*regexp/syntax.Prog).String"
"(*regexp/syntax.Inst).String" "regexp/syntax.dumpInst"
"(*regexp/syntax.Inst).String" "(*strings.Builder).String"
"(*fmt.pp).handleMethods" "(*regexp/syntax.Inst).String"
"(*fmt.pp).handleMethods" "(regexp/syntax.InstOp).String"
"(*fmt.pp).handleMethods" "(go/constant.complexVal).String"
"(*fmt.pp).handleMethods" "(runtime.errorAddressString).Error"
"(*fmt.pp).handleMethods" "(*go/types.Array).String"
"(*fmt.pp).handleMethods" "(*go/build/constraint.SyntaxError).Error"
"(*fmt.pp).handleMethods" "(*regexp/syntax.Error).Error"
"(*fmt.pp).handleMethods" "(regexp/syntax.ErrorCode).String"
"(*fmt.pp).handleMethods" "(encoding/binary.littleEndian).GoString"
"(*fmt.pp).handleMethods" "(*runtime.TypeAssertionError).Error"
"(*fmt.pp).handleMethods" "(*os/exec.Error).Error"
"(golang.org/x/tools/go/packages.LoadMode).String" "strings.Join"
"(golang.org/x/tools/go/packages.LoadMode).String" "fmt.Sprintf"
"(*fmt.pp).handleMethods" "(golang.org/x/tools/go/packages.LoadMode).String"
"(*math/big.Float).Format" "(*fmt.pp).Precision"
"(*math/big.Float).Format" "(*math/big.Float).Append"
"(*math/big.Float).Format" "(*math/big.Float).String"
"(*math/big.Float).Format" "fmt.Fprintf"
"(*math/big.Float).Format" "(*fmt.pp).Width"
"(*math/big.Float).Format" "(*fmt.pp).Flag"
"(*math/big.Float).Format" "(*fmt.pp).Flag"
"(*math/big.Float).Format" "(*fmt.pp).Flag"
"(*math/big.Float).Format" "(*fmt.pp).Flag"
"(*math/big.Float).Format" "math/big.writeMultiple"
"(*math/big.Float).Format" "math/big.writeMultiple"
"(*math/big.Float).Format" "(*fmt.pp).Write"
"(*math/big.Float).Format" "math/big.writeMultiple"
"(*math/big.Float).Format" "(*fmt.pp).Write"
"(*math/big.Float).Format" "math/big.writeMultiple"
"(*math/big.Float).Format" "(*fmt.pp).Flag"
"(*math/big.Float).Format" "(*math/big.Float).IsInf"
"(*math/big.Float).Format" "math/big.writeMultiple"
"(*math/big.Float).Format" "math/big.writeMultiple"
"(*math/big.Float).Format" "(*fmt.pp).Write"
"(*fmt.pp).handleMethods" "(*math/big.Float).Format"
"context.contextName" "(log/slog.Value).String"
"context.contextName" "(*go/types.Package).String"
"context.contextName" "(internal/reflectlite.rtype).String"
"context.contextName" "(github.com/worldiety/macro/ast/wdy.TypeReference).String"
"context.contextName" "(*log/slog/internal/buffer.Buffer).String"
"context.contextName" "(context.backgroundCtx).String"
"context.contextName" "(*go/types.Interface).String"
"context.contextName" "(*go/types.Var).String"
"context.contextName" "(*go/build/constraint.TagExpr).String"
"context.contextName" "(*reflect.rtype).String"
"context.contextName" "(*github.com/worldiety/macro/ast/wdy.Union).String"
"context.contextName" "(*time.Location).String"
"context.contextName" "(*go/types.Chan).String"
"context.contextName" "(*go/types.Map).String"
"context.contextName" "(log/slog.Attr).String"
"context.contextName" "(*go/types.TypeParam).String"
"context.contextName" "(go/types.unifyMode).String"
"context.contextName" "(log/slog.Level).String"
"context.contextName" "(*go/types.term).String"
"context.contextName" "(encoding/json.Number).String"
"context.contextName" "(*go/types.object).String"
"context.contextName" "(*go/types.Tuple).String"
"context.contextName" "(go/types.color).String"
"context.contextName" "(*context.cancelCtx).String"
"context.contextName" "(time.Time).String"
"context.contextName" "(math/big.Accuracy).String"
"context.contextName" "(*go/types.Label).String"
"context.contextName" "(*go/build/constraint.AndExpr).String"
"context.contextName" "(*go/types.Builtin).String"
"context.contextName" "(go/token.Position).String"
"context.contextName" "(*go/types.PkgName).String"
"context.contextName" "(*go/ast.Scope).String"
"context.contextName" "(*go/types.Basic).String"
"context.contextName" "(go/ast.ObjKind).String"
"context.contextName" "(go/token.Token).String"
"context.contextName" "(regexp/syntax.ErrorCode).String"
"context.contextName" "(*go/types.Struct).String"
"context.contextName" "(internal/abi.Kind).String"
"context.contextName" "(*go/types.operand).String"
"context.contextName" "(*go/types.Alias).String"
"context.contextName" "(*go/types.Signature).String"
"context.contextName" "(*go/types.Named).String"
"context.contextName" "(reflect.ChanDir).String"
"context.contextName" "(*flag.stringValue).String"
"context.contextName" "(*github.com/worldiety/macro/ast/wdy.Interface).String"
"context.contextName" "(*go/types.Const).String"
"context.contextName" "internal/reflectlite.TypeOf"
"context.contextName" "(go/constant.complexVal).String"
"context.contextName" "(*math/big.Float).String"
"context.contextName" "(io/fs.FileMode).String"
"context.contextName" "(*go/types.TypeName).String"
"context.contextName" "(*math/big.Rat).String"
"context.contextName" "(log/slog.Kind).String"
"context.contextName" "(encoding/binary.littleEndian).String"
"context.contextName" "(*go/build/constraint.OrExpr).String"
"context.contextName" "(runtime.lockRank).String"
"context.contextName" "(*os.ProcessState).String"
"context.contextName" "(*math/big.Int).String"
"context.contextName" "(*go/types.Term).String"
"context.contextName" "(*go/types.Selection).String"
"context.contextName" "(*go/types.Func).String"
"context.contextName" "(*bytes.Buffer).String"
"context.contextName" "(runtime.waitReason).String"
"context.contextName" "(go/constant.floatVal).String"
"context.contextName" "(time.Weekday).String"
"context.contextName" "(go/types.termlist).String"
"context.contextName" "(golang.org/x/tools/internal/gcimporter.anyType).String"
"context.contextName" "(*go/ast.Ident).String"
"context.contextName" "(*go/types.Pointer).String"
"context.contextName" "(syscall.Signal).String"
"context.contextName" "(*go/build/constraint.NotExpr).String"
"context.contextName" "(*os.unixDirent).String"
"context.contextName" "(time.Month).String"
"context.contextName" "(*go/types.MethodSet).String"
"context.contextName" "(*strings.Builder).String"
"context.contextName" "(time.Duration).String"
"context.contextName" "(*go/types.Union).String"
"context.contextName" "(go/constant.intVal).String"
"context.contextName" "(math/big.RoundingMode).String"
"context.contextName" "(*go/types.Initializer).String"
"context.contextName" "(go/constant.int64Val).String"
"context.contextName" "(go/constant.unknownVal).String"
"context.contextName" "(*go/types.Scope).String"
"context.contextName" "(*go/types.Slice).String"
"context.contextName" "(go/constant.ratVal).String"
"context.contextName" "(*go/types._TypeSet).String"
"context.contextName" "(reflect.Kind).String"
"context.contextName" "(*go/types.Nil).String"
"context.contextName" "(reflect.Value).String"
"context.contextName" "(go/constant.boolVal).String"
"context.contextName" "(go/constant.Kind).String"
"context.contextName" "(internal/reflectlite.rtype).String"
"context.contextName" "(*go/constant.stringVal).String"
"context.contextName" "(math/big.nat).String"
"context.contextName" "(*golang.org/x/tools/go/packages.Package).String"
"context.contextName" "(internal/types/errors.Code).String"
"context.contextName" "(*os/exec.Cmd).String"
"context.contextName" "(*regexp.Regexp).String"
"context.contextName" "(*regexp/syntax.Prog).String"
"context.contextName" "(*regexp/syntax.Inst).String"
"context.contextName" "(regexp/syntax.InstOp).String"
"context.contextName" "(golang.org/x/tools/go/packages.LoadMode).String"
"context.contextName" "(golang.org/x/tools/internal/pkgbits.SyncMarker).String"
"context.contextName" "(*go/types.Array).String"
"(*context.cancelCtx).String" "context.contextName"
"(*fmt.pp).handleMethods" "(*context.cancelCtx).String"
"(*fmt.pp).handleMethods" "(*go/types.Alias).String"
"(*fmt.pp).handleMethods" "(*go/types.Slice).String"
"(*fmt.pp).handleMethods" "(*go/types.Map).String"
"(*fmt.pp).printValue" "(*fmt.pp).handleMethods"
"(*fmt.pp).printValue" "(reflect.Value).Kind"
"(*fmt.pp).printValue" "(reflect.Value).CanInterface"
"(*fmt.pp).printValue" "(reflect.Value).IsValid"
"(*fmt.pp).printValue" "(reflect.Value).Bool"
"(*fmt.fmt).fmtBoolean" "(*fmt.fmt).padString"
"(*fmt.fmt).fmtBoolean" "(*fmt.fmt).padString"
"(*fmt.pp).fmtBool" "(*fmt.fmt).fmtBoolean"
"(*fmt.pp).fmtBool" "(*fmt.pp).badVerb"
"(*fmt.pp).printValue" "(*fmt.pp).fmtBool"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(*fmt.pp).badVerb"
"(*fmt.pp).printValue" "(reflect.Value).Int"
"(*fmt.fmt).fmtInteger" "(*fmt.fmt).writePadding"
"(*fmt.fmt).fmtInteger" "(*fmt.fmt).pad"
"(*fmt.pp).fmtInteger" "(*fmt.fmt).fmtInteger"
"(*fmt.pp).fmt0x64" "(*fmt.fmt).fmtInteger"
"(*fmt.pp).fmtInteger" "(*fmt.pp).fmt0x64"
"(*fmt.pp).fmtInteger" "(*fmt.fmt).fmtInteger"
"(*fmt.pp).fmtInteger" "(*fmt.fmt).fmtInteger"
"(*fmt.pp).fmtInteger" "(*fmt.fmt).fmtInteger"
"(*fmt.pp).fmtInteger" "(*fmt.fmt).fmtInteger"
"(*fmt.pp).fmtInteger" "(*fmt.fmt).fmtInteger"
"(*fmt.fmt).fmtC" "unicode/utf8.AppendRune"
"(*fmt.fmt).fmtC" "(*fmt.fmt).pad"
"(*fmt.pp).fmtInteger" "(*fmt.fmt).fmtC"
"strconv.appendQuotedRuneWith" "unicode/utf8.ValidRune"
"strconv.appendQuotedRuneWith" "strconv.appendEscapedRune"
"strconv.AppendQuoteRuneToASCII" "strconv.appendQuotedRuneWith"
"(*fmt.fmt).fmtQc" "strconv.AppendQuoteRuneToASCII"
"(*fmt.fmt).fmtQc" "(*fmt.fmt).pad"
"strconv.AppendQuoteRune" "strconv.appendQuotedRuneWith"
"(*fmt.fmt).fmtQc" "strconv.AppendQuoteRune"
"(*fmt.fmt).fmtQc" "(*fmt.fmt).pad"
"(*fmt.pp).fmtInteger" "(*fmt.fmt).fmtQc"
"(*fmt.fmt).fmtUnicode" "unicode/utf8.RuneLen"
"(*fmt.fmt).fmtUnicode" "unicode/utf8.EncodeRune"
"(*fmt.fmt).fmtUnicode" "strconv.IsPrint"
"(*fmt.fmt).fmtUnicode" "(*fmt.fmt).pad"
"(*fmt.pp).fmtInteger" "(*fmt.fmt).fmtUnicode"
"(*fmt.pp).fmtInteger" "(*fmt.pp).badVerb"
"(*fmt.pp).printValue" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printValue" "(reflect.Value).Uint"
"(*fmt.pp).printValue" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printValue" "(reflect.Value).Float"
"(*fmt.fmt).fmtFloat" "strconv.AppendFloat"
"(*fmt.fmt).fmtFloat" "(*fmt.fmt).pad"
"(*fmt.fmt).fmtFloat" "(*fmt.fmt).pad"
"(*fmt.fmt).fmtFloat" "(*fmt.buffer).writeByte"
"(*fmt.fmt).fmtFloat" "(*fmt.fmt).writePadding"
"(*fmt.fmt).fmtFloat" "(*fmt.buffer).write"
"(*fmt.fmt).fmtFloat" "(*fmt.fmt).pad"
"(*fmt.pp).fmtFloat" "(*fmt.fmt).fmtFloat"
"(*fmt.pp).fmtFloat" "(*fmt.fmt).fmtFloat"
"(*fmt.pp).fmtFloat" "(*fmt.fmt).fmtFloat"
"(*fmt.pp).fmtFloat" "(*fmt.fmt).fmtFloat"
"(*fmt.pp).fmtFloat" "(*fmt.pp).badVerb"
"(*fmt.pp).printValue" "(*fmt.pp).fmtFloat"
"(*fmt.pp).printValue" "(reflect.Value).Float"
"(*fmt.pp).printValue" "(*fmt.pp).fmtFloat"
"(*fmt.pp).printValue" "(reflect.Value).Complex"
"(*fmt.pp).fmtComplex" "(*fmt.buffer).writeByte"
"(*fmt.pp).fmtComplex" "(*fmt.pp).fmtFloat"
"(*fmt.pp).fmtComplex" "(*fmt.pp).fmtFloat"
"(*fmt.pp).fmtComplex" "(*fmt.buffer).writeString"
"(*fmt.pp).fmtComplex" "(*fmt.pp).badVerb"
"(*fmt.pp).printValue" "(*fmt.pp).fmtComplex"
"(*fmt.pp).printValue" "(reflect.Value).Complex"
"(*fmt.pp).printValue" "(*fmt.pp).fmtComplex"
"(*fmt.pp).printValue" "(reflect.Value).String"
"(*fmt.pp).printValue" "(*fmt.pp).fmtString"
"(*fmt.pp).printValue" "(reflect.Value).Type"
"(*fmt.pp).printValue" "(*reflect.rtype).String"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(reflect.Value).IsNil"
"internal/fmtsort.Sort" "(reflect.Value).Type"
"internal/fmtsort.Sort" "(*reflect.rtype).Kind"
"internal/fmtsort.Sort" "(reflect.Value).Len"
"internal/fmtsort.Sort" "(reflect.Value).MapRange"
"internal/fmtsort.Sort" "(*reflect.MapIter).Key"
"internal/fmtsort.Sort" "(*reflect.MapIter).Value"
"sort.Stable" "(go/types.nodeQueue).Len"
"sort.Stable" "(encoding/json.byIndex).Len"
"sort.Stable" "(go/types.byUniqueMethodName).Len"
"sort.Stable" "(*internal/fmtsort.SortedMap).Len"
"sort.Stable" "(regexp/syntax.ranges).Len"
"sort.Stable" "(go/types.inSourceOrder).Len"
"sort.Stable" "(golang.org/x/tools/internal/gcimporter.byPath).Len"
"sort.Stable" "(regexp.runeSlice).Len"
"sort.Stable" "(go/scanner.ErrorList).Len"
"sort.stable" "sort.insertionSort"
"sort.stable" "sort.insertionSort"
"sort.symMerge" "(go/types.nodeQueue).Less"
"sort.symMerge" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.symMerge" "(go/types.byUniqueMethodName).Less"
"sort.symMerge" "(*internal/fmtsort.SortedMap).Less"
"sort.symMerge" "(encoding/json.byIndex).Less"
"sort.symMerge" "(go/types.inSourceOrder).Less"
"sort.symMerge" "(go/types.inSourceOrder).Less"
"sort.symMerge" "(regexp.runeSlice).Less"
"sort.symMerge" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.symMerge" "(regexp/syntax.ranges).Less"
"sort.symMerge" "(encoding/json.byIndex).Less"
"sort.symMerge" "(go/scanner.ErrorList).Less"
"sort.symMerge" "(go/types.byUniqueMethodName).Less"
"sort.symMerge" "(go/types.nodeQueue).Swap"
"sort.symMerge" "(encoding/json.byIndex).Less"
"sort.symMerge" "(go/types.byUniqueMethodName).Swap"
"sort.symMerge" "(*internal/fmtsort.SortedMap).Swap"
"sort.symMerge" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.symMerge" "(go/types.inSourceOrder).Swap"
"sort.symMerge" "(golang.org/x/tools/internal/gcimporter.byPath).Less"
"sort.symMerge" "(regexp.runeSlice).Swap"
"sort.symMerge" "(encoding/json.byIndex).Swap"
"sort.symMerge" "(regexp/syntax.ranges).Swap"
"sort.swapRange" "(go/types.nodeQueue).Swap"
"sort.swapRange" "(regexp/syntax.ranges).Swap"
"sort.swapRange" "(go/types.byUniqueMethodName).Swap"
"sort.swapRange" "(*internal/fmtsort.SortedMap).Swap"
"sort.swapRange" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.swapRange" "(go/types.inSourceOrder).Swap"
"sort.swapRange" "(encoding/json.byIndex).Swap"
"sort.swapRange" "(regexp.runeSlice).Swap"
"sort.swapRange" "(go/scanner.ErrorList).Swap"
"sort.rotate" "sort.swapRange"
"sort.rotate" "sort.swapRange"
"sort.rotate" "sort.swapRange"
"sort.symMerge" "sort.rotate"
"sort.symMerge" "(go/scanner.ErrorList).Swap"
"sort.symMerge" "(go/types.nodeQueue).Less"
"sort.symMerge" "(go/types.nodeQueue).Less"
"sort.symMerge" "(regexp.runeSlice).Less"
"sort.symMerge" "(go/types.byUniqueMethodName).Less"
"sort.symMerge" "(*internal/fmtsort.SortedMap).Less"
"sort.symMerge" "sort.symMerge"
"sort.symMerge" "(go/types.inSourceOrder).Less"
"sort.symMerge" "sort.symMerge"
"sort.symMerge" "(regexp.runeSlice).Less"
"sort.symMerge" "(go/scanner.ErrorList).Less"
"sort.symMerge" "(regexp/syntax.ranges).Less"
"sort.symMerge" "(encoding/json.byIndex).Swap"
"sort.symMerge" "(go/scanner.ErrorList).Less"
"sort.symMerge" "(*internal/fmtsort.SortedMap).Less"
"sort.symMerge" "(go/types.nodeQueue).Swap"
"sort.symMerge" "(regexp/syntax.ranges).Swap"
"sort.symMerge" "(go/types.byUniqueMethodName).Swap"
"sort.symMerge" "(*internal/fmtsort.SortedMap).Swap"
"sort.symMerge" "(golang.org/x/tools/internal/gcimporter.byPath).Swap"
"sort.symMerge" "(go/types.inSourceOrder).Swap"
"sort.symMerge" "(go/scanner.ErrorList).Swap"
"sort.symMerge" "(regexp.runeSlice).Swap"
"sort.symMerge" "(regexp/syntax.ranges).Less"
"sort.stable" "sort.symMerge"
"sort.stable" "sort.symMerge"
"sort.Stable" "sort.stable"
"internal/fmtsort.Sort" "sort.Stable"
"internal/fmtsort.Sort" "(*reflect.MapIter).Next"
"(*fmt.pp).printValue" "internal/fmtsort.Sort"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(*fmt.pp).printValue"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(*fmt.pp).printValue"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(reflect.Value).Elem"
"(*fmt.pp).printValue" "(reflect.Value).IsValid"
"(*fmt.pp).printValue" "(reflect.Value).Type"
"(*fmt.pp).printValue" "(*reflect.rtype).String"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(reflect.Value).NumField"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(reflect.Value).Type"
"(*fmt.pp).printValue" "(*reflect.rtype).Field"
"fmt.getField" "(reflect.Value).Field"
"fmt.getField" "(reflect.Value).Kind"
"fmt.getField" "(reflect.Value).Elem"
"fmt.getField" "(reflect.Value).IsNil"
"(*fmt.pp).printValue" "fmt.getField"
"(*fmt.pp).printValue" "(*fmt.pp).printValue"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(*fmt.pp).printValue"
"(*fmt.pp).printValue" "(reflect.Value).Type"
"(*fmt.pp).printValue" "(*reflect.rtype).String"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(reflect.Value).Type"
"(*fmt.pp).printValue" "(*reflect.rtype).Elem"
"(*fmt.pp).printValue" "(*reflect.rtype).Kind"
"(*fmt.pp).printValue" "(reflect.Value).Kind"
"(*fmt.pp).printValue" "(reflect.Value).Bytes"
"(*fmt.pp).printValue" "(*reflect.rtype).String"
"(*fmt.fmt).truncate" "unicode/utf8.DecodeRune"
"(*fmt.fmt).fmtBs" "(*fmt.fmt).truncate"
"(*fmt.fmt).fmtBs" "(*fmt.fmt).pad"
"(*fmt.pp).fmtBytes" "(*fmt.fmt).fmtBs"
"(*fmt.pp).fmtBytes" "(*fmt.buffer).writeString"
"(*fmt.pp).fmtBytes" "(*fmt.buffer).writeByte"
"(*fmt.pp).fmtBytes" "(*fmt.buffer).writeString"
"(*fmt.pp).fmtBytes" "(*fmt.buffer).writeByte"
"(*fmt.pp).fmtBytes" "(*fmt.buffer).writeByte"
"(*fmt.pp).fmtBytes" "(*fmt.buffer).writeString"
"(*fmt.pp).fmtBytes" "(*fmt.pp).fmt0x64"
"(*fmt.pp).fmtBytes" "(*fmt.buffer).writeByte"
"(*fmt.pp).fmtBytes" "(*fmt.buffer).writeByte"
"(*fmt.pp).fmtBytes" "(*fmt.fmt).fmtInteger"
"(*fmt.fmt).fmtBx" "(*fmt.fmt).fmtSbx"
"(*fmt.pp).fmtBytes" "(*fmt.fmt).fmtBx"
"(*fmt.pp).fmtBytes" "(*fmt.fmt).fmtBx"
"(*fmt.pp).fmtBytes" "(*fmt.fmt).fmtQ"
"(*fmt.pp).fmtBytes" "reflect.ValueOf"
"(*fmt.pp).fmtBytes" "(*fmt.pp).printValue"
"(*fmt.pp).printValue" "(*fmt.pp).fmtBytes"
"(*fmt.pp).printValue" "(reflect.Value).Len"
"(*fmt.pp).printValue" "(reflect.Value).CanAddr"
"(*fmt.pp).printValue" "(reflect.Value).Index"
"(*fmt.pp).printValue" "(reflect.Value).Uint"
"(*fmt.pp).printValue" "(reflect.Value).Type"
"(*fmt.pp).printValue" "(*reflect.rtype).String"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(reflect.Value).Kind"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(reflect.Value).IsNil"
"(*fmt.pp).printValue" "(reflect.Value).Len"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(*fmt.buffer).writeString"
"(*fmt.pp).printValue" "(reflect.Value).Index"
"(*fmt.pp).printValue" "(*fmt.pp).printValue"
"(*fmt.pp).printValue" "(reflect.Value).Len"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(reflect.Value).Index"
"(*fmt.pp).printValue" "(*fmt.pp).printValue"
"(*fmt.pp).fmtPointer" "(reflect.Value).Kind"
"(*fmt.pp).fmtPointer" "(reflect.Value).UnsafePointer"
"(*fmt.pp).fmtPointer" "(*fmt.pp).badVerb"
"(*fmt.pp).fmtPointer" "(*fmt.pp).fmt0x64"
"(*fmt.pp).fmtPointer" "(*fmt.buffer).writeByte"
"(*fmt.pp).fmtPointer" "(reflect.Value).Type"
"(*fmt.pp).fmtPointer" "(*reflect.rtype).String"
"(*fmt.pp).fmtPointer" "(*fmt.buffer).writeString"
"(*fmt.pp).fmtPointer" "(*fmt.buffer).writeString"
"(*fmt.pp).fmtPointer" "(*fmt.buffer).writeString"
"(*fmt.pp).fmtPointer" "(*fmt.buffer).writeByte"
"(*fmt.pp).fmtPointer" "(*fmt.pp).fmt0x64"
"(*fmt.pp).fmtPointer" "(*fmt.fmt).padString"
"(*fmt.pp).fmtPointer" "(*fmt.pp).fmt0x64"
"(*fmt.pp).fmtPointer" "(*fmt.pp).fmtInteger"
"(*fmt.pp).fmtPointer" "(*fmt.pp).badVerb"
"(*fmt.pp).printValue" "(*fmt.pp).fmtPointer"
"(*fmt.pp).printValue" "(reflect.Value).Elem"
"(*fmt.pp).printValue" "(reflect.Value).Kind"
"(*fmt.pp).printValue" "(reflect.Value).UnsafePointer"
"(*fmt.pp).printValue" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(*fmt.pp).printValue"
"(*fmt.pp).unknownType" "(reflect.Value).IsValid"
"(*fmt.pp).unknownType" "(*fmt.buffer).writeString"
"(*fmt.pp).unknownType" "(*fmt.buffer).writeByte"
"(*fmt.pp).unknownType" "(reflect.Value).Type"
"(*fmt.pp).unknownType" "(*reflect.rtype).String"
"(*fmt.pp).unknownType" "(*fmt.buffer).writeString"
"(*fmt.pp).unknownType" "(*fmt.buffer).writeByte"
"(*fmt.pp).printValue" "(*fmt.pp).unknownType"
"(*fmt.pp).badVerb" "(*fmt.pp).printValue"
"(*fmt.pp).badVerb" "(reflect.Value).IsValid"
"(*fmt.pp).badVerb" "(*fmt.buffer).writeString"
"(*fmt.pp).printArg" "(*fmt.pp).badVerb"
"(*fmt.pp).printArg" "reflect.TypeOf"
"(*fmt.pp).printArg" "(*reflect.rtype).String"
"(*fmt.pp).printArg" "(*fmt.fmt).fmtS"
"(*fmt.pp).printArg" "reflect.ValueOf"
"(*fmt.pp).printArg" "(*fmt.pp).fmtPointer"
"(*fmt.pp).printArg" "(*fmt.pp).fmtBool"
"(*fmt.pp).printArg" "(*fmt.pp).fmtFloat"
"(*fmt.pp).printArg" "(*fmt.pp).fmtFloat"
"(*fmt.pp).printArg" "(*fmt.pp).fmtComplex"
"(*fmt.pp).printArg" "(*fmt.pp).fmtComplex"
"(*fmt.pp).printArg" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printArg" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printArg" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printArg" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printArg" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printArg" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printArg" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printArg" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printArg" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printArg" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printArg" "(*fmt.pp).fmtInteger"
"(*fmt.pp).printArg" "(*fmt.pp).fmtString"
"(*fmt.pp).printArg" "(*fmt.pp).fmtBytes"
"(*fmt.pp).printArg" "(reflect.Value).IsValid"
"(*fmt.pp).printArg" "(*fmt.pp).handleMethods"
"(*fmt.pp).printArg" "(reflect.Value).Interface"
"(*fmt.pp).printArg" "(*fmt.pp).handleMethods"
"(*fmt.pp).printArg" "(*fmt.pp).printValue"
"(*fmt.pp).printArg" "(reflect.Value).CanInterface"
"(*fmt.pp).printArg" "reflect.ValueOf"
"(*fmt.pp).printArg" "(*fmt.pp).printValue"
"(*fmt.pp).doPrintf" "(*fmt.pp).printArg"
"fmt.intFromArg" "reflect.ValueOf"
"fmt.intFromArg" "(reflect.Value).Kind"
"fmt.intFromArg" "fmt.tooLarge"
"fmt.intFromArg" "(reflect.Value).Int"
"fmt.intFromArg" "(reflect.Value).Uint"
"(*fmt.pp).doPrintf" "fmt.intFromArg"
"(*fmt.pp).doPrintf" "fmt.parsenum"
"(*fmt.pp).doPrintf" "(*fmt.buffer).writeString"
"(*fmt.pp).doPrintf" "(*fmt.pp).argNumber"
"(*fmt.pp).doPrintf" "fmt.intFromArg"
"(*fmt.pp).doPrintf" "fmt.parsenum"
"(*fmt.pp).doPrintf" "(*fmt.buffer).writeString"
"(*fmt.pp).doPrintf" "(*fmt.pp).argNumber"
"(*fmt.pp).doPrintf" "(*fmt.buffer).writeString"
"(*fmt.pp).doPrintf" "unicode/utf8.DecodeRuneInString"
"(*fmt.pp).doPrintf" "(*fmt.buffer).writeByte"
"(*fmt.pp).badArgNum" "(*fmt.buffer).writeString"
"(*fmt.pp).badArgNum" "(*fmt.buffer).writeRune"
"(*fmt.pp).badArgNum" "(*fmt.buffer).writeString"
"(*fmt.pp).doPrintf" "(*fmt.pp).badArgNum"
"(*fmt.pp).missingArg" "(*fmt.buffer).writeString"
"(*fmt.pp).missingArg" "(*fmt.buffer).writeRune"
"(*fmt.pp).missingArg" "(*fmt.buffer).writeString"
"(*fmt.pp).doPrintf" "(*fmt.pp).missingArg"
"(*fmt.pp).doPrintf" "(*fmt.pp).printArg"
"(*fmt.pp).doPrintf" "(*fmt.fmt).clearflags"
"(*fmt.pp).doPrintf" "(*fmt.buffer).writeString"
"(*fmt.pp).doPrintf" "(*fmt.buffer).writeByte"
"(*fmt.pp).doPrintf" "(*fmt.buffer).writeString"
"(*fmt.pp).doPrintf" "(*fmt.buffer).writeString"
"(*fmt.pp).doPrintf" "reflect.TypeOf"
"(*fmt.pp).doPrintf" "(*reflect.rtype).String"
"(*fmt.pp).doPrintf" "(*fmt.buffer).writeString"
"(*fmt.pp).doPrintf" "(*fmt.buffer).writeByte"
"(*fmt.pp).doPrintf" "(*fmt.pp).printArg"
"fmt.Fprintf" "(*fmt.pp).doPrintf"
"fmt.Fprintf" "(*internal/poll.FD).Write"
"fmt.Fprintf" "(io.discard).Write"
"fmt.Fprintf" "(*internal/godebug.runtimeStderr).Write"
"fmt.Fprintf" "(*fmt.pp).Write"
"fmt.Fprintf" "(*os.File).Write"
"fmt.Fprintf" "(*fmt.pp).free"
"fmt.Fprintf" "(*crypto/md5.digest).Write"
"fmt.Fprintf" "(*os/exec.prefixSuffixSaver).Write"
"fmt.Fprintf" "(*strings.Builder).Write"
"fmt.Fprintf" "(*log/slog/internal/buffer.Buffer).Write"
"fmt.Fprintf" "(*go/ast.printer).Write"
"fmt.Fprintf" "(*bytes.Buffer).Write"
"fmt.Printf" "fmt.Fprintf"
"syscall.accept" "internal/abi.FuncPCABI0"
"syscall.accept" "syscall.syscall"
"syscall.accept" "syscall.errnoErr"
"log/slog.byteSlice" "reflect.TypeOf"
"log/slog.byteSlice" "reflect.ValueOf"
"log/slog.byteSlice" "(reflect.Value).Bytes"
"log/slog.byteSlice" "(*reflect.rtype).Elem"
"log/slog.byteSlice" "(*reflect.rtype).Kind"
"log/slog.byteSlice" "(*reflect.rtype).Kind"
"internal/buildcfg.envOr" "os.Getenv"
"internal/buildcfg.goppc64" "internal/buildcfg.envOr"
"internal/buildcfg.goppc64" "fmt.Errorf"
"(*internal/poll.FD).ReadFromInet4" "(*internal/poll.FD).readLock"
"(*internal/poll.FD).ReadFromInet4" "(*internal/poll.FD).readUnlock"
"(*internal/poll.FD).ReadFromInet4" "(*internal/poll.pollDesc).prepareRead"
"(*internal/poll.FD).ReadFromInet4" "internal/syscall/unix.RecvfromInet4"
"(*internal/poll.FD).ReadFromInet4" "(*internal/poll.FD).eofError"
"(*internal/poll.FD).ReadFromInet4" "(*internal/poll.pollDesc).waitRead"
"(*internal/poll.FD).ReadFromInet4" "(*internal/poll.pollDesc).pollable"
"internal/godebug.update" "(*sync.Mutex).Lock"
"internal/godebug.update" "(*sync.Mutex).Unlock"
"internal/godebug.parse" "internal/godebug.lookup"
"internal/godebug.parse" "(*sync/atomic.Pointer[internal/godebug.value]).Store[internal/godebug.value]"
"internal/godebug.parse" "internal/bisect.New"
"internal/godebug.update" "internal/godebug.parse"
"internal/godebug.update" "internal/godebug.parse"
"(*sync.Map).Range" "(*sync.Map).loadReadOnly"
"(*sync.Map).Range" "(*sync.Mutex).Lock"
"(*sync.Map).Range" "(*sync.Map).loadReadOnly"
"(*sync.Map).Range" "(*sync/atomic.Pointer[sync.readOnly]).Store[sync.readOnly]"
"(*sync.Map).Range" "(*sync.Mutex).Unlock"
"(*sync.Map).Range" "(*sync.entry).load"
"internal/godebug.update$1" "(*sync/atomic.Pointer[internal/godebug.value]).Store[internal/godebug.value]"
"(*sync.Map).Range" "internal/godebug.update$1"
"internal/godebug.update" "(*sync.Map).Range"
"(*log/slog.handleState).appendValue" "(*log/slog.handleState).appendValue$1"
"log/slog.appendJSONValue" "(log/slog.Value).Kind"
"log/slog.appendJSONValue" "(log/slog.Value).str"
"log/slog.appendJSONValue" "(*log/slog.handleState).appendString"
"(log/slog.Value).Int64" "(log/slog.Value).Kind"
"(log/slog.Value).Int64" "fmt.Sprintf"
"log/slog.appendJSONValue" "(log/slog.Value).Int64"
"log/slog.appendJSONValue" "strconv.AppendInt"
"(log/slog.Value).Uint64" "(log/slog.Value).Kind"
"(log/slog.Value).Uint64" "fmt.Sprintf"
"log/slog.appendJSONValue" "(log/slog.Value).Uint64"
"log/slog.appendJSONValue" "strconv.AppendUint"
"(log/slog.Value).Float64" "(log/slog.Value).Kind"
"(log/slog.Value).Float64" "fmt.Sprintf"
"(log/slog.Value).Float64" "(log/slog.Value).float"
"log/slog.appendJSONValue" "(log/slog.Value).Float64"
"log/slog.appendJSONMarshal" "encoding/json.NewEncoder"
"log/slog.appendJSONMarshal" "(*encoding/json.Encoder).SetEscapeHTML"
"(*encoding/json.Encoder).Encode" "encoding/json.newEncodeState"
"(*encoding/json.Encoder).Encode" "(*sync.Pool).Put"
"(*encoding/json.Encoder).Encode" "(*encoding/json.encodeState).marshal"
"(*encoding/json.Encoder).Encode" "(*bytes.Buffer).WriteByte"
"(*encoding/json.Encoder).Encode" "(*bytes.Buffer).Bytes"
"(*encoding/json.Encoder).Encode" "encoding/json.appendIndent"
"(*encoding/json.Encoder).Encode" "(*internal/poll.FD).Write"
"(*encoding/json.Encoder).Encode" "(io.discard).Write"
"(*encoding/json.Encoder).Encode" "(*internal/godebug.runtimeStderr).Write"
"(*encoding/json.Encoder).Encode" "(*fmt.pp).Write"
"(*encoding/json.Encoder).Encode" "(*os.File).Write"
"(*encoding/json.Encoder).Encode" "(*crypto/md5.digest).Write"
"(*encoding/json.Encoder).Encode" "(*os/exec.prefixSuffixSaver).Write"
"(*encoding/json.Encoder).Encode" "(*strings.Builder).Write"
"(*encoding/json.Encoder).Encode" "(*log/slog/internal/buffer.Buffer).Write"
"(*encoding/json.Encoder).Encode" "(*go/ast.printer).Write"
"(*encoding/json.Encoder).Encode" "(*bytes.Buffer).Write"
"log/slog.appendJSONMarshal" "(*encoding/json.Encoder).Encode"
"log/slog.appendJSONMarshal" "(*bytes.Buffer).Bytes"
"log/slog.appendJSONMarshal" "(*log/slog/internal/buffer.Buffer).Write"
"log/slog.appendJSONValue" "log/slog.appendJSONMarshal"
"(log/slog.Value).Bool" "(log/slog.Value).Kind"
"(log/slog.Value).Bool" "fmt.Sprintf"
"(log/slog.Value).Bool" "(log/slog.Value).bool"
"log/slog.appendJSONValue" "(log/slog.Value).Bool"
"log/slog.appendJSONValue" "strconv.AppendBool"
"(log/slog.Value).Duration" "(log/slog.Value).Kind"
"(log/slog.Value).Duration" "fmt.Sprintf"
"(log/slog.Value).Duration" "(log/slog.Value).duration"
"log/slog.appendJSONValue" "(log/slog.Value).Duration"
"log/slog.appendJSONValue" "strconv.AppendInt"
"(log/slog.Value).Time" "(log/slog.Value).Kind"
"(log/slog.Value).Time" "fmt.Sprintf"
"(log/slog.Value).Time" "(log/slog.Value).time"
"log/slog.appendJSONValue" "(log/slog.Value).Time"
"(time.Time).Year" "(time.Time).date"
"log/slog.appendJSONTime" "(time.Time).Year"
"log/slog.appendJSONTime" "errors.New"
"(*log/slog.handleState).appendError" "fmt.Sprintf"
"(*log/slog.handleState).appendError" "(*log/slog.handleState).appendString"
"log/slog.appendJSONTime" "(*log/slog.handleState).appendError"
"log/slog.appendJSONTime" "(*log/slog/internal/buffer.Buffer).WriteByte"
"log/slog.appendJSONTime" "(time.Time).AppendFormat"
"log/slog.appendJSONTime" "(*log/slog/internal/buffer.Buffer).WriteByte"
"(*log/slog.handleState).appendTime" "log/slog.appendJSONTime"
"(time.Time).Truncate" "(*time.Time).stripMono"
"time.div" "(*time.Time).nsec"
"time.div" "(*time.Time).sec"
"(time.Time).Truncate" "time.div"
"(time.Time).Truncate" "(time.Time).Add"
"log/slog.appendRFC3339Millis" "(time.Time).Truncate"
"log/slog.appendRFC3339Millis" "(time.Time).Add"
"log/slog.appendRFC3339Millis" "(time.Time).AppendFormat"
"(*log/slog.handleState).appendTime" "log/slog.appendRFC3339Millis"
"log/slog.appendJSONValue" "(*log/slog.handleState).appendTime"
"(log/slog.Value).Any" "(log/slog.Value).Kind"
"(log/slog.Value).Any" "(log/slog.Value).group"
"(log/slog.Value).Any" "(log/slog.Value).float"
"(log/slog.Value).Any" "(log/slog.Value).str"
"(log/slog.Value).Any" "(log/slog.Value).bool"
"(log/slog.Value).Any" "(log/slog.Value).duration"
"(log/slog.Value).Any" "(log/slog.Value).time"
"(log/slog.Value).Any" "(log/slog.Value).Kind"
"(log/slog.Value).Any" "fmt.Sprintf"
"log/slog.appendJSONValue" "(log/slog.Value).Any"
"log/slog.appendJSONValue" "(log/slog.Value).Kind"
"log/slog.appendJSONValue" "fmt.Sprintf"
"log/slog.appendJSONValue" "(*errors.errorString).Error"
"log/slog.appendJSONValue" "(runtime.errorString).Error"
"log/slog.appendJSONValue" "(go/scanner.ErrorList).Error"
"log/slog.appendJSONValue" "(*io/fs.PathError).Error"
"log/slog.appendJSONValue" "(syscall.Errno).Error"
"log/slog.appendJSONValue" "(*encoding/json.UnmarshalTypeError).Error"
"log/slog.appendJSONValue" "(context.deadlineExceededError).Error"
"log/slog.appendJSONValue" "log/slog.appendJSONMarshal"
"log/slog.appendJSONValue" "(*internal/poll.DeadlineExceededError).Error"
"log/slog.appendJSONValue" "(*fmt.wrapError).Error"
"log/slog.appendJSONValue" "(*fmt.wrapErrors).Error"
"log/slog.appendJSONValue" "(runtime.plainError).Error"
"log/slog.appendJSONValue" "(*go/build/constraint.SyntaxError).Error"
"log/slog.appendJSONValue" "(*reflect.ValueError).Error"
"log/slog.appendJSONValue" "(*strconv.NumError).Error"
"log/slog.appendJSONValue" "(*time.ParseError).Error"
"log/slog.appendJSONValue" "(internal/poll.errNetClosing).Error"
"log/slog.appendJSONValue" "(*go/types.ArgumentError).Error"
"log/slog.appendJSONValue" "(*os.SyscallError).Error"
"log/slog.appendJSONValue" "(*encoding/json.UnsupportedValueError).Error"
"log/slog.appendJSONValue" "(*encoding/json.UnsupportedTypeError).Error"
"log/slog.appendJSONValue" "(*log/slog.handleState).appendString"
"log/slog.appendJSONValue" "(*encoding/json.MarshalerError).Error"
"log/slog.appendJSONValue" "(golang.org/x/tools/go/packages.Error).Error"
"log/slog.appendJSONValue" "(math/big.ErrNaN).Error"
"log/slog.appendJSONValue" "(go/types.Error).Error"
"log/slog.appendJSONValue" "(runtime.errorAddressString).Error"
"log/slog.appendJSONValue" "(*regexp/syntax.Error).Error"
"log/slog.appendJSONValue" "(*runtime.TypeAssertionError).Error"
"log/slog.appendJSONValue" "(*os/exec.Error).Error"
"log/slog.appendJSONValue" "(*encoding/json.SyntaxError).Error"
"log/slog.appendJSONValue" "(*internal/bisect.parseError).Error"
"log/slog.appendJSONValue" "(*os/exec.ExitError).Error"
"log/slog.appendJSONValue" "(os/exec.wrappedError).Error"
"log/slog.appendJSONValue" "(go/scanner.Error).Error"
"log/slog.appendJSONValue" "(encoding/base64.CorruptInputError).Error"
"log/slog.appendJSONValue" "(*internal/reflectlite.ValueError).Error"
"log/slog.appendJSONValue" "(time.fileSizeError).Error"
"log/slog.appendJSONValue" "(*encoding/json.InvalidUnmarshalError).Error"
"(*log/slog.handleState).appendValue" "log/slog.appendJSONValue"
"log/slog.appendTextValue" "(log/slog.Value).Kind"
"log/slog.appendTextValue" "(log/slog.Value).str"
"log/slog.appendTextValue" "(*log/slog.handleState).appendString"
"log/slog.appendTextValue" "(log/slog.Value).time"
"log/slog.appendTextValue" "(*log/slog.handleState).appendTime"
"log/slog.appendTextValue" "(log/slog.Value).append"
"log/slog.appendTextValue" "(*math/big.Rat).MarshalText"
"log/slog.appendTextValue" "(*regexp.Regexp).MarshalText"
"log/slog.appendTextValue" "(*math/big.Float).MarshalText"
"log/slog.appendTextValue" "(log/slog.Level).MarshalText"
"log/slog.appendTextValue" "(time.Time).MarshalText"
"log/slog.appendTextValue" "log/slog.byteSlice"
"log/slog.appendTextValue" "(*log/slog.handleState).appendString"
"log/slog.appendTextValue" "strconv.Quote"
"log/slog.appendTextValue" "(*log/slog/internal/buffer.Buffer).WriteString"
"log/slog.appendTextValue" "(log/slog.Value).Any"
"log/slog.appendTextValue" "fmt.Sprintf"
"log/slog.appendTextValue" "(*log/slog.handleState).appendString"
"log/slog.appendTextValue" "(*math/big.Int).MarshalText"
"(*log/slog.handleState).appendValue" "log/slog.appendTextValue"
"(*log/slog.handleState).appendValue" "(*log/slog.handleState).appendError"
"(*math/big.Float).GobDecode" "errors.New"
"(*math/big.Float).GobDecode" "fmt.Errorf"
"(*math/big.Float).GobDecode" "(encoding/binary.bigEndian).Uint32"
"(*math/big.Float).GobDecode" "errors.New"
"(*math/big.Float).GobDecode" "(encoding/binary.bigEndian).Uint32"
"(*math/big.Float).GobDecode" "(math/big.nat).setBytes"
"(*math/big.Float).GobDecode" "(*math/big.Float).SetPrec"
"(*math/big.Float).GobDecode" "(*math/big.Float).validate0"
"(*math/big.Float).GobDecode" "errors.New"
"(reflect.Value).setRunes" "(reflect.flag).mustBeAssignable"
"(reflect.Value).setRunes" "(reflect.flag).mustBe"
"(reflect.Value).setRunes" "(reflect.Value).typ"
"(reflect.Value).setRunes" "(*internal/abi.Type).Elem"
"(reflect.Value).setRunes" "(*internal/abi.Type).Kind"
"(*runtime.profBuf).write" "runtime.throw"
"(*runtime.profBuf).hasOverflow" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.profBuf).write" "(*runtime.profBuf).hasOverflow"
"(*runtime.profBuf).takeOverflow" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.profBuf).takeOverflow" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.profBuf).takeOverflow" "(*runtime/internal/atomic.Uint64).CompareAndSwap"
"(*runtime.profBuf).takeOverflow" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.profBuf).takeOverflow" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.profBuf).write" "(*runtime.profBuf).takeOverflow"
"(*runtime.profAtomic).load" "runtime/internal/atomic.Load64"
"(*runtime.profBuf).write" "(*runtime.profAtomic).load"
"(*runtime.profBuf).write" "(*runtime.profAtomic).load"
"(*runtime.profBuf).write" "(runtime.profIndex).tagCount"
"(*runtime.profBuf).canWriteTwoRecords" "(*runtime.profAtomic).load"
"(*runtime.profBuf).canWriteTwoRecords" "(*runtime.profAtomic).load"
"(*runtime.profBuf).canWriteTwoRecords" "(runtime.profIndex).tagCount"
"(*runtime.profBuf).canWriteTwoRecords" "(runtime.profIndex).tagCount"
"(*runtime.profBuf).canWriteTwoRecords" "runtime.countSub"
"(*runtime.profBuf).canWriteTwoRecords" "(runtime.profIndex).dataCount"
"(*runtime.profBuf).canWriteTwoRecords" "(runtime.profIndex).dataCount"
"(*runtime.profBuf).canWriteTwoRecords" "runtime.countSub"
"(*runtime.profBuf).canWriteTwoRecords" "(runtime.profIndex).dataCount"
"(*runtime.profBuf).write" "(*runtime.profBuf).canWriteTwoRecords"
"(*runtime.profBuf).write" "(*runtime.profBuf).write"
"(*runtime.profBuf).incrementOverflow" "(*runtime/internal/atomic.Uint64).Load"
"(*runtime.profBuf).incrementOverflow" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.profBuf).incrementOverflow" "(*runtime/internal/atomic.Uint64).Store"
"(*runtime.profBuf).incrementOverflow" "(*runtime/internal/atomic.Uint64).CompareAndSwap"
"(*runtime.profBuf).write" "(*runtime.profBuf).incrementOverflow"
"(*runtime.profBuf).wakeupExtra" "(*runtime.profAtomic).load"
"(*runtime.profAtomic).cas" "runtime/internal/atomic.Cas64"
"(*runtime.profBuf).wakeupExtra" "(*runtime.profAtomic).cas"
"(*runtime.profBuf).wakeupExtra" "runtime.notewakeup"
"(*runtime.profBuf).write" "(*runtime.profBuf).wakeupExtra"
"(*runtime.profBuf).canWriteRecord" "(*runtime.profAtomic).load"
"(*runtime.profBuf).canWriteRecord" "(*runtime.profAtomic).load"
"(*runtime.profBuf).canWriteRecord" "(runtime.profIndex).tagCount"
"(*runtime.profBuf).canWriteRecord" "(runtime.profIndex).tagCount"
"(*runtime.profBuf).canWriteRecord" "runtime.countSub"
"(*runtime.profBuf).canWriteRecord" "(runtime.profIndex).dataCount"
"(*runtime.profBuf).canWriteRecord" "(runtime.profIndex).dataCount"
"(*runtime.profBuf).canWriteRecord" "runtime.countSub"
"(*runtime.profBuf).canWriteRecord" "(runtime.profIndex).dataCount"
"(*runtime.profBuf).write" "(*runtime.profBuf).canWriteRecord"
"(*runtime.profBuf).write" "(runtime.profIndex).dataCount"
"(*runtime.profBuf).write" "(runtime.profIndex).dataCount"
"(*runtime.profBuf).write" "(runtime.profIndex).dataCount"
"(*runtime.profBuf).write" "runtime.countSub"
"(*runtime.profBuf).write" "(*runtime.profAtomic).load"
"(*runtime.profBuf).write" "(runtime.profIndex).addCountsAndClearFlags"
"(*runtime.profBuf).write" "(*runtime.profAtomic).cas"
"(*runtime.profBuf).write" "runtime.notewakeup"
"syscall.recvmsgRaw" "(*syscall.Iovec).SetLen"
"syscall.recvmsg" "internal/abi.FuncPCABI0"
"syscall.recvmsg" "syscall.syscall"
"syscall.recvmsg" "syscall.errnoErr"
"syscall.recvmsgRaw" "syscall.recvmsg"
"syscall.recvmsgRaw" "(*syscall.Iovec).SetLen"
"syscall.recvmsgRaw" "(*syscall.Msghdr).SetControllen"
"syscall.Recvmsg" "syscall.recvmsgRaw"
"syscall.Recvmsg" "syscall.anyToSockaddr"
"(*math/big.Rat).GobDecode" "errors.New"
"(*math/big.Rat).GobDecode" "fmt.Errorf"
"(*math/big.Rat).GobDecode" "(encoding/binary.bigEndian).Uint32"
"(*math/big.Rat).GobDecode" "errors.New"
"(*math/big.Rat).GobDecode" "errors.New"
"(*math/big.Rat).GobDecode" "(math/big.nat).setBytes"
"(*math/big.Rat).GobDecode" "(math/big.nat).setBytes"
"runtime.forcegchelper" "runtime.getg"
"runtime.forcegchelper" "runtime.lockInit"
"runtime.forcegchelper" "runtime.lock"
"runtime.forcegchelper" "(*runtime/internal/atomic.Bool).Load"
"runtime.forcegchelper" "runtime.throw"
"runtime.forcegchelper" "(*runtime/internal/atomic.Bool).Store"
"runtime.forcegchelper" "runtime.goparkunlock"
"runtime.forcegchelper" "runtime.nanotime"
"runtime.forcegchelper" "runtime.gcStart"
"runtime.init#7" "runtime.forcegchelper"
"log.init#1$1" "(*log.Logger).output"
"(*log/slog.handleState).appendKey" "(*log/slog/internal/buffer.Buffer).WriteString"
"(*log/slog.handleState).appendKey" "(*log/slog.handleState).appendString"
"(*log/slog.handleState).appendKey" "(*log/slog.handleState).appendString"
"(*log/slog.handleState).appendKey" "(*log/slog/internal/buffer.Buffer).WriteByte"
"(*log/slog.handleState).appendKey" "(*log/slog.commonHandler).attrSep"
"(*log/slog.handleState).appendKey" "(*log/slog/internal/buffer.Buffer).WriteByte"
"(*log/slog.handleState).openGroup" "(*log/slog.handleState).appendKey"
"(*log/slog.handleState).openGroup" "(*log/slog/internal/buffer.Buffer).WriteByte"
"(*log/slog.handleState).openGroup" "(*log/slog/internal/buffer.Buffer).WriteString"
"(*log/slog.handleState).openGroup" "(*log/slog/internal/buffer.Buffer).WriteByte"
"(*log/slog.handleState).openGroups" "(*log/slog.handleState).openGroup"
"(*runtime/internal/atomic.Uint8).Or" "runtime/internal/atomic.Or8"
"runtime.GC" "(*runtime/internal/atomic.Uint32).Load"
"runtime.gcWaitOnMark" "runtime.lock"
"runtime.gcWaitOnMark" "(*runtime/internal/atomic.Uint32).Load"
"runtime.gcWaitOnMark" "runtime.unlock"
"runtime.gcWaitOnMark" "runtime.getg"
"runtime.gcWaitOnMark" "(*runtime.gList).push"
"runtime.gcWaitOnMark" "runtime.goparkunlock"
"runtime.GC" "runtime.gcWaitOnMark"
"runtime.GC" "runtime.gcStart"
"runtime.GC" "runtime.gcWaitOnMark"
"runtime.GC" "runtime.Gosched"
"runtime.GC" "(*runtime/internal/atomic.Uint32).Load"
"runtime.GC" "runtime.sweepone"
"runtime.GC" "runtime.Gosched"
"runtime.GC" "runtime.acquirem"
"runtime.GC" "(*runtime/internal/atomic.Uint32).Load"
"runtime.GC" "(*runtime/internal/atomic.Uint32).Load"
"runtime.GC" "runtime.isSweepDone"
"runtime.mProf_PostSweep" "(*runtime.mProfCycleHolder).read"
"runtime.mProf_PostSweep" "runtime.lock"
"runtime.mProf_PostSweep" "runtime.lock"
"runtime.mProf_PostSweep" "runtime.mProf_FlushLocked"
"runtime.mProf_PostSweep" "runtime.unlock"
"runtime.mProf_PostSweep" "runtime.unlock"
"runtime.GC" "runtime.mProf_PostSweep"
"runtime.GC" "runtime.releasem"
"runtime.tracebacktrap" "(runtime.guintptr).ptr"
"runtime.tracebacktrap" "runtime.traceback1"
"runtime.tracebacktrap" "runtime.traceback1"
"golang.org/x/tools/internal/versions.parse" "golang.org/x/tools/internal/versions.cutInt"
"golang.org/x/tools/internal/versions.parse" "golang.org/x/tools/internal/versions.cutInt"
"golang.org/x/tools/internal/versions.parse" "golang.org/x/tools/internal/versions.cmpInt"
"golang.org/x/tools/internal/versions.parse" "golang.org/x/tools/internal/versions.cutInt"
"golang.org/x/tools/internal/versions.parse" "golang.org/x/tools/internal/versions.cutInt"
"syscall.init" "unsafe.init"
"internal/abi.init" "internal/goarch.init"
"internal/abi.init" "unsafe.init"
"runtime.init" "internal/abi.init"
"runtime.init" "internal/cpu.init"
"runtime.init" "internal/goarch.init"
"runtime.init" "unsafe.init"
"runtime.init" "internal/goexperiment.init"
"runtime/internal/atomic.init" "internal/cpu.init"
"runtime/internal/atomic.init" "unsafe.init"
"runtime.init" "runtime/internal/atomic.init"
"runtime/internal/math.init" "internal/goarch.init"
"runtime.init" "runtime/internal/math.init"
"runtime/internal/sys.init" "internal/goarch.init"
"runtime/internal/sys.init" "internal/goos.init"
"runtime.init" "runtime/internal/sys.init"
"runtime.init" "internal/coverage/rtcov.init"
"internal/bytealg.init" "internal/cpu.init"
"internal/bytealg.init" "unsafe.init"
"internal/bytealg.init" "internal/bytealg.init#1"
"runtime.init" "internal/bytealg.init"
"runtime.init" "internal/goos.init"
"runtime.init" "internal/godebugs.init"
"internal/chacha8rand.init" "internal/goarch.init"
"internal/chacha8rand.init" "unsafe.init"
"runtime.init" "internal/chacha8rand.init"
"runtime.init" "runtime.float64frombits"
"runtime.init" "runtime.efaceOf"
"runtime.init" "runtime.efaceOf"
"runtime.init" "runtime.efaceOf"
"runtime.init" "runtime.efaceOf"
"runtime.init" "runtime.efaceOf"
"runtime.init" "runtime.efaceOf"
"runtime.init$2" "runtime.sigdelset"
"runtime.init$2" "runtime.sigdelset"
"runtime.init$2" "runtime.sigdelset"
"runtime.init" "runtime.init$2"
"runtime.init" "internal/abi.FuncPCABIInternal"
"runtime.init" "internal/abi.FuncPCABIInternal"
"runtime.init#1" "runtime.throw"
"runtime.init#1" "runtime.throw"
"runtime.init#1" "runtime.lockInit"
"runtime.init#1" "runtime.throw"
"runtime.init#1" "runtime.throw"
"runtime.init" "runtime.init#1"
"runtime.init" "runtime.init#2"
"runtime.init" "runtime.init#3"
"runtime.init#4" "runtime.throw"
"runtime.init" "runtime.init#4"
"runtime.init#5" "runtime.throw"
"runtime.init#5" "runtime.throw"
"runtime.init" "runtime.init#5"
"runtime.init#6" "internal/abi.FuncPCABI0"
"runtime.init#6" "runtime.findfunc"
"runtime.funcMaxSPDelta" "(runtime.funcInfo).entry"
"runtime.funcMaxSPDelta" "(runtime.funcInfo).entry"
"runtime.funcMaxSPDelta" "runtime.step"
"runtime.init#6" "runtime.funcMaxSPDelta"
"runtime.init#6" "internal/abi.FuncPCABIInternal"
"runtime.init#6" "runtime.findfunc"
"runtime.init#6" "runtime.funcMaxSPDelta"
"runtime.init#6" "runtime.throw"
"runtime.init" "runtime.init#6"
"runtime.init" "runtime.init#7"
"runtime.init#8" "runtime.throw"
"runtime.init" "runtime.init#8"
"syscall.init" "runtime.init"
"sync/atomic.init" "unsafe.init"
"sync.init" "sync/atomic.init"
"sync.init" "unsafe.init"
"internal/race.init" "unsafe.init"
"sync.init" "internal/race.init"
"sync.init" "runtime.init"
"sync.init#1" "sync.runtime_registerPoolCleanup"
"sync.init" "sync.init#1"
"sync.init#2" "sync.runtime_notifyListCheck"
"sync.init" "sync.init#2"
"syscall.init" "sync.init"
"syscall.init" "internal/abi.init"
"errors.init" "unsafe.init"
"internal/reflectlite.init" "internal/goarch.init"
"internal/unsafeheader.init" "unsafe.init"
"internal/reflectlite.init" "internal/unsafeheader.init"
"internal/reflectlite.init" "unsafe.init"
"internal/reflectlite.init" "internal/abi.init"
"internal/reflectlite.init" "runtime.init"
"errors.init" "internal/reflectlite.init"
"errors.init" "errors.New"
"errors.init" "internal/reflectlite.TypeOf"
"errors.init" "(internal/reflectlite.rtype).Elem"
"syscall.init" "errors.init"
"syscall.init" "internal/bytealg.init"
"syscall.init" "sync/atomic.init"
"syscall.init" "internal/itoa.init"
"internal/oserror.init" "errors.init"
"internal/oserror.init" "errors.New"
"internal/oserror.init" "errors.New"
"internal/oserror.init" "errors.New"
"internal/oserror.init" "errors.New"
"internal/oserror.init" "errors.New"
"syscall.init" "internal/oserror.init"
"syscall.init" "internal/race.init"
"syscall.init" "syscall.runtime_envs"
"syscall.init" "internal/abi.FuncPCABI0"
"syscall.init" "syscall.rsaAlignOf"
"syscall.Getrlimit" "internal/abi.FuncPCABI0"
"syscall.Getrlimit" "syscall.rawSyscall"
"syscall.Getrlimit" "syscall.errnoErr"
"syscall.init#1" "syscall.Getrlimit"
"(*sync/atomic.Pointer[syscall.Rlimit]).Store[syscall.Rlimit]" "sync/atomic.StorePointer"
"syscall.init#1" "(*sync/atomic.Pointer[syscall.Rlimit]).Store[syscall.Rlimit]"
"syscall.nametomib" "syscall.ByteSliceFromString"
"syscall.sysctl" "internal/abi.FuncPCABI0"
"syscall.sysctl" "syscall.syscall6"
"syscall.sysctl" "syscall.errnoErr"
"syscall.nametomib" "syscall.sysctl"
"syscall.SysctlUint32" "syscall.nametomib"
"syscall.SysctlUint32" "syscall.sysctl"
"syscall.adjustFileLimit" "syscall.SysctlUint32"
"syscall.init#1" "syscall.adjustFileLimit"
"syscall.setrlimit" "internal/abi.FuncPCABI0"
"syscall.setrlimit" "syscall.rawSyscall"
"syscall.setrlimit" "syscall.errnoErr"
"syscall.init#1" "syscall.setrlimit"
"syscall.init" "syscall.init#1"
"syscall.init" "syscall.init#2"
"internal/syscall/unix.init" "syscall.init"
"internal/syscall/unix.init" "unsafe.init"
"internal/syscall/unix.init" "internal/abi.init"
"(reflect.Value).SetPointer" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetPointer" "(reflect.flag).mustBe"
"(*internal/abi.Type).InterfaceType" "(*internal/abi.Type).Kind"
"(internal/reflectlite.rtype).NumMethod" "(*internal/abi.Type).InterfaceType"
"(internal/reflectlite.rtype).NumMethod" "(*internal/abi.InterfaceType).NumMethod"
"(internal/reflectlite.rtype).uncommon" "(*internal/abi.Type).Uncommon"
"(internal/reflectlite.rtype).exportedMethods" "(internal/reflectlite.rtype).uncommon"
"(internal/reflectlite.rtype).exportedMethods" "(*internal/abi.UncommonType).ExportedMethods"
"(internal/reflectlite.rtype).NumMethod" "(internal/reflectlite.rtype).exportedMethods"
"reflect.makeFloat" "(*reflect.rtype).common"
"reflect.makeFloat" "reflect.unsafe_New"
"reflect.makeFloat" "(*internal/abi.Type).Size"
"reflect.makeFloat" "(*internal/abi.Type).Kind"
"runtime.racereadpc" "runtime.throw"
"(*bufio.Reader).Discard" "(*bufio.Reader).Buffered"
"(*bufio.Reader).Discard" "(*bufio.Reader).fill"
"(*bufio.Reader).Discard" "(*bufio.Reader).Buffered"
"(*bufio.Reader).Discard" "(*bufio.Reader).readErr"
"golang.org/x/tools/go/packages.newLoader" "os.Environ"
"golang.org/x/tools/go/packages.newLoader" "context.Background"
"golang.org/x/tools/go/packages.newLoader" "os.Getwd"
"golang.org/x/tools/go/packages.newLoader" "golang.org/x/tools/go/packages.impliedLoadMode"
"golang.org/x/tools/go/packages.newLoader" "go/token.NewFileSet"
"golang.org/x/tools/go/packages.Load" "golang.org/x/tools/go/packages.newLoader"
"golang.org/x/tools/go/packages.splitIntoChunks" "errors.New"
"golang.org/x/tools/go/packages.splitIntoChunks" "errors.New"
"golang.org/x/tools/go/packages.defaultDriver" "golang.org/x/tools/go/packages.splitIntoChunks"
"golang.org/x/tools/go/packages.findExternalDriver" "strings.TrimPrefix"
"golang.org/x/tools/go/packages.findExternalDriver" "os/exec.LookPath"
"golang.org/x/tools/go/packages.defaultDriver" "golang.org/x/tools/go/packages.findExternalDriver"
"golang.org/x/tools/go/packages.callDriverOnChunks" "golang.org/x/tools/go/packages.goListDriver"
"golang.org/x/tools/go/packages.callDriverOnChunks" "golang.org/x/tools/go/packages.findExternalDriver$1"
"golang.org/x/tools/go/packages.callDriverOnChunks" "errors.New"
"(*golang.org/x/sync/errgroup.Group).Go" "(*sync.WaitGroup).Add"
"(*golang.org/x/sync/errgroup.Group).Go" "(*golang.org/x/sync/errgroup.Group).Go$1"
"golang.org/x/tools/go/packages.callDriverOnChunks" "(*golang.org/x/sync/errgroup.Group).Go"
"(*golang.org/x/sync/errgroup.Group).Wait" "(*sync.WaitGroup).Wait"
"(*golang.org/x/sync/errgroup.Group).Wait" "(*golang.org/x/tools/go/packages.loader).loadPackage$1"
"golang.org/x/tools/go/packages.callDriverOnChunks" "(*golang.org/x/sync/errgroup.Group).Wait"
"golang.org/x/tools/go/packages.callDriverOnChunks" "errors.Is"
"golang.org/x/tools/go/packages.mergeResponses" "golang.org/x/tools/go/packages.newDeduper"
"golang.org/x/tools/go/packages.mergeResponses" "(*golang.org/x/tools/go/packages.responseDeduper).addAll"
"golang.org/x/tools/go/packages.callDriverOnChunks" "golang.org/x/tools/go/packages.mergeResponses"
"golang.org/x/tools/go/packages.defaultDriver" "golang.org/x/tools/go/packages.callDriverOnChunks"
"golang.org/x/tools/go/packages.defaultDriver" "golang.org/x/tools/go/packages.callDriverOnChunks"
"golang.org/x/tools/go/packages.Load" "golang.org/x/tools/go/packages.defaultDriver"
"go/types.SizesFor" "go/types.gcSizesFor"
"golang.org/x/tools/go/packages.Load" "go/types.SizesFor"
"(*golang.org/x/tools/go/packages.loader).refine" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.loader).refine$1" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.loader).refine$1" "fmt.Errorf"
"(*golang.org/x/tools/go/packages.loader).refine$1" "(*golang.org/x/tools/go/packages.loader).refine$1"
"(*golang.org/x/tools/go/packages.loader).refine" "(*golang.org/x/tools/go/packages.loader).refine$1"
"(*golang.org/x/tools/go/packages.loader).refine" "(*sync.WaitGroup).Add"
"(*golang.org/x/tools/go/packages.loader).refine$2" "(*golang.org/x/tools/go/packages.loader).loadRecursive"
"(*golang.org/x/tools/go/packages.loader).refine$2" "(*sync.WaitGroup).Done"
"(*golang.org/x/tools/go/packages.loader).refine" "(*golang.org/x/tools/go/packages.loader).refine$2"
"(*golang.org/x/tools/go/packages.loader).refine" "(*sync.WaitGroup).Wait"
"golang.org/x/tools/go/packages.Load" "(*golang.org/x/tools/go/packages.loader).refine"
"golang.org/x/tools/go/packages.Load" "go/types.SizesFor"
"golang.org/x/tools/go/packages.Load" "fmt.Errorf"
"golang.org/x/tools/go/packages.Load" "go/types.SizesFor"
"reflect.cvtBytesString" "(reflect.flag).ro"
"reflect.cvtBytesString" "(reflect.Value).Bytes"
"reflect.makeString" "reflect.New"
"reflect.makeString" "(reflect.Value).Elem"
"reflect.makeString" "(reflect.Value).SetString"
"reflect.cvtBytesString" "reflect.makeString"
"(time.Time).ISOWeek" "(time.Time).abs"
"(time.Time).ISOWeek" "time.absWeekday"
"(time.Time).ISOWeek" "time.absDate"
"reflect.FuncOf$1" "(*sync.Map).Load"
"reflect.FuncOf$1" "(*sync.Map).Store"
"reflect.FuncOf$1" "reflect.toType"
"time.init" "errors.init"
"time.init" "runtime.init"
"time.init" "syscall.init"
"time.init" "unsafe.init"
"time.init" "sync.init"
"time.init" "errors.New"
"time.init" "errors.New"
"time.init" "errors.New"
"time.init" "time.runtimeNano"
"time.init" "errors.New"
"time.init" "errors.New"
"io/fs.init" "time.init"
"io/fs.init" "internal/oserror.init"
"io/fs.init" "unicode/utf8.init"
"path.init" "errors.init"
"path.init" "internal/bytealg.init"
"path.init" "unicode/utf8.init"
"path.init" "errors.New"
"io/fs.init" "path.init"
"io/fs.init" "errors.init"
"sort.init" "internal/reflectlite.init"
"math/bits.init" "unsafe.init"
"sort.init" "math/bits.init"
"slices.init" "cmp.init"
"slices.init" "unsafe.init"
"slices.init" "math/bits.init"
"sort.init" "slices.init"
"io/fs.init" "sort.init"
"io.init" "errors.init"
"io.init" "sync.init"
"io.init" "errors.New"
"io.init" "errors.New"
"io.init" "errors.New"
"io.init" "errors.New"
"io.init" "errors.New"
"io.init" "errors.New"
"io.init" "errors.New"
"io.init" "errors.New"
"io.init" "errors.New"
"io/fs.init" "io.init"
"io/fs.init" "io/fs.errInvalid"
"io/fs.init" "io/fs.errPermission"
"io/fs.init" "io/fs.errExist"
"io/fs.init" "io/fs.errNotExist"
"io/fs.init" "io/fs.errClosed"
"io/fs.init" "errors.New"
"io/fs.init" "errors.New"
"os.init" "io/fs.init"
"os.init" "sort.init"
"os.init" "io.init"
"os.init" "runtime.init"
"os.init" "syscall.init"
"os.init" "unsafe.init"
"internal/testlog.init" "sync.init"
"internal/testlog.init" "sync/atomic.init"
"os.init" "internal/testlog.init"
"internal/poll.init" "syscall.init"
"internal/poll.init" "errors.init"
"internal/poll.init" "internal/syscall/unix.init"
"internal/poll.init" "sync/atomic.init"
"internal/poll.init" "unsafe.init"
"internal/poll.init" "sync.init"
"internal/poll.init" "time.init"
"internal/poll.init" "io.init"
"internal/poll.init" "runtime.init"
"internal/poll.init" "errors.New"
"internal/poll.init" "errors.New"
"internal/poll.init" "errors.New"
"os.init" "internal/poll.init"
"os.init" "errors.init"
"os.init" "sync.init"
"os.init" "sync/atomic.init"
"os.init" "time.init"
"os.init" "internal/itoa.init"
"internal/syscall/execenv.init" "syscall.init"
"os.init" "internal/syscall/execenv.init"
"internal/safefilepath.init" "errors.init"
"internal/safefilepath.init" "runtime.init"
"internal/safefilepath.init" "errors.New"
"os.init" "internal/safefilepath.init"
"os.init" "internal/syscall/unix.init"
"os.init" "internal/bytealg.init"
"os.init" "os.errNoDeadline"
"os.init" "os.errDeadlineExceeded"
"os.init" "errors.New"
"os.init" "errors.New"
"os.NewFile" "internal/syscall/unix.Fcntl"
"os.NewFile" "internal/syscall/unix.HasNonblockFlag"
"os.NewFile" "os.newFile"
"os.init" "os.NewFile"
"os.init" "os.NewFile"
"os.init" "os.NewFile"
"os.init" "errors.New"
"os.init" "os.Getwd"
"os.init#1" "os.runtime_args"
"os.init" "os.init#1"
"(*runtime.sigctxt).r15" "(*runtime.sigctxt).regs"
"log/slog/internal/buffer.init" "sync.init"
"(*runtime/internal/atomic.Uintptr).StoreRelease" "runtime/internal/atomic.StoreReluintptr"
"(*sync/atomic.Int32).Store" "sync/atomic.StoreInt32"
"runtime.runPerThreadSyscall" "runtime.throw"
"(*runtime.sigctxt).r5" "(*runtime.sigctxt).regs"
"(*runtime.cpuProfile).addExtra" "(*runtime.profBuf).write"
"(*runtime.cpuProfile).addExtra" "internal/abi.FuncPCABIInternal"
"(*runtime.cpuProfile).addExtra" "internal/abi.FuncPCABIInternal"
"(*runtime.cpuProfile).addExtra" "(*runtime.profBuf).write"
"(*runtime.cpuProfile).addExtra" "internal/abi.FuncPCABIInternal"
"(*runtime.cpuProfile).addExtra" "internal/abi.FuncPCABIInternal"
"(*runtime.cpuProfile).addExtra" "(*runtime.profBuf).write"
"(log/slog.Value).Resolve" "(log/slog.Value).Resolve$1"
"(log/slog.Value).Resolve" "(log/slog.Value).Kind"
"(log/slog.Value).Resolve" "(log/slog.Value).Any"
"(log/slog.Value).Resolve" "fmt.Errorf"
"(log/slog.Value).Resolve" "log/slog.AnyValue"
"(log/slog.Value).Resolve" "(log/slog.Value).LogValuer"
"(*log/slog.handleState).appendAttr" "(log/slog.Value).Resolve"
"(*log/slog.handleState).appendAttr" "(log/slog.Attr).isEmpty"
"(*log/slog.handleState).appendAttr" "(log/slog.Value).Kind"
"(*log/slog.handleState).appendAttr" "(log/slog.Value).Resolve"
"(*log/slog.handleState).appendAttr" "(log/slog.Value).Kind"
"(*log/slog.handleState).appendAttr" "(log/slog.Value).Any"
"(*log/slog.handleState).appendAttr" "(log/slog.Value).Kind"
"log/slog.String" "log/slog.StringValue"
"(*log/slog.Source).group" "log/slog.String"
"(*log/slog.Source).group" "log/slog.String"
"log/slog.Int64" "log/slog.Int64Value"
"log/slog.Int" "log/slog.Int64"
"(*log/slog.Source).group" "log/slog.Int"
"(*log/slog.Source).group" "log/slog.GroupValue"
"(*log/slog.handleState).appendAttr" "(*log/slog.Source).group"
"(*log/slog.handleState).appendAttr" "fmt.Sprintf"
"(*log/slog.handleState).appendAttr" "log/slog.StringValue"
"(*log/slog.handleState).appendAttr" "(log/slog.Value).Group"
"(*log/slog.handleState).appendAttr" "(*log/slog.handleState).appendKey"
"(*log/slog.handleState).appendAttr" "(*log/slog.handleState).appendValue"
"(*log/slog.handleState).appendAttr" "(*log/slog/internal/buffer.Buffer).Len"
"(*log/slog.handleState).appendAttr" "(*log/slog.handleState).openGroup"
"(*log/slog.handleState).appendAttrs" "(*log/slog.handleState).appendAttr"
"(*log/slog.handleState).appendAttr" "(*log/slog.handleState).appendAttrs"
"(*log/slog.handleState).appendAttr" "(*log/slog/internal/buffer.Buffer).SetLen"
"(*log/slog.handleState).closeGroup" "(*log/slog/internal/buffer.Buffer).WriteByte"
"(*log/slog.handleState).closeGroup" "(*log/slog.commonHandler).attrSep"
"(*log/slog.handleState).appendAttr" "(*log/slog.handleState).closeGroup"
"(*log/slog.handleState).appendNonBuiltIns$1" "(*log/slog.handleState).appendAttr"
"(internal/reflectlite.rtype).PkgPath" "(internal/reflectlite.rtype).uncommon"
"(internal/reflectlite.rtype).PkgPath" "(internal/reflectlite.rtype).nameOff"
"(internal/reflectlite.rtype).PkgPath" "(internal/abi.Name).Name"
"(*math/big.Int).Binomial" "(*math/big.Int).SetInt64"
"(*math/big.Int).Binomial" "(*math/big.Int).SetInt64"
"(*math/big.Int).Binomial" "(*math/big.Int).SetInt64"
"(*math/big.Int).Binomial" "(*math/big.Int).Set"
"(*math/big.Int).Binomial" "(*math/big.Int).Sub"
"(*math/big.Int).Binomial" "(*math/big.Int).Mul"
"(*math/big.Int).Binomial" "(*math/big.Int).Add"
"(*math/big.Int).Binomial" "(*math/big.Int).Quo"
"(*math/big.Int).Binomial" "(*math/big.Int).Cmp"
"syscall.Shutdown" "internal/abi.FuncPCABI0"
"syscall.Shutdown" "syscall.syscall"
"syscall.Shutdown" "syscall.errnoErr"
"(time.Time).Zone" "(*time.Time).unixSec"
"(time.Time).Zone" "(*time.Location).lookup"
"(*internal/chacha8rand.State).Init" "internal/chacha8rand.leUint64"
"(*internal/chacha8rand.State).Init" "internal/chacha8rand.leUint64"
"(*internal/chacha8rand.State).Init" "internal/chacha8rand.leUint64"
"(*internal/chacha8rand.State).Init" "internal/chacha8rand.leUint64"
"(*internal/chacha8rand.State).Init" "(*internal/chacha8rand.State).Init64"
"(*bytes.Buffer).readSlice" "bytes.IndexByte"
"(*bytes.Buffer).ReadString" "(*bytes.Buffer).readSlice"
"(*go/build/constraint.OrExpr).Eval" "(*go/build/constraint.OrExpr).Eval"
"(*go/build/constraint.AndExpr).Eval" "(*go/build/constraint.OrExpr).Eval"
"(*go/build/constraint.AndExpr).Eval" "(*go/build/constraint.AndExpr).Eval"
"(*go/build/constraint.NotExpr).Eval" "(*go/build/constraint.OrExpr).Eval"
"(*go/build/constraint.NotExpr).Eval" "(*go/build/constraint.AndExpr).Eval"
"(*go/build/constraint.NotExpr).Eval" "(*go/build/constraint.NotExpr).Eval"
"(*go/build/constraint.TagExpr).Eval" "(*reflect.structType).FieldByName$1"
"(*go/build/constraint.TagExpr).Eval" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$1"
"(*go/build/constraint.NotExpr).Eval" "(*go/build/constraint.TagExpr).Eval"
"(*go/build/constraint.AndExpr).Eval" "(*go/build/constraint.NotExpr).Eval"
"(*go/build/constraint.AndExpr).Eval" "(*go/build/constraint.TagExpr).Eval"
"(*go/build/constraint.AndExpr).Eval" "(*go/build/constraint.OrExpr).Eval"
"(*go/build/constraint.AndExpr).Eval" "(*go/build/constraint.AndExpr).Eval"
"(*go/build/constraint.AndExpr).Eval" "(*go/build/constraint.NotExpr).Eval"
"(*go/build/constraint.AndExpr).Eval" "(*go/build/constraint.TagExpr).Eval"
"(*go/build/constraint.OrExpr).Eval" "(*go/build/constraint.AndExpr).Eval"
"(*go/build/constraint.OrExpr).Eval" "(*go/build/constraint.NotExpr).Eval"
"(*go/build/constraint.OrExpr).Eval" "(*go/build/constraint.TagExpr).Eval"
"(*go/build/constraint.OrExpr).Eval" "(*go/build/constraint.OrExpr).Eval"
"(*go/build/constraint.OrExpr).Eval" "(*go/build/constraint.AndExpr).Eval"
"(*go/build/constraint.OrExpr).Eval" "(*go/build/constraint.NotExpr).Eval"
"(*go/build/constraint.OrExpr).Eval" "(*go/build/constraint.TagExpr).Eval"
"(reflect.Value).Recv" "(reflect.flag).mustBe"
"(reflect.Value).Recv" "(reflect.flag).mustBeExported"
"(reflect.Value).recv" "(reflect.Value).typ"
"(reflect.Value).recv" "(*internal/abi.Type).Kind"
"(reflect.Value).recv" "reflect.ifaceIndir"
"(reflect.Value).recv" "reflect.unsafe_New"
"(reflect.Value).recv" "(reflect.Value).pointer"
"(reflect.Value).recv" "reflect.chanrecv"
"(reflect.Value).Recv" "(reflect.Value).recv"
"(*os.ProcessState).userTime" "(*syscall.Timeval).Nano"
"(*math/big.Float).Uint64" "(*math/big.Float).validate"
"(*math/big.Float).Uint64" "math/big.msb64"
"(*math/big.Float).Uint64" "(*math/big.Float).MinPrec"
"(reflect.Value).Slice" "(reflect.flag).kind"
"(reflect.Value).Slice" "(reflect.Value).typ"
"(reflect.Value).Slice" "(reflect.Value).typ"
"(reflect.Value).Slice" "(reflect.flag).kind"
"(reflect.Value).Slice" "reflect.arrayAt"
"(reflect.Value).Slice" "(reflect.Value).typ"
"(reflect.Value).Slice" "(*internal/abi.Type).Size"
"(reflect.Value).Slice" "reflect.arrayAt"
"(reflect.Value).Slice" "(reflect.flag).ro"
"(reflect.Value).Slice" "(*internal/abi.Type).Common"
"(*math/big.Int).SetBit" "(math/big.nat).sub"
"(math/big.nat).setBit" "(math/big.nat).make"
"(math/big.nat).setBit" "(math/big.nat).norm"
"(math/big.nat).setBit" "(math/big.nat).make"
"(math/big.nat).setBit" "(math/big.nat).clear"
"(math/big.nat).setBit" "(math/big.nat).make"
"(*math/big.Int).SetBit" "(math/big.nat).setBit"
"(*math/big.Int).SetBit" "(math/big.nat).add"
"(*math/big.Int).SetBit" "(math/big.nat).setBit"
"(*go/token.FileSet).Base" "(*sync.RWMutex).RLock"
"(*go/token.FileSet).Base" "(*sync.RWMutex).RUnlock"
"fmt.init" "errors.init"
"fmt.init" "sort.init"
"math.init" "math/bits.init"
"math.init" "unsafe.init"
"strconv.init" "math.init"
"strconv.init" "errors.init"
"strconv.init" "internal/bytealg.init"
"strconv.init" "math/bits.init"
"strconv.init" "unicode/utf8.init"
"strconv.init" "errors.New"
"strconv.init" "errors.New"
"fmt.init" "strconv.init"
"fmt.init" "unicode/utf8.init"
"reflect.init" "internal/abi.init"
"reflect.init" "internal/goarch.init"
"reflect.init" "unsafe.init"
"reflect.init" "internal/bytealg.init"
"reflect.init" "internal/unsafeheader.init"
"reflect.init" "strconv.init"
"reflect.init" "sync.init"
"reflect.init" "unicode.init"
"reflect.init" "unicode/utf8.init"
"reflect.init" "errors.init"
"reflect.init" "internal/itoa.init"
"reflect.init" "math.init"
"reflect.init" "runtime.init"
"reflect.init" "reflect.rtypeOf"
"reflect.init" "reflect.rtypeOf"
"reflect.init" "reflect.rtypeOf"
"internal/fmtsort.init" "reflect.init"
"internal/fmtsort.init" "sort.init"
"fmt.init" "internal/fmtsort.init"
"fmt.init" "io.init"
"fmt.init" "os.init"
"fmt.init" "reflect.init"
"fmt.init" "sync.init"
"fmt.init" "math.init"
"fmt.init" "errors.New"
"fmt.init" "errors.New"
"runtime.chanbuf" "runtime.add"
"runtime.racesync" "runtime.chanbuf"
"runtime.racesync" "runtime.racerelease"
"runtime.racesync" "runtime.chanbuf"
"runtime.raceacquireg" "runtime.throw"
"runtime.racesync" "runtime.raceacquireg"
"runtime.racesync" "runtime.chanbuf"
"runtime.racereleaseg" "runtime.throw"
"runtime.racesync" "runtime.racereleaseg"
"runtime.racesync" "runtime.chanbuf"
"runtime.racesync" "runtime.raceacquire"
"runtime.send" "runtime.racesync"
"runtime.racenotify" "runtime.chanbuf"
"runtime.racenotify" "runtime.raceacquire"
"runtime.racenotify" "runtime.racerelease"
"runtime.racenotify" "runtime.raceacquireg"
"runtime.racenotify" "runtime.racereleaseg"
"runtime.racereleaseacquire" "runtime.throw"
"runtime.racenotify" "runtime.racereleaseacquire"
"runtime.racereleaseacquireg" "runtime.throw"
"runtime.racenotify" "runtime.racereleaseacquireg"
"runtime.send" "runtime.racenotify"
"runtime.send" "runtime.racenotify"
"runtime.typeBitsBulkBarrier" "runtime.throw"
"runtime.typeBitsBulkBarrier" "runtime.toRType"
"runtime.typeBitsBulkBarrier" "(runtime.rtype).string"
"runtime.typeBitsBulkBarrier" "runtime.throw"
"runtime.typeBitsBulkBarrier" "runtime.toRType"
"runtime.typeBitsBulkBarrier" "(runtime.rtype).string"
"runtime.typeBitsBulkBarrier" "runtime.throw"
"runtime.typeBitsBulkBarrier" "runtime.getg"
"runtime.typeBitsBulkBarrier" "(runtime.puintptr).ptr"
"runtime.typeBitsBulkBarrier" "runtime.addb"
"runtime.typeBitsBulkBarrier" "(*runtime.wbBuf).get2"
"runtime.sendDirect" "runtime.typeBitsBulkBarrier"
"runtime.sendDirect" "runtime.memmove"
"runtime.send" "runtime.sendDirect"
"runtime.send" "internal/poll.runtime_pollServerInit"
"runtime.send" "runtime.throw$1"
"runtime.send" "syscall.libc_dup2_trampoline"
"runtime.send" "sync.poolCleanup"
"runtime.send" "syscall.libc_close_trampoline"
"runtime.send" "syscall.libc_mmap_trampoline"
"runtime.send" "flag.init$1"
"runtime.send" "runtime.asyncPreempt"
"runtime.send" "(log/slog.Value).Resolve$1"
"runtime.send" "time.initLocal"
"runtime.send" "time.FixedZone$1"
"runtime.send" "syscall.libc_shutdown_trampoline"
"runtime.send" "syscall.libc_munmap_trampoline"
"runtime.send" "runtime.init$1"
"runtime.send" "(*flag.FlagSet).defaultUsage"
"runtime.send" "runtime.chanrecv$1"
"runtime.send" "runtime.asyncPreempt2"
"runtime.send" "(*fmt.ss).Token$1"
"runtime.send" "syscall.libc_fchdir_trampoline"
"runtime.send" "syscall.libc_lseek_trampoline"
"runtime.send" "flag.commandLineUsage"
"runtime.send" "runtime.chansend$1"
"runtime.send" "runtime.cputicks"
"runtime.send" "runtime.goready"
"runtime.send" "reflect.methodValueCall"
"runtime.send" "(*go/types.gcSizes).Alignof$1"
"runtime.send" "(*go/types.StdSizes).Alignof$1"
"runtime.send" "syscall.copyenv"
"runtime.send" "runtime.SetFinalizer$1"
"runtime.send" "runtime.SetFinalizer$2"
"runtime.send" "syscall.libc_fchmod_trampoline"
"runtime.send" "syscall.libc_fchown_trampoline"
"runtime.send" "syscall.libc_fstat_trampoline"
"runtime.send" "syscall.libc_ftruncate_trampoline"
"runtime.send" "syscall.libc_getsockopt_trampoline"
"runtime.send" "syscall.libc_pread_trampoline"
"runtime.send" "syscall.libc_pwrite_trampoline"
"runtime.send" "syscall.libc_read_trampoline"
"runtime.send" "syscall.libc_recvfrom_trampoline"
"runtime.send" "syscall.libc_fcntl_trampoline"
"runtime.send" "syscall.libc_setsockopt_trampoline"
"runtime.send" "syscall.libc_write_trampoline"
"runtime.send" "syscall.libc_sendto_trampoline"
"runtime.send" "(*log/slog.Level).parse$1"
"runtime.send" "syscall.libc_getrlimit_trampoline"
"runtime.send" "syscall.libc_setrlimit_trampoline"
"runtime.send" "syscall.libc_execve_trampoline"
"runtime.send" "syscall.libc_accept_trampoline"
"runtime.send" "syscall.libc_getcwd_trampoline"
"runtime.send" "go/types.resolve$1"
"runtime.send" "runtime.fatalthrow$1"
"runtime.send" "runtime.goready$1"
"runtime.send" "runtime.gcResetMarkState"
"runtime.send" "runtime.gcStart$1"
"runtime.send" "runtime.gcStart$2"
"runtime.send" "runtime.gcStart$3"
"runtime.send" "(*internal/godebug.Setting).IncNonDefault"
"runtime.send" "go/types.computeInterfaceTypeSet$1"
"runtime.send" "syscall.libc_dup_trampoline"
"runtime.send" "syscall.libc_openat_trampoline"
"runtime.send" "syscall.libc_fdopendir_trampoline"
"runtime.send" "syscall.libc_closedir_trampoline"
"runtime.send" "syscall.libc_readdir_r_trampoline"
"runtime.send" "syscall.libc_recvmsg_trampoline"
"runtime.send" "syscall.libc_sendmsg_trampoline"
"runtime.send" "syscall.libc_lstat_trampoline"
"runtime.send" "syscall.libc_stat_trampoline"
"runtime.send" "syscall.libc_open_trampoline"
"runtime.send" "runtime.callers$1"
"runtime.send" "golang.org/x/tools/go/packages.goListDriver$1"
"runtime.send" "golang.org/x/tools/go/packages.goListDriver$2"
"runtime.send" "(*go/types.Named).expandUnderlying$1"
"runtime.send" "(*go/types.Checker).objDecl$1"
"runtime.send" "(*go/types.Checker).objDecl$2"
"runtime.send" "(*internal/godebug.Setting).Value$1"
"runtime.send" "runtime.casgstatus$1"
"runtime.send" "runtime.osyield"
"runtime.send" "runtime.nanotime_trampoline"
"runtime.send" "runtime.cgoCheckTypedBlock$1"
"runtime.send" "runtime.sweepone$1"
"runtime.send" "flag.isZeroValue$1"
"runtime.send" "go/types.computeInterfaceTypeSet$2$1"
"runtime.send" "regexp/syntax.parse$1"
"runtime.send" "syscall.libc_sysctl_trampoline"
"runtime.send" "go/parser.ParseFile$1"
"runtime.send" "(*golang.org/x/sync/errgroup.Group).Go$1"
"runtime.send" "context.WithCancel$1"
"runtime.send" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"runtime.send" "(*go/types.Checker).validCycle$1"
"runtime.send" "(*go/types.Checker).typeDecl$1"
"runtime.send" "(*go/types.Checker).collectMethods$1"
"runtime.send" "(*go/types.Checker).funcDecl$1"
"runtime.send" "(*go/types.subster).typ$2"
"runtime.send" "(*go/types.typeWriter).signature$1"
"runtime.send" "(*encoding/json.encodeState).marshal$1"
"runtime.send" "runtime.exit_trampoline"
"runtime.send" "runtime.wbBufFlush$1"
"runtime.send" "(*runtime.sweepLocked).sweep$1"
"runtime.send" "(*runtime.sweepLocked).sweep$2"
"runtime.send" "runtime.gcBgMarkWorker$2"
"runtime.send" "runtime.mspinning"
"runtime.send" "reflect.embeddedIfaceMethStub"
"runtime.send" "(*internal/godebug.Setting).register"
"runtime.send" "runtime.persistentalloc$1"
"runtime.send" "(*log/slog.handleState).appendValue$1"
"runtime.send" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"runtime.send" "(*go/types.Checker).collectTypeParams$1"
"runtime.send" "(*go/types.Checker).funcType$2"
"runtime.send" "runtime.usleep_trampoline"
"runtime.send" "runtime.doRecordGoroutineProfile$1"
"runtime.send" "runtime.pthread_mutex_init_trampoline"
"runtime.send" "runtime.pthread_cond_init_trampoline"
"runtime.send" "runtime.pthread_mutex_lock_trampoline"
"runtime.send" "runtime.pthread_mutex_unlock_trampoline"
"runtime.send" "runtime.pthread_cond_wait_trampoline"
"runtime.send" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"runtime.send" "runtime._LostContendedRuntimeLock"
"runtime.send" "(*runtime.mLockProfile).captureStack$1"
"runtime.send" "runtime.pthread_cond_signal_trampoline"
"runtime.send" "runtime.tracefree$1"
"runtime.send" "(*runtime.mheap).freeSpan$1"
"runtime.send" "runtime.gcMarkDone$2"
"runtime.send" "runtime.gcMarkDone$3"
"runtime.send" "runtime.gcMarkDone$4"
"runtime.send" "runtime.entersyscallblock$1"
"runtime.send" "runtime.entersyscallblock$2"
"runtime.send" "runtime.entersyscallblock_handoff"
"runtime.send" "runtime.exitsyscall$1"
"runtime.send" "runtime.exitsyscall$2"
"runtime.send" "runtime.cgoCheckPtrWrite$1"
"runtime.send" "(*internal/lazyregexp.Regexp).build"
"runtime.send" "regexp.mergeRuneSets$1"
"runtime.send" "runtime.unreachableMethod"
"runtime.send" "runtime.heapSetType$1"
"runtime.send" "runtime.tracealloc$1"
"runtime.send" "syscall.libc_chmod_trampoline"
"runtime.send" "(*os/exec.Cmd).Start$1"
"runtime.send" "(*context.cancelCtx).propagateCancel$1"
"runtime.send" "(*context.cancelCtx).propagateCancel$2"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"runtime.send" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"runtime.send" "(*go/types.Checker).rawExpr$1"
"runtime.send" "(*go/types.Checker).validVarType$1"
"runtime.send" "(*go/types.Checker).typInternal$1"
"runtime.send" "(*go/types.Checker).typInternal$2"
"runtime.send" "runtime.stopTheWorld$1"
"runtime.send" "runtime.startTheWorld$1"
"runtime.send" "runtime.wirep$1"
"runtime.send" "runtime.wirep$2"
"runtime.send" "runtime.kevent_trampoline"
"runtime.send" "runtime.read_trampoline"
"runtime.send" "runtime.raise_trampoline"
"runtime.send" "runtime.cgoSigtramp"
"runtime.send" "runtime.sigtramp"
"runtime.send" "runtime.forEachP$1"
"runtime.send" "runtime.gcMarkTermination$1"
"runtime.send" "runtime.gcMarkTermination$2"
"runtime.send" "runtime.gcControllerCommit"
"runtime.send" "runtime.gcMarkTermination$3"
"runtime.send" "runtime.freeStackSpans"
"runtime.send" "runtime.gcMarkTermination$5"
"runtime.send" "runtime.exitsyscallfast$1"
"runtime.send" "runtime.allocm$1"
"runtime.send" "runtime.mstart"
"runtime.send" "runtime.getempty$1"
"runtime.send" "(*runtime.p).destroy$1"
"runtime.send" "runtime.gcAssistAlloc$1"
"runtime.send" "(*runtime.mheap).alloc$1"
"runtime.send" "runtime.mProf_Malloc$1"
"runtime.send" "runtime.Stack$1"
"runtime.send" "(*os/exec.Cmd).awaitGoroutines$1"
"runtime.send" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"runtime.send" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"runtime.send" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"runtime.send" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"runtime.send" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"runtime.send" "(*go/types.Checker).exprInternal$1"
"runtime.send" "(*go/types.Checker).instantiatedType$1"
"runtime.send" "(*go/types.Checker).instantiatedType$2"
"runtime.send" "(*go/types.Checker).structType$3"
"runtime.send" "(*go/types.Checker).interfaceType$2"
"runtime.send" "runtime.reentersyscall$1"
"runtime.send" "runtime.reentersyscall$2"
"runtime.send" "runtime.entersyscall_sysmon"
"runtime.send" "runtime.runSafePointFn"
"runtime.send" "runtime.entersyscall_gcwait"
"runtime.send" "(*runtime.traceMap).put$1"
"runtime.send" "runtime.fatal$1"
"runtime.send" "runtime.write_trampoline"
"runtime.send" "(runtime.traceWriter).refill$1"
"runtime.send" "runtime.mmap_trampoline"
"runtime.send" "runtime.sigprocmask_trampoline"
"runtime.send" "runtime.sigaction_trampoline"
"runtime.send" "runtime.gcMarkTermination$4$1"
"runtime.send" "(*runtime.mspan).setUserArenaChunkToFault$1"
"runtime.send" "runtime.exitsyscallfast_reacquired$1"
"runtime.send" "(*runtime.traceStringTable).put$1"
"runtime.send" "(*runtime.rwmutex).rlock$1"
"runtime.send" "runtime.traceThreadDestroy$1"
"runtime.send" "runtime.malg$1"
"runtime.send" "runtime.allocmcache$1"
"runtime.send" "runtime.freemcache$1"
"runtime.send" "golang.org/x/tools/internal/event/core.ExportPair$1"
"runtime.send" "golang.org/x/tools/internal/event/core.ExportPair$2"
"runtime.send" "go/types.parseUnion$1"
"runtime.send" "runtime._VDSO"
"runtime.send" "runtime._ExternalCode"
"runtime.send" "runtime._GC"
"runtime.send" "runtime._System"
"runtime.send" "runtime.sigpanic"
"runtime.send" "runtime.raiseproc_trampoline"
"runtime.send" "runtime.markrootFreeGStacks"
"runtime.send" "runtime.markroot$1"
"runtime.send" "runtime.walltime_trampoline"
"runtime.send" "runtime.pthread_attr_init_trampoline"
"runtime.send" "runtime.pthread_attr_getstacksize_trampoline"
"runtime.send" "runtime.pthread_attr_setdetachstate_trampoline"
"runtime.send" "runtime.mstart_stub"
"runtime.send" "go/build/constraint.parseExpr$1"
"runtime.send" "(*go/parser.parser).parsePrimaryExpr$1"
"runtime.send" "(*go/parser.parser).parseBinaryExpr$1"
"runtime.send" "(*go/parser.parser).parseParameterList$1"
"runtime.send" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"runtime.send" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"runtime.send" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"runtime.send" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"runtime.send" "(*go/types.Checker).infer$1"
"runtime.send" "(*go/types.Checker).infer$2"
"runtime.send" "(*go/types.Checker).instantiateSignature$1"
"runtime.send" "(*go/types.Checker).instantiateSignature$2"
"runtime.send" "(*go/types.Checker).genericExprList$1"
"runtime.send" "runtime.printArgs$3"
"runtime.send" "runtime.freeSomeWbufs$1"
"runtime.send" "runtime.pthread_kill_trampoline"
"runtime.send" "runtime.mlock_trampoline"
"runtime.send" "runtime.pthread_create_trampoline"
"runtime.send" "(*runtime.pageAlloc).scavenge$1"
"runtime.send" "syscall.libc_pipe_trampoline"
"runtime.send" "syscall.libc_kill_trampoline"
"runtime.send" "syscall.libc_wait4_trampoline"
"runtime.send" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"runtime.send" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"runtime.send" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"runtime.send" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"runtime.send" "syscall.libc_mkdir_trampoline"
"runtime.send" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"runtime.send" "go/types.hasVarSize$1"
"runtime.send" "(*go/types.tpWalker).isParameterized$1"
"runtime.send" "runtime.kqueue_trampoline"
"runtime.send" "runtime._LostExternalCode"
"runtime.send" "runtime._LostSIGPROFDuringAtomic64"
"runtime.send" "syscall.libc_fork_trampoline"
"runtime.send" "syscall.libc_setsid_trampoline"
"runtime.send" "syscall.libc_setpgid_trampoline"
"runtime.send" "syscall.libc_getpid_trampoline"
"runtime.send" "syscall.libc_ioctl_trampoline"
"runtime.send" "syscall.libc_chroot_trampoline"
"runtime.send" "syscall.libc_setgroups_trampoline"
"runtime.send" "syscall.libc_setgid_trampoline"
"runtime.send" "syscall.libc_setuid_trampoline"
"runtime.send" "syscall.libc_chdir_trampoline"
"runtime.send" "syscall.libc_exit_trampoline"
"runtime.send" "syscall.libc_unlink_trampoline"
"runtime.send" "syscall.libc_rmdir_trampoline"
"runtime.send" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"runtime.send" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"runtime.send" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"runtime.send" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"runtime.send" "(*go/types.unifier).nify$1"
"runtime.send" "runtime.fcntl_trampoline"
"runtime.send" "runtime.pipe_trampoline"
"runtime.send" "runtime.munmap_trampoline"
"runtime.send" "runtime.madvise_trampoline"
"runtime.send" "(*go/parser.parser).safePos$1"
"runtime.send" "syscall.libc_ptrace_trampoline"
"runtime.send" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"runtime.send" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"runtime.send" "math/big.three$1"
"runtime.send" "go/ast.fprint$1"
"runtime.send" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"runtime.send" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"go/token.init" "fmt.init"
"go/token.init" "sort.init"
"go/token.init" "strconv.init"
"go/token.init" "sync.init"
"go/token.init" "sync/atomic.init"
"go/token.init" "unicode.init"
"go/token.init" "unicode/utf8.init"
"go/token.init" "go/token.init#1"
"go/ast.init" "go/token.init"
"strings.init" "internal/bytealg.init"
"strings.init" "unicode/utf8.init"
"strings.init" "unsafe.init"
"strings.init" "errors.init"
"strings.init" "io.init"
"strings.init" "sync.init"
"strings.init" "unicode.init"
"go/ast.init" "strings.init"
"bytes.init" "errors.init"
"bytes.init" "io.init"
"bytes.init" "unicode/utf8.init"
"bytes.init" "internal/bytealg.init"
"bytes.init" "unicode.init"
"bytes.init" "errors.New"
"bytes.init" "errors.New"
"bytes.init" "errors.New"
"go/ast.init" "bytes.init"
"go/ast.init" "fmt.init"
"go/ast.init" "sort.init"
"go/ast.init" "strconv.init"
"go/ast.init" "io.init"
"go/ast.init" "os.init"
"go/ast.init" "reflect.init"
"go/scanner.init" "fmt.init"
"go/scanner.init" "go/token.init"
"go/scanner.init" "io.init"
"go/scanner.init" "sort.init"
"go/scanner.init" "bytes.init"
"path/filepath.init" "errors.init"
"path/filepath.init" "os.init"
"path/filepath.init" "runtime.init"
"path/filepath.init" "sort.init"
"path/filepath.init" "strings.init"
"path/filepath.init" "unicode/utf8.init"
"path/filepath.init" "io/fs.init"
"path/filepath.init" "slices.init"
"path/filepath.init" "syscall.init"
"path/filepath.init" "errors.New"
"go/scanner.init" "path/filepath.init"
"go/scanner.init" "strconv.init"
"go/scanner.init" "unicode.init"
"go/scanner.init" "unicode/utf8.init"
"go/ast.init" "go/scanner.init"
"(*os.Process).release" "runtime.SetFinalizer"
"(*os.Process).Release" "(*os.Process).release"
"internal/gover.init" "cmp.init"
"runtime.raiseproc" "internal/abi.FuncPCABI0"
"runtime.raiseproc" "runtime.libcCall"
"reflect.makeRunes" "reflect.New"
"reflect.makeRunes" "(reflect.Value).Elem"
"reflect.makeRunes" "(reflect.Value).setRunes"
"(*math/rand.Rand).Int" "(*math/rand.Rand).Int63"
"(*sync/atomic.Uint32).Swap" "sync/atomic.SwapUint32"
"(*log.Logger).SetOutput" "(*sync.Mutex).Lock"
"(*log.Logger).SetOutput" "(*sync.Mutex).Unlock"
"(*log.Logger).SetOutput" "(*sync/atomic.Bool).Store"
"(*internal/poll.FD).Fchmod" "(*internal/poll.FD).incref"
"(*internal/poll.FD).Fchmod" "(*internal/poll.FD).decref"
"(*internal/poll.FD).Fchmod" "internal/poll.ignoringEINTR"
"(*runtime/internal/atomic.Uintptr).Swap" "runtime/internal/atomic.Xchguintptr"
"(*regexp.Regexp).replaceAll" "(*regexp.Regexp).doExecute"
"(*regexp.Regexp).replaceAll" "(*regexp.Regexp).ReplaceAllLiteral$1"
"(*regexp.Regexp).replaceAll" "(*regexp.Regexp).ReplaceAllLiteralString$1"
"(*regexp.Regexp).expand" "strings.Cut"
"regexp.extract" "unicode/utf8.DecodeRuneInString"
"regexp.extract" "unicode.IsLetter"
"regexp.extract" "unicode.IsDigit"
"(*regexp.Regexp).expand" "regexp.extract"
"(*regexp.Regexp).ReplaceAllString$1" "(*regexp.Regexp).expand"
"(*regexp.Regexp).replaceAll" "(*regexp.Regexp).ReplaceAllString$1"
"(*regexp.Regexp).replaceAll" "(*regexp.Regexp).ReplaceAllStringFunc$1"
"(*regexp.Regexp).ReplaceAll$1" "(*regexp.Regexp).expand"
"(*regexp.Regexp).replaceAll" "(*regexp.Regexp).ReplaceAll$1"
"(*regexp.Regexp).ReplaceAllFunc$1" "log.Printf$1"
"(*regexp.Regexp).ReplaceAllFunc$1" "(*log.Logger).Output$1"
"(*regexp.Regexp).ReplaceAllFunc$1" "log.init#1$1$1"
"(*regexp.Regexp).replaceAll" "(*regexp.Regexp).ReplaceAllFunc$1"
"(*regexp.Regexp).replaceAll" "unicode/utf8.DecodeRune"
"(*regexp.Regexp).replaceAll" "unicode/utf8.DecodeRuneInString"
"(*regexp.Regexp).ReplaceAllStringFunc" "(*regexp.Regexp).replaceAll"
"(*math/rand.rngSource).Seed" "math/rand.seedrand"
"(*math/rand.rngSource).Seed" "math/rand.seedrand"
"(*math/rand.rngSource).Seed" "math/rand.seedrand"
"math/rand.newSource" "(*math/rand.rngSource).Seed"
"(*internal/abi.Type).FuncType" "(*internal/abi.Type).Kind"
"(*internal/poll.FD).WriteMsgInet4" "(*internal/poll.FD).writeLock"
"(*internal/poll.FD).WriteMsgInet4" "(*internal/poll.FD).writeUnlock"
"(*internal/poll.FD).WriteMsgInet4" "(*internal/poll.pollDesc).prepareWrite"
"(*internal/poll.FD).WriteMsgInet4" "internal/syscall/unix.SendmsgNInet4"
"(*internal/poll.FD).WriteMsgInet4" "(*internal/poll.pollDesc).waitWrite"
"(*internal/poll.FD).WriteMsgInet4" "(*internal/poll.pollDesc).pollable"
"(*sync/atomic.Pointer[go/token.File]).Swap[go/token.File]" "sync/atomic.SwapPointer"
"(reflect.Value).CanComplex" "(reflect.flag).kind"
"internal/buildcfg.gomips" "internal/buildcfg.envOr"
"internal/buildcfg.gomips" "fmt.Errorf"
"(*internal/poll.FD).RawControl" "(*internal/poll.FD).incref"
"(*internal/poll.FD).RawControl" "(*internal/poll.FD).decref"
"(*runtime/internal/atomic.Pointer[runtime._defer]).StoreNoWB[runtime._defer]" "(*runtime/internal/atomic.UnsafePointer).StoreNoWB"
"(*internal/poll.FD).WriteOnce" "(*internal/poll.FD).writeLock"
"(*internal/poll.FD).WriteOnce" "(*internal/poll.FD).writeUnlock"
"(*internal/poll.FD).WriteOnce" "internal/poll.ignoringEINTRIO"
"internal/bisect.init" "runtime.init"
"internal/bisect.init" "sync.init"
"internal/bisect.init" "sync/atomic.init"
"internal/bisect.init" "unsafe.init"
"internal/godebug.init" "internal/bisect.init"
"internal/godebug.init" "internal/godebugs.init"
"internal/godebug.init" "sync.init"
"internal/godebug.init" "sync/atomic.init"
"internal/godebug.init" "unsafe.init"
"internal/godebug.init#1" "internal/godebug.setUpdate"
"internal/godebug.init#1" "internal/godebug.setNewIncNonDefault"
"internal/godebug.init" "internal/godebug.init#1"
"reflect.cvtDirect" "(*reflect.rtype).common"
"reflect.cvtDirect" "reflect.unsafe_New"
"reflect.cvtDirect" "reflect.typedmemmove"
"reflect.cvtDirect" "(reflect.flag).ro"
"(reflect.Value).InterfaceData" "(reflect.flag).mustBe"
"(reflect.Value).InterfaceData" "reflect.escapes"
"runtime.recvDirect" "runtime.typeBitsBulkBarrier"
"runtime.recvDirect" "runtime.memmove"
"(*sync/atomic.Pointer[log/slog.Logger]).Load[log/slog.Logger]" "sync/atomic.LoadPointer"
"log/slog.Default" "(*sync/atomic.Pointer[log/slog.Logger]).Load[log/slog.Logger]"
"log/slog.Info" "log/slog.Default"
"log/slog.Info" "context.Background"
"(*log/slog.Logger).Enabled" "context.Background"
"(*log/slog.Logger).Enabled" "(*log/slog.Logger).Handler"
"(*sync/atomic.Int64).Load" "sync/atomic.LoadInt64"
"(*log/slog.LevelVar).Level" "(*sync/atomic.Int64).Load"
"(*log/slog.defaultHandler).Enabled" "(*log/slog.LevelVar).Level"
"(*log/slog.Logger).Enabled" "(*log/slog.defaultHandler).Enabled"
"(*log/slog.Logger).log" "(*log/slog.Logger).Enabled"
"(*log/slog.Logger).log" "runtime.Callers"
"(*log/slog.Logger).log" "time.Now"
"(*log/slog.Logger).log" "log/slog.NewRecord"
"log/slog.argsToAttr" "log/slog.String"
"log/slog.Any" "log/slog.AnyValue"
"log/slog.argsToAttr" "log/slog.Any"
"log/slog.argsToAttr" "log/slog.Any"
"(*log/slog.Record).Add" "log/slog.argsToAttr"
"(*log/slog.Record).Add" "(log/slog.Value).isEmptyGroup"
"(*log/slog.Record).Add" "log/slog.countAttrs"
"(*log/slog.Logger).log" "(*log/slog.Record).Add"
"(*log/slog.Logger).log" "context.Background"
"(*log/slog.Logger).log" "(*log/slog.Logger).Handler"
"log/slog/internal/buffer.New" "(*sync.Pool).Get"
"(*log/slog.defaultHandler).Handle" "log/slog/internal/buffer.New"
"(*log/slog.defaultHandler).Handle" "(log/slog.Level).String"
"(*log/slog.defaultHandler).Handle" "(*log/slog/internal/buffer.Buffer).WriteString"
"(*log/slog.defaultHandler).Handle" "(*log/slog/internal/buffer.Buffer).WriteByte"
"(*log/slog.defaultHandler).Handle" "(*log/slog/internal/buffer.Buffer).WriteString"
"(*log/slog.commonHandler).newHandleState" "log/slog/internal/buffer.New"
"(*log/slog.commonHandler).newHandleState" "(*sync.Pool).Get"
"(*log/slog.defaultHandler).Handle" "(*log/slog.commonHandler).newHandleState"
"(*log/slog/internal/buffer.Buffer).Free" "(*sync.Pool).Put"
"(*log/slog.handleState).free" "(*log/slog/internal/buffer.Buffer).Free"
"(*log/slog.handleState).free" "(*sync.Pool).Put"
"(*log/slog.handleState).free" "(*log/slog/internal/buffer.Buffer).Free"
"(*log/slog.defaultHandler).Handle" "(*log/slog.handleState).free"
"(*log/slog.handleState).appendNonBuiltIns" "(*log/slog/internal/buffer.Buffer).WriteString"
"(*log/slog.handleState).appendNonBuiltIns" "(*log/slog/internal/buffer.Buffer).Write"
"(*log/slog.handleState).appendNonBuiltIns" "(*log/slog.commonHandler).attrSep"
"(*log/slog.handleState).appendNonBuiltIns" "(log/slog.Record).NumAttrs"
"(*log/slog.handleState).appendNonBuiltIns" "(*log/slog/internal/buffer.Buffer).WriteString"
"(*log/slog.handleState).appendNonBuiltIns" "(*log/slog/internal/buffer.Buffer).Len"
"(*log/slog.handleState).appendNonBuiltIns" "(*log/slog.handleState).openGroups"
"(log/slog.Record).Attrs" "(*log/slog.handleState).appendNonBuiltIns$1"
"(log/slog.Record).Attrs" "(*log/slog.handleState).appendNonBuiltIns$1"
"(*log/slog.handleState).appendNonBuiltIns" "(log/slog.Record).Attrs"
"(*log/slog.handleState).appendNonBuiltIns" "(*log/slog/internal/buffer.Buffer).SetLen"
"(*log/slog.handleState).appendNonBuiltIns" "(*log/slog/internal/buffer.Buffer).WriteByte"
"(*log/slog.handleState).appendNonBuiltIns" "(*log/slog/internal/buffer.Buffer).WriteByte"
"(*log/slog.defaultHandler).Handle" "(*log/slog.handleState).appendNonBuiltIns"
"(*log/slog.defaultHandler).Handle" "log.init#1$1"
"(*log/slog.Logger).log" "(*log/slog.defaultHandler).Handle"
"log/slog.Info" "(*log/slog.Logger).log"
"(*internal/poll.FD).WriteToInet6" "(*internal/poll.FD).writeLock"
"(*internal/poll.FD).WriteToInet6" "(*internal/poll.FD).writeUnlock"
"(*internal/poll.FD).WriteToInet6" "(*internal/poll.pollDesc).prepareWrite"
"(*internal/poll.FD).WriteToInet6" "internal/syscall/unix.SendtoInet6"
"(*internal/poll.FD).WriteToInet6" "(*internal/poll.pollDesc).waitWrite"
"(*internal/poll.FD).WriteToInet6" "(*internal/poll.pollDesc).pollable"
"(*sync/atomic.Pointer[string]).Store[string]" "sync/atomic.StorePointer"
"(*log.Logger).SetPrefix" "(*sync/atomic.Pointer[string]).Store[string]"
"(*runtime.sigctxt).r0" "(*runtime.sigctxt).regs"
"(reflect.Value).send" "(reflect.Value).typ"
"(reflect.Value).send" "(reflect.flag).mustBeExported"
"(reflect.Value).send" "(reflect.Value).assignTo"
"(reflect.Value).send" "(reflect.Value).pointer"
"reflect.chansend" "reflect.contentEscapes"
"reflect.chansend" "reflect.chansend0"
"(reflect.Value).send" "reflect.chansend"
"context.init" "errors.init"
"context.init" "internal/reflectlite.init"
"context.init" "sync.init"
"context.init" "sync/atomic.init"
"context.init" "time.init"
"context.init" "errors.New"
"context.init" "context.init#1"
"golang.org/x/tools/internal/event.init" "context.init"
"golang.org/x/tools/internal/event/core.init" "fmt.init"
"golang.org/x/tools/internal/event/core.init" "time.init"
"golang.org/x/tools/internal/event/label.init" "fmt.init"
"golang.org/x/tools/internal/event/label.init" "io.init"
"golang.org/x/tools/internal/event/label.init" "reflect.init"
"golang.org/x/tools/internal/event/label.init" "unsafe.init"
"golang.org/x/tools/internal/event/core.init" "golang.org/x/tools/internal/event/label.init"
"golang.org/x/tools/internal/event/core.init" "context.init"
"golang.org/x/tools/internal/event/core.init" "sync/atomic.init"
"golang.org/x/tools/internal/event/core.init" "unsafe.init"
"golang.org/x/tools/internal/event/keys.init" "fmt.init"
"golang.org/x/tools/internal/event/keys.init" "io.init"
"golang.org/x/tools/internal/event/keys.init" "math.init"
"golang.org/x/tools/internal/event/keys.init" "strconv.init"
"golang.org/x/tools/internal/event/keys.init" "golang.org/x/tools/internal/event/label.init"
"golang.org/x/tools/internal/event/keys.init" "sort.init"
"golang.org/x/tools/internal/event/keys.init" "strings.init"
"golang.org/x/tools/internal/event/keys.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/keys.init" "golang.org/x/tools/internal/event/keys.NewTag"
"golang.org/x/tools/internal/event/keys.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/keys.init" "golang.org/x/tools/internal/event/keys.NewTag"
"golang.org/x/tools/internal/event/keys.init" "golang.org/x/tools/internal/event/keys.NewTag"
"golang.org/x/tools/internal/event/keys.init" "golang.org/x/tools/internal/event/keys.NewError"
"golang.org/x/tools/internal/event/keys.init" "golang.org/x/tools/internal/event/keys.NewTag"
"golang.org/x/tools/internal/event/core.init" "golang.org/x/tools/internal/event/keys.init"
"golang.org/x/tools/internal/event.init" "golang.org/x/tools/internal/event/core.init"
"golang.org/x/tools/internal/event.init" "golang.org/x/tools/internal/event/keys.init"
"golang.org/x/tools/internal/event.init" "golang.org/x/tools/internal/event/label.init"
"(time.Duration).Round" "time.lessThanHalf"
"(time.Duration).Round" "time.lessThanHalf"
"(*flag.FlagSet).sprintf" "fmt.Sprintf"
"(*flag.FlagSet).sprintf" "(*flag.FlagSet).Output"
"(*flag.FlagSet).sprintf" "fmt.Fprintln"
"(*flag.FlagSet).failf" "(*flag.FlagSet).sprintf"
"(*flag.FlagSet).usage" "(*flag.FlagSet).defaultUsage"
"(*flag.FlagSet).usage" "runtime.SetFinalizer$2"
"(*flag.FlagSet).usage" "syscall.libc_ftruncate_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_fchdir_trampoline"
"(*flag.FlagSet).usage" "syscall.copyenv"
"(*flag.FlagSet).usage" "syscall.libc_fchown_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_fcntl_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_setrlimit_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_accept_trampoline"
"(*flag.FlagSet).usage" "(*go/types.StdSizes).Alignof$1"
"(*flag.FlagSet).usage" "syscall.libc_getcwd_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_pread_trampoline"
"(*flag.FlagSet).usage" "runtime.chansend$1"
"(*flag.FlagSet).usage" "runtime.asyncPreempt2"
"(*flag.FlagSet).usage" "runtime.fatalthrow$1"
"(*flag.FlagSet).usage" "syscall.libc_lstat_trampoline"
"(*flag.FlagSet).usage" "flag.commandLineUsage"
"(*flag.FlagSet).usage" "syscall.libc_openat_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_closedir_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_stat_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_fstat_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_mmap_trampoline"
"(*flag.FlagSet).usage" "(*go/types.gcSizes).Alignof$1"
"(*flag.FlagSet).usage" "syscall.libc_fchmod_trampoline"
"(*flag.FlagSet).usage" "flag.init$1"
"(*flag.FlagSet).usage" "(log/slog.Value).Resolve$1"
"(*flag.FlagSet).usage" "time.initLocal"
"(*flag.FlagSet).usage" "time.FixedZone$1"
"(*flag.FlagSet).usage" "reflect.methodValueCall"
"(*flag.FlagSet).usage" "go/types.resolve$1"
"(*flag.FlagSet).usage" "runtime.goready$1"
"(*flag.FlagSet).usage" "runtime.gcStart$1"
"(*flag.FlagSet).usage" "runtime.init$1"
"(*flag.FlagSet).usage" "go/types.computeInterfaceTypeSet$1"
"(*flag.FlagSet).usage" "runtime.gcStart$3"
"(*flag.FlagSet).usage" "(*fmt.ss).Token$1"
"(*flag.FlagSet).usage" "syscall.libc_lseek_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_setsockopt_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_write_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_fdopendir_trampoline"
"(*flag.FlagSet).usage" "runtime.chanrecv$1"
"(*flag.FlagSet).usage" "internal/poll.runtime_pollServerInit"
"(*flag.FlagSet).usage" "runtime.throw$1"
"(*flag.FlagSet).usage" "runtime.SetFinalizer$1"
"(*flag.FlagSet).usage" "syscall.libc_pwrite_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_sendto_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_getrlimit_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_execve_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_dup2_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_recvfrom_trampoline"
"(*flag.FlagSet).usage" "runtime.gcResetMarkState"
"(*flag.FlagSet).usage" "runtime.asyncPreempt"
"(*flag.FlagSet).usage" "runtime.gcStart$2"
"(*flag.FlagSet).usage" "(*log/slog.Level).parse$1"
"(*flag.FlagSet).usage" "syscall.libc_recvmsg_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_open_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_read_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_getsockopt_trampoline"
"(*flag.FlagSet).usage" "sync.poolCleanup"
"(*flag.FlagSet).usage" "(*internal/godebug.Setting).IncNonDefault"
"(*flag.FlagSet).usage" "syscall.libc_close_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_shutdown_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_munmap_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_dup_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_readdir_r_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_sendmsg_trampoline"
"(*flag.FlagSet).usage" "(*flag.FlagSet).defaultUsage"
"(*flag.FlagSet).usage" "runtime.callers$1"
"(*flag.FlagSet).usage" "golang.org/x/tools/go/packages.goListDriver$1"
"(*flag.FlagSet).usage" "golang.org/x/tools/go/packages.goListDriver$2"
"(*flag.FlagSet).usage" "(*go/types.Named).expandUnderlying$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).objDecl$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).objDecl$2"
"(*flag.FlagSet).usage" "(*internal/godebug.Setting).Value$1"
"(*flag.FlagSet).usage" "runtime.casgstatus$1"
"(*flag.FlagSet).usage" "runtime.osyield"
"(*flag.FlagSet).usage" "runtime.nanotime_trampoline"
"(*flag.FlagSet).usage" "runtime.cgoCheckTypedBlock$1"
"(*flag.FlagSet).usage" "runtime.sweepone$1"
"(*flag.FlagSet).usage" "flag.isZeroValue$1"
"(*flag.FlagSet).usage" "go/types.computeInterfaceTypeSet$2$1"
"(*flag.FlagSet).usage" "regexp/syntax.parse$1"
"(*flag.FlagSet).usage" "syscall.libc_sysctl_trampoline"
"(*flag.FlagSet).usage" "go/parser.ParseFile$1"
"(*flag.FlagSet).usage" "(*golang.org/x/sync/errgroup.Group).Go$1"
"(*flag.FlagSet).usage" "context.WithCancel$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).validCycle$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).typeDecl$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).collectMethods$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).funcDecl$1"
"(*flag.FlagSet).usage" "(*go/types.subster).typ$2"
"(*flag.FlagSet).usage" "(*go/types.typeWriter).signature$1"
"(*flag.FlagSet).usage" "(*encoding/json.encodeState).marshal$1"
"(*flag.FlagSet).usage" "runtime.exit_trampoline"
"(*flag.FlagSet).usage" "runtime.wbBufFlush$1"
"(*flag.FlagSet).usage" "(*runtime.sweepLocked).sweep$1"
"(*flag.FlagSet).usage" "(*runtime.sweepLocked).sweep$2"
"(*flag.FlagSet).usage" "runtime.gcBgMarkWorker$2"
"(*flag.FlagSet).usage" "runtime.mspinning"
"(*flag.FlagSet).usage" "reflect.embeddedIfaceMethStub"
"(*flag.FlagSet).usage" "(*internal/godebug.Setting).register"
"(*flag.FlagSet).usage" "runtime.persistentalloc$1"
"(*flag.FlagSet).usage" "(*log/slog.handleState).appendValue$1"
"(*flag.FlagSet).usage" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).collectTypeParams$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).funcType$2"
"(*flag.FlagSet).usage" "runtime.usleep_trampoline"
"(*flag.FlagSet).usage" "runtime.doRecordGoroutineProfile$1"
"(*flag.FlagSet).usage" "runtime.pthread_mutex_init_trampoline"
"(*flag.FlagSet).usage" "runtime.pthread_cond_init_trampoline"
"(*flag.FlagSet).usage" "runtime.pthread_mutex_lock_trampoline"
"(*flag.FlagSet).usage" "runtime.pthread_mutex_unlock_trampoline"
"(*flag.FlagSet).usage" "runtime.pthread_cond_wait_trampoline"
"(*flag.FlagSet).usage" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"(*flag.FlagSet).usage" "runtime._LostContendedRuntimeLock"
"(*flag.FlagSet).usage" "(*runtime.mLockProfile).captureStack$1"
"(*flag.FlagSet).usage" "runtime.pthread_cond_signal_trampoline"
"(*flag.FlagSet).usage" "runtime.tracefree$1"
"(*flag.FlagSet).usage" "(*runtime.mheap).freeSpan$1"
"(*flag.FlagSet).usage" "runtime.gcMarkDone$2"
"(*flag.FlagSet).usage" "runtime.gcMarkDone$3"
"(*flag.FlagSet).usage" "runtime.gcMarkDone$4"
"(*flag.FlagSet).usage" "runtime.entersyscallblock$1"
"(*flag.FlagSet).usage" "runtime.entersyscallblock$2"
"(*flag.FlagSet).usage" "runtime.entersyscallblock_handoff"
"(*flag.FlagSet).usage" "runtime.exitsyscall$1"
"(*flag.FlagSet).usage" "runtime.exitsyscall$2"
"(*flag.FlagSet).usage" "runtime.cgoCheckPtrWrite$1"
"(*flag.FlagSet).usage" "(*internal/lazyregexp.Regexp).build"
"(*flag.FlagSet).usage" "regexp.mergeRuneSets$1"
"(*flag.FlagSet).usage" "runtime.unreachableMethod"
"(*flag.FlagSet).usage" "runtime.heapSetType$1"
"(*flag.FlagSet).usage" "runtime.tracealloc$1"
"(*flag.FlagSet).usage" "syscall.libc_chmod_trampoline"
"(*flag.FlagSet).usage" "(*os/exec.Cmd).Start$1"
"(*flag.FlagSet).usage" "(*context.cancelCtx).propagateCancel$1"
"(*flag.FlagSet).usage" "(*context.cancelCtx).propagateCancel$2"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"(*flag.FlagSet).usage" "(*go/types.Checker).rawExpr$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).validVarType$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).typInternal$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).typInternal$2"
"(*flag.FlagSet).usage" "runtime.stopTheWorld$1"
"(*flag.FlagSet).usage" "runtime.startTheWorld$1"
"(*flag.FlagSet).usage" "runtime.wirep$1"
"(*flag.FlagSet).usage" "runtime.wirep$2"
"(*flag.FlagSet).usage" "runtime.kevent_trampoline"
"(*flag.FlagSet).usage" "runtime.read_trampoline"
"(*flag.FlagSet).usage" "runtime.raise_trampoline"
"(*flag.FlagSet).usage" "runtime.cgoSigtramp"
"(*flag.FlagSet).usage" "runtime.sigtramp"
"(*flag.FlagSet).usage" "runtime.forEachP$1"
"(*flag.FlagSet).usage" "runtime.gcMarkTermination$1"
"(*flag.FlagSet).usage" "runtime.gcMarkTermination$2"
"(*flag.FlagSet).usage" "runtime.gcControllerCommit"
"(*flag.FlagSet).usage" "runtime.gcMarkTermination$3"
"(*flag.FlagSet).usage" "runtime.freeStackSpans"
"(*flag.FlagSet).usage" "runtime.gcMarkTermination$5"
"(*flag.FlagSet).usage" "runtime.exitsyscallfast$1"
"(*flag.FlagSet).usage" "runtime.allocm$1"
"(*flag.FlagSet).usage" "runtime.mstart"
"(*flag.FlagSet).usage" "runtime.getempty$1"
"(*flag.FlagSet).usage" "(*runtime.p).destroy$1"
"(*flag.FlagSet).usage" "runtime.gcAssistAlloc$1"
"(*flag.FlagSet).usage" "(*runtime.mheap).alloc$1"
"(*flag.FlagSet).usage" "runtime.mProf_Malloc$1"
"(*flag.FlagSet).usage" "runtime.Stack$1"
"(*flag.FlagSet).usage" "(*os/exec.Cmd).awaitGoroutines$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).exprInternal$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).instantiatedType$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).instantiatedType$2"
"(*flag.FlagSet).usage" "(*go/types.Checker).structType$3"
"(*flag.FlagSet).usage" "(*go/types.Checker).interfaceType$2"
"(*flag.FlagSet).usage" "runtime.reentersyscall$1"
"(*flag.FlagSet).usage" "runtime.reentersyscall$2"
"(*flag.FlagSet).usage" "runtime.entersyscall_sysmon"
"(*flag.FlagSet).usage" "runtime.runSafePointFn"
"(*flag.FlagSet).usage" "runtime.entersyscall_gcwait"
"(*flag.FlagSet).usage" "(*runtime.traceMap).put$1"
"(*flag.FlagSet).usage" "runtime.fatal$1"
"(*flag.FlagSet).usage" "runtime.write_trampoline"
"(*flag.FlagSet).usage" "(runtime.traceWriter).refill$1"
"(*flag.FlagSet).usage" "runtime.mmap_trampoline"
"(*flag.FlagSet).usage" "runtime.sigprocmask_trampoline"
"(*flag.FlagSet).usage" "runtime.sigaction_trampoline"
"(*flag.FlagSet).usage" "runtime.gcMarkTermination$4$1"
"(*flag.FlagSet).usage" "(*runtime.mspan).setUserArenaChunkToFault$1"
"(*flag.FlagSet).usage" "runtime.exitsyscallfast_reacquired$1"
"(*flag.FlagSet).usage" "(*runtime.traceStringTable).put$1"
"(*flag.FlagSet).usage" "(*runtime.rwmutex).rlock$1"
"(*flag.FlagSet).usage" "runtime.traceThreadDestroy$1"
"(*flag.FlagSet).usage" "runtime.malg$1"
"(*flag.FlagSet).usage" "runtime.allocmcache$1"
"(*flag.FlagSet).usage" "runtime.freemcache$1"
"(*flag.FlagSet).usage" "golang.org/x/tools/internal/event/core.ExportPair$1"
"(*flag.FlagSet).usage" "golang.org/x/tools/internal/event/core.ExportPair$2"
"(*flag.FlagSet).usage" "go/types.parseUnion$1"
"(*flag.FlagSet).usage" "runtime._VDSO"
"(*flag.FlagSet).usage" "runtime._ExternalCode"
"(*flag.FlagSet).usage" "runtime._GC"
"(*flag.FlagSet).usage" "runtime._System"
"(*flag.FlagSet).usage" "runtime.sigpanic"
"(*flag.FlagSet).usage" "runtime.raiseproc_trampoline"
"(*flag.FlagSet).usage" "runtime.markrootFreeGStacks"
"(*flag.FlagSet).usage" "runtime.markroot$1"
"(*flag.FlagSet).usage" "runtime.walltime_trampoline"
"(*flag.FlagSet).usage" "runtime.pthread_attr_init_trampoline"
"(*flag.FlagSet).usage" "runtime.pthread_attr_getstacksize_trampoline"
"(*flag.FlagSet).usage" "runtime.pthread_attr_setdetachstate_trampoline"
"(*flag.FlagSet).usage" "runtime.mstart_stub"
"(*flag.FlagSet).usage" "go/build/constraint.parseExpr$1"
"(*flag.FlagSet).usage" "(*go/parser.parser).parsePrimaryExpr$1"
"(*flag.FlagSet).usage" "(*go/parser.parser).parseBinaryExpr$1"
"(*flag.FlagSet).usage" "(*go/parser.parser).parseParameterList$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"(*flag.FlagSet).usage" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).infer$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).infer$2"
"(*flag.FlagSet).usage" "(*go/types.Checker).instantiateSignature$1"
"(*flag.FlagSet).usage" "(*go/types.Checker).instantiateSignature$2"
"(*flag.FlagSet).usage" "(*go/types.Checker).genericExprList$1"
"(*flag.FlagSet).usage" "runtime.printArgs$3"
"(*flag.FlagSet).usage" "runtime.freeSomeWbufs$1"
"(*flag.FlagSet).usage" "runtime.pthread_kill_trampoline"
"(*flag.FlagSet).usage" "runtime.mlock_trampoline"
"(*flag.FlagSet).usage" "runtime.pthread_create_trampoline"
"(*flag.FlagSet).usage" "(*runtime.pageAlloc).scavenge$1"
"(*flag.FlagSet).usage" "syscall.libc_pipe_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_kill_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_wait4_trampoline"
"(*flag.FlagSet).usage" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"(*flag.FlagSet).usage" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"(*flag.FlagSet).usage" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"(*flag.FlagSet).usage" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"(*flag.FlagSet).usage" "syscall.libc_mkdir_trampoline"
"(*flag.FlagSet).usage" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"(*flag.FlagSet).usage" "go/types.hasVarSize$1"
"(*flag.FlagSet).usage" "(*go/types.tpWalker).isParameterized$1"
"(*flag.FlagSet).usage" "runtime.kqueue_trampoline"
"(*flag.FlagSet).usage" "runtime._LostExternalCode"
"(*flag.FlagSet).usage" "runtime._LostSIGPROFDuringAtomic64"
"(*flag.FlagSet).usage" "syscall.libc_fork_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_setsid_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_setpgid_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_getpid_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_ioctl_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_chroot_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_setgroups_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_setgid_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_setuid_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_chdir_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_exit_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_unlink_trampoline"
"(*flag.FlagSet).usage" "syscall.libc_rmdir_trampoline"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"(*flag.FlagSet).usage" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"(*flag.FlagSet).usage" "(*go/types.unifier).nify$1"
"(*flag.FlagSet).usage" "runtime.fcntl_trampoline"
"(*flag.FlagSet).usage" "runtime.pipe_trampoline"
"(*flag.FlagSet).usage" "runtime.munmap_trampoline"
"(*flag.FlagSet).usage" "runtime.madvise_trampoline"
"(*flag.FlagSet).usage" "(*go/parser.parser).safePos$1"
"(*flag.FlagSet).usage" "syscall.libc_ptrace_trampoline"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"(*flag.FlagSet).usage" "math/big.three$1"
"(*flag.FlagSet).usage" "go/ast.fprint$1"
"(*flag.FlagSet).usage" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"(*flag.FlagSet).usage" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"(*flag.FlagSet).failf" "(*flag.FlagSet).usage"
"(*flag.FlagSet).failf" "errors.New"
"(*go/token.File).LineCount" "(*sync.Mutex).Lock"
"(*go/token.File).LineCount" "(*sync.Mutex).Unlock"
"(*regexp.Regexp).FindIndex" "(*regexp.Regexp).doExecute"
"(*runtime.sigctxt).sp" "(*runtime.sigctxt).regs"
"(*runtime.sigctxt).preparePanic" "(*runtime.sigctxt).sp"
"(*runtime.sigctxt).set_sp" "(*runtime.sigctxt).regs"
"(*runtime.sigctxt).preparePanic" "(*runtime.sigctxt).set_sp"
"(*runtime.sigctxt).lr" "(*runtime.sigctxt).regs"
"(*runtime.sigctxt).preparePanic" "(*runtime.sigctxt).lr"
"(*runtime.sigctxt).r29" "(*runtime.sigctxt).regs"
"(*runtime.sigctxt).preparePanic" "(*runtime.sigctxt).r29"
"(*runtime.sigctxt).preparePanic" "(*runtime.sigctxt).lr"
"runtime.shouldPushSigpanic" "runtime.findfunc"
"runtime.shouldPushSigpanic" "(runtime.funcInfo).valid"
"runtime.shouldPushSigpanic" "runtime.findfunc"
"runtime.shouldPushSigpanic" "(runtime.funcInfo).valid"
"(*runtime.sigctxt).preparePanic" "runtime.shouldPushSigpanic"
"(*runtime.sigctxt).set_lr" "(*runtime.sigctxt).regs"
"(*runtime.sigctxt).preparePanic" "(*runtime.sigctxt).set_lr"
"(*runtime.sigctxt).set_r28" "(*runtime.sigctxt).regs"
"(*runtime.sigctxt).preparePanic" "(*runtime.sigctxt).set_r28"
"(*runtime.sigctxt).preparePanic" "internal/abi.FuncPCABIInternal"
"(*runtime.sigctxt).set_pc" "(*runtime.sigctxt).regs"
"(*runtime.sigctxt).preparePanic" "(*runtime.sigctxt).set_pc"
"syscall.Accept" "syscall.accept"
"syscall.Accept" "syscall.Close"
"syscall.Accept" "syscall.anyToSockaddr"
"syscall.Accept" "syscall.Close"
"(log/slog.Record).Clone" "slices.Clip[[]log/slog.Attr log/slog.Attr]"
"internal/reflectlite.directlyAssignable" "(*internal/abi.Type).HasName"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Kind"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Kind"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Len"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Len"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).ChanDir"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"internal/reflectlite.haveIdenticalType" "internal/reflectlite.toRType"
"(internal/reflectlite.rtype).Name" "(*internal/abi.Type).HasName"
"(internal/reflectlite.rtype).Name" "(internal/reflectlite.rtype).String"
"internal/reflectlite.haveIdenticalType" "(internal/reflectlite.rtype).Name"
"internal/reflectlite.haveIdenticalType" "internal/reflectlite.toRType"
"internal/reflectlite.haveIdenticalType" "(internal/reflectlite.rtype).Name"
"internal/reflectlite.haveIdenticalType" "internal/reflectlite.haveIdenticalUnderlyingType"
"internal/reflectlite.haveIdenticalType" "(*internal/abi.Type).Kind"
"internal/reflectlite.haveIdenticalType" "(*internal/abi.Type).Kind"
"internal/reflectlite.haveIdenticalUnderlyingType" "internal/reflectlite.haveIdenticalType"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).ChanDir"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).ChanDir"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"internal/reflectlite.haveIdenticalUnderlyingType" "internal/reflectlite.haveIdenticalType"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"internal/reflectlite.haveIdenticalUnderlyingType" "internal/reflectlite.haveIdenticalType"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).NumIn"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).In"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).In"
"internal/reflectlite.haveIdenticalUnderlyingType" "internal/reflectlite.haveIdenticalType"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).NumOut"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).Out"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.FuncType).Out"
"internal/reflectlite.haveIdenticalUnderlyingType" "internal/reflectlite.haveIdenticalType"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Key"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Key"
"internal/reflectlite.haveIdenticalUnderlyingType" "internal/reflectlite.haveIdenticalType"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"internal/reflectlite.haveIdenticalUnderlyingType" "internal/reflectlite.haveIdenticalType"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.Type).Elem"
"internal/reflectlite.haveIdenticalUnderlyingType" "internal/reflectlite.haveIdenticalType"
"internal/reflectlite.haveIdenticalUnderlyingType" "(internal/abi.Name).Name"
"internal/reflectlite.haveIdenticalUnderlyingType" "(internal/abi.Name).Name"
"internal/reflectlite.haveIdenticalUnderlyingType" "(internal/abi.Name).Name"
"internal/reflectlite.haveIdenticalUnderlyingType" "(internal/abi.Name).Name"
"internal/reflectlite.haveIdenticalUnderlyingType" "internal/reflectlite.haveIdenticalType"
"internal/reflectlite.haveIdenticalUnderlyingType" "(internal/abi.Name).Tag"
"internal/reflectlite.haveIdenticalUnderlyingType" "(internal/abi.Name).Tag"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.StructField).Embedded"
"internal/reflectlite.haveIdenticalUnderlyingType" "(*internal/abi.StructField).Embedded"
"internal/reflectlite.directlyAssignable" "internal/reflectlite.haveIdenticalUnderlyingType"
"internal/reflectlite.directlyAssignable" "(*internal/abi.Type).Kind"
"internal/reflectlite.directlyAssignable" "(*internal/abi.Type).Kind"
"internal/reflectlite.directlyAssignable" "(*internal/abi.Type).HasName"
"(*regexp.Regexp).allMatches" "(*regexp.Regexp).doExecute"
"(*regexp.Regexp).allMatches" "(*regexp.inputString).step"
"(*regexp.Regexp).allMatches" "(*regexp.inputBytes).step"
"(*regexp.Regexp).allMatches" "(*regexp.Regexp).pad"
"(*regexp.Regexp).allMatches" "(*regexp.Regexp).FindAllStringIndex$1"
"(*regexp.Regexp).allMatches" "(*regexp.Regexp).FindAllStringSubmatch$1"
"(*regexp.Regexp).allMatches" "(*regexp.Regexp).FindAllStringSubmatchIndex$1"
"(*regexp.Regexp).allMatches" "(*regexp.Regexp).FindAllSubmatch$1"
"(*regexp.Regexp).allMatches" "(*regexp.Regexp).FindAllSubmatchIndex$1"
"(*regexp.Regexp).allMatches" "(*regexp.Regexp).FindAll$1"
"(*regexp.Regexp).allMatches" "(*regexp.Regexp).FindAllIndex$1"
"(*regexp.Regexp).allMatches" "(*regexp.Regexp).FindAllString$1"
"(*math/big.Int).exp" "(*math/big.Int).SetInt64"
"(*math/big.Int).exp" "(*math/big.Int).ModInverse"
"(*math/big.Int).exp" "(math/big.nat).expNN"
"(*math/big.Int).exp" "(*math/big.Int).Set"
"(*math/big.Int).exp" "math/big.alias"
"(*math/big.Int).exp" "(math/big.nat).sub"
"(*math/big.Int).Exp" "(*math/big.Int).exp"
"(time.Time).Round" "(*time.Time).stripMono"
"(time.Time).Round" "time.div"
"(time.Time).Round" "time.lessThanHalf"
"(time.Time).Round" "(time.Time).Add"
"(time.Time).Round" "(time.Time).Add"
"fmt.Sprint" "fmt.newPrinter"
"fmt.Sprint" "(*fmt.pp).doPrint"
"fmt.Sprint" "(*fmt.pp).free"
"log.Fatal" "fmt.Sprint"
"log.Fatal" "(*log.Logger).Output"
"log.Fatal" "os.Exit"
"(*reflect.rtype).NumIn" "(*reflect.rtype).Kind"
"(*reflect.rtype).NumIn" "(*reflect.rtype).String"
"(*reflect.rtype).NumIn" "(*internal/abi.FuncType).NumIn"
"(*internal/poll.FD).Shutdown" "(*internal/poll.FD).incref"
"(*internal/poll.FD).Shutdown" "(*internal/poll.FD).decref"
"(*internal/poll.FD).Shutdown" "syscall.Shutdown"
"(*reflect.rtype).Method" "(*reflect.rtype).Kind"
"(*reflect.interfaceType).Method" "(*reflect.interfaceType).nameOff"
"(*reflect.interfaceType).Method" "(internal/abi.Name).Name"
"(*reflect.interfaceType).Method" "(internal/abi.Name).IsExported"
"(*reflect.interfaceType).Method" "reflect.pkgPath"
"(*reflect.interfaceType).Method" "(*reflect.interfaceType).typeOff"
"(*reflect.interfaceType).Method" "reflect.toType"
"(*reflect.interfaceType).Method" "(internal/abi.Name).Name"
"(*reflect.rtype).Method" "(*reflect.interfaceType).Method"
"(*reflect.rtype).Method" "(*reflect.rtype).exportedMethods"
"(*reflect.rtype).Method" "(*reflect.rtype).nameOff"
"(*reflect.rtype).Method" "(internal/abi.Name).Name"
"(*reflect.rtype).Method" "(*reflect.rtype).typeOff"
"(*reflect.rtype).Method" "(*internal/abi.FuncType).NumIn"
"(*reflect.rtype).Method" "(*internal/abi.FuncType).InSlice"
"(*reflect.rtype).Method" "reflect.toRType"
"(*reflect.rtype).Method" "(*internal/abi.FuncType).NumOut"
"(*reflect.rtype).Method" "(*internal/abi.FuncType).OutSlice"
"(*reflect.rtype).Method" "reflect.toRType"
"(*reflect.rtype).Method" "(*internal/abi.FuncType).IsVariadic"
"reflect.FuncOf" "(*reflect.rtype).Kind"
"reflect.initFuncTypes" "(*sync.Mutex).Lock"
"reflect.initFuncTypes" "(*sync.Mutex).Unlock"
"reflect.initFuncTypes" "reflect.TypeOf"
"reflect.initFuncTypes" "reflect.TypeOf"
"reflect.ArrayOf" "(*reflect.rtype).common"
"reflect.ArrayOf" "(*sync.Map).Load"
"reflect.ArrayOf" "strconv.Itoa"
"reflect.ArrayOf" "reflect.stringFor"
"reflect.ArrayOf" "reflect.typesByString"
"reflect.ArrayOf" "reflect.newName"
"reflect.ArrayOf" "reflect.resolveReflectName"
"reflect.ArrayOf" "reflect.fnv1"
"reflect.ArrayOf" "reflect.toRType"
"reflect.ArrayOf" "(*sync.Map).LoadOrStore"
"reflect.ArrayOf" "reflect.fnv1"
"reflect.ArrayOf" "reflect.fnv1"
"reflect.SliceOf" "(*reflect.rtype).common"
"reflect.SliceOf" "(*sync.Map).Load"
"reflect.SliceOf" "reflect.stringFor"
"reflect.SliceOf" "reflect.typesByString"
"reflect.SliceOf" "reflect.newName"
"reflect.SliceOf" "reflect.resolveReflectName"
"reflect.SliceOf" "reflect.fnv1"
"reflect.SliceOf" "reflect.toRType"
"reflect.SliceOf" "(*sync.Map).LoadOrStore"
"reflect.SliceOf" "reflect.toRType"
"reflect.SliceOf" "(*sync.Map).LoadOrStore"
"reflect.ArrayOf" "reflect.SliceOf"
"reflect.ArrayOf" "(*internal/abi.Type).Size"
"reflect.emitGCMask" "(*internal/abi.Type).GcSlice"
"reflect.ArrayOf" "reflect.emitGCMask"
"reflect.appendGCProg" "(*internal/abi.Type).GcSlice"
"reflect.appendGCProg" "(*internal/abi.Type).GcSlice"
"reflect.ArrayOf" "reflect.appendGCProg"
"reflect.ArrayOf" "reflect.appendVarint"
"reflect.ArrayOf" "reflect.appendVarint"
"reflect.ArrayOf" "reflect.appendVarint"
"reflect.ArrayOf" "reflect.toRType"
"reflect.ArrayOf" "(*sync.Map).LoadOrStore"
"reflect.ArrayOf" "reflect.ifaceIndir"
"reflect.initFuncTypes" "reflect.ArrayOf"
"reflect.StructOf" "reflect.fnv1"
"reflect.StructOf" "strconv.Itoa"
"reflect.isLetter" "unicode.IsLetter"
"reflect.isValidFieldName" "reflect.isLetter"
"reflect.isValidFieldName" "reflect.isLetter"
"reflect.isValidFieldName" "unicode.IsDigit"
"reflect.StructOf" "reflect.isValidFieldName"
"reflect.StructOf" "strconv.Itoa"
"reflect.StructOf" "strconv.Itoa"
"reflect.runtimeStructField" "(reflect.StructField).IsExported"
"reflect.runtimeStructField" "(*reflect.rtype).common"
"reflect.resolveReflectType" "reflect.addReflectOff"
"reflect.runtimeStructField" "reflect.resolveReflectType"
"reflect.runtimeStructField" "(reflect.StructField).IsExported"
"reflect.runtimeStructField" "reflect.newName"
"reflect.runtimeStructField" "(*reflect.rtype).common"
"reflect.StructOf" "reflect.runtimeStructField"
"reflect.StructOf" "(internal/abi.Name).Name"
"reflect.StructOf" "reflect.fnv1"
"reflect.StructOf" "(*internal/abi.StructField).Embedded"
"reflect.StructOf" "(*internal/abi.Type).Kind"
"reflect.StructOf" "(*internal/abi.Type).Elem"
"reflect.StructOf" "(*internal/abi.Type).Kind"
"reflect.StructOf" "(*internal/abi.Type).Kind"
"reflect.StructOf" "reflect.stringFor"
"reflect.StructOf" "(*internal/abi.Type).Uncommon"
"reflect.StructOf" "(*reflect.interfaceType).nameOff"
"reflect.StructOf" "reflect.pkgPath"
"reflect.StructOf" "internal/abi.FuncPCABIInternal"
"reflect.resolveReflectText" "reflect.addReflectOff"
"reflect.StructOf" "reflect.resolveReflectText"
"reflect.StructOf" "(*reflect.interfaceType).nameOff"
"reflect.StructOf" "reflect.resolveReflectName"
"reflect.StructOf" "(*reflect.interfaceType).typeOff"
"reflect.StructOf" "reflect.resolveReflectType"
"reflect.StructOf" "(*internal/abi.Type).Uncommon"
"reflect.StructOf" "(*internal/abi.Type).Uncommon"
"reflect.StructOf" "(*internal/abi.UncommonType).Methods"
"reflect.StructOf" "reflect.nameOffFor"
"reflect.StructOf" "reflect.pkgPath"
"reflect.StructOf" "reflect.resolveReflectName"
"reflect.StructOf" "reflect.typeOffFor"
"reflect.StructOf" "reflect.resolveReflectType"
"reflect.StructOf" "reflect.textOffFor"
"reflect.StructOf" "reflect.resolveReflectText"
"reflect.StructOf" "reflect.textOffFor"
"reflect.StructOf" "reflect.resolveReflectText"
"reflect.StructOf" "(*internal/abi.UncommonType).Methods"
"reflect.StructOf" "reflect.nameOffFor"
"reflect.StructOf" "reflect.pkgPath"
"reflect.StructOf" "reflect.resolveReflectName"
"reflect.StructOf" "reflect.typeOffFor"
"reflect.StructOf" "reflect.resolveReflectType"
"reflect.StructOf" "reflect.textOffFor"
"reflect.StructOf" "reflect.resolveReflectText"
"reflect.StructOf" "reflect.textOffFor"
"reflect.StructOf" "reflect.resolveReflectText"
"reflect.StructOf" "(*internal/abi.UncommonType).Methods"
"reflect.StructOf" "reflect.nameOffFor"
"reflect.StructOf" "reflect.pkgPath"
"reflect.StructOf" "reflect.resolveReflectName"
"reflect.StructOf" "reflect.typeOffFor"
"reflect.StructOf" "reflect.resolveReflectType"
"reflect.StructOf" "reflect.textOffFor"
"reflect.StructOf" "reflect.resolveReflectText"
"reflect.StructOf" "reflect.textOffFor"
"reflect.StructOf" "reflect.resolveReflectText"
"reflect.StructOf" "reflect.fnv1"
"reflect.StructOf" "reflect.stringFor"
"reflect.StructOf" "(internal/abi.Name).HasTag"
"reflect.StructOf" "(internal/abi.Name).Tag"
"reflect.StructOf" "reflect.fnv1"
"reflect.StructOf" "(internal/abi.Name).Tag"
"reflect.StructOf" "strconv.Quote"
"reflect.StructOf" "reflect.align"
"reflect.StructOf" "reflect.TypeOf"
"reflect.StructOf" "reflect.TypeOf"
"reflect.StructOf" "reflect.TypeOf"
"reflect.StructOf" "reflect.ArrayOf"
"reflect.StructOf" "reflect.StructOf"
"reflect.StructOf" "reflect.New"
"reflect.StructOf" "(reflect.Value).Elem"
"reflect.StructOf" "(reflect.Value).Field"
"reflect.StructOf" "(reflect.Value).Addr"
"reflect.StructOf" "(reflect.Value).UnsafePointer"
"reflect.StructOf" "(reflect.Value).Elem"
"reflect.StructOf" "(reflect.Value).Field"
"reflect.StructOf" "(reflect.Value).Addr"
"reflect.StructOf" "(reflect.Value).UnsafePointer"
"reflect.StructOf" "(reflect.Value).Elem"
"reflect.StructOf" "(reflect.Value).Field"
"reflect.StructOf" "(reflect.Value).Slice"
"reflect.StructOf" "(reflect.Value).Interface"
"reflect.StructOf" "reflect.fnv1"
"reflect.StructOf" "reflect.align"
"reflect.StructOf" "reflect.newName"
"reflect.StructOf" "(*sync.Map).Load"
"reflect.StructOf" "(*sync.Mutex).Lock"
"reflect.StructOf" "(*sync.Mutex).Unlock"
"reflect.StructOf" "(*sync.Map).Load"
"reflect.StructOf" "(*reflect.rtype).common"
"reflect.StructOf" "reflect.haveIdenticalUnderlyingType"
"reflect.StructOf" "reflect.toType"
"reflect.StructOf" "reflect.typesByString"
"reflect.StructOf" "(*reflect.rtype).common"
"reflect.StructOf" "reflect.haveIdenticalUnderlyingType"
"reflect.StructOf" "reflect.toType"
"reflect.StructOf" "reflect.haveIdenticalUnderlyingType"
"reflect.StructOf" "reflect.newName"
"reflect.StructOf" "reflect.resolveReflectName"
"reflect.typeptrdata" "(*internal/abi.Type).Kind"
"reflect.typeptrdata" "reflect.stringFor"
"reflect.typeptrdata" "(*internal/abi.Type).Pointers"
"reflect.StructOf" "reflect.typeptrdata"
"reflect.StructOf" "reflect.toType"
"reflect.StructOf$1" "(*sync.Map).Load"
"reflect.StructOf$1" "(*sync.Map).Store"
"reflect.StructOf" "reflect.StructOf$1"
"reflect.StructOf" "reflect.addTypeBits"
"reflect.StructOf" "(*internal/abi.Type).Pointers"
"reflect.StructOf" "(*internal/abi.Type).Pointers"
"reflect.StructOf" "reflect.appendGCProg"
"reflect.StructOf" "reflect.appendVarint"
"reflect.StructOf" "reflect.toType"
"reflect.StructOf" "reflect.StructOf$1"
"reflect.StructOf" "reflect.ifaceIndir"
"reflect.initFuncTypes" "reflect.StructOf"
"reflect.FuncOf" "reflect.initFuncTypes"
"reflect.FuncOf" "reflect.New"
"reflect.FuncOf" "(reflect.Value).Elem"
"reflect.FuncOf" "(reflect.Value).Field"
"reflect.FuncOf" "(reflect.Value).Addr"
"reflect.FuncOf" "(reflect.Value).Pointer"
"reflect.FuncOf" "(reflect.Value).Field"
"reflect.FuncOf" "(reflect.Value).Addr"
"reflect.FuncOf" "(reflect.Value).Pointer"
"reflect.FuncOf" "reflect.fnv1"
"reflect.FuncOf" "reflect.fnv1"
"reflect.FuncOf" "reflect.fnv1"
"reflect.FuncOf" "reflect.fnv1"
"reflect.FuncOf" "(*sync.Map).Load"
"reflect.FuncOf" "(*sync.Mutex).Lock"
"reflect.FuncOf" "(*sync.Mutex).Unlock"
"reflect.FuncOf" "(*sync.Map).Load"
"reflect.FuncOf" "reflect.haveIdenticalUnderlyingType"
"reflect.FuncOf" "reflect.toRType"
"reflect.funcStr" "(*internal/abi.FuncType).InSlice"
"reflect.funcStr" "(*internal/abi.FuncType).OutSlice"
"reflect.funcStr" "(*internal/abi.FuncType).IsVariadic"
"reflect.funcStr" "reflect.stringFor"
"reflect.funcStr" "reflect.stringFor"
"reflect.funcStr" "reflect.stringFor"
"reflect.FuncOf" "reflect.funcStr"
"reflect.FuncOf" "reflect.typesByString"
"reflect.FuncOf" "reflect.haveIdenticalUnderlyingType"
"reflect.FuncOf" "reflect.toRType"
"reflect.FuncOf" "reflect.haveIdenticalUnderlyingType"
"reflect.FuncOf" "reflect.newName"
"reflect.FuncOf" "reflect.resolveReflectName"
"reflect.FuncOf" "reflect.FuncOf$1"
"reflect.FuncOf" "reflect.FuncOf$1"
"(*reflect.rtype).Method" "reflect.FuncOf"
"(*reflect.rtype).Method" "(*reflect.rtype).textOff"
"crypto/md5.consumeUint64" "(encoding/binary.bigEndian).Uint64"
"(*time.Timer).Reset" "time.when"
"(*time.Timer).Reset" "time.resetTimer"
"(*math/big.Float).GobEncode" "(encoding/binary.bigEndian).PutUint32"
"(*math/big.Float).GobEncode" "(encoding/binary.bigEndian).PutUint32"
"(*math/big.Float).GobEncode" "(math/big.nat).bytes"
"container/heap.init" "sort.init"
"(*go/ast.CommentGroup).Text" "strings.Split"
"go/ast.isDirective" "strings.HasPrefix"
"go/ast.isDirective" "strings.Index"
"go/ast.isDirective" "strings.HasPrefix"
"go/ast.isDirective" "strings.HasPrefix"
"(*go/ast.CommentGroup).Text" "go/ast.isDirective"
"go/ast.stripTrailingWhitespace" "go/ast.isWhitespace"
"(*go/ast.CommentGroup).Text" "go/ast.stripTrailingWhitespace"
"(*go/ast.CommentGroup).Text" "strings.Join"
"(reflect.Value).Convert" "reflect.makeMethodValue"
"(reflect.Value).Convert" "(reflect.Value).typ"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "reflect.haveIdenticalUnderlyingType"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Elem"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Elem"
"reflect.convertOp" "reflect.pkgPathFor"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Elem"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Elem"
"reflect.convertOp" "reflect.pkgPathFor"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Elem"
"reflect.convertOp" "(*internal/abi.Type).Elem"
"reflect.convertOp" "(*internal/abi.Type).Elem"
"reflect.convertOp" "(*internal/abi.Type).Elem"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "(*internal/abi.Type).Elem"
"reflect.convertOp" "(*internal/abi.Type).Elem"
"reflect.convertOp" "reflect.specialChannelAssignability"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "reflect.implements"
"reflect.convertOp" "reflect.elem"
"reflect.convertOp" "reflect.elem"
"reflect.convertOp" "reflect.haveIdenticalUnderlyingType"
"reflect.convertOp" "reflect.nameFor"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"reflect.convertOp" "reflect.nameFor"
"reflect.convertOp" "(*internal/abi.Type).Kind"
"(reflect.Value).Convert" "reflect.convertOp"
"(reflect.Value).Convert" "(reflect.Value).typ"
"(reflect.Value).Convert" "reflect.stringFor"
"(reflect.Value).Convert" "(*reflect.rtype).common"
"(reflect.Value).Convert" "(*reflect.rtype).String"
"reflect.cvtInt" "(reflect.flag).ro"
"reflect.cvtInt" "(reflect.Value).Int"
"reflect.makeInt" "(*reflect.rtype).common"
"reflect.makeInt" "reflect.unsafe_New"
"reflect.makeInt" "(*internal/abi.Type).Size"
"reflect.makeInt" "(*internal/abi.Type).Kind"
"reflect.cvtInt" "reflect.makeInt"
"(reflect.Value).Convert" "reflect.cvtInt"
"reflect.cvtIntFloat" "(reflect.flag).ro"
"reflect.cvtIntFloat" "(reflect.Value).Int"
"reflect.cvtIntFloat" "reflect.makeFloat"
"(reflect.Value).Convert" "reflect.cvtIntFloat"
"reflect.cvtIntString" "(reflect.Value).Int"
"reflect.cvtIntString" "(reflect.flag).ro"
"reflect.cvtIntString" "reflect.makeString"
"(reflect.Value).Convert" "reflect.cvtIntString"
"reflect.cvtUint" "(reflect.flag).ro"
"reflect.cvtUint" "(reflect.Value).Uint"
"reflect.cvtUint" "reflect.makeInt"
"(reflect.Value).Convert" "reflect.cvtUint"
"reflect.cvtUintFloat" "(reflect.flag).ro"
"reflect.cvtUintFloat" "(reflect.Value).Uint"
"reflect.cvtUintFloat" "reflect.makeFloat"
"(reflect.Value).Convert" "reflect.cvtUintFloat"
"reflect.cvtUintString" "(reflect.Value).Uint"
"reflect.cvtUintString" "(reflect.flag).ro"
"reflect.cvtUintString" "reflect.makeString"
"(reflect.Value).Convert" "reflect.cvtUintString"
"reflect.cvtFloatInt" "(reflect.flag).ro"
"reflect.cvtFloatInt" "(reflect.Value).Float"
"reflect.cvtFloatInt" "reflect.makeInt"
"(reflect.Value).Convert" "reflect.cvtFloatInt"
"reflect.cvtFloatUint" "(reflect.flag).ro"
"reflect.cvtFloatUint" "(reflect.Value).Float"
"reflect.cvtFloatUint" "reflect.makeInt"
"(reflect.Value).Convert" "reflect.cvtFloatUint"
"reflect.cvtFloat" "(reflect.Value).Type"
"reflect.cvtFloat" "(*reflect.rtype).Kind"
"reflect.cvtFloat" "(reflect.flag).ro"
"reflect.makeFloat32" "(*reflect.rtype).common"
"reflect.makeFloat32" "reflect.unsafe_New"
"reflect.makeFloat32" "(*internal/abi.Type).Kind"
"reflect.cvtFloat" "reflect.makeFloat32"
"reflect.cvtFloat" "(reflect.flag).ro"
"reflect.cvtFloat" "(reflect.Value).Float"
"reflect.cvtFloat" "reflect.makeFloat"
"reflect.cvtFloat" "(*reflect.rtype).Kind"
"(reflect.Value).Convert" "reflect.cvtFloat"
"reflect.cvtComplex" "(reflect.flag).ro"
"reflect.cvtComplex" "(reflect.Value).Complex"
"reflect.makeComplex" "(*reflect.rtype).common"
"reflect.makeComplex" "reflect.unsafe_New"
"reflect.makeComplex" "(*internal/abi.Type).Size"
"reflect.makeComplex" "(*internal/abi.Type).Kind"
"reflect.cvtComplex" "reflect.makeComplex"
"(reflect.Value).Convert" "reflect.cvtComplex"
"reflect.cvtStringBytes" "(reflect.flag).ro"
"reflect.cvtStringBytes" "(reflect.Value).String"
"reflect.makeBytes" "reflect.New"
"reflect.makeBytes" "(reflect.Value).Elem"
"reflect.makeBytes" "(reflect.Value).SetBytes"
"reflect.cvtStringBytes" "reflect.makeBytes"
"(reflect.Value).Convert" "reflect.cvtStringBytes"
"reflect.cvtStringRunes" "(reflect.flag).ro"
"reflect.cvtStringRunes" "(reflect.Value).String"
"reflect.cvtStringRunes" "reflect.makeRunes"
"(reflect.Value).Convert" "reflect.cvtStringRunes"
"(reflect.Value).Convert" "reflect.cvtBytesString"
"reflect.cvtRunesString" "(reflect.flag).ro"
"(reflect.Value).runes" "(reflect.flag).mustBe"
"(reflect.Value).runes" "(reflect.Value).typ"
"(reflect.Value).runes" "(*internal/abi.Type).Elem"
"(reflect.Value).runes" "(*internal/abi.Type).Kind"
"reflect.cvtRunesString" "(reflect.Value).runes"
"reflect.cvtRunesString" "reflect.makeString"
"(reflect.Value).Convert" "reflect.cvtRunesString"
"reflect.cvtSliceArrayPtr" "(*reflect.rtype).Elem"
"reflect.cvtSliceArrayPtr" "(*reflect.rtype).Len"
"reflect.cvtSliceArrayPtr" "(reflect.Value).Len"
"reflect.cvtSliceArrayPtr" "(reflect.Value).Len"
"reflect.cvtSliceArrayPtr" "internal/itoa.Itoa"
"reflect.cvtSliceArrayPtr" "internal/itoa.Itoa"
"reflect.cvtSliceArrayPtr" "(*reflect.rtype).common"
"(reflect.Value).Convert" "reflect.cvtSliceArrayPtr"
"reflect.cvtSliceArray" "(*reflect.rtype).Len"
"reflect.cvtSliceArray" "(reflect.Value).Len"
"reflect.cvtSliceArray" "(reflect.Value).Len"
"reflect.cvtSliceArray" "internal/itoa.Itoa"
"reflect.cvtSliceArray" "internal/itoa.Itoa"
"reflect.cvtSliceArray" "(*reflect.rtype).common"
"reflect.cvtSliceArray" "reflect.unsafe_New"
"reflect.cvtSliceArray" "reflect.typedmemmove"
"(reflect.Value).Convert" "reflect.cvtSliceArray"
"(reflect.Value).Convert" "reflect.cvtDirect"
"reflect.cvtI2I" "(reflect.Value).IsNil"
"reflect.cvtI2I" "reflect.Zero"
"reflect.cvtI2I" "(reflect.flag).ro"
"reflect.cvtI2I" "(reflect.Value).Elem"
"reflect.cvtT2I" "(*reflect.rtype).common"
"reflect.cvtT2I" "reflect.unsafe_New"
"reflect.cvtT2I" "reflect.valueInterface"
"reflect.cvtT2I" "(*reflect.rtype).NumMethod"
"reflect.cvtT2I" "(*reflect.rtype).common"
"reflect.cvtT2I" "(reflect.flag).ro"
"reflect.cvtT2I" "(*reflect.rtype).common"
"reflect.cvtT2I" "reflect.ifaceE2I"
"reflect.cvtI2I" "reflect.cvtT2I"
"(reflect.Value).Convert" "reflect.cvtI2I"
"(reflect.Value).Convert" "reflect.cvtT2I"
"runtime.chansend" "runtime.gopark"
"runtime.chansend" "runtime.throw"
"runtime.chansend" "(*runtime.hchan).raceaddr"
"runtime.chansend" "internal/abi.FuncPCABIInternal"
"runtime.chansend" "runtime.racereadpc"
"runtime.chansend" "runtime.full"
"runtime.chansend" "runtime.cputicks"
"runtime.chansend" "runtime.lock"
"runtime.chansend" "runtime.unlock"
"(*runtime.waitq).dequeue" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.chansend" "(*runtime.waitq).dequeue"
"runtime.chansend" "runtime.send"
"runtime.chansend" "runtime.chanbuf"
"runtime.chansend" "runtime.racenotify"
"runtime.bulkBarrierPreWrite" "runtime.throw"
"runtime.bulkBarrierPreWrite" "runtime.spanOf"
"runtime.bulkBarrierPreWrite" "runtime.activeModules"
"runtime.bulkBarrierPreWrite" "(*runtime.mSpanStateBox).get"
"runtime.bulkBarrierPreWrite" "runtime.activeModules"
"runtime.bulkBarrierBitmap" "runtime.addb"
"runtime.bulkBarrierBitmap" "runtime.getg"
"runtime.bulkBarrierBitmap" "(runtime.puintptr).ptr"
"runtime.bulkBarrierBitmap" "runtime.addb"
"(*runtime.wbBuf).get1" "runtime.wbBufFlush"
"runtime.bulkBarrierBitmap" "(*runtime.wbBuf).get1"
"runtime.bulkBarrierBitmap" "(*runtime.wbBuf).get2"
"runtime.bulkBarrierPreWrite" "runtime.bulkBarrierBitmap"
"runtime.bulkBarrierPreWrite" "runtime.bulkBarrierBitmap"
"runtime.bulkBarrierPreWrite" "runtime.getg"
"runtime.bulkBarrierPreWrite" "(runtime.puintptr).ptr"
"runtime.bulkBarrierPreWrite" "(*runtime.mspan).base"
"(*runtime.mspan).typePointersOfType" "runtime.throw"
"(*runtime.mspan).typePointersOfType" "(runtime.spanClass).noscan"
"(*runtime.mspan).typePointersOfType" "runtime.readUintptr"
"runtime.doubleCheckTypePointersOfType" "(*runtime.mspan).typePointersOfType"
"runtime.doubleCheckTypePointersOfType" "(*runtime.mspan).typePointersOf"
"runtime.doubleCheckTypePointersOfType" "(runtime.typePointers).next"
"runtime.doubleCheckTypePointersOfType" "(runtime.typePointers).next"
"runtime.doubleCheckTypePointersOfType" "(*runtime.mspan).typePointersOfType"
"runtime.doubleCheckTypePointersOfType" "(*runtime.mspan).typePointersOf"
"runtime.doubleCheckTypePointersOfType" "runtime.toRType"
"runtime.doubleCheckTypePointersOfType" "(runtime.rtype).string"
"runtime.doubleCheckTypePointersOfType" "runtime.dumpTypePointers"
"runtime.doubleCheckTypePointersOfType" "runtime.dumpTypePointers"
"runtime.doubleCheckTypePointersOfType" "(runtime.typePointers).next"
"runtime.doubleCheckTypePointersOfType" "(runtime.typePointers).next"
"runtime.doubleCheckTypePointersOfType" "runtime.throw"
"runtime.bulkBarrierPreWrite" "runtime.doubleCheckTypePointersOfType"
"runtime.bulkBarrierPreWrite" "(*runtime.mspan).typePointersOfType"
"runtime.bulkBarrierPreWrite" "(*runtime.mspan).typePointersOf"
"runtime.bulkBarrierPreWrite" "(runtime.typePointers).next"
"runtime.bulkBarrierPreWrite" "(*runtime.wbBuf).get1"
"runtime.bulkBarrierPreWrite" "(runtime.typePointers).next"
"runtime.bulkBarrierPreWrite" "(*runtime.wbBuf).get2"
"runtime.typedmemmove" "runtime.bulkBarrierPreWrite"
"runtime.typedmemmove" "runtime.memmove"
"runtime.cgoCheckMemmove2" "runtime.cgoIsGoPointer"
"runtime.cgoCheckMemmove2" "runtime.cgoIsGoPointer"
"runtime.cgoCheckTypedBlock" "runtime.cgoCheckBits"
"runtime.cgoCheckTypedBlock" "runtime.activeModules"
"runtime.cgoCheckTypedBlock" "runtime.cgoInRange"
"runtime.cgoCheckTypedBlock" "runtime.spanOfUnchecked"
"runtime.cgoCheckTypedBlock" "(*runtime.mSpanStateBox).get"
"runtime.cgoCheckTypedBlock" "runtime.add"
"runtime.cgoCheckTypedBlock" "runtime.cgoCheckBits"
"runtime.cgoCheckTypedBlock" "runtime.cgoInRange"
"runtime.cgoCheckTypedBlock" "runtime.add"
"runtime.cgoCheckTypedBlock" "runtime.cgoCheckBits"
"runtime.cgoCheckTypedBlock" "runtime.systemstack"
"runtime.cgoCheckTypedBlock" "(*runtime.mspan).typePointersOf"
"runtime.cgoCheckTypedBlock" "runtime.heapBitsForAddr"
"runtime.cgoCheckTypedBlock" "(runtime.typePointers).next"
"runtime.cgoCheckTypedBlock" "runtime.cgoIsGoPointer"
"runtime.cgoCheckTypedBlock" "runtime.throw"
"runtime.cgoCheckTypedBlock" "runtime.isPinned"
"runtime.cgoCheckTypedBlock" "(runtime.heapBits).next"
"runtime.cgoCheckTypedBlock" "runtime.cgoIsGoPointer"
"runtime.cgoCheckTypedBlock" "runtime.throw"
"runtime.cgoCheckTypedBlock" "runtime.isPinned"
"runtime.cgoCheckMemmove2" "runtime.cgoCheckTypedBlock"
"runtime.typedmemmove" "runtime.cgoCheckMemmove2"
"runtime.chansend" "runtime.typedmemmove"
"runtime.chansend" "runtime.unlock"
"runtime.chansend" "runtime.unlock"
"runtime.chansend" "runtime.getg"
"runtime.chansend" "runtime.acquireSudog"
"runtime.chansend" "(*runtime.waitq).enqueue"
"runtime.chansend" "(*runtime/internal/atomic.Bool).Store"
"runtime.chansend" "runtime.gopark"
"runtime.chansend" "runtime.KeepAlive"
"runtime.chansend" "runtime.throw"
"runtime.chansend" "runtime.blockevent"
"runtime.chansend" "runtime.releaseSudog"
"runtime.chansend" "runtime.throw"
"(*reflect.rtype).FieldByIndex" "(*reflect.rtype).Kind"
"(*reflect.rtype).FieldByIndex" "(*reflect.rtype).String"
"(*reflect.structType).FieldByIndex" "reflect.toType"
"(*reflect.structType).FieldByIndex" "(*reflect.rtype).Kind"
"(*reflect.structType).FieldByIndex" "(*reflect.rtype).Field"
"(*reflect.structType).FieldByIndex" "(*reflect.rtype).Elem"
"(*reflect.structType).FieldByIndex" "(*reflect.rtype).Elem"
"(*reflect.structType).FieldByIndex" "(*reflect.rtype).Kind"
"(*reflect.rtype).FieldByIndex" "(*reflect.structType).FieldByIndex"
"(*runtime.sigctxt).r18" "(*runtime.sigctxt).regs"
"(*bytes.Buffer).Truncate" "(*bytes.Buffer).Reset"
"(*bytes.Buffer).Truncate" "(*bytes.Buffer).Len"
"(*sync/atomic.Pointer[log/slog.Logger]).Store[log/slog.Logger]" "sync/atomic.StorePointer"
"math/rand.init" "math.init"
"math/rand.init" "internal/godebug.init"
"math/rand.init" "sync.init"
"math/rand.init" "sync/atomic.init"
"math/rand.init" "unsafe.init"
"math/rand.init" "internal/godebug.New"
"runtime.chanrecv" "runtime.gopark"
"runtime.chanrecv" "runtime.throw"
"runtime.chanrecv" "runtime/internal/atomic.Load"
"runtime.empty" "runtime/internal/atomic.Loadp"
"runtime.empty" "runtime/internal/atomic.Loaduint"
"runtime.chanrecv" "runtime.empty"
"runtime.chanrecv" "runtime.empty"
"runtime.chanrecv" "(*runtime.hchan).raceaddr"
"runtime.chanrecv" "runtime.raceacquire"
"runtime.typedmemclr" "runtime.bulkBarrierPreWrite"
"runtime.typedmemclr" "runtime.memclrNoHeapPointers"
"runtime.chanrecv" "runtime.typedmemclr"
"runtime.chanrecv" "runtime.cputicks"
"runtime.chanrecv" "runtime.lock"
"runtime.chanrecv" "(*runtime.waitq).dequeue"
"runtime.chanrecv" "(*runtime.hchan).raceaddr"
"runtime.chanrecv" "runtime.raceacquire"
"runtime.chanrecv" "runtime.unlock"
"runtime.chanrecv" "runtime.typedmemclr"
"runtime.recv" "time.FixedZone$1"
"runtime.recv" "syscall.libc_shutdown_trampoline"
"runtime.recv" "syscall.libc_munmap_trampoline"
"runtime.recv" "runtime.init$1"
"runtime.recv" "(*flag.FlagSet).defaultUsage"
"runtime.recv" "(log/slog.Value).Resolve$1"
"runtime.recv" "time.initLocal"
"runtime.recv" "(*fmt.ss).Token$1"
"runtime.recv" "syscall.libc_fchdir_trampoline"
"runtime.recv" "syscall.libc_lseek_trampoline"
"runtime.recv" "flag.commandLineUsage"
"runtime.recv" "runtime.chansend$1"
"runtime.recv" "runtime.chanrecv$1"
"runtime.recv" "runtime.asyncPreempt2"
"runtime.recv" "syscall.libc_dup2_trampoline"
"runtime.recv" "sync.poolCleanup"
"runtime.recv" "internal/poll.runtime_pollServerInit"
"runtime.recv" "runtime.throw$1"
"runtime.recv" "flag.init$1"
"runtime.recv" "runtime.asyncPreempt"
"runtime.recv" "syscall.libc_close_trampoline"
"runtime.recv" "syscall.libc_mmap_trampoline"
"runtime.recv" "runtime.chanbuf"
"runtime.recv" "runtime.racesync"
"runtime.recv" "runtime.recvDirect"
"runtime.recv" "runtime.racenotify"
"runtime.recv" "runtime.racenotify"
"runtime.recv" "runtime.typedmemmove"
"runtime.recv" "runtime.typedmemmove"
"runtime.recv" "runtime.cputicks"
"runtime.recv" "runtime.goready"
"runtime.recv" "reflect.methodValueCall"
"runtime.recv" "(*go/types.gcSizes).Alignof$1"
"runtime.recv" "(*go/types.StdSizes).Alignof$1"
"runtime.recv" "syscall.copyenv"
"runtime.recv" "runtime.SetFinalizer$1"
"runtime.recv" "runtime.SetFinalizer$2"
"runtime.recv" "syscall.libc_fchmod_trampoline"
"runtime.recv" "syscall.libc_fchown_trampoline"
"runtime.recv" "syscall.libc_fstat_trampoline"
"runtime.recv" "syscall.libc_ftruncate_trampoline"
"runtime.recv" "syscall.libc_getsockopt_trampoline"
"runtime.recv" "syscall.libc_pread_trampoline"
"runtime.recv" "syscall.libc_pwrite_trampoline"
"runtime.recv" "syscall.libc_read_trampoline"
"runtime.recv" "syscall.libc_recvfrom_trampoline"
"runtime.recv" "syscall.libc_fcntl_trampoline"
"runtime.recv" "syscall.libc_setsockopt_trampoline"
"runtime.recv" "syscall.libc_write_trampoline"
"runtime.recv" "syscall.libc_sendto_trampoline"
"runtime.recv" "(*log/slog.Level).parse$1"
"runtime.recv" "syscall.libc_getrlimit_trampoline"
"runtime.recv" "syscall.libc_setrlimit_trampoline"
"runtime.recv" "syscall.libc_execve_trampoline"
"runtime.recv" "syscall.libc_accept_trampoline"
"runtime.recv" "syscall.libc_getcwd_trampoline"
"runtime.recv" "go/types.resolve$1"
"runtime.recv" "runtime.fatalthrow$1"
"runtime.recv" "runtime.goready$1"
"runtime.recv" "runtime.gcResetMarkState"
"runtime.recv" "runtime.gcStart$1"
"runtime.recv" "runtime.gcStart$2"
"runtime.recv" "runtime.gcStart$3"
"runtime.recv" "(*internal/godebug.Setting).IncNonDefault"
"runtime.recv" "go/types.computeInterfaceTypeSet$1"
"runtime.recv" "syscall.libc_dup_trampoline"
"runtime.recv" "syscall.libc_openat_trampoline"
"runtime.recv" "syscall.libc_fdopendir_trampoline"
"runtime.recv" "syscall.libc_closedir_trampoline"
"runtime.recv" "syscall.libc_readdir_r_trampoline"
"runtime.recv" "syscall.libc_recvmsg_trampoline"
"runtime.recv" "syscall.libc_sendmsg_trampoline"
"runtime.recv" "syscall.libc_lstat_trampoline"
"runtime.recv" "syscall.libc_stat_trampoline"
"runtime.recv" "syscall.libc_open_trampoline"
"runtime.recv" "runtime.callers$1"
"runtime.recv" "golang.org/x/tools/go/packages.goListDriver$1"
"runtime.recv" "golang.org/x/tools/go/packages.goListDriver$2"
"runtime.recv" "(*go/types.Named).expandUnderlying$1"
"runtime.recv" "(*go/types.Checker).objDecl$1"
"runtime.recv" "(*go/types.Checker).objDecl$2"
"runtime.recv" "(*internal/godebug.Setting).Value$1"
"runtime.recv" "runtime.casgstatus$1"
"runtime.recv" "runtime.osyield"
"runtime.recv" "runtime.nanotime_trampoline"
"runtime.recv" "runtime.cgoCheckTypedBlock$1"
"runtime.recv" "runtime.sweepone$1"
"runtime.recv" "flag.isZeroValue$1"
"runtime.recv" "go/types.computeInterfaceTypeSet$2$1"
"runtime.recv" "regexp/syntax.parse$1"
"runtime.recv" "syscall.libc_sysctl_trampoline"
"runtime.recv" "go/parser.ParseFile$1"
"runtime.recv" "(*golang.org/x/sync/errgroup.Group).Go$1"
"runtime.recv" "context.WithCancel$1"
"runtime.recv" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"runtime.recv" "(*go/types.Checker).validCycle$1"
"runtime.recv" "(*go/types.Checker).typeDecl$1"
"runtime.recv" "(*go/types.Checker).collectMethods$1"
"runtime.recv" "(*go/types.Checker).funcDecl$1"
"runtime.recv" "(*go/types.subster).typ$2"
"runtime.recv" "(*go/types.typeWriter).signature$1"
"runtime.recv" "(*encoding/json.encodeState).marshal$1"
"runtime.recv" "runtime.exit_trampoline"
"runtime.recv" "runtime.wbBufFlush$1"
"runtime.recv" "(*runtime.sweepLocked).sweep$1"
"runtime.recv" "(*runtime.sweepLocked).sweep$2"
"runtime.recv" "runtime.gcBgMarkWorker$2"
"runtime.recv" "runtime.mspinning"
"runtime.recv" "reflect.embeddedIfaceMethStub"
"runtime.recv" "(*internal/godebug.Setting).register"
"runtime.recv" "runtime.persistentalloc$1"
"runtime.recv" "(*log/slog.handleState).appendValue$1"
"runtime.recv" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"runtime.recv" "(*go/types.Checker).collectTypeParams$1"
"runtime.recv" "(*go/types.Checker).funcType$2"
"runtime.recv" "runtime.usleep_trampoline"
"runtime.recv" "runtime.doRecordGoroutineProfile$1"
"runtime.recv" "runtime.pthread_mutex_init_trampoline"
"runtime.recv" "runtime.pthread_cond_init_trampoline"
"runtime.recv" "runtime.pthread_mutex_lock_trampoline"
"runtime.recv" "runtime.pthread_mutex_unlock_trampoline"
"runtime.recv" "runtime.pthread_cond_wait_trampoline"
"runtime.recv" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"runtime.recv" "runtime._LostContendedRuntimeLock"
"runtime.recv" "(*runtime.mLockProfile).captureStack$1"
"runtime.recv" "runtime.pthread_cond_signal_trampoline"
"runtime.recv" "runtime.tracefree$1"
"runtime.recv" "(*runtime.mheap).freeSpan$1"
"runtime.recv" "runtime.gcMarkDone$2"
"runtime.recv" "runtime.gcMarkDone$3"
"runtime.recv" "runtime.gcMarkDone$4"
"runtime.recv" "runtime.entersyscallblock$1"
"runtime.recv" "runtime.entersyscallblock$2"
"runtime.recv" "runtime.entersyscallblock_handoff"
"runtime.recv" "runtime.exitsyscall$1"
"runtime.recv" "runtime.exitsyscall$2"
"runtime.recv" "runtime.cgoCheckPtrWrite$1"
"runtime.recv" "(*internal/lazyregexp.Regexp).build"
"runtime.recv" "regexp.mergeRuneSets$1"
"runtime.recv" "runtime.unreachableMethod"
"runtime.recv" "runtime.heapSetType$1"
"runtime.recv" "runtime.tracealloc$1"
"runtime.recv" "syscall.libc_chmod_trampoline"
"runtime.recv" "(*os/exec.Cmd).Start$1"
"runtime.recv" "(*context.cancelCtx).propagateCancel$1"
"runtime.recv" "(*context.cancelCtx).propagateCancel$2"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"runtime.recv" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"runtime.recv" "(*go/types.Checker).rawExpr$1"
"runtime.recv" "(*go/types.Checker).validVarType$1"
"runtime.recv" "(*go/types.Checker).typInternal$1"
"runtime.recv" "(*go/types.Checker).typInternal$2"
"runtime.recv" "runtime.stopTheWorld$1"
"runtime.recv" "runtime.startTheWorld$1"
"runtime.recv" "runtime.wirep$1"
"runtime.recv" "runtime.wirep$2"
"runtime.recv" "runtime.kevent_trampoline"
"runtime.recv" "runtime.read_trampoline"
"runtime.recv" "runtime.raise_trampoline"
"runtime.recv" "runtime.cgoSigtramp"
"runtime.recv" "runtime.sigtramp"
"runtime.recv" "runtime.forEachP$1"
"runtime.recv" "runtime.gcMarkTermination$1"
"runtime.recv" "runtime.gcMarkTermination$2"
"runtime.recv" "runtime.gcControllerCommit"
"runtime.recv" "runtime.gcMarkTermination$3"
"runtime.recv" "runtime.freeStackSpans"
"runtime.recv" "runtime.gcMarkTermination$5"
"runtime.recv" "runtime.exitsyscallfast$1"
"runtime.recv" "runtime.allocm$1"
"runtime.recv" "runtime.mstart"
"runtime.recv" "runtime.getempty$1"
"runtime.recv" "(*runtime.p).destroy$1"
"runtime.recv" "runtime.gcAssistAlloc$1"
"runtime.recv" "(*runtime.mheap).alloc$1"
"runtime.recv" "runtime.mProf_Malloc$1"
"runtime.recv" "runtime.Stack$1"
"runtime.recv" "(*os/exec.Cmd).awaitGoroutines$1"
"runtime.recv" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"runtime.recv" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"runtime.recv" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"runtime.recv" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"runtime.recv" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"runtime.recv" "(*go/types.Checker).exprInternal$1"
"runtime.recv" "(*go/types.Checker).instantiatedType$1"
"runtime.recv" "(*go/types.Checker).instantiatedType$2"
"runtime.recv" "(*go/types.Checker).structType$3"
"runtime.recv" "(*go/types.Checker).interfaceType$2"
"runtime.recv" "runtime.reentersyscall$1"
"runtime.recv" "runtime.reentersyscall$2"
"runtime.recv" "runtime.entersyscall_sysmon"
"runtime.recv" "runtime.runSafePointFn"
"runtime.recv" "runtime.entersyscall_gcwait"
"runtime.recv" "(*runtime.traceMap).put$1"
"runtime.recv" "runtime.fatal$1"
"runtime.recv" "runtime.write_trampoline"
"runtime.recv" "(runtime.traceWriter).refill$1"
"runtime.recv" "runtime.mmap_trampoline"
"runtime.recv" "runtime.sigprocmask_trampoline"
"runtime.recv" "runtime.sigaction_trampoline"
"runtime.recv" "runtime.gcMarkTermination$4$1"
"runtime.recv" "(*runtime.mspan).setUserArenaChunkToFault$1"
"runtime.recv" "runtime.exitsyscallfast_reacquired$1"
"runtime.recv" "(*runtime.traceStringTable).put$1"
"runtime.recv" "(*runtime.rwmutex).rlock$1"
"runtime.recv" "runtime.traceThreadDestroy$1"
"runtime.recv" "runtime.malg$1"
"runtime.recv" "runtime.allocmcache$1"
"runtime.recv" "runtime.freemcache$1"
"runtime.recv" "golang.org/x/tools/internal/event/core.ExportPair$1"
"runtime.recv" "golang.org/x/tools/internal/event/core.ExportPair$2"
"runtime.recv" "go/types.parseUnion$1"
"runtime.recv" "runtime._VDSO"
"runtime.recv" "runtime._ExternalCode"
"runtime.recv" "runtime._GC"
"runtime.recv" "runtime._System"
"runtime.recv" "runtime.sigpanic"
"runtime.recv" "runtime.raiseproc_trampoline"
"runtime.recv" "runtime.markrootFreeGStacks"
"runtime.recv" "runtime.markroot$1"
"runtime.recv" "runtime.walltime_trampoline"
"runtime.recv" "runtime.pthread_attr_init_trampoline"
"runtime.recv" "runtime.pthread_attr_getstacksize_trampoline"
"runtime.recv" "runtime.pthread_attr_setdetachstate_trampoline"
"runtime.recv" "runtime.mstart_stub"
"runtime.recv" "go/build/constraint.parseExpr$1"
"runtime.recv" "(*go/parser.parser).parsePrimaryExpr$1"
"runtime.recv" "(*go/parser.parser).parseBinaryExpr$1"
"runtime.recv" "(*go/parser.parser).parseParameterList$1"
"runtime.recv" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"runtime.recv" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"runtime.recv" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"runtime.recv" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"runtime.recv" "(*go/types.Checker).infer$1"
"runtime.recv" "(*go/types.Checker).infer$2"
"runtime.recv" "(*go/types.Checker).instantiateSignature$1"
"runtime.recv" "(*go/types.Checker).instantiateSignature$2"
"runtime.recv" "(*go/types.Checker).genericExprList$1"
"runtime.recv" "runtime.printArgs$3"
"runtime.recv" "runtime.freeSomeWbufs$1"
"runtime.recv" "runtime.pthread_kill_trampoline"
"runtime.recv" "runtime.mlock_trampoline"
"runtime.recv" "runtime.pthread_create_trampoline"
"runtime.recv" "(*runtime.pageAlloc).scavenge$1"
"runtime.recv" "syscall.libc_pipe_trampoline"
"runtime.recv" "syscall.libc_kill_trampoline"
"runtime.recv" "syscall.libc_wait4_trampoline"
"runtime.recv" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"runtime.recv" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"runtime.recv" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"runtime.recv" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"runtime.recv" "syscall.libc_mkdir_trampoline"
"runtime.recv" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"runtime.recv" "go/types.hasVarSize$1"
"runtime.recv" "(*go/types.tpWalker).isParameterized$1"
"runtime.recv" "runtime.kqueue_trampoline"
"runtime.recv" "runtime._LostExternalCode"
"runtime.recv" "runtime._LostSIGPROFDuringAtomic64"
"runtime.recv" "syscall.libc_fork_trampoline"
"runtime.recv" "syscall.libc_setsid_trampoline"
"runtime.recv" "syscall.libc_setpgid_trampoline"
"runtime.recv" "syscall.libc_getpid_trampoline"
"runtime.recv" "syscall.libc_ioctl_trampoline"
"runtime.recv" "syscall.libc_chroot_trampoline"
"runtime.recv" "syscall.libc_setgroups_trampoline"
"runtime.recv" "syscall.libc_setgid_trampoline"
"runtime.recv" "syscall.libc_setuid_trampoline"
"runtime.recv" "syscall.libc_chdir_trampoline"
"runtime.recv" "syscall.libc_exit_trampoline"
"runtime.recv" "syscall.libc_unlink_trampoline"
"runtime.recv" "syscall.libc_rmdir_trampoline"
"runtime.recv" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"runtime.recv" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"runtime.recv" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"runtime.recv" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"runtime.recv" "(*go/types.unifier).nify$1"
"runtime.recv" "runtime.fcntl_trampoline"
"runtime.recv" "runtime.pipe_trampoline"
"runtime.recv" "runtime.munmap_trampoline"
"runtime.recv" "runtime.madvise_trampoline"
"runtime.recv" "(*go/parser.parser).safePos$1"
"runtime.recv" "syscall.libc_ptrace_trampoline"
"runtime.recv" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"runtime.recv" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"runtime.recv" "math/big.three$1"
"runtime.recv" "go/ast.fprint$1"
"runtime.recv" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"runtime.recv" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"runtime.chanrecv" "runtime.recv"
"runtime.chanrecv" "runtime.chanbuf"
"runtime.chanrecv" "runtime.racenotify"
"runtime.chanrecv" "runtime.typedmemmove"
"runtime.chanrecv" "runtime.typedmemclr"
"runtime.chanrecv" "runtime.unlock"
"runtime.chanrecv" "runtime.unlock"
"runtime.chanrecv" "runtime.getg"
"runtime.chanrecv" "runtime.acquireSudog"
"runtime.chanrecv" "(*runtime.waitq).enqueue"
"runtime.chanrecv" "(*runtime/internal/atomic.Bool).Store"
"runtime.chanrecv" "runtime.gopark"
"runtime.chanrecv" "runtime.throw"
"runtime.chanrecv" "runtime.blockevent"
"runtime.chanrecv" "runtime.releaseSudog"
"(*internal/poll.FD).WriteMsgInet6" "(*internal/poll.FD).writeLock"
"(*internal/poll.FD).WriteMsgInet6" "(*internal/poll.FD).writeUnlock"
"(*internal/poll.FD).WriteMsgInet6" "(*internal/poll.pollDesc).prepareWrite"
"(*internal/poll.FD).WriteMsgInet6" "internal/syscall/unix.SendmsgNInet6"
"(*internal/poll.FD).WriteMsgInet6" "(*internal/poll.pollDesc).waitWrite"
"(*internal/poll.FD).WriteMsgInet6" "(*internal/poll.pollDesc).pollable"
"internal/buildcfg.init$1" "internal/buildcfg.envOr"
"internal/buildcfg.ParseGOEXPERIMENT" "reflect.ValueOf"
"internal/buildcfg.ParseGOEXPERIMENT" "(reflect.Value).Elem"
"internal/buildcfg.ParseGOEXPERIMENT" "(reflect.Value).Type"
"internal/buildcfg.ParseGOEXPERIMENT" "(*reflect.rtype).NumField"
"internal/buildcfg.ParseGOEXPERIMENT" "(reflect.Value).Field"
"internal/buildcfg.ParseGOEXPERIMENT" "(*reflect.rtype).Field"
"internal/buildcfg.ParseGOEXPERIMENT" "strings.ToLower"
"internal/buildcfg.ParseGOEXPERIMENT" "strings.Split"
"internal/buildcfg.ParseGOEXPERIMENT" "strings.HasPrefix"
"internal/buildcfg.ParseGOEXPERIMENT" "fmt.Errorf"
"internal/buildcfg.ParseGOEXPERIMENT" "(reflect.Value).SetBool"
"internal/buildcfg.ParseGOEXPERIMENT" "internal/buildcfg.ParseGOEXPERIMENT$1"
"internal/buildcfg.ParseGOEXPERIMENT" "fmt.Errorf"
"internal/buildcfg.ParseGOEXPERIMENT" "(*go/types.Checker).builtin$1"
"internal/buildcfg.init$1" "internal/buildcfg.ParseGOEXPERIMENT"
"command-line-arguments.realMain" "os.Getwd"
"command-line-arguments.realMain" "fmt.Errorf"
"(*flag.FlagSet).StringVar" "flag.newStringValue"
"(*flag.FlagSet).Var" "strings.HasPrefix"
"(*flag.FlagSet).Var" "(*flag.FlagSet).sprintf"
"(*flag.FlagSet).Var" "strings.Contains"
"(*flag.FlagSet).Var" "(*flag.FlagSet).sprintf"
"(*flag.FlagSet).Var" "(*flag.stringValue).String"
"(*flag.FlagSet).Var" "(*flag.FlagSet).sprintf"
"(*flag.FlagSet).Var" "(*flag.FlagSet).sprintf"
"(*flag.FlagSet).Var" "fmt.Sprintf"
"(*flag.FlagSet).StringVar" "(*flag.FlagSet).Var"
"(*flag.FlagSet).String" "(*flag.FlagSet).StringVar"
"flag.String" "(*flag.FlagSet).String"
"command-line-arguments.realMain" "flag.String"
"(*flag.FlagSet).parseOne" "(*flag.FlagSet).failf"
"(*flag.FlagSet).parseOne" "(*flag.FlagSet).usage"
"(*flag.FlagSet).parseOne" "(*flag.FlagSet).failf"
"(*flag.FlagSet).parseOne" "(*flag.FlagSet).failf"
"(*flag.FlagSet).parseOne" "(*flag.FlagSet).failf"
"(*flag.FlagSet).parseOne" "(*flag.FlagSet).failf"
"(*flag.FlagSet).parseOne" "(*flag.stringValue).Set"
"(*flag.FlagSet).parseOne" "(*flag.FlagSet).failf"
"(*flag.FlagSet).Parse" "(*flag.FlagSet).parseOne"
"(*flag.FlagSet).Parse" "os.Exit"
"(*flag.FlagSet).Parse" "os.Exit"
"flag.Parse" "(*flag.FlagSet).Parse"
"command-line-arguments.realMain" "flag.Parse"
"command-line-arguments.realMain" "path/filepath.Abs"
"command-line-arguments.realMain" "fmt.Errorf"
"github.com/worldiety/macro/ast/golang.ModRootDir" "path/filepath.Join"
"github.com/worldiety/macro/ast/golang.ModRootDir" "os.Stat"
"github.com/worldiety/macro/ast/golang.ModRootDir" "path/filepath.Dir"
"command-line-arguments.realMain" "github.com/worldiety/macro/ast/golang.ModRootDir"
"command-line-arguments.realMain" "fmt.Errorf"
"command-line-arguments.realMain" "log/slog.String"
"command-line-arguments.realMain" "log/slog.Info"
"github.com/worldiety/macro/ast/golang.Load" "golang.org/x/tools/go/packages.Load"
"command-line-arguments.realMain" "github.com/worldiety/macro/ast/golang.Load"
"command-line-arguments.realMain" "fmt.Errorf"
"(*regexp.Regexp).FindString" "(*regexp.Regexp).doExecute"
"github.com/worldiety/macro/ast/golang.Parse" "(*regexp.Regexp).FindString"
"github.com/worldiety/macro/ast/golang.Parse" "strings.TrimSpace"
"github.com/worldiety/macro/ast/golang.Parse" "strings.TrimLeft"
"github.com/worldiety/macro/ast/golang.Parse" "strings.TrimSpace"
"log/slog.Error" "log/slog.Default"
"log/slog.Error" "context.Background"
"log/slog.Error" "(*log/slog.Logger).log"
"github.com/worldiety/macro/ast/golang.Parse" "log/slog.Error"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.object).Type"
"github.com/worldiety/macro/ast/golang.Parse" "(github.com/worldiety/macro/ast/wdy.TypeReference).String"
"github.com/worldiety/macro/ast/golang.Parse" "log/slog.String"
"github.com/worldiety/macro/ast/golang.Parse" "log/slog.String"
"github.com/worldiety/macro/ast/golang.intoRef" "(*go/types.Basic).Name"
"github.com/worldiety/macro/ast/golang.intoRef" "(*go/types.Named).Obj"
"github.com/worldiety/macro/ast/golang.intoRef" "(*go/types.object).Pkg"
"github.com/worldiety/macro/ast/golang.intoRef" "(*go/types.Named).Obj"
"github.com/worldiety/macro/ast/golang.intoRef" "(*go/types.object).Pkg"
"github.com/worldiety/macro/ast/golang.intoRef" "(*go/types.Package).Path"
"github.com/worldiety/macro/ast/golang.intoRef" "(*go/types.Named).Obj"
"github.com/worldiety/macro/ast/golang.intoRef" "(*go/types.object).Name"
"github.com/worldiety/macro/ast/golang.intoRef" "(*go/types.Slice).Elem"
"github.com/worldiety/macro/ast/golang.intoRef" "github.com/worldiety/macro/ast/golang.intoRef"
"github.com/worldiety/macro/ast/golang.intoRef" "(*go/types.Map).Key"
"github.com/worldiety/macro/ast/golang.intoRef" "github.com/worldiety/macro/ast/golang.intoRef"
"github.com/worldiety/macro/ast/golang.intoRef" "(*go/types.Map).Elem"
"github.com/worldiety/macro/ast/golang.intoRef" "github.com/worldiety/macro/ast/golang.intoRef"
"github.com/worldiety/macro/ast/golang.Parse" "github.com/worldiety/macro/ast/golang.intoRef"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.Named).Underlying"
"github.com/worldiety/macro/ast/golang.Parse" "fmt.Println"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.Interface).NumMethods"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.Interface).NumMethods"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.Interface).Method"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.object).Type"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.object).Name"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.Interface).NumEmbeddeds"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.Interface).EmbeddedType"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.Union).Len"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.Union).Term"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.Term).Type"
"github.com/worldiety/macro/ast/golang.Parse" "github.com/worldiety/macro/ast/golang.intoRef"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.Union).Term"
"github.com/worldiety/macro/ast/golang.Parse" "(*go/types.Term).Type"
"github.com/worldiety/macro/ast/golang.Parse" "fmt.Sprintf"
"command-line-arguments.realMain" "github.com/worldiety/macro/ast/golang.Parse"
"command-line-arguments.realMain" "fmt.Printf"
"command-line-arguments.main" "command-line-arguments.realMain"
"command-line-arguments.main" "log.Fatal"
"(reflect.Value).SetIterValue" "(*reflect.hiter).initialized"
"(reflect.Value).SetIterValue" "reflect.mapiterelem"
"(reflect.Value).SetIterValue" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetIterValue" "(reflect.flag).kind"
"(reflect.Value).SetIterValue" "(reflect.Value).typ"
"(reflect.Value).SetIterValue" "(reflect.flag).mustBeExported"
"(reflect.Value).SetIterValue" "(*internal/abi.Type).Kind"
"(reflect.Value).SetIterValue" "(reflect.Value).typ"
"(reflect.Value).SetIterValue" "(reflect.Value).assignTo"
"(reflect.Value).SetIterValue" "(reflect.Value).typ"
"(reflect.Value).SetIterValue" "reflect.typedmemmove"
"(encoding/json.Number).Float64" "strconv.ParseFloat"
"go/parser.init" "bytes.init"
"go/parser.init" "errors.init"
"go/parser.init" "go/ast.init"
"go/parser.init" "go/token.init"
"go/parser.init" "io.init"
"go/parser.init" "io/fs.init"
"go/parser.init" "os.init"
"go/parser.init" "path/filepath.init"
"go/parser.init" "strings.init"
"go/parser.init" "fmt.init"
"go/build/constraint.init" "errors.init"
"go/build/constraint.init" "strings.init"
"go/build/constraint.init" "unicode.init"
"go/build/constraint.init" "unicode/utf8.init"
"go/build/constraint.init" "strconv.init"
"go/build/constraint.init" "errors.New"
"go/build/constraint.init" "errors.New"
"go/parser.init" "go/build/constraint.init"
"go/internal/typeparams.init" "go/ast.init"
"go/internal/typeparams.init" "go/token.init"
"go/parser.init" "go/internal/typeparams.init"
"go/parser.init" "go/scanner.init"
"(*runtime/internal/atomic.UnsafePointer).CompareAndSwap" "runtime/internal/atomic.casPointer"
"(*runtime.sigctxt).r10" "(*runtime.sigctxt).regs"
"github.com/worldiety/macro/ast/golang.init" "fmt.init"
"encoding/json.init" "encoding.init"
"encoding/binary.init" "errors.init"
"encoding/binary.init" "io.init"
"encoding/binary.init" "math.init"
"encoding/binary.init" "reflect.init"
"encoding/binary.init" "sync.init"
"encoding/binary.init" "errors.New"
"encoding/base64.init" "encoding/binary.init"
"encoding/base64.init" "io.init"
"encoding/base64.init" "slices.init"
"encoding/base64.init" "strconv.init"
"encoding/base64.init" "encoding/base64.NewEncoding"
"encoding/base64.init" "encoding/base64.NewEncoding"
"encoding/base64.init" "(encoding/base64.Encoding).WithPadding"
"encoding/base64.init" "(encoding/base64.Encoding).WithPadding"
"encoding/json.init" "encoding/base64.init"
"encoding/json.init" "fmt.init"
"encoding/json.init" "reflect.init"
"encoding/json.init" "strconv.init"
"encoding/json.init" "strings.init"
"encoding/json.init" "unicode.init"
"encoding/json.init" "unicode/utf16.init"
"encoding/json.init" "unicode/utf8.init"
"encoding/json.init" "bytes.init"
"encoding/json.init" "math.init"
"encoding/json.init" "slices.init"
"encoding/json.init" "sort.init"
"encoding/json.init" "sync.init"
"encoding/json.init" "errors.init"
"encoding/json.init" "io.init"
"reflect.TypeFor[encoding.TextUnmarshaler]" "reflect.TypeOf"
"reflect.TypeFor[encoding.TextUnmarshaler]" "(*reflect.rtype).Elem"
"encoding/json.init" "reflect.TypeFor[encoding.TextUnmarshaler]"
"reflect.TypeFor[encoding/json.Number]" "reflect.TypeOf"
"reflect.TypeFor[encoding/json.Number]" "(*reflect.rtype).Elem"
"encoding/json.init" "reflect.TypeFor[encoding/json.Number]"
"reflect.TypeFor[encoding/json.Marshaler]" "reflect.TypeOf"
"reflect.TypeFor[encoding/json.Marshaler]" "(*reflect.rtype).Elem"
"encoding/json.init" "reflect.TypeFor[encoding/json.Marshaler]"
"reflect.TypeFor[encoding.TextMarshaler]" "reflect.TypeOf"
"reflect.TypeFor[encoding.TextMarshaler]" "(*reflect.rtype).Elem"
"encoding/json.init" "reflect.TypeFor[encoding.TextMarshaler]"
"github.com/worldiety/macro/ast/wdy.init" "encoding/json.init"
"github.com/worldiety/macro/ast/golang.init" "github.com/worldiety/macro/ast/wdy.init"
"github.com/worldiety/macro/ast/golang.init" "go/ast.init"
"go/types.init" "fmt.init"
"go/types.init" "bytes.init"
"go/types.init" "go/ast.init"
"go/constant.init" "strconv.init"
"go/constant.init" "fmt.init"
"go/constant.init" "go/token.init"
"go/constant.init" "math.init"
"math/big.init" "strconv.init"
"math/big.init" "math/bits.init"
"math/big.init" "fmt.init"
"math/big.init" "math.init"
"math/big.init" "io.init"
"math/big.init" "strings.init"
"math/big.init" "encoding/binary.init"
"math/big.init" "errors.init"
"math/big.init" "bytes.init"
"math/big.init" "math/rand.init"
"math/big.init" "sync.init"
"math/big.init" "errors.New"
"math/big.init" "errors.New"
"go/constant.init" "math/big.init"
"go/constant.init" "math/bits.init"
"go/constant.init" "strings.init"
"go/constant.init" "sync.init"
"go/constant.init" "unicode/utf8.init"
"go/constant.init" "go/constant.newFloat"
"go/types.init" "go/constant.init"
"go/types.init" "go/token.init"
"internal/types/errors.init" "strconv.init"
"go/types.init" "internal/types/errors.init"
"go/types.init" "strings.init"
"go/types.init" "go/internal/typeparams.init"
"go/types.init" "unicode.init"
"go/types.init" "errors.init"
"go/types.init" "internal/godebug.init"
"go/types.init" "math.init"
"go/types.init" "strconv.init"
"go/types.init" "sync.init"
"go/types.init" "runtime.init"
"go/types.init" "go/parser.init"
"go/types.init" "container/heap.init"
"go/types.init" "sort.init"
"go/types.init" "sync/atomic.init"
"go/types.init" "unicode/utf8.init"
"go/types.init" "io.init"
"internal/buildcfg.init" "fmt.init"
"internal/buildcfg.init" "os.init"
"internal/buildcfg.init" "path/filepath.init"
"internal/buildcfg.init" "runtime.init"
"internal/buildcfg.init" "strconv.init"
"internal/buildcfg.init" "strings.init"
"internal/buildcfg.init" "reflect.init"
"internal/buildcfg.init" "internal/goexperiment.init"
"internal/buildcfg.init" "runtime.GOROOT"
"internal/buildcfg.gowasm" "internal/buildcfg.envOr"
"internal/buildcfg.gowasm" "strings.Split"
"internal/buildcfg.gowasm" "fmt.Errorf"
"internal/buildcfg.init" "internal/buildcfg.gowasm"
"internal/buildcfg.init" "internal/buildcfg.envOr"
"internal/buildcfg.goamd64" "internal/buildcfg.envOr"
"internal/buildcfg.goamd64" "fmt.Errorf"
"internal/buildcfg.init" "internal/buildcfg.goamd64"
"internal/buildcfg.init" "internal/buildcfg.gomips"
"internal/buildcfg.gomips64" "internal/buildcfg.envOr"
"internal/buildcfg.gomips64" "fmt.Errorf"
"internal/buildcfg.init" "internal/buildcfg.gomips64"
"internal/buildcfg.init" "internal/buildcfg.goppc64"
"internal/buildcfg.init" "internal/buildcfg.envOr"
"internal/buildcfg.init" "internal/buildcfg.envOr"
"internal/buildcfg.goarm" "internal/buildcfg.envOr"
"internal/buildcfg.goarm" "strings.HasSuffix"
"internal/buildcfg.goarm" "strings.HasSuffix"
"internal/buildcfg.goarm" "fmt.Errorf"
"internal/buildcfg.init" "internal/buildcfg.goarm"
"internal/buildcfg.init" "internal/buildcfg.init$1"
"internal/buildcfg.expList" "reflect.ValueOf"
"internal/buildcfg.expList" "(reflect.Value).Elem"
"internal/buildcfg.expList" "reflect.ValueOf"
"internal/buildcfg.expList" "(reflect.Value).Elem"
"internal/buildcfg.expList" "(reflect.Value).Type"
"internal/buildcfg.expList" "(*reflect.rtype).NumField"
"internal/buildcfg.expList" "(*reflect.rtype).Field"
"internal/buildcfg.expList" "strings.ToLower"
"internal/buildcfg.expList" "(reflect.Value).Field"
"internal/buildcfg.expList" "(reflect.Value).Bool"
"internal/buildcfg.expList" "(reflect.Value).Field"
"internal/buildcfg.expList" "(reflect.Value).Bool"
"(*internal/buildcfg.ExperimentFlags).Enabled" "internal/buildcfg.expList"
"internal/buildcfg.experimentTags" "(*internal/buildcfg.ExperimentFlags).Enabled"
"internal/buildcfg.toolTags" "internal/buildcfg.experimentTags"
"internal/buildcfg.gogoarchTags" "fmt.Sprintf"
"internal/buildcfg.gogoarchTags" "fmt.Sprintf"
"internal/buildcfg.gogoarchTags" "fmt.Sprintf"
"internal/buildcfg.toolTags" "internal/buildcfg.gogoarchTags"
"internal/buildcfg.init" "internal/buildcfg.toolTags"
"go/types.init" "internal/buildcfg.init"
"go/version.init" "internal/gover.init"
"go/version.init" "strings.init"
"go/types.init" "go/version.init"
"go/types.init" "internal/goversion.init"
"go/types.init" "internal/godebug.New"
"go/types.init" "errors.New"
"go/types.init" "go/types.SizesFor"
"go/types.init" "go/constant.MakeBool"
"go/types.init" "go/constant.MakeBool"
"go/types.init" "go/constant.MakeInt64"
"go/types.init" "go/types.asGoVersion"
"go/types.init" "go/types.asGoVersion"
"go/types.init" "go/types.asGoVersion"
"go/types.init" "go/types.asGoVersion"
"go/types.init" "go/types.asGoVersion"
"go/types.init" "go/types.asGoVersion"
"go/types.init" "go/types.asGoVersion"
"go/types.init" "go/types.asGoVersion"
"go/types.init" "fmt.Sprintf"
"go/types.init" "go/types.asGoVersion"
"go/types.init" "go/types.init#1"
"go/types.init" "go/types.init#2"
"go/types.init#3" "go/types.NewScope"
"go/types.init#3" "go/types.NewPackage"
"go/types.defPredeclaredTypes" "go/types.NewTypeName"
"go/types.def" "strings.Contains"
"go/types.def" "(*go/types.object).color"
"go/types.def" "(*go/types.object).Name"
"go/types.def" "go/types.asNamed"
"go/types.def" "(*go/types.object).Type"
"go/types.def" "(*go/types.object).Exported"
"go/types.def" "(*go/types.Scope).Insert"
"go/types.def" "go/types.unreachable"
"go/types.def" "go/types.assert"
"go/types.defPredeclaredTypes" "go/types.def"
"go/types.defPredeclaredTypes" "go/types.NewTypeName"
"go/types.defPredeclaredTypes" "go/types.def"
"go/types.defPredeclaredTypes" "go/types.NewTypeName"
"go/types.defPredeclaredTypes" "go/types.def"
"go/types.defPredeclaredTypes" "go/types.NewTypeName"
"go/types.defPredeclaredTypes" "(*go/types.object).setColor"
"go/types.defPredeclaredTypes" "go/types.NewNamed"
"go/types.defPredeclaredTypes" "go/types.NewVar"
"go/types.defPredeclaredTypes" "go/types.NewVar"
"go/types.defPredeclaredTypes" "go/types.NewTuple"
"go/types.defPredeclaredTypes" "go/types.NewSignatureType"
"go/types.defPredeclaredTypes" "go/types.NewFunc"
"go/types.defPredeclaredTypes" "go/types.computeInterfaceTypeSet"
"go/types.defPredeclaredTypes" "(*go/types.Named).SetUnderlying"
"go/types.defPredeclaredTypes" "go/types.def"
"go/types.defPredeclaredTypes" "go/types.NewTypeName"
"go/types.defPredeclaredTypes" "(*go/types.object).setColor"
"go/types.defPredeclaredTypes" "go/types.NewNamed"
"go/types.defPredeclaredTypes" "(*go/types.Named).SetUnderlying"
"go/types.defPredeclaredTypes" "go/types.def"
"go/types.init#3" "go/types.defPredeclaredTypes"
"go/types.defPredeclaredConsts" "go/types.NewConst"
"go/types.defPredeclaredConsts" "go/types.def"
"go/types.init#3" "go/types.defPredeclaredConsts"
"go/types.defPredeclaredNil" "go/types.def"
"go/types.init#3" "go/types.defPredeclaredNil"
"go/types.defPredeclaredFuncs" "go/types.newBuiltin"
"go/types.defPredeclaredFuncs" "go/types.def"
"go/types.init#3" "go/types.defPredeclaredFuncs"
"go/types.init#3" "(*go/types.Scope).Lookup"
"go/types.init#3" "(*go/types.Scope).Lookup"
"go/types.init#3" "(*go/types.Scope).Lookup"
"go/types.init#3" "(*go/types.object).Type"
"go/types.init#3" "(*go/types.Scope).Lookup"
"go/types.init#3" "(*go/types.Scope).Lookup"
"go/types.init#3" "(*go/types.object).Type"
"go/types.init#3" "(*go/types.Scope).Lookup"
"go/types.init#3" "(*go/types.object).Type"
"go/types.init" "go/types.init#3"
"github.com/worldiety/macro/ast/golang.init" "go/types.init"
"golang.org/x/tools/go/packages.init" "bytes.init"
"golang.org/x/tools/go/packages.init" "encoding/json.init"
"golang.org/x/tools/go/packages.init" "fmt.init"
"golang.org/x/tools/go/packages.init" "os.init"
"os/exec.init" "bytes.init"
"os/exec.init" "context.init"
"os/exec.init" "errors.init"
"os/exec.init" "internal/godebug.init"
"os/exec.init" "internal/syscall/execenv.init"
"os/exec.init" "io.init"
"os/exec.init" "os.init"
"os/exec.init" "path/filepath.init"
"os/exec.init" "runtime.init"
"os/exec.init" "strconv.init"
"os/exec.init" "strings.init"
"os/exec.init" "syscall.init"
"os/exec.init" "time.init"
"os/exec.init" "io/fs.init"
"os/exec.init" "internal/syscall/unix.init"
"os/exec.init" "errors.New"
"os/exec.init" "internal/godebug.New"
"os/exec.init" "internal/godebug.New"
"os/exec.init" "errors.New"
"os/exec.init" "errors.New"
"golang.org/x/tools/go/packages.init" "os/exec.init"
"golang.org/x/tools/go/packages.init" "strings.init"
"golang.org/x/tools/go/packages.init" "context.init"
"log.init" "fmt.init"
"log.init" "io.init"
"log.init" "log/internal.init"
"log.init" "os.init"
"log.init" "runtime.init"
"log.init" "sync.init"
"log.init" "sync/atomic.init"
"log.init" "time.init"
"log.New" "(*log.Logger).SetOutput"
"log.New" "(*log.Logger).SetPrefix"
"(*log.Logger).SetFlags" "(*sync/atomic.Int32).Store"
"log.New" "(*log.Logger).SetFlags"
"log.init" "log.New"
"log.init" "log.init#1"
"golang.org/x/tools/go/packages.init" "log.init"
"golang.org/x/tools/go/packages.init" "path.init"
"golang.org/x/tools/go/packages.init" "path/filepath.init"
"golang.org/x/tools/go/packages.init" "reflect.init"
"golang.org/x/tools/go/packages.init" "sort.init"
"golang.org/x/tools/go/packages.init" "strconv.init"
"golang.org/x/tools/go/packages.init" "sync.init"
"golang.org/x/tools/go/packages.init" "unicode.init"
"golang.org/x/tools/go/internal/packagesdriver.init" "context.init"
"golang.org/x/tools/go/internal/packagesdriver.init" "fmt.init"
"golang.org/x/tools/go/internal/packagesdriver.init" "strings.init"
"golang.org/x/tools/internal/gocommand.init" "bytes.init"
"golang.org/x/tools/internal/gocommand.init" "context.init"
"golang.org/x/tools/internal/gocommand.init" "errors.init"
"golang.org/x/tools/internal/gocommand.init" "fmt.init"
"golang.org/x/tools/internal/gocommand.init" "io.init"
"golang.org/x/tools/internal/gocommand.init" "log.init"
"golang.org/x/tools/internal/gocommand.init" "os.init"
"golang.org/x/tools/internal/gocommand.init" "os/exec.init"
"golang.org/x/tools/internal/gocommand.init" "reflect.init"
"regexp/syntax.init" "unicode.init"
"regexp/syntax.init" "strconv.init"
"regexp/syntax.init" "sort.init"
"regexp/syntax.init" "strings.init"
"regexp/syntax.init" "unicode/utf8.init"
"regexp.init" "regexp/syntax.init"
"regexp.init" "sync.init"
"regexp.init" "io.init"
"regexp.init" "sort.init"
"regexp.init" "strings.init"
"regexp.init" "unicode.init"
"regexp.init" "unicode/utf8.init"
"regexp.init" "bytes.init"
"regexp.init" "strconv.init"
"regexp.init" "regexp.init#1"
"golang.org/x/tools/internal/gocommand.init" "regexp.init"
"golang.org/x/tools/internal/gocommand.init" "runtime.init"
"golang.org/x/tools/internal/gocommand.init" "strconv.init"
"golang.org/x/tools/internal/gocommand.init" "strings.init"
"golang.org/x/tools/internal/gocommand.init" "sync.init"
"golang.org/x/tools/internal/gocommand.init" "time.init"
"golang.org/x/tools/internal/gocommand.init" "golang.org/x/tools/internal/event.init"
"golang.org/x/tools/internal/gocommand.init" "golang.org/x/tools/internal/event/keys.init"
"golang.org/x/tools/internal/gocommand.init" "golang.org/x/tools/internal/event/label.init"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.init"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.New"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.New"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.New"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewUInt64"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.New"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewInt"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.New"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewInt"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.New"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewInt"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewInt64"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewInt64"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewInt64"
"golang.org/x/tools/internal/event/tag.init" "golang.org/x/tools/internal/event/keys.NewFloat64"
"golang.org/x/tools/internal/gocommand.init" "golang.org/x/tools/internal/event/tag.init"
"golang.org/x/tools/internal/gocommand.init" "path/filepath.init"
"golang.org/x/mod/semver.init" "sort.init"
"golang.org/x/tools/internal/gocommand.init" "golang.org/x/mod/semver.init"
"golang.org/x/tools/internal/gocommand.init" "regexp.MustCompile"
"golang.org/x/tools/internal/gocommand.init" "golang.org/x/tools/internal/event/keys.NewString"
"golang.org/x/tools/internal/gocommand.init" "regexp.MustCompile"
"golang.org/x/tools/go/internal/packagesdriver.init" "golang.org/x/tools/internal/gocommand.init"
"golang.org/x/tools/go/packages.init" "golang.org/x/tools/go/internal/packagesdriver.init"
"golang.org/x/tools/go/packages.init" "golang.org/x/tools/internal/gocommand.init"
"golang.org/x/tools/go/packages.init" "golang.org/x/tools/internal/packagesinternal.init"
"golang.org/x/tools/go/packages.init" "errors.init"
"golang.org/x/tools/go/packages.init" "go/ast.init"
"golang.org/x/tools/go/packages.init" "go/parser.init"
"golang.org/x/tools/go/packages.init" "go/scanner.init"
"golang.org/x/tools/go/packages.init" "go/token.init"
"golang.org/x/tools/go/packages.init" "go/types.init"
"golang.org/x/tools/go/packages.init" "io.init"
"golang.org/x/tools/go/packages.init" "runtime.init"
"golang.org/x/tools/go/packages.init" "time.init"
"golang.org/x/sync/errgroup.init" "context.init"
"golang.org/x/sync/errgroup.init" "fmt.init"
"golang.org/x/sync/errgroup.init" "sync.init"
"golang.org/x/tools/go/packages.init" "golang.org/x/sync/errgroup.init"
"bufio.init" "bytes.init"
"bufio.init" "errors.init"
"bufio.init" "io.init"
"bufio.init" "strings.init"
"bufio.init" "unicode/utf8.init"
"bufio.init" "errors.New"
"bufio.init" "errors.New"
"bufio.init" "errors.New"
"bufio.init" "errors.New"
"bufio.init" "errors.New"
"bufio.init" "errors.New"
"bufio.init" "errors.New"
"bufio.init" "errors.New"
"bufio.init" "errors.New"
"bufio.init" "errors.New"
"bufio.init" "errors.New"
"golang.org/x/tools/go/gcexportdata.init" "bufio.init"
"golang.org/x/tools/go/gcexportdata.init" "bytes.init"
"golang.org/x/tools/go/gcexportdata.init" "encoding/json.init"
"golang.org/x/tools/go/gcexportdata.init" "fmt.init"
"golang.org/x/tools/go/gcexportdata.init" "go/token.init"
"golang.org/x/tools/go/gcexportdata.init" "go/types.init"
"golang.org/x/tools/go/gcexportdata.init" "io.init"
"golang.org/x/tools/go/gcexportdata.init" "os/exec.init"
"golang.org/x/tools/internal/gcimporter.init" "fmt.init"
"golang.org/x/tools/internal/gcimporter.init" "go/token.init"
"golang.org/x/tools/internal/gcimporter.init" "go/types.init"
"golang.org/x/tools/internal/gcimporter.init" "sync.init"
"golang.org/x/tools/internal/gcimporter.init" "bufio.init"
"golang.org/x/tools/internal/gcimporter.init" "io.init"
"golang.org/x/tools/internal/gcimporter.init" "strconv.init"
"golang.org/x/tools/internal/gcimporter.init" "strings.init"
"golang.org/x/tools/internal/gcimporter.init" "bytes.init"
"go/build.init" "bytes.init"
"go/build.init" "errors.init"
"go/build.init" "fmt.init"
"go/build.init" "go/ast.init"
"go/build.init" "go/build/constraint.init"
"go/doc/comment.init" "bytes.init"
"go/doc/comment.init" "fmt.init"
"go/doc/comment.init" "strconv.init"
"go/doc/comment.init" "strings.init"
"go/doc/comment.init" "slices.init"
"go/doc/comment.init" "unicode.init"
"go/doc/comment.init" "unicode/utf8.init"
"go/doc/comment.init" "sort.init"
"go/doc.init" "go/doc/comment.init"
"go/doc.init" "io.init"
"go/doc.init" "fmt.init"
"go/doc.init" "go/ast.init"
"go/doc.init" "go/token.init"
"go/doc.init" "strings.init"
"internal/lazyregexp.init" "os.init"
"internal/lazyregexp.init" "regexp.init"
"internal/lazyregexp.init" "strings.init"
"internal/lazyregexp.init" "sync.init"
"strings.TrimSuffix" "strings.HasSuffix"
"internal/lazyregexp.init" "strings.TrimSuffix"
"internal/lazyregexp.init" "strings.HasSuffix"
"go/doc.init" "internal/lazyregexp.init"
"go/doc.init" "path.init"
"go/doc.init" "sort.init"
"go/doc.init" "strconv.init"
"go/doc.init" "unicode.init"
"go/doc.init" "unicode/utf8.init"
"(*internal/lazyregexp.Regexp).re" "(*sync.Once).Do"
"internal/lazyregexp.New" "(*internal/lazyregexp.Regexp).re"
"go/doc.init" "internal/lazyregexp.New"
"go/doc.init" "go/ast.NewIdent"
"go/doc.init" "internal/lazyregexp.New"
"go/doc.init" "internal/lazyregexp.New"
"go/build.init" "go/doc.init"
"go/build.init" "go/token.init"
"go/build.init" "internal/buildcfg.init"
"go/build.init" "internal/godebug.init"
"internal/goroot.init" "os.init"
"internal/goroot.init" "os/exec.init"
"internal/goroot.init" "path/filepath.init"
"internal/goroot.init" "strings.init"
"internal/goroot.init" "sync.init"
"go/build.init" "internal/goroot.init"
"go/build.init" "internal/goversion.init"
"go/build.init" "internal/platform.init"
"go/build.init" "io.init"
"go/build.init" "io/fs.init"
"go/build.init" "os.init"
"go/build.init" "os/exec.init"
"go/build.init" "path.init"
"go/build.init" "path/filepath.init"
"go/build.init" "runtime.init"
"go/build.init" "sort.init"
"go/build.init" "strconv.init"
"go/build.init" "strings.init"
"go/build.init" "unicode.init"
"go/build.init" "unicode/utf8.init"
"go/build.init" "bufio.init"
"go/build.init" "go/parser.init"
"go/build.init" "go/scanner.init"
"go/build.init" "internal/godebug.New"
"go/build.init" "errors.New"
"go/build.init" "errors.New"
"go/build.getToolDir" "runtime.GOROOT"
"go/build.getToolDir" "path/filepath.Join"
"go/build.init" "go/build.getToolDir"
"go/build.init" "errors.New"
"go/build.init" "errors.New"
"go/build.defaultContext" "runtime.GOROOT"
"go/build.defaultContext" "path/filepath.Clean"
"go/build.defaultGOPATH" "os.Getenv"
"go/build.defaultGOPATH" "path/filepath.Join"
"go/build.defaultGOPATH" "path/filepath.Clean"
"go/build.defaultGOPATH" "runtime.GOROOT"
"go/build.defaultGOPATH" "path/filepath.Clean"
"go/build.defaultContext" "go/build.defaultGOPATH"
"go/build.envOr" "os.Getenv"
"go/build.defaultContext" "go/build.envOr"
"go/build.defaultContext" "strconv.Itoa"
"go/build.defaultContext" "os.Getenv"
"go/build.defaultContext" "internal/platform.CgoSupported"
"go/build.init" "go/build.defaultContext"
"golang.org/x/tools/internal/gcimporter.init" "go/build.init"
"golang.org/x/tools/internal/gcimporter.init" "os.init"
"golang.org/x/tools/internal/gcimporter.init" "os/exec.init"
"golang.org/x/tools/internal/gcimporter.init" "path/filepath.init"
"golang.org/x/tools/internal/gcimporter.init" "encoding/binary.init"
"golang.org/x/tools/internal/gcimporter.init" "go/constant.init"
"golang.org/x/tools/internal/gcimporter.init" "math/big.init"
"golang.org/x/tools/internal/gcimporter.init" "reflect.init"
"golang.org/x/tools/internal/gcimporter.init" "sort.init"
"golang.org/x/tools/internal/gcimporter.init" "unsafe.init"
"golang.org/x/tools/go/types/objectpath.init" "fmt.init"
"golang.org/x/tools/go/types/objectpath.init" "go/types.init"
"golang.org/x/tools/go/types/objectpath.init" "strconv.init"
"golang.org/x/tools/go/types/objectpath.init" "strings.init"
"golang.org/x/tools/internal/aliases.init" "go/token.init"
"golang.org/x/tools/internal/aliases.init" "go/types.init"
"golang.org/x/tools/internal/aliases.init" "go/ast.init"
"golang.org/x/tools/internal/aliases.init" "go/parser.init"
"golang.org/x/tools/internal/aliases.init" "os.init"
"golang.org/x/tools/internal/aliases.init" "strings.init"
"golang.org/x/tools/internal/aliases.init" "sync.init"
"golang.org/x/tools/go/types/objectpath.init" "golang.org/x/tools/internal/aliases.init"
"golang.org/x/tools/internal/typesinternal.init" "strconv.init"
"golang.org/x/tools/internal/typesinternal.init" "go/types.init"
"golang.org/x/tools/internal/typesinternal.init" "golang.org/x/tools/internal/aliases.init"
"golang.org/x/tools/internal/stdlib.init" "fmt.init"
"golang.org/x/tools/internal/stdlib.init" "strings.init"
"golang.org/x/tools/internal/stdlib.init#1" "fmt.Sprintf"
"golang.org/x/tools/internal/stdlib.init" "golang.org/x/tools/internal/stdlib.init#1"
"golang.org/x/tools/internal/typesinternal.init" "golang.org/x/tools/internal/stdlib.init"
"golang.org/x/tools/internal/versions.init" "strings.init"
"golang.org/x/tools/internal/versions.init" "go/types.init"
"golang.org/x/tools/internal/versions.init" "go/ast.init"
"golang.org/x/tools/internal/versions.stripGo" "strings.Cut"
"golang.org/x/tools/internal/versions.Compare" "golang.org/x/tools/internal/versions.stripGo"
"golang.org/x/tools/internal/versions.Compare" "golang.org/x/tools/internal/versions.stripGo"
"golang.org/x/tools/internal/versions.compare" "golang.org/x/tools/internal/versions.parse"
"golang.org/x/tools/internal/versions.compare" "golang.org/x/tools/internal/versions.parse"
"golang.org/x/tools/internal/versions.compare" "golang.org/x/tools/internal/versions.cmpInt"
"golang.org/x/tools/internal/versions.compare" "golang.org/x/tools/internal/versions.cmpInt"
"golang.org/x/tools/internal/versions.compare" "golang.org/x/tools/internal/versions.cmpInt"
"golang.org/x/tools/internal/versions.compare" "strings.Compare"
"golang.org/x/tools/internal/versions.compare" "golang.org/x/tools/internal/versions.cmpInt"
"golang.org/x/tools/internal/versions.Compare" "golang.org/x/tools/internal/versions.compare"
"golang.org/x/tools/internal/versions.init#1" "golang.org/x/tools/internal/versions.Compare"
"golang.org/x/tools/internal/versions.init" "golang.org/x/tools/internal/versions.init#1"
"golang.org/x/tools/internal/versions.init#2" "golang.org/x/tools/internal/versions.Compare"
"golang.org/x/tools/internal/versions.init" "golang.org/x/tools/internal/versions.init#2"
"golang.org/x/tools/internal/versions.init#3" "golang.org/x/tools/internal/versions.Compare"
"golang.org/x/tools/internal/versions.init" "golang.org/x/tools/internal/versions.init#3"
"golang.org/x/tools/internal/typesinternal.init" "golang.org/x/tools/internal/versions.init"
"golang.org/x/tools/internal/typesinternal.init" "go/token.init"
"golang.org/x/tools/internal/typesinternal.init" "reflect.init"
"golang.org/x/tools/internal/typesinternal.init" "unsafe.init"
"golang.org/x/tools/go/types/objectpath.init" "golang.org/x/tools/internal/typesinternal.init"
"golang.org/x/tools/internal/gcimporter.init" "golang.org/x/tools/go/types/objectpath.init"
"golang.org/x/tools/internal/gcimporter.init" "golang.org/x/tools/internal/aliases.init"
"golang.org/x/tools/internal/tokeninternal.init" "fmt.init"
"golang.org/x/tools/internal/tokeninternal.init" "go/token.init"
"golang.org/x/tools/internal/tokeninternal.init" "sort.init"
"golang.org/x/tools/internal/tokeninternal.init" "sync.init"
"golang.org/x/tools/internal/tokeninternal.init" "unsafe.init"
"golang.org/x/tools/internal/gcimporter.init" "golang.org/x/tools/internal/tokeninternal.init"
"golang.org/x/tools/internal/gcimporter.init" "golang.org/x/tools/internal/typesinternal.init"
"golang.org/x/tools/internal/pkgbits.init" "encoding/binary.init"
"golang.org/x/tools/internal/pkgbits.init" "errors.init"
"golang.org/x/tools/internal/pkgbits.init" "fmt.init"
"golang.org/x/tools/internal/pkgbits.init" "go/constant.init"
"golang.org/x/tools/internal/pkgbits.init" "go/token.init"
"golang.org/x/tools/internal/pkgbits.init" "io.init"
"golang.org/x/tools/internal/pkgbits.init" "math/big.init"
"golang.org/x/tools/internal/pkgbits.init" "os.init"
"golang.org/x/tools/internal/pkgbits.init" "runtime.init"
"golang.org/x/tools/internal/pkgbits.init" "strings.init"
"golang.org/x/tools/internal/pkgbits.init" "bytes.init"
"hash.init" "io.init"
"crypto.init" "hash.init"
"crypto.init" "io.init"
"crypto.init" "strconv.init"
"crypto/md5.init" "crypto.init"
"crypto/md5.init" "encoding/binary.init"
"crypto/md5.init" "errors.init"
"crypto/md5.init" "hash.init"
"crypto/md5.init" "math/bits.init"
"crypto/md5.init#1" "crypto.RegisterHash"
"crypto/md5.init" "crypto/md5.init#1"
"golang.org/x/tools/internal/pkgbits.init" "crypto/md5.init"
"golang.org/x/tools/internal/pkgbits.init" "strconv.init"
"golang.org/x/tools/internal/pkgbits.init" "errors.New"
"golang.org/x/tools/internal/gcimporter.init" "golang.org/x/tools/internal/pkgbits.init"
"golang.org/x/tools/go/gcexportdata.init" "golang.org/x/tools/internal/gcimporter.init"
"golang.org/x/tools/go/gcexportdata.init" "os.init"
"golang.org/x/tools/go/packages.init" "golang.org/x/tools/go/gcexportdata.init"
"golang.org/x/tools/go/packages.init" "golang.org/x/tools/internal/typesinternal.init"
"golang.org/x/tools/go/packages.init" "golang.org/x/tools/internal/versions.init"
"golang.org/x/tools/go/packages.init" "os.Getenv"
"strconv.ParseBool" "strconv.syntaxError"
"golang.org/x/tools/go/packages.init" "strconv.ParseBool"
"golang.org/x/tools/go/packages.init" "golang.org/x/tools/go/packages.init#1"
"github.com/worldiety/macro/ast/golang.init" "golang.org/x/tools/go/packages.init"
"log/slog.init" "fmt.init"
"log/slog.init" "time.init"
"log/slog.init" "context.init"
"log/slog.init" "io.init"
"log/slog.init" "log/slog/internal/buffer.init"
"log/slog.init" "reflect.init"
"log/slog.init" "slices.init"
"log/slog.init" "strconv.init"
"log/slog.init" "sync.init"
"log/slog.init" "bytes.init"
"log/slog.init" "encoding/json.init"
"log/slog.init" "errors.init"
"log/slog.init" "unicode/utf8.init"
"log/slog.init" "strings.init"
"log/slog.init" "sync/atomic.init"
"log/slog.init" "log.init"
"log/slog.init" "log/internal.init"
"log/slog.init" "log/slog/internal.init"
"log/slog.init" "runtime.init"
"log/slog.init" "encoding.init"
"log/slog.init" "unicode.init"
"log/slog.init" "math.init"
"log/slog.init" "unsafe.init"
"log/slog.init#1" "log/slog.newDefaultHandler"
"log/slog.init#1" "log/slog.New"
"log/slog.init#1" "(*sync/atomic.Pointer[log/slog.Logger]).Store[log/slog.Logger]"
"log/slog.init" "log/slog.init#1"
"github.com/worldiety/macro/ast/golang.init" "log/slog.init"
"github.com/worldiety/macro/ast/golang.init" "regexp.init"
"github.com/worldiety/macro/ast/golang.init" "strings.init"
"github.com/worldiety/macro/ast/golang.init" "os.init"
"github.com/worldiety/macro/ast/golang.init" "path/filepath.init"
"github.com/worldiety/macro/ast/golang.init" "regexp.MustCompile"
"reflect.intFromReg" "(*internal/abi.RegArgs).IntRegArgAddr"
"reflect.intFromReg" "reflect.memmove"
"runtime.isAsyncSafePoint" "runtime.canPreemptM"
"runtime.isAsyncSafePoint" "runtime.findfunc"
"runtime.isAsyncSafePoint" "(runtime.funcInfo).valid"
"runtime.pcdatavalue2" "runtime.pcdatastart"
"runtime.pcdatavalue2" "runtime.pcvalue"
"runtime.isAsyncSafePoint" "runtime.pcdatavalue2"
"runtime.isAsyncSafePoint" "runtime.funcspdelta"
"runtime.isAsyncSafePoint" "runtime.funcdata"
"runtime.isAsyncSafePoint" "runtime.newInlineUnwinder"
"runtime.isAsyncSafePoint" "(*runtime.inlineUnwinder).srcFunc"
"runtime.isAsyncSafePoint" "(runtime.srcFunc).name"
"runtime.isAsyncSafePoint" "runtime.hasPrefix"
"runtime.isAsyncSafePoint" "runtime.hasPrefix"
"runtime.isAsyncSafePoint" "runtime.hasPrefix"
"runtime.isAsyncSafePoint" "(runtime.funcInfo).entry"
"runtime.isAsyncSafePoint" "runtime.throw"
"(*os.File).setWriteDeadline" "(*os.File).checkValid"
"internal/poll.setDeadlineImpl" "(time.Time).IsZero"
"time.Until" "time.runtimeNano"
"time.Until" "time.subMono"
"time.Until" "time.Now"
"time.Until" "(time.Time).Sub"
"internal/poll.setDeadlineImpl" "time.Until"
"internal/poll.setDeadlineImpl" "(*internal/poll.FD).incref"
"internal/poll.setDeadlineImpl" "(*internal/poll.FD).decref"
"internal/poll.setDeadlineImpl" "internal/poll.runtime_pollSetDeadline"
"(*internal/poll.FD).SetWriteDeadline" "internal/poll.setDeadlineImpl"
"(*os.File).setWriteDeadline" "(*internal/poll.FD).SetWriteDeadline"
"(reflect.Value).CanUint" "(reflect.flag).kind"
"(*math/big.Int).Float64" "(math/big.nat).bitLen"
"(*math/big.Int).Float64" "math/big.low64"
"(*math/big.Int).Float64" "(*math/big.Float).SetInt"
"(*math/big.Int).Float64" "(*math/big.Float).Float64"
"(*math/big.Int).Float64" "(math/big.nat).trailingZeroBits"
"(*internal/poll.FD).RawWrite" "(*internal/poll.FD).writeLock"
"(*internal/poll.FD).RawWrite" "(*internal/poll.FD).writeUnlock"
"(*internal/poll.FD).RawWrite" "(*internal/poll.pollDesc).prepareWrite"
"(*internal/poll.FD).RawWrite" "(*internal/poll.pollDesc).waitWrite"
"(*runtime.sigctxt).r21" "(*runtime.sigctxt).regs"
"(*math/rand.Rand).Int63n" "(*math/rand.Rand).Int63"
"(*math/rand.Rand).Int63n" "(*math/rand.Rand).Int63"
"(*math/rand.Rand).Int63n" "(*math/rand.Rand).Int63"
"(*math/rand.Rand).Shuffle" "(*math/rand.Rand).Int63n"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$1"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$2"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$3"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$9"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$4"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$5"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$6"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$7"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$8"
"(*math/rand.Rand).Uint32" "(*math/rand.Rand).Int63"
"(*math/rand.Rand).int31n" "(*math/rand.Rand).Uint32"
"(*math/rand.Rand).int31n" "(*math/rand.Rand).Uint32"
"(*math/rand.Rand).Shuffle" "(*math/rand.Rand).int31n"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$1"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$2"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$3"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$9"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$4"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$5"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$6"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$7"
"(*math/rand.Rand).Shuffle" "internal/reflectlite.Swapper$8"
"reflect.floatFromReg" "reflect.archFloat32FromReg"
"(*os.File).setReadDeadline" "(*os.File).checkValid"
"(*internal/poll.FD).SetReadDeadline" "internal/poll.setDeadlineImpl"
"(*os.File).setReadDeadline" "(*internal/poll.FD).SetReadDeadline"
"(reflect.Value).CanConvert" "(reflect.Value).Type"
"(reflect.Value).CanConvert" "(reflect.Value).Len"
"(reflect.Value).CanConvert" "(reflect.Value).Len"
"(*reflect.rtype).ConvertibleTo" "(*reflect.rtype).common"
"(*reflect.rtype).ConvertibleTo" "(*reflect.rtype).common"
"(*reflect.rtype).ConvertibleTo" "reflect.convertOp"
"(reflect.Value).CanConvert" "(*reflect.rtype).ConvertibleTo"
"(reflect.Value).CanConvert" "(*reflect.rtype).Kind"
"(reflect.Value).CanConvert" "(*reflect.rtype).Len"
"(reflect.Value).CanConvert" "(*reflect.rtype).Elem"
"(reflect.Value).CanConvert" "(*reflect.rtype).Len"
"(reflect.Value).CanConvert" "(*reflect.rtype).Kind"
"(reflect.Value).CanConvert" "(*reflect.rtype).Kind"
"(reflect.Value).CanConvert" "(*reflect.rtype).Elem"
"(reflect.Value).CanConvert" "(*reflect.rtype).Kind"
"(reflect.Value).CanConvert" "(*reflect.rtype).Kind"
"(*reflect.interfaceType).MethodByName" "(*reflect.interfaceType).nameOff"
"(*reflect.interfaceType).MethodByName" "(internal/abi.Name).Name"
"(*reflect.interfaceType).MethodByName" "(*reflect.interfaceType).Method"
"(*internal/poll.FD).WriteMsg" "(*internal/poll.FD).writeLock"
"(*internal/poll.FD).WriteMsg" "(*internal/poll.FD).writeUnlock"
"(*internal/poll.FD).WriteMsg" "(*internal/poll.pollDesc).prepareWrite"
"syscall.SendmsgN" "(*syscall.SockaddrInet6).sockaddr"
"syscall.SendmsgN" "(*syscall.SockaddrInet4).sockaddr"
"syscall.sendmsgN" "(*syscall.Iovec).SetLen"
"syscall.sendmsg" "internal/abi.FuncPCABI0"
"syscall.sendmsg" "syscall.syscall"
"syscall.sendmsg" "syscall.errnoErr"
"syscall.sendmsgN" "syscall.sendmsg"
"syscall.sendmsgN" "(*syscall.Iovec).SetLen"
"syscall.sendmsgN" "(*syscall.Msghdr).SetControllen"
"syscall.SendmsgN" "syscall.sendmsgN"
"syscall.SendmsgN" "(*syscall.SockaddrDatalink).sockaddr"
"syscall.SendmsgN" "(*syscall.SockaddrUnix).sockaddr"
"(*internal/poll.FD).WriteMsg" "syscall.SendmsgN"
"(*internal/poll.FD).WriteMsg" "(*internal/poll.pollDesc).waitWrite"
"(*internal/poll.FD).WriteMsg" "(*internal/poll.pollDesc).pollable"
"(*os.ProcessState).exited" "(syscall.WaitStatus).Exited"
"(*runtime.sigctxt).r19" "(*runtime.sigctxt).regs"
"(*strings.Reader).ReadAt" "errors.New"
"(*os.File).ReadAt" "(*os.File).checkValid"
"(*os.File).ReadAt" "errors.New"
"(*internal/poll.FD).Pread" "(*internal/poll.FD).incref"
"syscall.pread" "internal/abi.FuncPCABI0"
"syscall.pread" "syscall.syscall6"
"syscall.pread" "syscall.errnoErr"
"syscall.Pread" "syscall.pread"
"syscall.Pread" "internal/race.WriteRange"
"syscall.Pread" "internal/race.Acquire"
"syscall.Pread" "syscall.msanWrite"
"syscall.Pread" "syscall.asanWrite"
"(*internal/poll.FD).Pread" "syscall.Pread"
"(*internal/poll.FD).Pread" "(*internal/poll.FD).decref"
"(*internal/poll.FD).Pread" "(*internal/poll.FD).eofError"
"(*os.File).pread" "(*internal/poll.FD).Pread"
"(*os.File).pread" "runtime.KeepAlive"
"(*os.File).ReadAt" "(*os.File).pread"
"(*os.File).ReadAt" "(*os.File).wrapErr"
"(*runtime.sigctxt).r28" "(*runtime.sigctxt).regs"
"(*os.ProcessState).UserTime" "(*os.ProcessState).userTime"
"(*bufio.Reader).collectFragments" "(*bufio.Reader).ReadSlice"
"(*bufio.Reader).collectFragments" "bytes.Clone"
"syscall.execve" "internal/abi.FuncPCABI0"
"syscall.execve" "syscall.rawSyscall"
"syscall.execve" "syscall.errnoErr"
"(time.Time).Hour" "(time.Time).abs"
"runtime.wantAsyncPreempt" "runtime.readgstatus"
"runtime.wantAsyncPreempt" "(runtime.puintptr).ptr"
"(reflect.Value).Method" "(reflect.Value).typ"
"(reflect.Value).Method" "(reflect.Value).typ"
"(reflect.Value).Method" "(*internal/abi.Type).Kind"
"(reflect.Value).Method" "(reflect.Value).typ"
"(reflect.Value).Method" "reflect.toRType"
"(reflect.Value).Method" "(*reflect.rtype).NumMethod"
"(reflect.Value).Method" "(reflect.flag).ro"
"(reflect.Value).Method" "(reflect.Value).typ"
"(reflect.Value).Method" "(reflect.Value).IsNil"
"(*reflect.rtype).IsVariadic" "(*reflect.rtype).Kind"
"(*reflect.rtype).IsVariadic" "(*reflect.rtype).String"
"(*reflect.rtype).IsVariadic" "(*internal/abi.FuncType).IsVariadic"
"(*time.Time).UnmarshalBinary" "errors.New"
"(*time.Time).UnmarshalBinary" "errors.New"
"(*time.Time).UnmarshalBinary" "errors.New"
"(*time.Time).UnmarshalBinary" "(*time.Time).setLoc"
"(*time.Time).UnmarshalBinary" "(*time.Time).unixSec"
"(*time.Time).UnmarshalBinary" "(*time.Location).lookup"
"(*time.Time).UnmarshalBinary" "(*time.Time).setLoc"
"(*time.Time).UnmarshalBinary" "time.FixedZone"
"(*time.Time).UnmarshalBinary" "(*time.Time).setLoc"
"(*regexp.Regexp).ReplaceAllString" "strings.Contains"
"(*regexp.Regexp).ReplaceAllString" "(*regexp.Regexp).replaceAll"
"syscall.pwrite" "internal/abi.FuncPCABI0"
"syscall.pwrite" "syscall.syscall6"
"syscall.pwrite" "syscall.errnoErr"
"(*reflect.rtype).FieldAlign" "(*internal/abi.Type).FieldAlign"
"(time.Time).YearDay" "(time.Time).date"
"(*go/token.FileSet).Read" "(*sync.RWMutex).Lock"
"(*go/token.FileSet).Read" "(*sync/atomic.Pointer[go/token.File]).Store[go/token.File]"
"(*go/token.FileSet).Read" "(*sync.RWMutex).Unlock"
"(*io/fs.PathError).Timeout" "(internal/poll.errNetClosing).Timeout"
"(*io/fs.PathError).Timeout" "(*internal/poll.DeadlineExceededError).Timeout"
"(*io/fs.PathError).Timeout" "(context.deadlineExceededError).Timeout"
"(*io/fs.PathError).Timeout" "(syscall.Errno).Timeout"
"(*os.SyscallError).Timeout" "(internal/poll.errNetClosing).Timeout"
"(*os.SyscallError).Timeout" "(*internal/poll.DeadlineExceededError).Timeout"
"(*os.SyscallError).Timeout" "(context.deadlineExceededError).Timeout"
"(*os.SyscallError).Timeout" "(syscall.Errno).Timeout"
"(*os.SyscallError).Timeout" "(*os.SyscallError).Timeout"
"(*os.SyscallError).Timeout" "(*io/fs.PathError).Timeout"
"(*io/fs.PathError).Timeout" "(*os.SyscallError).Timeout"
"(*io/fs.PathError).Timeout" "(*io/fs.PathError).Timeout"
"(*bytes.Buffer).Next" "(*bytes.Buffer).Len"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Sub"
"(*math/big.Int).modSqrtTonelliShanks" "(math/big.nat).trailingZeroBits"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Rsh"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).SetInt64"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Add"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Add"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Rsh"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Exp"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Exp"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Exp"
"math/big.Jacobi" "(*math/big.Int).String"
"math/big.Jacobi" "fmt.Sprintf"
"math/big.Jacobi" "(*math/big.Int).Set"
"math/big.Jacobi" "(*math/big.Int).Set"
"math/big.Jacobi" "(*math/big.Int).Cmp"
"math/big.Jacobi" "(*math/big.Int).Mod"
"math/big.Jacobi" "(math/big.nat).trailingZeroBits"
"math/big.Jacobi" "(*math/big.Int).Rsh"
"math/big.Jacobi" "(*math/big.Int).Set"
"math/big.Jacobi" "(*math/big.Int).Set"
"(*math/big.Int).modSqrtTonelliShanks" "math/big.Jacobi"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Set"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Mul"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Mod"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Cmp"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Set"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).SetInt64"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).SetBit"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Exp"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Mul"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Mod"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Mul"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Mod"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Mul"
"(*math/big.Int).modSqrtTonelliShanks" "(*math/big.Int).Mod"
"(*runtime.sigctxt).r17" "(*runtime.sigctxt).regs"
"(*os.File).setDeadline" "(*os.File).checkValid"
"(*internal/poll.FD).SetDeadline" "internal/poll.setDeadlineImpl"
"(*os.File).setDeadline" "(*internal/poll.FD).SetDeadline"
"(*os.File).SetDeadline" "(*os.File).setDeadline"
"internal/poll.accept" "syscall.Accept"
"internal/poll.accept" "syscall.CloseOnExec"
"internal/poll.accept" "syscall.SetNonblock"
"internal/poll.accept" "syscall.Close"
"(*log/slog.commonHandler).withAttrs" "log/slog.countEmptyGroups"
"(*log/slog.commonHandler).clone" "slices.Clip[[]byte byte]"
"(*log/slog.commonHandler).clone" "slices.Clip[[]string string]"
"(*log/slog.commonHandler).withAttrs" "(*log/slog.commonHandler).clone"
"(*log/slog.commonHandler).withAttrs" "(*log/slog.commonHandler).newHandleState"
"(*log/slog.commonHandler).withAttrs" "(*log/slog.handleState).free"
"(*log/slog.commonHandler).withAttrs" "(*log/slog/internal/buffer.Buffer).WriteString"
"(*log/slog.commonHandler).withAttrs" "(*log/slog.commonHandler).attrSep"
"(*log/slog.commonHandler).withAttrs" "(*log/slog/internal/buffer.Buffer).Len"
"(*log/slog.commonHandler).withAttrs" "(*log/slog.handleState).openGroups"
"(*log/slog.commonHandler).withAttrs" "(*log/slog.handleState).appendAttrs"
"(*log/slog.commonHandler).withAttrs" "(*log/slog/internal/buffer.Buffer).SetLen"
"(*log/slog.commonHandler).withAttrs" "(*log/slog/internal/buffer.Buffer).String"
"(*log/slog.defaultHandler).WithAttrs" "(*log/slog.commonHandler).withAttrs"
"(*go/scanner.ErrorList).RemoveMultiples" "sort.Sort"
"(*regexp.Regexp).FindAll" "(*regexp.Regexp).allMatches"
"(reflect.Value).CallSlice" "(reflect.flag).mustBe"
"(reflect.Value).CallSlice" "(reflect.flag).mustBeExported"
"(reflect.Value).call" "(reflect.Value).typ"
"(reflect.Value).call" "reflect.methodReceiver"
"(reflect.Value).call" "(*internal/abi.FuncType).NumIn"
"(reflect.Value).call" "(*internal/abi.FuncType).IsVariadic"
"(reflect.Value).call" "(reflect.Value).Kind"
"(reflect.Value).call" "(reflect.Value).Type"
"(reflect.Value).call" "(*internal/abi.FuncType).In"
"(reflect.Value).call" "reflect.toRType"
"(*reflect.rtype).AssignableTo" "(*reflect.rtype).common"
"(*reflect.rtype).AssignableTo" "(*reflect.rtype).common"
"(*reflect.rtype).AssignableTo" "reflect.directlyAssignable"
"(*reflect.rtype).AssignableTo" "(*reflect.rtype).common"
"(*reflect.rtype).AssignableTo" "reflect.implements"
"(reflect.Value).call" "(*reflect.rtype).AssignableTo"
"(reflect.Value).call" "(*reflect.rtype).String"
"(reflect.Value).call" "reflect.stringFor"
"(reflect.Value).call" "(*internal/abi.FuncType).In"
"(reflect.Value).call" "reflect.toRType"
"(reflect.Value).call" "reflect.MakeSlice"
"(reflect.Value).call" "(*internal/abi.FuncType).In"
"(reflect.Value).call" "reflect.toRType"
"(reflect.Value).call" "(*reflect.rtype).Elem"
"(reflect.Value).call" "(*internal/abi.FuncType).NumIn"
"(reflect.Value).call" "(reflect.Value).Type"
"(reflect.Value).call" "(*reflect.rtype).AssignableTo"
"(reflect.Value).call" "(*reflect.rtype).String"
"(reflect.Value).call" "(*reflect.rtype).String"
"(reflect.Value).call" "(reflect.Value).Index"
"(reflect.Value).call" "(reflect.Value).Set"
"(reflect.Value).call" "(*internal/abi.FuncType).NumOut"
"(reflect.Value).call" "reflect.funcLayout"
"(reflect.Value).call" "(*internal/abi.Type).Size"
"(reflect.Value).call" "(*internal/abi.Type).Size"
"(reflect.Value).call" "(*sync.Pool).Get"
"(reflect.Value).call" "reflect.unsafe_New"
"(reflect.Value).call" "reflect.stringFor"
"(*reflect.abiDesc).dump" "(*reflect.abiSeq).dump"
"(*reflect.abiDesc).dump" "(*reflect.abiSeq).dump"
"reflect.dumpPtrBitMap" "(*internal/abi.IntArgRegBitmap).Get"
"(*reflect.abiDesc).dump" "reflect.dumpPtrBitMap"
"(*reflect.abiDesc).dump" "reflect.dumpPtrBitMap"
"(reflect.Value).call" "(*reflect.abiDesc).dump"
"reflect.storeRcvr" "(reflect.Value).typ"
"reflect.storeRcvr" "(*internal/abi.Type).Kind"
"reflect.storeRcvr" "reflect.ifaceIndir"
"(reflect.Value).call" "reflect.storeRcvr"
"(reflect.Value).call" "reflect.storeRcvr"
"(reflect.Value).call" "reflect.storeRcvr"
"(reflect.Value).call" "reflect.storeRcvr"
"(reflect.Value).call" "(reflect.flag).mustBeExported"
"(reflect.Value).call" "(*internal/abi.FuncType).In"
"(reflect.Value).call" "reflect.toRType"
"(reflect.Value).call" "(reflect.Value).assignTo"
"(reflect.Value).call" "(*reflect.abiSeq).stepsForValue"
"(reflect.Value).call" "reflect.align"
"(reflect.Value).call" "reflect.add"
"(reflect.Value).call" "reflect.typedmemmove"
"(reflect.Value).call" "reflect.add"
"reflect.intToReg" "(*internal/abi.RegArgs).IntRegArgAddr"
"reflect.intToReg" "reflect.memmove"
"(reflect.Value).call" "reflect.intToReg"
"(reflect.Value).call" "reflect.add"
"reflect.floatToReg" "reflect.archFloat32ToReg"
"(reflect.Value).call" "reflect.floatToReg"
"(reflect.Value).call" "(*internal/abi.RegArgs).Dump"
"(reflect.Value).call" "runtime.GC"
"(reflect.Value).call" "(*internal/abi.Type).Size"
"(reflect.Value).call" "reflect.call"
"(reflect.Value).call" "runtime.GC"
"(reflect.Value).call" "reflect.typedmemclr"
"(reflect.Value).call" "(*sync.Pool).Put"
"(reflect.Value).call" "reflect.typedmemclrpartial"
"(reflect.Value).call" "(*internal/abi.FuncType).Out"
"(reflect.Value).call" "(*internal/abi.Type).Size"
"(reflect.Value).call" "reflect.toRType"
"(reflect.Value).call" "reflect.Zero"
"(reflect.Value).call" "(*reflect.abiSeq).stepsForValue"
"(reflect.Value).call" "(*internal/abi.Type).Kind"
"(reflect.Value).call" "reflect.add"
"(reflect.Value).call" "reflect.ifaceIndir"
"(reflect.Value).call" "reflect.unsafe_New"
"(reflect.Value).call" "reflect.stringFor"
"(reflect.Value).call" "(*internal/abi.Type).Kind"
"(reflect.Value).call" "(*internal/abi.Type).Kind"
"(reflect.Value).call" "reflect.add"
"(reflect.Value).call" "reflect.intFromReg"
"(reflect.Value).call" "reflect.add"
"(reflect.Value).call" "reflect.add"
"(reflect.Value).call" "reflect.floatFromReg"
"(reflect.Value).CallSlice" "(reflect.Value).call"
"syscall.setsockopt" "internal/abi.FuncPCABI0"
"syscall.setsockopt" "syscall.syscall6"
"syscall.setsockopt" "syscall.errnoErr"
"syscall.SetsockoptLinger" "syscall.setsockopt"
"(*internal/poll.FD).Fchown" "(*internal/poll.FD).incref"
"(*internal/poll.FD).Fchown" "(*internal/poll.FD).decref"
"(*internal/poll.FD).Fchown" "internal/poll.ignoringEINTR"
"(*sync.rlocker).Unlock" "(*sync.RWMutex).RUnlock"
"internal/reflectlite.implements" "(*internal/abi.Type).InterfaceType"
"internal/reflectlite.implements" "internal/reflectlite.toRType"
"internal/reflectlite.implements" "internal/reflectlite.toRType"
"internal/reflectlite.implements" "(*internal/abi.Type).Kind"
"internal/reflectlite.implements" "(*internal/abi.Type).Uncommon"
"internal/reflectlite.implements" "(internal/reflectlite.rtype).nameOff"
"internal/reflectlite.implements" "(internal/reflectlite.rtype).nameOff"
"internal/reflectlite.implements" "(internal/abi.Name).Name"
"internal/reflectlite.implements" "(internal/abi.Name).Name"
"internal/reflectlite.implements" "(internal/abi.Name).IsExported"
"(internal/reflectlite.rtype).typeOff" "internal/reflectlite.resolveTypeOff"
"internal/reflectlite.implements" "(internal/reflectlite.rtype).typeOff"
"internal/reflectlite.implements" "(internal/reflectlite.rtype).typeOff"
"internal/reflectlite.pkgPath" "(internal/abi.Name).ReadVarint"
"internal/reflectlite.pkgPath" "(internal/abi.Name).HasTag"
"internal/reflectlite.pkgPath" "(internal/abi.Name).DataChecked"
"internal/reflectlite.pkgPath" "(internal/abi.Name).ReadVarint"
"internal/reflectlite.pkgPath" "(internal/abi.Name).DataChecked"
"internal/reflectlite.pkgPath" "internal/reflectlite.resolveTypeOff"
"(internal/reflectlite.name).data" "internal/reflectlite.add"
"(internal/reflectlite.name).readVarint" "(internal/reflectlite.name).data"
"(internal/reflectlite.name).name" "(internal/reflectlite.name).readVarint"
"(internal/reflectlite.name).name" "(internal/reflectlite.name).data"
"internal/reflectlite.pkgPath" "(internal/reflectlite.name).name"
"internal/reflectlite.implements" "internal/reflectlite.pkgPath"
"internal/reflectlite.implements" "(internal/abi.Name).Name"
"internal/reflectlite.implements" "internal/reflectlite.pkgPath"
"internal/reflectlite.implements" "(internal/abi.Name).Name"
"internal/reflectlite.implements" "(*internal/abi.UncommonType).Methods"
"internal/reflectlite.implements" "(internal/reflectlite.rtype).nameOff"
"internal/reflectlite.implements" "(internal/reflectlite.rtype).nameOff"
"internal/reflectlite.implements" "(internal/abi.Name).Name"
"internal/reflectlite.implements" "(internal/abi.Name).Name"
"internal/reflectlite.implements" "(internal/abi.Name).IsExported"
"internal/reflectlite.implements" "(internal/reflectlite.rtype).typeOff"
"internal/reflectlite.implements" "(internal/reflectlite.rtype).typeOff"
"internal/reflectlite.implements" "internal/reflectlite.pkgPath"
"internal/reflectlite.implements" "(internal/abi.Name).Name"
"internal/reflectlite.implements" "internal/reflectlite.pkgPath"
"internal/reflectlite.implements" "(internal/reflectlite.rtype).nameOff"
"internal/reflectlite.implements" "(internal/abi.Name).Name"
"syscall.sendto" "internal/abi.FuncPCABI0"
"syscall.sendto" "syscall.syscall6"
"syscall.sendto" "syscall.errnoErr"
"(*runtime.sigctxt).r3" "(*runtime.sigctxt).regs"
"(*regexp.Regexp).ReplaceAll" "bytes.IndexByte"
"(*regexp.Regexp).ReplaceAll" "(*regexp.Regexp).replaceAll"
"(math/big.nat).modW" "(math/big.nat).make"
"(math/big.nat).modW" "math/big.divWVW"
"(*math/big.Int).ProbablyPrime" "(math/big.nat).modW"
"(*math/big.Int).ProbablyPrime" "(math/big.nat).modW"
"(*math/big.Int).ProbablyPrime" "(math/big.nat).modW"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).sub"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).trailingZeroBits"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).shr"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).sub"
"math/rand.NewSource" "math/rand.newSource"
"(math/big.nat).probablyPrimeMillerRabin" "math/rand.NewSource"
"(math/big.nat).probablyPrimeMillerRabin" "math/rand.New"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).bitLen"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).set"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).expNN"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).cmp"
"(math/big.nat).random" "math/big.alias"
"(math/big.nat).random" "(math/big.nat).make"
"(math/big.nat).random" "(math/big.nat).cmp"
"(math/big.nat).random" "(*math/rand.Rand).Uint32"
"(math/big.nat).random" "(*math/rand.Rand).Uint32"
"(math/big.nat).random" "(*math/rand.Rand).Uint32"
"(math/big.nat).random" "(math/big.nat).norm"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).random"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).add"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).cmp"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).sqr"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).div"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).cmp"
"(math/big.nat).probablyPrimeMillerRabin" "(math/big.nat).cmp"
"(*math/big.Int).ProbablyPrime" "(math/big.nat).probablyPrimeMillerRabin"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).cmp"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).cmp"
"(math/big.nat).probablyPrimeLucas" "(*math/big.Int).String"
"(math/big.nat).probablyPrimeLucas" "math/big.Jacobi"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).add"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).trailingZeroBits"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).shr"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).sub"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).setWord"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).setWord"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).setWord"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).bitLen"
"(math/big.nat).sqrt" "(math/big.nat).cmp"
"(math/big.nat).sqrt" "(math/big.nat).set"
"(math/big.nat).sqrt" "math/big.alias"
"(math/big.nat).sqrt" "(math/big.nat).setUint64"
"(math/big.nat).sqrt" "(math/big.nat).bitLen"
"(math/big.nat).sqrt" "(math/big.nat).shl"
"(math/big.nat).sqrt" "(math/big.nat).div"
"(math/big.nat).sqrt" "(math/big.nat).add"
"(math/big.nat).sqrt" "(math/big.nat).shr"
"(math/big.nat).sqrt" "(math/big.nat).cmp"
"(math/big.nat).sqrt" "(math/big.nat).set"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).sqrt"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).sqr"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).cmp"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).bit"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).cmp"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).mul"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).add"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).sub"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).div"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).sqr"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).add"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).div"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).mul"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).add"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).sub"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).div"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).sqr"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).add"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).div"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).mul"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).shl"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).cmp"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).cmp"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).sub"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).div"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).sqr"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).sub"
"(math/big.nat).probablyPrimeLucas" "(math/big.nat).div"
"(*math/big.Int).ProbablyPrime" "(math/big.nat).probablyPrimeLucas"
"syscall.SetsockoptInet4Addr" "syscall.setsockopt"
"(go/constant.boolVal).ExactString" "(go/constant.boolVal).String"
"(*go/types.Func).FullName" "go/types.writeFuncName"
"(*go/types.Func).FullName" "(*bytes.Buffer).String"
"(*math/rand.lockedSource).seed" "math/rand.newSource"
"(*math/rand.lockedSource).seed" "(*math/rand.rngSource).Seed"
"(time.Time).Compare" "(*time.Time).sec"
"(time.Time).Compare" "(*time.Time).sec"
"(time.Time).Compare" "(*time.Time).nsec"
"(time.Time).Compare" "(*time.Time).nsec"
"syscall.mmap" "internal/abi.FuncPCABI0"
"syscall.mmap" "syscall.syscall6X"
"syscall.mmap" "syscall.errnoErr"
"(*math/rand.Rand).Int31" "(*math/rand.Rand).Int63"
"(*runtime/internal/atomic.Uint64).LoadAcquire" "runtime/internal/atomic.LoadAcq64"
"(go/constant.floatVal).ExactString" "(*math/big.Float).Text"
"(reflect.Value).TryRecv" "(reflect.flag).mustBe"
"(reflect.Value).TryRecv" "(reflect.flag).mustBeExported"
"(reflect.Value).TryRecv" "(reflect.Value).recv"
"(*os/exec.Cmd).StdoutPipe" "errors.New"
"(*os/exec.Cmd).StdoutPipe" "errors.New"
"(*os/exec.Cmd).StdoutPipe" "os.Pipe"
"flag.init" "encoding.init"
"flag.init" "errors.init"
"flag.init" "fmt.init"
"flag.init" "io.init"
"flag.init" "os.init"
"flag.init" "reflect.init"
"flag.init" "runtime.init"
"flag.init" "sort.init"
"flag.init" "strconv.init"
"flag.init" "strings.init"
"flag.init" "time.init"
"flag.init" "errors.New"
"flag.init" "errors.New"
"flag.init" "errors.New"
"flag.init" "flag.NewFlagSet"
"flag.init" "flag.init#1"
"command-line-arguments.init" "flag.init"
"command-line-arguments.init" "fmt.init"
"command-line-arguments.init" "github.com/worldiety/macro/ast/golang.init"
"command-line-arguments.init" "log.init"
"command-line-arguments.init" "log/slog.init"
"command-line-arguments.init" "os.init"
"command-line-arguments.init" "path/filepath.init"
"(*os.File).Chdir" "(*os.File).checkValid"
"(*internal/poll.FD).Fchdir" "(*internal/poll.FD).incref"
"(*internal/poll.FD).Fchdir" "(*internal/poll.FD).decref"
"syscall.Fchdir" "internal/abi.FuncPCABI0"
"syscall.Fchdir" "syscall.syscall"
"syscall.Fchdir" "syscall.errnoErr"
"(*internal/poll.FD).Fchdir" "syscall.Fchdir"
"(*os.File).Chdir" "(*internal/poll.FD).Fchdir"
"(*os.File).Chdir" "(*os.File).wrapErr"
"(*runtime.sigctxt).r8" "(*runtime.sigctxt).regs"
"(*os.File).chmod" "(*os.File).checkValid"
"(*os.File).chmod" "os.syscallMode"
"(*os.File).chmod" "(*internal/poll.FD).Fchmod"
"(*os.File).chmod" "(*os.File).wrapErr"
"(*os.File).Chmod" "(*os.File).chmod"
"(*runtime.sigctxt).r13" "(*runtime.sigctxt).regs"
"(*os.rawConn).Write" "(*os.File).checkValid"
"(*os.rawConn).Write" "(*internal/poll.FD).RawWrite"
"(*os.rawConn).Write" "runtime.KeepAlive"
"(*os.File).Sync" "(*os.File).checkValid"
"(*internal/poll.FD).Fsync" "(*internal/poll.FD).incref"
"(*internal/poll.FD).Fsync" "(*internal/poll.FD).decref"
"(*internal/poll.FD).Fsync" "internal/poll.ignoringEINTR"
"(*os.File).Sync" "(*internal/poll.FD).Fsync"
"(*os.File).Sync" "(*os.File).wrapErr"
"(*reflect.rtype).Align" "(*internal/abi.Type).Align"
"(*runtime.sigctxt).pushCall" "(*runtime.sigctxt).sp"
"(*runtime.sigctxt).pushCall" "(*runtime.sigctxt).set_sp"
"(*runtime.sigctxt).pushCall" "(*runtime.sigctxt).lr"
"(*runtime.sigctxt).pushCall" "(*runtime.sigctxt).r29"
"(*runtime.sigctxt).pushCall" "(*runtime.sigctxt).set_lr"
"(*runtime.sigctxt).pushCall" "(*runtime.sigctxt).set_pc"
"(*bufio.Reader).ReadBytes" "(*bufio.Reader).collectFragments"
"(*math/big.Rat).RatString" "(*math/big.Rat).IsInt"
"(*math/big.Rat).RatString" "(*math/big.Int).String"
"(*math/big.Rat).RatString" "(*math/big.Rat).String"
"(*log/slog.commonHandler).withGroup" "(*log/slog.commonHandler).clone"
"(*log/slog.defaultHandler).WithGroup" "(*log/slog.commonHandler).withGroup"
"(*regexp.Regexp).ExpandString" "(*regexp.Regexp).expand"
"(*math/big.Rat).FloatString" "(*math/big.Rat).IsInt"
"(*math/big.Rat).FloatString" "(*math/big.Int).Append"
"(*math/big.Rat).FloatString" "(math/big.nat).div"
"(*math/big.Rat).FloatString" "(math/big.nat).setUint64"
"(*math/big.Rat).FloatString" "(math/big.nat).expNN"
"(*math/big.Rat).FloatString" "(math/big.nat).mul"
"(*math/big.Rat).FloatString" "(math/big.nat).div"
"(*math/big.Rat).FloatString" "(math/big.nat).add"
"(*math/big.Rat).FloatString" "(math/big.nat).cmp"
"(*math/big.Rat).FloatString" "(math/big.nat).add"
"(*math/big.Rat).FloatString" "(math/big.nat).cmp"
"(*math/big.Rat).FloatString" "(math/big.nat).add"
"(*math/big.Rat).FloatString" "(math/big.nat).sub"
"(*math/big.Rat).FloatString" "(math/big.nat).utoa"
"(*math/big.Rat).FloatString" "(math/big.nat).utoa"
"(reflect.Value).Clear" "(reflect.Value).Kind"
"(reflect.Value).Clear" "(reflect.Value).typ"
"(reflect.Value).Clear" "reflect.typedarrayclear"
"(reflect.Value).Clear" "(reflect.Value).typ"
"(reflect.Value).Clear" "(reflect.Value).pointer"
"(reflect.Value).Clear" "reflect.mapclear"
"(reflect.Value).Clear" "(reflect.Value).Kind"
"(*internal/poll.FD).ReadDirent" "(*internal/poll.FD).incref"
"(*internal/poll.FD).ReadDirent" "(*internal/poll.FD).decref"
"(*internal/poll.FD).ReadDirent" "internal/poll.ignoringEINTRIO"
"(*internal/poll.FD).ReadDirent" "(*internal/poll.pollDesc).waitRead"
"(*internal/poll.FD).ReadDirent" "(*internal/poll.pollDesc).pollable"
"(*regexp.Regexp).ReplaceAllFunc" "(*regexp.Regexp).replaceAll"
"(*golang.org/x/tools/internal/event/keys.Value).Get" "(golang.org/x/tools/internal/event/label.Label).Valid"
"(*golang.org/x/tools/internal/event/keys.Value).Get" "(*golang.org/x/tools/internal/event/keys.Value).From"
"(golang.org/x/tools/internal/event/core.Event).Find" "(golang.org/x/tools/internal/event/label.Label).Key"
"(golang.org/x/tools/internal/event/core.Event).Find" "(golang.org/x/tools/internal/event/label.Label).Key"
"(*golang.org/x/tools/internal/event/keys.Value).Get" "(golang.org/x/tools/internal/event/core.Event).Find"
"(*runtime/internal/atomic.Pointer[runtime._defer]).CompareAndSwap[runtime._defer]" "(*runtime/internal/atomic.UnsafePointer).CompareAndSwap"
"(*go/token.File).MergeLine" "fmt.Sprintf"
"(*go/token.File).MergeLine" "(*sync.Mutex).Lock"
"(*go/token.File).MergeLine" "(*sync.Mutex).Unlock"
"(*go/token.File).MergeLine" "fmt.Sprintf"
"(time.Time).MarshalBinary" "(time.Time).Location"
"(time.Time).MarshalBinary" "(*time.Time).sec"
"(time.Time).MarshalBinary" "(*time.Time).nsec"
"(time.Time).MarshalBinary" "(time.Time).Zone"
"(time.Time).MarshalBinary" "errors.New"
"(go/constant.int64Val).ExactString" "(go/constant.int64Val).String"
"(*runtime.sigctxt).r16" "(*runtime.sigctxt).regs"
"(*os/exec.Cmd).StdinPipe" "errors.New"
"(*os/exec.Cmd).StdinPipe" "errors.New"
"(*os/exec.Cmd).StdinPipe" "os.Pipe"
"(*regexp.Regexp).FindStringIndex" "(*regexp.Regexp).doExecute"
"(*regexp.Regexp).MatchReader" "(*regexp.Regexp).doMatch"
"(*os.ProcessState).ExitCode" "(syscall.WaitStatus).ExitStatus"
"(*sync/atomic.Pointer[go/token.File]).CompareAndSwap[go/token.File]" "sync/atomic.CompareAndSwapPointer"
"(*go/token.FileSet).RemoveFile" "(*sync/atomic.Pointer[go/token.File]).CompareAndSwap[go/token.File]"
"(*go/token.FileSet).RemoveFile" "(*sync.RWMutex).Lock"
"(*go/token.FileSet).RemoveFile" "(*sync.RWMutex).Unlock"
"(*go/token.FileSet).RemoveFile" "go/token.searchFiles"
"(*sync/atomic.Pointer[internal/godebug.value]).CompareAndSwap[internal/godebug.value]" "sync/atomic.CompareAndSwapPointer"
"(reflect.Value).MethodByName" "(reflect.Value).typ"
"(reflect.Value).MethodByName" "(reflect.Value).typ"
"(reflect.Value).MethodByName" "reflect.toRType"
"(*reflect.rtype).MethodByName" "(*reflect.rtype).Kind"
"(*reflect.rtype).MethodByName" "(*reflect.interfaceType).MethodByName"
"(*reflect.rtype).MethodByName" "(*reflect.rtype).uncommon"
"(*reflect.rtype).MethodByName" "(*internal/abi.UncommonType).ExportedMethods"
"(*reflect.rtype).MethodByName" "(*reflect.rtype).nameOff"
"(*reflect.rtype).MethodByName" "(internal/abi.Name).Name"
"(*reflect.rtype).MethodByName" "(*reflect.rtype).Method"
"(*reflect.rtype).MethodByName" "(*reflect.rtype).nameOff"
"(*reflect.rtype).MethodByName" "(internal/abi.Name).Name"
"(reflect.Value).MethodByName" "(*reflect.rtype).MethodByName"
"(reflect.Value).MethodByName" "(reflect.Value).Method"
"(*runtime/internal/atomic.Uint64).StoreRelease" "runtime/internal/atomic.StoreRel64"
"(*runtime/internal/atomic.UnsafePointer).Store" "runtime/internal/atomic.storePointer"
"(*runtime/internal/atomic.Pointer[runtime._defer]).Store[runtime._defer]" "(*runtime/internal/atomic.UnsafePointer).Store"
"(log/slog.Value).Equal" "(log/slog.Value).Kind"
"(log/slog.Value).Equal" "(log/slog.Value).Kind"
"(log/slog.Value).Equal" "(log/slog.Value).str"
"(log/slog.Value).Equal" "(log/slog.Value).str"
"(log/slog.Value).Equal" "(log/slog.Value).float"
"(log/slog.Value).Equal" "(log/slog.Value).float"
"(log/slog.Value).Equal" "(log/slog.Value).time"
"(log/slog.Value).Equal" "(log/slog.Value).time"
"(log/slog.Value).Equal" "(time.Time).Equal"
"(log/slog.Value).Equal" "(log/slog.Value).group"
"(log/slog.Value).Equal" "(log/slog.Value).group"
"(log/slog.Value).Equal" "slices.EqualFunc[[]log/slog.Attr []log/slog.Attr log/slog.Attr log/slog.Attr]"
"(log/slog.Value).Equal" "fmt.Sprintf"
"(log/slog.Attr).Equal" "(log/slog.Value).Equal"
"slices.EqualFunc[[]log/slog.Attr []log/slog.Attr log/slog.Attr log/slog.Attr]" "(log/slog.Attr).Equal"
"(*go/types.Interface).Embedded" "go/types.asNamed"
"(*math/big.Int).Bit" "(math/big.nat).sub"
"(*math/big.Int).Bit" "(math/big.nat).bit"
"(*math/big.Int).Bit" "(math/big.nat).bit"
"(*internal/poll.FD).SetsockoptByte" "(*internal/poll.FD).incref"
"(*internal/poll.FD).SetsockoptByte" "(*internal/poll.FD).decref"
"syscall.SetsockoptByte" "syscall.setsockopt"
"(*internal/poll.FD).SetsockoptByte" "syscall.SetsockoptByte"
"runtime.sighandler" "runtime.getg"
"(*runtime.sigctxt).pc" "(*runtime.sigctxt).regs"
"(*runtime.sigctxt).sigpc" "(*runtime.sigctxt).pc"
"runtime.sighandler" "(*runtime.sigctxt).sigpc"
"(*runtime.sigctxt).sigsp" "(*runtime.sigctxt).sp"
"runtime.sighandler" "(*runtime.sigctxt).sigsp"
"(*runtime.sigctxt).siglr" "(*runtime.sigctxt).lr"
"runtime.sighandler" "(*runtime.sigctxt).siglr"
"runtime.sigprof" "(*runtime/internal/atomic.Int32).Load"
"runtime.sigprof" "runtime.findfunc"
"runtime.sigprof" "(runtime.funcInfo).valid"
"runtime.sigprof" "runtime.getg"
"runtime.sigprof" "runtime.funcname"
"runtime.sigprof" "runtime.hasPrefix"
"runtime.sigprof" "(*runtime/internal/atomic.Uint32).Load"
"runtime.sigprof" "runtime.tracebackPCs"
"runtime.sigprof" "runtime.usesLibcall"
"runtime.sigprof" "(*runtime.unwinder).initAt"
"runtime.sigprof" "(runtime.guintptr).ptr"
"runtime.sigprof" "(*runtime.unwinder).initAt"
"runtime.sigprof" "(*runtime.unwinder).initAt"
"runtime.sigprof" "(*runtime.unwinder).initAt"
"runtime.sigprof" "runtime.inVDSOPage"
"runtime.sigprof" "(*runtime/internal/atomic.Int32).Load"
"runtime.sigprof" "internal/abi.FuncPCABIInternal"
"runtime.sigprof" "internal/abi.FuncPCABIInternal"
"runtime.sigprof" "internal/abi.FuncPCABIInternal"
"runtime.sigprof" "internal/abi.FuncPCABIInternal"
"runtime.sigprof" "runtime.getg"
"(*runtime.cpuProfile).add" "runtime.osyield"
"(*runtime.cpuProfile).add" "(*runtime/internal/atomic.Int32).Load"
"(*runtime.cpuProfile).add" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"(*runtime.cpuProfile).add" "(*runtime/internal/atomic.Uint32).Store"
"(*runtime.cpuProfile).add" "(*runtime.cpuProfile).addExtra"
"(*runtime.cpuProfile).add" "runtime.nanotime"
"(*runtime.cpuProfile).add" "(*runtime.profBuf).write"
"runtime.sigprof" "(*runtime.cpuProfile).add"
"runtime.traceCPUSample" "runtime.traceEnabled"
"runtime.traceCPUSample" "(*runtime/internal/atomic.Uintptr).Load"
"runtime.traceCPUSample" "(*runtime/internal/atomic.Uintptr).Add"
"runtime.traceCPUSample" "(*runtime/internal/atomic.Uintptr).Load"
"runtime.traceCPUSample" "runtime.traceClockNow"
"runtime.traceCPUSample" "(*runtime/internal/atomic.Uintptr).Add"
"runtime.traceCPUSample" "runtime.osyield"
"(*runtime/internal/atomic.Pointer[runtime.profBuf]).Load[runtime.profBuf]" "(*runtime/internal/atomic.UnsafePointer).Load"
"runtime.traceCPUSample" "(*runtime/internal/atomic.Pointer[runtime.profBuf]).Load[runtime.profBuf]"
"runtime.traceCPUSample" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.traceCPUSample" "(*runtime.profBuf).write"
"runtime.traceCPUSample" "(*runtime/internal/atomic.Uint32).Store"
"runtime.traceCPUSample" "(*runtime/internal/atomic.Uintptr).Add"
"runtime.sigprof" "runtime.traceCPUSample"
"runtime.sigprof" "(runtime.puintptr).ptr"
"runtime.sighandler" "runtime.sigprof"
"runtime.sighandler" "runtime.validSIGPROF"
"runtime.sighandler" "runtime.noescape"
"runtime.sighandler" "runtime.runPerThreadSyscall"
"runtime.doSigPreempt" "runtime.wantAsyncPreempt"
"runtime.doSigPreempt" "(*runtime.sigctxt).sigpc"
"runtime.doSigPreempt" "(*runtime.sigctxt).sigsp"
"runtime.doSigPreempt" "(*runtime.sigctxt).siglr"
"runtime.doSigPreempt" "runtime.isAsyncSafePoint"
"runtime.doSigPreempt" "(*runtime/internal/atomic.Uint32).Add"
"runtime.doSigPreempt" "(*runtime/internal/atomic.Uint32).Store"
"runtime.doSigPreempt" "internal/abi.FuncPCABI0"
"runtime.doSigPreempt" "(*runtime.sigctxt).pushCall"
"runtime.doSigPreempt" "(*runtime/internal/atomic.Int32).Add"
"runtime.sighandler" "runtime.doSigPreempt"
"(*runtime.sigctxt).sigFromUser" "(*runtime.sigctxt).sigcode"
"runtime.sighandler" "(*runtime.sigctxt).sigFromUser"
"runtime.sighandler" "(*runtime.sigctxt).sigpc"
"runtime.isAbortPC" "runtime.findfunc"
"runtime.isAbortPC" "(runtime.funcInfo).valid"
"runtime.sighandler" "runtime.isAbortPC"
"runtime.sighandler" "(*runtime.sigctxt).sigFromUser"
"runtime.sighandler" "(*runtime.sigctxt).sigcode"
"runtime.sighandler" "(*runtime.sigctxt).fault"
"runtime.sighandler" "(*runtime.sigctxt).sigpc"
"runtime.sighandler" "(*runtime.sigctxt).preparePanic"
"runtime.sighandler" "(*runtime.sigctxt).sigFromUser"
"runtime.sigsend" "(*runtime/internal/atomic.Uint32).Add"
"runtime.sigsend" "runtime/internal/atomic.Load"
"runtime.sigsend" "(*runtime/internal/atomic.Uint32).Add"
"runtime.sigsend" "(*runtime/internal/atomic.Uint32).Add"
"runtime.sigsend" "runtime/internal/atomic.Cas"
"runtime.sigsend" "(*runtime/internal/atomic.Uint32).Load"
"runtime.sigsend" "(*runtime/internal/atomic.Uint32).Add"
"runtime.sigsend" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.sigsend" "(*runtime/internal/atomic.Uint32).CompareAndSwap"
"runtime.sigsend" "runtime.throw"
"runtime.sigNoteWakeup" "runtime.write"
"runtime.sigsend" "runtime.sigNoteWakeup"
"runtime.sigsend" "runtime.notewakeup"
"runtime.sighandler" "runtime.sigsend"
"runtime.sighandler" "(*runtime.sigctxt).sigFromUser"
"runtime.signal_ignored" "runtime/internal/atomic.Load"
"runtime.sighandler" "runtime.signal_ignored"
"runtime.sighandler" "runtime.dieFromSignal"
"runtime.sighandler" "(*runtime.guintptr).set"
"runtime.sighandler" "(*runtime/internal/atomic.Int32).Load"
"runtime.sighandler" "runtime.startpanic_m"
"runtime.fatalsignal" "runtime.isSecureMode"
"runtime.fatalsignal" "runtime.exit"
"runtime.fatalsignal" "(*runtime.sigctxt).sigpc"
"runtime.fatalsignal" "(*runtime.sigctxt).sigcode"
"runtime.fatalsignal" "(*runtime.sigctxt).fault"
"runtime.fatalsignal" "(*runtime.sigctxt).sigpc"
"runtime.sighandler" "runtime.fatalsignal"
"runtime.sighandler" "runtime.gotraceback"
"runtime.sighandler" "runtime.goroutineheader"
"runtime.sighandler" "(*runtime.sigctxt).sigpc"
"runtime.sighandler" "(*runtime.sigctxt).sigsp"
"runtime.sighandler" "(*runtime.sigctxt).siglr"
"runtime.sighandler" "runtime.tracebacktrap"
"runtime.sighandler" "(*runtime/internal/atomic.Int32).Load"
"runtime.sighandler" "runtime.goroutineheader"
"runtime.sighandler" "runtime.traceback"
"runtime.dumpregs" "(*runtime.sigctxt).r0"
"(*runtime.sigctxt).r1" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r1"
"(*runtime.sigctxt).r2" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r2"
"runtime.dumpregs" "(*runtime.sigctxt).r3"
"(*runtime.sigctxt).r4" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r4"
"runtime.dumpregs" "(*runtime.sigctxt).r5"
"(*runtime.sigctxt).r6" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r6"
"(*runtime.sigctxt).r7" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r7"
"runtime.dumpregs" "(*runtime.sigctxt).r8"
"(*runtime.sigctxt).r9" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r9"
"runtime.dumpregs" "(*runtime.sigctxt).r10"
"(*runtime.sigctxt).r11" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r11"
"(*runtime.sigctxt).r12" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r12"
"runtime.dumpregs" "(*runtime.sigctxt).r13"
"(*runtime.sigctxt).r14" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r14"
"runtime.dumpregs" "(*runtime.sigctxt).r15"
"runtime.dumpregs" "(*runtime.sigctxt).r16"
"runtime.dumpregs" "(*runtime.sigctxt).r17"
"runtime.dumpregs" "(*runtime.sigctxt).r18"
"runtime.dumpregs" "(*runtime.sigctxt).r19"
"(*runtime.sigctxt).r20" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r20"
"runtime.dumpregs" "(*runtime.sigctxt).r21"
"(*runtime.sigctxt).r22" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r22"
"(*runtime.sigctxt).r23" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r23"
"(*runtime.sigctxt).r24" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r24"
"(*runtime.sigctxt).r25" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r25"
"(*runtime.sigctxt).r26" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r26"
"(*runtime.sigctxt).r27" "(*runtime.sigctxt).regs"
"runtime.dumpregs" "(*runtime.sigctxt).r27"
"runtime.dumpregs" "(*runtime.sigctxt).r28"
"runtime.dumpregs" "(*runtime.sigctxt).r29"
"runtime.dumpregs" "(*runtime.sigctxt).lr"
"runtime.dumpregs" "(*runtime.sigctxt).sp"
"runtime.dumpregs" "(*runtime.sigctxt).pc"
"runtime.dumpregs" "(*runtime.sigctxt).fault"
"runtime.sighandler" "runtime.dumpregs"
"runtime.sighandler" "(*runtime/internal/atomic.Int32).Load"
"runtime.sighandler" "runtime.readgstatus"
"runtime.sighandler" "runtime.tracebackothers"
"runtime.sighandler" "(*runtime/internal/atomic.Int32).CompareAndSwap"
"runtime.sighandler" "runtime.printDebugLog"
"runtime.sighandler" "runtime.exit"
"runtime.sighandler" "(*runtime/internal/atomic.Int32).Load"
"runtime.sighandler" "runtime.mcount"
"runtime.sighandler" "(*runtime/internal/atomic.Uint32).Load"
"runtime.sighandler" "(*runtime/internal/atomic.Int32).Add"
"runtime.sighandler" "runtime.raiseproc"
"runtime.sighandler" "runtime.printDebugLog"
"runtime.sighandler" "runtime.crash"
"runtime.sighandler" "runtime.usleep"
"runtime.sighandler" "runtime.usleep"
"runtime.sighandler" "(*runtime/internal/atomic.Int32).Load"
"runtime.sighandler" "runtime.mcount"
"runtime.sighandler" "(*runtime/internal/atomic.Uint32).Load"
"(*internal/poll.FD).WaitWrite" "(*internal/poll.pollDesc).waitWrite"
"(*go/token.FileSet).Write" "(*sync.RWMutex).Lock"
"(*go/token.FileSet).Write" "(*sync.Mutex).Lock"
"(*go/token.FileSet).Write" "(*sync.Mutex).Unlock"
"(*go/token.FileSet).Write" "(*sync.RWMutex).Unlock"
"(*os.unixDirent).Info" "os.Lstat"
"(*time.Time).GobDecode" "(*time.Time).UnmarshalBinary"
"crypto/md5.consumeUint32" "(encoding/binary.bigEndian).Uint32"
"(*os.File).SetWriteDeadline" "(*os.File).setWriteDeadline"
"(*os.File).Seek" "(*os.File).checkValid"
"(*os.File).seek" "(*os.dirInfo).close"
"(*internal/poll.FD).Seek" "(*internal/poll.FD).incref"
"(*internal/poll.FD).Seek" "(*internal/poll.FD).decref"
"(*internal/poll.FD).Seek" "syscall.Seek"
"(*os.File).seek" "(*internal/poll.FD).Seek"
"(*os.File).seek" "runtime.KeepAlive"
"(*os.File).Seek" "(*os.File).seek"
"(*os.File).Seek" "(*os.File).wrapErr"
"(reflect.Value).Send" "(reflect.flag).mustBe"
"(reflect.Value).Send" "(reflect.flag).mustBeExported"
"(reflect.Value).Send" "(reflect.Value).send"
"(time.Time).UnixMicro" "(*time.Time).unixSec"
"(time.Time).UnixMicro" "(*time.Time).nsec"
"(reflect.Value).TrySend" "(reflect.flag).mustBe"
"(reflect.Value).TrySend" "(reflect.flag).mustBeExported"
"(reflect.Value).TrySend" "(reflect.Value).send"
"(*sync.Mutex).TryLock" "sync/atomic.CompareAndSwapInt32"
"(*sync.Mutex).TryLock" "internal/race.Acquire"
"os/exec.Command$1" "(*os.File).WriteString"
"os/exec.Command$1" "(*os.File).Write"
"os/exec.Command$1" "(*os.File).WriteString"
"(*math/big.Int).Bytes" "(math/big.nat).bytes"
"(go/constant.intVal).ExactString" "(go/constant.intVal).String"
"(*sync/atomic.Int32).CompareAndSwap" "sync/atomic.CompareAndSwapInt32"
"(*go/types.Scope).Innermost" "(*go/types.Scope).Contains"
"(*go/types.Scope).Innermost" "(*go/types.Scope).Innermost"
"(*go/types.Scope).Innermost" "(*go/types.Scope).Contains"
"(*go/types.Scope).Innermost" "(*go/types.Scope).Innermost"
"(reflect.Value).CanFloat" "(reflect.flag).kind"
"math/big.newFloat" "(math/big.nat).make"
"(encoding/json.Number).Int64" "strconv.ParseInt"
"(*bufio.Reader).Peek" "(*bufio.Reader).fill"
"(*bufio.Reader).Peek" "(*bufio.Reader).readErr"
"(*internal/abi.Type).StructType" "(*internal/abi.Type).Kind"
"(internal/reflectlite.rtype).NumField" "(*internal/abi.Type).StructType"
"(*math/rand.Rand).Int31n" "(*math/rand.Rand).Int31"
"(*math/rand.Rand).Int31n" "(*math/rand.Rand).Int31"
"(*math/rand.Rand).Int31n" "(*math/rand.Rand).Int31"
"(*math/rand.Rand).Intn" "(*math/rand.Rand).Int31n"
"(*math/rand.Rand).Intn" "(*math/rand.Rand).Int63n"
"(*math/rand.Rand).Perm" "(*math/rand.Rand).Intn"
"(*os.ProcessState).systemTime" "(*syscall.Timeval).Nano"
"(*math/big.Rat).FloatPrec" "(*math/big.Rat).Denom"
"(*math/big.Rat).FloatPrec" "(math/big.nat).trailingZeroBits"
"(*math/big.Rat).FloatPrec" "(math/big.nat).shr"
"(*math/big.Rat).FloatPrec" "(math/big.nat).div"
"(*math/big.Rat).FloatPrec" "(math/big.nat).sqr"
"(*math/big.Rat).FloatPrec" "(math/big.nat).div"
"(*math/big.Rat).FloatPrec" "(math/big.nat).set"
"(*math/big.Rat).FloatPrec" "(math/big.nat).div"
"(*math/big.Rat).FloatPrec" "(math/big.nat).cmp"
"(*math/big.Rat).FloatPrec" "(math/big.nat).set"
"(*internal/poll.FD).ReadFromInet6" "(*internal/poll.FD).readLock"
"(*internal/poll.FD).ReadFromInet6" "(*internal/poll.FD).readUnlock"
"(*internal/poll.FD).ReadFromInet6" "(*internal/poll.pollDesc).prepareRead"
"(*internal/poll.FD).ReadFromInet6" "internal/syscall/unix.RecvfromInet6"
"(*internal/poll.FD).ReadFromInet6" "(*internal/poll.FD).eofError"
"(*internal/poll.FD).ReadFromInet6" "(*internal/poll.pollDesc).waitRead"
"(*internal/poll.FD).ReadFromInet6" "(*internal/poll.pollDesc).pollable"
"(*go/token.File).Lines" "(*sync.Mutex).Lock"
"(*go/token.File).Lines" "(*sync.Mutex).Unlock"
"(*internal/poll.FD).GetsockoptInt" "(*internal/poll.FD).incref"
"(*internal/poll.FD).GetsockoptInt" "(*internal/poll.FD).decref"
"syscall.getsockopt" "internal/abi.FuncPCABI0"
"syscall.getsockopt" "syscall.syscall6"
"syscall.getsockopt" "syscall.errnoErr"
"syscall.GetsockoptInt" "syscall.getsockopt"
"(*internal/poll.FD).GetsockoptInt" "syscall.GetsockoptInt"
"(*math/big.Int).modSqrt3Mod4Prime" "(*math/big.Int).Add"
"(*math/big.Int).modSqrt3Mod4Prime" "(*math/big.Int).Rsh"
"(*math/big.Int).modSqrt3Mod4Prime" "(*math/big.Int).Exp"
"(*math/rand.runtimeSource).Uint64" "math/rand.runtime_rand"
"crypto/md5.New" "(*crypto/md5.digest).Reset"
"(*os/exec.prefixSuffixSaver).Bytes" "(*bytes.Buffer).Grow"
"(*os/exec.prefixSuffixSaver).Bytes" "(*bytes.Buffer).Write"
"(*os/exec.prefixSuffixSaver).Bytes" "(*bytes.Buffer).WriteString"
"(*os/exec.prefixSuffixSaver).Bytes" "strconv.FormatInt"
"(*os/exec.prefixSuffixSaver).Bytes" "(*bytes.Buffer).WriteString"
"(*os/exec.prefixSuffixSaver).Bytes" "(*bytes.Buffer).WriteString"
"(*os/exec.prefixSuffixSaver).Bytes" "(*bytes.Buffer).Write"
"(*os/exec.prefixSuffixSaver).Bytes" "(*bytes.Buffer).Write"
"(*os/exec.prefixSuffixSaver).Bytes" "(*bytes.Buffer).Bytes"
"(*internal/poll.FD).Ftruncate" "(*internal/poll.FD).incref"
"(*internal/poll.FD).Ftruncate" "(*internal/poll.FD).decref"
"(*internal/poll.FD).Ftruncate" "internal/poll.ignoringEINTR"
"(*reflect.rtype).NumOut" "(*reflect.rtype).Kind"
"(*reflect.rtype).NumOut" "(*reflect.rtype).String"
"(*reflect.rtype).NumOut" "(*internal/abi.FuncType).NumOut"
"(*os.File).Truncate" "(*os.File).checkValid"
"(*os.File).Truncate" "(*internal/poll.FD).Ftruncate"
"(*os.File).Truncate" "(*os.File).wrapErr"
"(internal/reflectlite.rtype).In" "(*internal/abi.Type).FuncType"
"(internal/reflectlite.rtype).In" "(*internal/abi.FuncType).InSlice"
"(internal/reflectlite.rtype).In" "internal/reflectlite.toType"
"(*math/big.Rat).Abs" "(*math/big.Rat).Set"
"(*math/big.Rat).GobEncode" "(math/big.nat).bytes"
"(*math/big.Rat).GobEncode" "(math/big.nat).bytes"
"(*math/big.Rat).GobEncode" "errors.New"
"(*math/big.Rat).GobEncode" "(encoding/binary.bigEndian).PutUint32"
"(*bytes.Reader).ReadAt" "errors.New"
"(*regexp.Regexp).FindAllIndex" "(*regexp.Regexp).allMatches"
"(*sync/atomic.Bool).CompareAndSwap" "sync/atomic.b32"
"(*sync/atomic.Bool).CompareAndSwap" "sync/atomic.b32"
"(*sync/atomic.Bool).CompareAndSwap" "sync/atomic.CompareAndSwapUint32"
"syscall.recvfrom" "internal/abi.FuncPCABI0"
"syscall.recvfrom" "syscall.syscall6"
"syscall.recvfrom" "syscall.errnoErr"
"syscall.Recvfrom" "syscall.recvfrom"
"syscall.Recvfrom" "syscall.anyToSockaddr"
"(*crypto/md5.digest).checkSum" "(encoding/binary.littleEndian).PutUint64"
"(*crypto/md5.digest).checkSum" "(*crypto/md5.digest).Write"
"(*crypto/md5.digest).checkSum" "(encoding/binary.littleEndian).PutUint32"
"(*crypto/md5.digest).checkSum" "(encoding/binary.littleEndian).PutUint32"
"(*crypto/md5.digest).checkSum" "(encoding/binary.littleEndian).PutUint32"
"(*crypto/md5.digest).checkSum" "(encoding/binary.littleEndian).PutUint32"
"(*regexp.Regexp).FindAllStringSubmatch" "(*regexp.Regexp).allMatches"
"(*runtime/internal/atomic.Uint64).Swap" "runtime/internal/atomic.Xchg64"
"(reflect.Value).CanInt" "(reflect.flag).kind"
"(*log/slog.Record).AddAttrs" "(log/slog.Value).isEmptyGroup"
"(*log/slog.Record).AddAttrs" "(log/slog.Attr).isEmpty"
"(*log/slog.Record).AddAttrs" "log/slog.countEmptyGroups"
"(*log/slog.Record).AddAttrs" "slices.Grow[[]log/slog.Attr log/slog.Attr]"
"(*log/slog.Record).AddAttrs" "slices.Clip[[]log/slog.Attr log/slog.Attr]"
"(*log/slog.Record).AddAttrs" "log/slog.String"
"(*log/slog.Record).AddAttrs" "(log/slog.Value).isEmptyGroup"
"(internal/reflectlite.rtype).Implements" "(*internal/abi.Type).Kind"
"(internal/reflectlite.rtype).Implements" "(internal/reflectlite.rtype).common"
"(internal/reflectlite.rtype).Implements" "(internal/reflectlite.rtype).common"
"(internal/reflectlite.rtype).Implements" "internal/reflectlite.implements"
"syscall.SetsockoptIPv6Mreq" "syscall.setsockopt"
"(*math/big.Int).FillBytes" "(math/big.nat).bytes"
"(*os.File).SyscallConn" "(*os.File).checkValid"
"(*os.File).SyscallConn" "os.newRawConn"
"(*math/rand.Rand).Uint64" "(*math/rand.Rand).Uint64"
"(*math/rand.Rand).Uint64" "(*math/rand.Rand).Int63"
"(*math/rand.Rand).Uint64" "(*math/rand.Rand).Int63"
"(*math/rand.Rand).Uint64" "(*math/rand.rngSource).Uint64"
"(*math/rand.Rand).Uint64" "(*math/rand.runtimeSource).Uint64"
"(reflect.Value).Close" "(reflect.flag).mustBe"
"(reflect.Value).Close" "(reflect.flag).mustBeExported"
"(reflect.Value).Close" "(reflect.Value).typ"
"(reflect.Value).Close" "(reflect.Value).pointer"
"(reflect.Value).Close" "reflect.chanclose"
"(*regexp.Regexp).FindReaderSubmatchIndex" "(*regexp.Regexp).doExecute"
"(*regexp.Regexp).FindReaderSubmatchIndex" "(*regexp.Regexp).pad"
"math/big.three" "(*sync.Once).Do"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Rsh"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Lsh"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Exp"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Mul"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Mod"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Mul"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Mod"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Sub"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Mul"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Mod"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Mul"
"(*math/big.Int).modSqrt5Mod8Prime" "(*math/big.Int).Mod"
"(*sync/atomic.Uint64).Swap" "sync/atomic.SwapUint64"
"(*math/big.Float).Rat" "(*math/big.Float).validate"
"(*math/big.Float).Rat" "(*math/big.Rat).SetInt64"
"(*math/big.Float).Rat" "(math/big.nat).shl"
"(*math/big.Float).Rat" "(math/big.nat).set"
"(*math/big.Float).Rat" "(math/big.nat).setUint64"
"(*math/big.Float).Rat" "(math/big.nat).shl"
"(*math/big.Float).Rat" "(*math/big.Rat).norm"
"(*math/big.Float).Rat" "(math/big.nat).set"
"(*math/big.Float).Rat" "math/big.makeAcc"
"(*internal/poll.FD).ReadFrom" "(*internal/poll.FD).readLock"
"(*internal/poll.FD).ReadFrom" "(*internal/poll.FD).readUnlock"
"(*internal/poll.FD).ReadFrom" "(*internal/poll.pollDesc).prepareRead"
"(*internal/poll.FD).ReadFrom" "syscall.Recvfrom"
"(*internal/poll.FD).ReadFrom" "(*internal/poll.FD).eofError"
"(*internal/poll.FD).ReadFrom" "(*internal/poll.pollDesc).waitRead"
"(*internal/poll.FD).ReadFrom" "(*internal/poll.pollDesc).pollable"
"(*math/big.Int).MulRange" "(*math/big.Int).SetInt64"
"(*math/big.Int).MulRange" "(*math/big.Int).SetInt64"
"(math/big.nat).mulRange" "(math/big.nat).setUint64"
"(math/big.nat).mulRange" "(math/big.nat).setUint64"
"(math/big.nat).mulRange" "(math/big.nat).setUint64"
"(math/big.nat).mulRange" "(math/big.nat).setUint64"
"(math/big.nat).mulRange" "(math/big.nat).setUint64"
"(math/big.nat).mulRange" "(math/big.nat).mul"
"(math/big.nat).mulRange" "(math/big.nat).mulRange"
"(math/big.nat).mulRange" "(math/big.nat).mulRange"
"(math/big.nat).mulRange" "(math/big.nat).mul"
"(*math/big.Int).MulRange" "(math/big.nat).mulRange"
"(*math/big.Int).CmpAbs" "(math/big.nat).cmp"
"(go/constant.ratVal).ExactString" "(*math/big.Rat).IsInt"
"(go/constant.ratVal).ExactString" "(*math/big.Rat).Num"
"(go/constant.ratVal).ExactString" "(*math/big.Int).String"
"(go/constant.ratVal).ExactString" "(*math/big.Rat).String"
"(*math/big.Int).GobEncode" "(math/big.nat).bytes"
"(*regexp.Regexp).FindAllSubmatchIndex" "(*regexp.Regexp).allMatches"
"(*internal/abi.Type).ArrayType" "(*internal/abi.Type).Kind"
"(time.Time).Month" "(time.Time).date"
"(*regexp.Regexp).FindStringSubmatch" "(*regexp.Regexp).doExecute"
"(reflect.Value).SetIterKey" "(*reflect.hiter).initialized"
"(reflect.Value).SetIterKey" "reflect.mapiterkey"
"(reflect.Value).SetIterKey" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetIterKey" "(reflect.flag).kind"
"(reflect.Value).SetIterKey" "(reflect.Value).typ"
"(reflect.Value).SetIterKey" "(reflect.flag).mustBeExported"
"(reflect.Value).SetIterKey" "(*internal/abi.Type).Kind"
"(reflect.Value).SetIterKey" "(reflect.Value).typ"
"(reflect.Value).SetIterKey" "(reflect.Value).assignTo"
"(reflect.Value).SetIterKey" "(reflect.Value).typ"
"(reflect.Value).SetIterKey" "reflect.typedmemmove"
"(*math/big.Float).sqrtInverse$1" "(*math/big.Float).Mul"
"(*math/big.Float).sqrtInverse$1" "(*math/big.Float).Mul"
"(*math/big.Float).sqrtInverse$1" "(*math/big.Float).Sub"
"(*math/big.Float).sqrtInverse$1" "(*math/big.Float).Mul"
"(*math/big.Float).sqrtInverse$1" "(*math/big.Float).Set"
"(*internal/poll.FD).ReadMsg" "(*internal/poll.FD).readLock"
"(*internal/poll.FD).ReadMsg" "(*internal/poll.FD).readUnlock"
"(*internal/poll.FD).ReadMsg" "(*internal/poll.pollDesc).prepareRead"
"(*internal/poll.FD).ReadMsg" "syscall.Recvmsg"
"(*internal/poll.FD).ReadMsg" "(*internal/poll.FD).eofError"
"(*internal/poll.FD).ReadMsg" "(*internal/poll.pollDesc).waitRead"
"(*internal/poll.FD).ReadMsg" "(*internal/poll.pollDesc).pollable"
"(*crypto/md5.digest).MarshalBinary" "(encoding/binary.bigEndian).AppendUint32"
"(*crypto/md5.digest).MarshalBinary" "(encoding/binary.bigEndian).AppendUint32"
"(*crypto/md5.digest).MarshalBinary" "(encoding/binary.bigEndian).AppendUint32"
"(*crypto/md5.digest).MarshalBinary" "(encoding/binary.bigEndian).AppendUint32"
"(*crypto/md5.digest).MarshalBinary" "(encoding/binary.bigEndian).AppendUint64"
"(*internal/poll.FD).SetsockoptInet4Addr" "(*internal/poll.FD).incref"
"(*internal/poll.FD).SetsockoptInet4Addr" "(*internal/poll.FD).decref"
"(*internal/poll.FD).SetsockoptInet4Addr" "syscall.SetsockoptInet4Addr"
"(*go/token.File).LineStart" "fmt.Sprintf"
"(*go/token.File).LineStart" "(*sync.Mutex).Lock"
"(*go/token.File).LineStart" "(*sync.Mutex).Unlock"
"(*go/token.File).LineStart" "fmt.Sprintf"
"(*os/exec.Cmd).StderrPipe" "errors.New"
"(*os/exec.Cmd).StderrPipe" "errors.New"
"(*os/exec.Cmd).StderrPipe" "os.Pipe"
"(reflect.Value).Call" "flag.init$1"
"(reflect.Value).Call" "fmt.init$1"
"(reflect.Value).Call" "fmt.init$2"
"(reflect.Value).Call" "log.init$1"
"(reflect.Value).Call" "log/slog.init$1"
"(reflect.Value).Call" "os.Lstat"
"(reflect.Value).Call" "io.init$1"
"(reflect.Value).Call" "runtime.init$1"
"(reflect.Value).Call" "runtime.chansend"
"(reflect.Value).Call" "runtime.chanrecv"
"(reflect.Value).Call" "(*flag.FlagSet).defaultUsage"
"(reflect.Value).Call" "flag.commandLineUsage"
"(reflect.Value).Call" "(*internal/poll.FD).Fchmod$1"
"(reflect.Value).Call" "(*internal/poll.FD).Fchown$1"
"(reflect.Value).Call" "(*internal/poll.FD).Fstat$1"
"(reflect.Value).Call" "(*internal/poll.FD).Fsync$1"
"(reflect.Value).Call" "(*internal/poll.FD).Ftruncate$1"
"(reflect.Value).Call" "syscall.Read"
"(reflect.Value).Call" "syscall.ReadDirent"
"(reflect.Value).Call" "syscall.Write"
"(reflect.Value).Call" "log.init#1$1"
"(reflect.Value).Call" "log/slog/internal/buffer.init$1"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gcimporter.importReader).doType$1"
"(reflect.Value).Call" "(encoding/json.floatEncoder).encode"
"(reflect.Value).Call" "encoding/json.init$1"
"(reflect.Value).Call" "syscall.libc_dup2_trampoline"
"(reflect.Value).Call" "syscall.mmap"
"syscall.munmap" "internal/abi.FuncPCABI0"
"syscall.munmap" "syscall.syscall"
"syscall.munmap" "syscall.errnoErr"
"(reflect.Value).Call" "syscall.munmap"
"(reflect.Value).Call" "internal/poll.init$1"
"(reflect.Value).Call" "syscall.Close"
"(reflect.Value).Call" "syscall.Accept"
"(reflect.Value).Call" "(log/slog.Attr).Equal"
"(reflect.Value).Call" "(log/slog.Value).Resolve$1"
"(reflect.Value).Call" "(*log.Logger).Output$1"
"(reflect.Value).Call" "runtime.chansend$1"
"(reflect.Value).Call" "runtime.chanparkcommit"
"(reflect.Value).Call" "runtime.chanrecv$1"
"(reflect.Value).Call" "runtime.asyncPreempt"
"(reflect.Value).Call" "runtime.asyncPreempt2"
"(reflect.Value).Call" "sync.poolCleanup"
"(reflect.Value).Call" "(reflect.flag).mustBe"
"(reflect.Value).Call" "(reflect.flag).mustBeExported"
"(reflect.Value).Call" "(reflect.Value).call"
"(reflect.Value).Call" "(*fmt.ss).Token$1"
"(reflect.Value).Call" "fmt.notSpace"
"(reflect.Value).Call" "go/types.allNumeric"
"(reflect.Value).Call" "go/types.allInteger"
"(reflect.Value).Call" "go/types.allBoolean"
"(reflect.Value).Call" "go/types.allNumericOrString"
"(reflect.Value).Call" "golang.org/x/tools/internal/packagesinternal.init$1"
"(reflect.Value).Call" "golang.org/x/tools/internal/packagesinternal.init$2"
"(reflect.Value).Call" "golang.org/x/tools/internal/packagesinternal.init$3"
"(reflect.Value).Call" "golang.org/x/tools/internal/packagesinternal.init$4"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.init#1$1"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.init#1$2"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.init#1$3"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.init#1$4"
"(reflect.Value).Call" "time.initLocal"
"(reflect.Value).Call" "time.FixedZone$1"
"(reflect.Value).Call" "syscall.libc_fchdir_trampoline"
"(reflect.Value).Call" "internal/poll.runtime_pollServerInit"
"(reflect.Value).Call" "syscall.libc_close_trampoline"
"(reflect.Value).Call" "syscall.libc_lseek_trampoline"
"(reflect.Value).Call" "syscall.libc_shutdown_trampoline"
"(reflect.Value).Call" "log.init#1$1$1"
"(reflect.Value).Call" "syscall.libc_mmap_trampoline"
"(reflect.Value).Call" "syscall.libc_munmap_trampoline"
"(reflect.Value).Call" "syscall.execve"
"(reflect.Value).Call" "os.newFile$1"
"(reflect.Value).Call" "(*os.file).close"
"(reflect.Value).Call" "os.lstatNolog$1"
"(reflect.Value).Call" "os.statNolog$1"
"(reflect.Value).Call" "unicode.IsSpace"
"(reflect.Value).Call" "(*go/types._TypeSet).IsComparable$1"
"(reflect.Value).Call" "runtime.park_m"
"(reflect.Value).Call" "runtime.throw$1"
"(reflect.Value).Call" "runtime.preemptPark"
"(reflect.Value).Call" "runtime.gopreempt_m"
"(reflect.Value).Call" "(*flag.FlagSet).PrintDefaults$1"
"(reflect.Value).Call" "reflect.cvtInt"
"(reflect.Value).Call" "reflect.cvtIntFloat"
"(reflect.Value).Call" "reflect.cvtIntString"
"(reflect.Value).Call" "reflect.cvtUint"
"(reflect.Value).Call" "reflect.cvtUintFloat"
"(reflect.Value).Call" "reflect.cvtUintString"
"(reflect.Value).Call" "reflect.cvtFloatInt"
"(reflect.Value).Call" "reflect.cvtFloatUint"
"(reflect.Value).Call" "reflect.cvtFloat"
"(reflect.Value).Call" "reflect.cvtComplex"
"(reflect.Value).Call" "reflect.cvtStringBytes"
"(reflect.Value).Call" "reflect.cvtStringRunes"
"(reflect.Value).Call" "reflect.cvtBytesString"
"(reflect.Value).Call" "reflect.cvtRunesString"
"(reflect.Value).Call" "reflect.cvtSliceArrayPtr"
"(reflect.Value).Call" "reflect.cvtSliceArray"
"(reflect.Value).Call" "reflect.cvtDirect"
"(reflect.Value).Call" "reflect.cvtI2I"
"(reflect.Value).Call" "reflect.cvtT2I"
"(reflect.Value).Call" "reflect.methodValueCall"
"(reflect.Value).Call" "internal/godebug.update"
"internal/godebug.newIncNonDefault" "internal/godebug.New"
"internal/godebug.newIncNonDefault" "(*internal/godebug.Setting).Value"
"(reflect.Value).Call" "internal/godebug.newIncNonDefault"
"(reflect.Value).Call" "(*go/types.gcSizes).Alignof$1"
"(reflect.Value).Call" "(*go/types.StdSizes).Alignof$1"
"(reflect.Value).Call" "syscall.copyenv"
"(reflect.Value).Call" "runtime.SetFinalizer$1"
"(reflect.Value).Call" "runtime.SetFinalizer$2"
"(reflect.Value).Call" "time.parseRFC3339[[]byte]$1"
"(reflect.Value).Call" "syscall.libc_fchmod_trampoline"
"(reflect.Value).Call" "syscall.libc_fchown_trampoline"
"(reflect.Value).Call" "syscall.libc_fstat_trampoline"
"(reflect.Value).Call" "syscall.libc_ftruncate_trampoline"
"(reflect.Value).Call" "syscall.libc_getsockopt_trampoline"
"(reflect.Value).Call" "syscall.libc_pread_trampoline"
"(reflect.Value).Call" "syscall.libc_pwrite_trampoline"
"(reflect.Value).Call" "syscall.libc_read_trampoline"
"(reflect.Value).Call" "syscall.libc_recvfrom_trampoline"
"(reflect.Value).Call" "syscall.libc_fcntl_trampoline"
"(reflect.Value).Call" "syscall.libc_setsockopt_trampoline"
"(reflect.Value).Call" "syscall.libc_write_trampoline"
"(reflect.Value).Call" "syscall.libc_sendto_trampoline"
"(reflect.Value).Call" "(*log/slog.handleState).appendNonBuiltIns$1"
"(reflect.Value).Call" "(*log/slog.Level).parse$1"
"(reflect.Value).Call" "syscall.libc_getrlimit_trampoline"
"(reflect.Value).Call" "syscall.libc_setrlimit_trampoline"
"(reflect.Value).Call" "syscall.libc_execve_trampoline"
"(reflect.Value).Call" "syscall.libc_accept_trampoline"
"(reflect.Value).Call" "syscall.libc_getcwd_trampoline"
"(reflect.Value).Call" "log.Printf"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.newLoader$1"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.newLoader$2"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.goListDriver"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.loader).refine$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.loader).refine$2"
"(reflect.Value).Call" "go/types.resolve$1"
"(reflect.Value).Call" "(*go/types.Checker).checkFiles$1"
"(reflect.Value).Call" "go/token.searchFiles$1"
"(reflect.Value).Call" "runtime.fatalthrow$1"
"(reflect.Value).Call" "runtime.goready$1"
"(reflect.Value).Call" "runtime.parkunlock_c"
"(reflect.Value).Call" "runtime.gcResetMarkState"
"(reflect.Value).Call" "runtime.gcStart$1"
"(reflect.Value).Call" "runtime.gcStart$2"
"(reflect.Value).Call" "runtime.gcStart$3"
"(reflect.Value).Call" "reflect.funcLayout$1"
"(reflect.Value).Call" "(*reflect.structType).FieldByName$1"
"(reflect.Value).Call" "reflect.FuncOf$1"
"(reflect.Value).Call" "internal/godebug.update$1"
"(reflect.Value).Call" "(*internal/godebug.Setting).IncNonDefault"
"(reflect.Value).Call" "(reflect.Value).SetBool"
"(reflect.Value).Call" "internal/buildcfg.ParseGOEXPERIMENT$1"
"(reflect.Value).Call" "go/types.allBasic$1"
"(reflect.Value).Call" "go/types.computeInterfaceTypeSet$1"
"(reflect.Value).Call" "go/types.computeInterfaceTypeSet$2"
"(reflect.Value).Call" "time.parseRFC3339[string]$1"
"(reflect.Value).Call" "syscall.libc_dup_trampoline"
"(reflect.Value).Call" "syscall.libc_openat_trampoline"
"(reflect.Value).Call" "syscall.libc_fdopendir_trampoline"
"(reflect.Value).Call" "syscall.libc_closedir_trampoline"
"(reflect.Value).Call" "syscall.libc_readdir_r_trampoline"
"(reflect.Value).Call" "syscall.libc_recvmsg_trampoline"
"(reflect.Value).Call" "syscall.libc_sendmsg_trampoline"
"(reflect.Value).Call" "unicode.ToUpper"
"(reflect.Value).Call" "syscall.libc_lstat_trampoline"
"(reflect.Value).Call" "syscall.libc_stat_trampoline"
"(reflect.Value).Call" "syscall.libc_open_trampoline"
"(reflect.Value).Call" "runtime.callers$1"
"(reflect.Value).Call" "log.Printf$1"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.findExternalDriver$1"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.callDriverOnChunks$1"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.goListDriver$1"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.goListDriver$2"
"(reflect.Value).Call" "(*go/types.Named).expandUnderlying$1"
"(reflect.Value).Call" "(*go/types.Checker).objDecl$1"
"(reflect.Value).Call" "(*go/types.Checker).objDecl$2"
"(reflect.Value).Call" "(*go/types.Checker).objDecl$3"
"(reflect.Value).Call" "(*go/types.Checker).collectObjects$1"
"(reflect.Value).Call" "(*internal/godebug.Setting).Value$1"
"(reflect.Value).Call" "runtime.casgstatus$1"
"(reflect.Value).Call" "runtime.osyield"
"(reflect.Value).Call" "runtime.nanotime_trampoline"
"(reflect.Value).Call" "runtime.cgoCheckTypedBlock$1"
"(reflect.Value).Call" "runtime.sweepone$1"
"(reflect.Value).Call" "runtime.gcResetMarkState$1"
"(reflect.Value).Call" "runtime.gosched_m"
"(reflect.Value).Call" "flag.isZeroValue$1"
"(reflect.Value).Call" "flag.sortFlags$1"
"(reflect.Value).Call" "unicode.ToLower"
"(reflect.Value).Call" "go/types.coreString$1"
"(reflect.Value).Call" "golang.org/x/tools/internal/pkgbits.fmtFrames$1"
"(reflect.Value).Call" "go/types.computeInterfaceTypeSet$2$1"
"(reflect.Value).Call" "regexp/syntax.parse$1"
"(reflect.Value).Call" "regexp.makeOnePass$1"
"(reflect.Value).Call" "runtime.finalizercommit"
"(reflect.Value).Call" "syscall.libc_sysctl_trampoline"
"(reflect.Value).Call" "os.chmod$1"
"(reflect.Value).Call" "go/parser.ParseFile$1"
"(reflect.Value).Call" "(*golang.org/x/sync/errgroup.Group).Go$1"
"(reflect.Value).Call" "context.WithCancel$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).createDriverResponse$2"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1"
"(reflect.Value).Call" "(*regexp.Regexp).FindAll$1"
"(reflect.Value).Call" "(*regexp.Regexp).FindAllIndex$1"
"(reflect.Value).Call" "(*regexp.Regexp).FindAllString$1"
"(reflect.Value).Call" "(*regexp.Regexp).FindAllStringIndex$1"
"(reflect.Value).Call" "(*regexp.Regexp).FindAllStringSubmatch$1"
"(reflect.Value).Call" "(*regexp.Regexp).FindAllStringSubmatchIndex$1"
"(reflect.Value).Call" "(*regexp.Regexp).FindAllSubmatch$1"
"(reflect.Value).Call" "(*regexp.Regexp).FindAllSubmatchIndex$1"
"(reflect.Value).Call" "(*regexp.Regexp).ReplaceAll$1"
"(reflect.Value).Call" "(*regexp.Regexp).ReplaceAllFunc$1"
"(reflect.Value).Call" "(*regexp.Regexp).ReplaceAllLiteral$1"
"(reflect.Value).Call" "(*regexp.Regexp).ReplaceAllLiteralString$1"
"(reflect.Value).Call" "(*regexp.Regexp).ReplaceAllString$1"
"(reflect.Value).Call" "(*regexp.Regexp).ReplaceAllStringFunc$1"
"(reflect.Value).Call" "(*go/types.Checker).validCycle$1"
"(reflect.Value).Call" "golang.org/x/tools/internal/aliases.aliasesDefault$1"
"(reflect.Value).Call" "(*go/types.Checker).constDecl$1"
"(reflect.Value).Call" "(*go/types.Checker).typeDecl$1"
"(reflect.Value).Call" "(*go/types.Checker).collectMethods$1"
"(reflect.Value).Call" "(*go/types.Checker).funcDecl$1"
"(reflect.Value).Call" "(*go/types.subster).typ$2"
"(reflect.Value).Call" "(*go/types.subster).typ$3"
"(reflect.Value).Call" "(*go/types.subster).typ$1"
"(reflect.Value).Call" "go/types.dependencyGraph$1"
"(reflect.Value).Call" "go/token.searchLineInfos$1"
"(reflect.Value).Call" "(*go/types.typeWriter).signature$1"
"(reflect.Value).Call" "(*encoding/json.encodeState).marshal$1"
"(reflect.Value).Call" "runtime.cgocall"
"(reflect.Value).Call" "runtime.asmcgocall"
"(reflect.Value).Call" "runtime.exit_trampoline"
"(reflect.Value).Call" "runtime.wbBufFlush$1"
"(reflect.Value).Call" "(*runtime.sweepLocked).sweep$1"
"(reflect.Value).Call" "(*runtime.sweepLocked).sweep$2"
"(reflect.Value).Call" "runtime.gcBgMarkWorker$1"
"(reflect.Value).Call" "runtime.gcBgMarkWorker$2"
"(reflect.Value).Call" "runtime.mspinning"
"(reflect.Value).Call" "reflect.ArrayOf$1"
"(reflect.Value).Call" "reflect.embeddedIfaceMethStub"
"(reflect.Value).Call" "reflect.StructOf$1"
"(reflect.Value).Call" "reflect.StructOf$2"
"(reflect.Value).Call" "(*internal/godebug.Setting).register"
"(reflect.Value).Call" "(*go/types.Checker).cycleError$1"
"(reflect.Value).Call" "crypto/md5.New"
"(reflect.Value).Call" "runtime.persistentalloc$1"
"(reflect.Value).Call" "(*runtime.itabTableType).add"
"(reflect.Value).Call" "(*log/slog.handleState).appendValue$1"
"(reflect.Value).Call" "(*go/parser.parser).init$1"
"(reflect.Value).Call" "(*go/parser.parser).parseImportSpec"
"(reflect.Value).Call" "(*go/parser.parser).error"
"(reflect.Value).Call" "os/exec.CommandContext$1"
"(reflect.Value).Call" "(*golang.org/x/sync/errgroup.Group).Go$1$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).getGoVersion$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).invokeGo$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.loader).loadRecursive$1$1"
"(reflect.Value).Call" "(*go/types.Checker).collectTypeParams$1"
"(reflect.Value).Call" "(*go/types.Checker).funcType$1"
"(reflect.Value).Call" "(*go/types.Checker).funcType$2"
"(reflect.Value).Call" "(*go/types.Checker).instance$1"
"(reflect.Value).Call" "(*go/types.StdSizes).Alignof"
"(reflect.Value).Call" "go/types.RelativeTo$1"
"(reflect.Value).Call" "encoding/json.stateBeginValue"
"(reflect.Value).Call" "runtime.usleep_trampoline"
"(reflect.Value).Call" "runtime.doRecordGoroutineProfile$1"
"(reflect.Value).Call" "runtime.schedtrace$1"
"(reflect.Value).Call" "runtime.tracebackothers$1"
"(reflect.Value).Call" "runtime.pthread_mutex_init_trampoline"
"(reflect.Value).Call" "runtime.pthread_cond_init_trampoline"
"(reflect.Value).Call" "runtime.pthread_mutex_lock_trampoline"
"(reflect.Value).Call" "runtime.pthread_mutex_unlock_trampoline"
"(reflect.Value).Call" "runtime.pthread_cond_wait_trampoline"
"(reflect.Value).Call" "runtime.pthread_cond_timedwait_relative_np_trampoline"
"(reflect.Value).Call" "runtime._LostContendedRuntimeLock"
"(reflect.Value).Call" "(*runtime.mLockProfile).captureStack$1"
"(reflect.Value).Call" "runtime.pthread_cond_signal_trampoline"
"(reflect.Value).Call" "runtime.tracefree$1"
"(reflect.Value).Call" "(*runtime.mheap).freeSpan$1"
"(reflect.Value).Call" "runtime.goyield_m"
"(reflect.Value).Call" "runtime.gcMarkDone$1"
"(reflect.Value).Call" "runtime.gcMarkDone$2"
"(reflect.Value).Call" "runtime.gcMarkDone$3"
"(reflect.Value).Call" "runtime.gcMarkDone$4"
"(reflect.Value).Call" "runtime.entersyscallblock$1"
"(reflect.Value).Call" "runtime.entersyscallblock$2"
"(reflect.Value).Call" "runtime.entersyscallblock_handoff"
"(reflect.Value).Call" "runtime.exitsyscall$1"
"(reflect.Value).Call" "runtime.exitsyscall$2"
"(reflect.Value).Call" "runtime.exitsyscall0"
"(reflect.Value).Call" "runtime.cgoCheckPtrWrite$1"
"(reflect.Value).Call" "internal/reflectlite.Swapper$1"
"(reflect.Value).Call" "internal/reflectlite.Swapper$2"
"(reflect.Value).Call" "internal/reflectlite.Swapper$9"
"(reflect.Value).Call" "internal/reflectlite.Swapper$3"
"(reflect.Value).Call" "internal/reflectlite.Swapper$4"
"(reflect.Value).Call" "internal/reflectlite.Swapper$5"
"(reflect.Value).Call" "internal/reflectlite.Swapper$6"
"(reflect.Value).Call" "internal/reflectlite.Swapper$7"
"(reflect.Value).Call" "internal/reflectlite.Swapper$8"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3$1"
"(reflect.Value).Call" "go/ast.fprint$1"
"(reflect.Value).Call" "(*internal/lazyregexp.Regexp).build"
"(reflect.Value).Call" "regexp.mergeRuneSets$1"
"(reflect.Value).Call" "regexp.mergeRuneSets$2"
"(reflect.Value).Call" "runtime.unreachableMethod"
"(reflect.Value).Call" "runtime.heapSetType$1"
"(reflect.Value).Call" "runtime.tracealloc$1"
"(reflect.Value).Call" "syscall.libc_chmod_trampoline"
"(reflect.Value).Call" "runtime.tracebackHexdump$1"
"(reflect.Value).Call" "(*go/types.StdSizes).Sizeof"
"(reflect.Value).Call" "(*go/parser.parser).parseValueSpec"
"(reflect.Value).Call" "(*go/parser.parser).parseTypeSpec"
"(reflect.Value).Call" "os/exec.Command$1"
"(reflect.Value).Call" "(*os/exec.Cmd).Start$1"
"(reflect.Value).Call" "(*os/exec.Cmd).Start$2"
"(reflect.Value).Call" "(*context.cancelCtx).propagateCancel$1"
"(reflect.Value).Call" "(*context.cancelCtx).propagateCancel$2"
"(reflect.Value).Call" "golang.org/x/tools/go/packages.jsonFlag$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$2"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$3"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$4"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$5"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$6"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$7"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).writeOverlays$8"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).determineRootDirs$2"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.loader).loadPackage$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.loader).loadPackage$2"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.loader).loadPackage$3"
"(reflect.Value).Call" "(*go/types.Checker).rawExpr$1"
"(reflect.Value).Call" "(*go/types.Checker).validVarType$1"
"(reflect.Value).Call" "(*go/types.Checker).typInternal$1"
"(reflect.Value).Call" "(*go/types.Checker).typInternal$2"
"(reflect.Value).Call" "(*go/types.Checker).funcBody$1"
"(reflect.Value).Call" "encoding/json.invalidValueEncoder"
"(reflect.Value).Call" "encoding/json.stateBeginStringOrEmpty"
"(reflect.Value).Call" "encoding/json.stateBeginValueOrEmpty"
"(reflect.Value).Call" "encoding/json.stateInString"
"(reflect.Value).Call" "encoding/json.stateNeg"
"(reflect.Value).Call" "encoding/json.state0"
"(reflect.Value).Call" "encoding/json.stateT"
"(reflect.Value).Call" "encoding/json.stateF"
"(reflect.Value).Call" "encoding/json.stateN"
"(reflect.Value).Call" "encoding/json.state1"
"(reflect.Value).Call" "runtime.stopTheWorld$1"
"(reflect.Value).Call" "runtime.startTheWorld$1"
"(reflect.Value).Call" "runtime.checkdead$1"
"(reflect.Value).Call" "runtime.wirep$1"
"(reflect.Value).Call" "runtime.wirep$2"
"(reflect.Value).Call" "runtime.kevent_trampoline"
"(reflect.Value).Call" "runtime.read_trampoline"
"(reflect.Value).Call" "runtime.runqputbatch$1"
"(reflect.Value).Call" "runtime.traceback1$1"
"(reflect.Value).Call" "runtime.slicebytetostringtmp"
"(reflect.Value).Call" "runtime.raise_trampoline"
"(reflect.Value).Call" "runtime.sighandler"
"(reflect.Value).Call" "runtime.cgoSigtramp"
"(reflect.Value).Call" "runtime.sigtramp"
"(reflect.Value).Call" "runtime.forEachP$1"
"(reflect.Value).Call" "runtime.gcMarkTermination$1"
"(reflect.Value).Call" "runtime.gcMarkTermination$2"
"(reflect.Value).Call" "runtime.gcControllerCommit"
"(reflect.Value).Call" "runtime.gcMarkTermination$3"
"(reflect.Value).Call" "runtime.freeStackSpans"
"(reflect.Value).Call" "runtime.gcMarkTermination$4"
"(reflect.Value).Call" "runtime.gcMarkTermination$5"
"(reflect.Value).Call" "runtime.exitsyscallfast$1"
"(reflect.Value).Call" "runtime.allocm$1"
"(reflect.Value).Call" "runtime.mstart"
"(reflect.Value).Call" "runtime.getempty$1"
"(reflect.Value).Call" "(*runtime.p).destroy$1"
"(reflect.Value).Call" "(*sync/atomic.Uint64).Load"
"(reflect.Value).Call" "runtime.gcAssistAlloc$1"
"(reflect.Value).Call" "(*runtime.mheap).alloc$1"
"(reflect.Value).Call" "runtime.mProf_Malloc$1"
"(reflect.Value).Call" "runtime.goschedguarded_m"
"(reflect.Value).Call" "log/slog.appendEscapedJSONString$1"
"(reflect.Value).Call" "log/slog.appendEscapedJSONString$2"
"(reflect.Value).Call" "runtime.Stack$1"
"(reflect.Value).Call" "(*os/exec.Cmd).childStdin$1"
"(reflect.Value).Call" "(*os/exec.Cmd).awaitGoroutines$1"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gocommand.Runner).initialize$1"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gocommand.Runner).runConcurrent$1"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$1"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gocommand.Runner).runPiped$2"
"(reflect.Value).Call" "encoding/json.stateEndTop"
"(reflect.Value).Call" "encoding/json.stateEndValue"
"(reflect.Value).Call" "encoding/json.stateBeginString"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.golistState).getEnv$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.loader).loadFromExportData$1"
"(reflect.Value).Call" "(*golang.org/x/tools/go/packages.loader).parseFiles$1"
"(reflect.Value).Call" "(*go/types.Checker).implicitTypeAndValue$1"
"(reflect.Value).Call" "(*go/types.operand).assignableTo$1"
"(reflect.Value).Call" "(*go/types.operand).assignableTo$2"
"(reflect.Value).Call" "(*go/types.operand).assignableTo$3"
"(reflect.Value).Call" "(*go/types.operand).assignableTo$4"
"(reflect.Value).Call" "(*go/types.Checker).exprInternal$1"
"(reflect.Value).Call" "(*go/types.Checker).exprInternal$2"
"(reflect.Value).Call" "(*go/types.Checker).instantiatedType$1"
"(reflect.Value).Call" "(*go/types.Checker).instantiatedType$2"
"(reflect.Value).Call" "(*go/types.Checker).structType$1"
"(reflect.Value).Call" "(*go/types.Checker).structType$2"
"(reflect.Value).Call" "(*go/types.Checker).structType$3"
"(reflect.Value).Call" "(*go/types.Checker).interfaceType$1"
"(reflect.Value).Call" "(*go/types.Checker).interfaceType$2"
"(reflect.Value).Call" "(*go/types.Checker).usage$1"
"(reflect.Value).Call" "encoding/json.typeEncoder$1"
"(reflect.Value).Call" "encoding/json.stateInStringEsc"
"(reflect.Value).Call" "encoding/json.stateDot"
"(reflect.Value).Call" "encoding/json.stateE"
"(reflect.Value).Call" "encoding/json.stateTr"
"(reflect.Value).Call" "encoding/json.stateFa"
"(reflect.Value).Call" "encoding/json.stateNu"
"(reflect.Value).Call" "encoding/json.stateError"
"(reflect.Value).Call" "runtime.reentersyscall$1"
"(reflect.Value).Call" "runtime.reentersyscall$2"
"(reflect.Value).Call" "runtime.entersyscall_sysmon"
"(reflect.Value).Call" "runtime.runSafePointFn"
"(reflect.Value).Call" "runtime.entersyscall_gcwait"
"(reflect.Value).Call" "(*runtime.traceMap).put$1"
"(reflect.Value).Call" "runtime.fatal$1"
"(reflect.Value).Call" "runtime.runtimer"
"(reflect.Value).Call" "runtime.write_trampoline"
"(reflect.Value).Call" "(runtime.traceWriter).refill$1"
"(reflect.Value).Call" "runtime.printCgoTraceback$1"
"(reflect.Value).Call" "runtime.mmap_trampoline"
"(reflect.Value).Call" "runtime.sigprocmask_trampoline"
"(reflect.Value).Call" "runtime.sigaction_trampoline"
"(reflect.Value).Call" "runtime.pollWork"
"(reflect.Value).Call" "runtime.pollFractionalWorkerExit"
"(reflect.Value).Call" "runtime.gcMarkTermination$4$1"
"(reflect.Value).Call" "(*runtime.mspan).setUserArenaChunkToFault$1"
"(reflect.Value).Call" "runtime.exitsyscallfast_reacquired$1"
"(reflect.Value).Call" "(*runtime.traceStringTable).put$1"
"(reflect.Value).Call" "(*runtime.rwmutex).rlock$1"
"(reflect.Value).Call" "runtime.traceThreadDestroy$1"
"(reflect.Value).Call" "runtime.malg$1"
"(reflect.Value).Call" "runtime.newosproc$1"
"(reflect.Value).Call" "runtime.allocmcache$1"
"(reflect.Value).Call" "runtime.freemcache$1"
"(reflect.Value).Call" "(*os/exec.Cmd).writerDescriptor$1"
"(reflect.Value).Call" "time.sendTime"
"(reflect.Value).Call" "golang.org/x/tools/internal/event/core.ExportPair$1"
"(reflect.Value).Call" "golang.org/x/tools/internal/event/core.ExportPair$2"
"(reflect.Value).Call" "os.Mkdir$1"
"(reflect.Value).Call" "go/types.hasNil$1"
"(reflect.Value).Call" "go/types.Identical"
"(reflect.Value).Call" "(*go/types.Checker).implements$1"
"(reflect.Value).Call" "(*go/types.Checker).implements$2"
"(reflect.Value).Call" "go/types.coreType$1"
"(reflect.Value).Call" "(*go/types.Checker).indexExpr$1"
"(reflect.Value).Call" "go/types.NewMethodSet$1"
"(reflect.Value).Call" "(*go/types.MethodSet).Lookup$1"
"(reflect.Value).Call" "go/types.representableConst$1"
"(reflect.Value).Call" "go/types.parseUnion$1"
"(reflect.Value).Call" "(*go/types.Checker).stmt$1"
"(reflect.Value).Call" "(*go/types.Checker).blockBranches$1"
"(reflect.Value).Call" "(*go/types.Checker).blockBranches$2"
"(reflect.Value).Call" "(*go/types.Checker).blockBranches$3"
"(reflect.Value).Call" "(*go/types.Checker).blockBranches$4"
"(reflect.Value).Call" "encoding/json.addrMarshalerEncoder"
"(reflect.Value).Call" "encoding/json.marshalerEncoder"
"(reflect.Value).Call" "encoding/json.addrTextMarshalerEncoder"
"(reflect.Value).Call" "encoding/json.textMarshalerEncoder"
"(reflect.Value).Call" "encoding/json.boolEncoder"
"(reflect.Value).Call" "encoding/json.intEncoder"
"(reflect.Value).Call" "encoding/json.uintEncoder"
"(reflect.Value).Call" "encoding/json.stringEncoder"
"(reflect.Value).Call" "encoding/json.interfaceEncoder"
"(reflect.Value).Call" "encoding/json.unsupportedTypeEncoder"
"(reflect.Value).Call" "encoding/json.stateInStringEscU"
"(reflect.Value).Call" "encoding/json.stateDot0"
"(reflect.Value).Call" "encoding/json.stateESign"
"(reflect.Value).Call" "encoding/json.stateTru"
"(reflect.Value).Call" "encoding/json.stateFal"
"(reflect.Value).Call" "encoding/json.stateNul"
"(reflect.Value).Call" "runtime.traceback2$1"
"(reflect.Value).Call" "runtime._VDSO"
"(reflect.Value).Call" "runtime._ExternalCode"
"(reflect.Value).Call" "runtime._GC"
"(reflect.Value).Call" "runtime._System"
"(reflect.Value).Call" "runtime.sigpanic"
"(reflect.Value).Call" "runtime.raiseproc_trampoline"
"(reflect.Value).Call" "runtime.markrootFreeGStacks"
"(reflect.Value).Call" "runtime.markroot$1"
"(reflect.Value).Call" "runtime.walltime_trampoline"
"(reflect.Value).Call" "runtime.pthread_attr_init_trampoline"
"(reflect.Value).Call" "runtime.pthread_attr_getstacksize_trampoline"
"(reflect.Value).Call" "runtime.pthread_attr_setdetachstate_trampoline"
"(reflect.Value).Call" "runtime.mstart_stub"
"(reflect.Value).Call" "(*runtime.mheap).allocSpan$1"
"(reflect.Value).Call" "go/build/constraint.parseExpr$1"
"(reflect.Value).Call" "go/build/constraint.andVersion"
"(reflect.Value).Call" "go/build/constraint.orVersion"
"(reflect.Value).Call" "(*go/parser.parser).parsePrimaryExpr$1"
"(reflect.Value).Call" "(*go/parser.parser).parseBinaryExpr$1"
"(reflect.Value).Call" "(*go/parser.parser).parseParameterList$1"
"(reflect.Value).Call" "(*os.Process).Release"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gocommand.Invocation).run$1"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gocommand.Invocation).run$2"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gocommand.Invocation).run$3"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gocommand.Invocation).run$4"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gocommand.Invocation).run$5"
"(reflect.Value).Call" "os.Remove$1"
"(reflect.Value).Call" "os.Remove$2"
"(reflect.Value).Call" "golang.org/x/tools/internal/gcimporter.UImportData$1"
"(reflect.Value).Call" "(*go/types.Checker).infer$1"
"(reflect.Value).Call" "(*go/types.Checker).infer$2"
"(reflect.Value).Call" "(*go/types.Checker).infer$3"
"(reflect.Value).Call" "(*go/types.Checker).infer$4"
"(reflect.Value).Call" "(*go/types.Checker).instantiateSignature$1"
"(reflect.Value).Call" "(*go/types.Checker).instantiateSignature$2"
"(reflect.Value).Call" "(*go/types.Checker).builtin$1"
"(reflect.Value).Call" "(*go/types.Checker).builtin$3"
"(reflect.Value).Call" "(*go/types.Checker).builtin$2"
"(reflect.Value).Call" "(*go/types.Checker).builtin$4"
"(reflect.Value).Call" "(*go/types.Checker).builtin$6"
"(reflect.Value).Call" "(*go/types.Checker).builtin$7"
"(reflect.Value).Call" "(*go/types.Checker).builtin$8"
"(reflect.Value).Call" "(*go/types.Checker).conversion$1"
"(reflect.Value).Call" "(*go/types.Checker).conversion$2"
"(reflect.Value).Call" "(*go/types.Checker).genericExprList$1"
"(reflect.Value).Call" "syscall.libc_ptrace_trampoline"
"(reflect.Value).Call" "(*go/types.gcSizes).Sizeof"
"(reflect.Value).Call" "(*go/types.Checker).declStmt$1"
"(reflect.Value).Call" "(*go/types.StdSizes).Offsetsof"
"(reflect.Value).Call" "(*go/types.Checker).rangeStmt$2"
"(reflect.Value).Call" "(encoding/json.condAddrEncoder).encode"
"(reflect.Value).Call" "(encoding/json.structEncoder).encode"
"(reflect.Value).Call" "(encoding/json.mapEncoder).encode"
"(reflect.Value).Call" "(encoding/json.sliceEncoder).encode"
"(reflect.Value).Call" "encoding/json.encodeByteSlice"
"(reflect.Value).Call" "(encoding/json.arrayEncoder).encode"
"(reflect.Value).Call" "(encoding/json.ptrEncoder).encode"
"(reflect.Value).Call" "encoding/json.stateInStringEscU1"
"(reflect.Value).Call" "encoding/json.stateE0"
"(reflect.Value).Call" "encoding/json.stateFals"
"(reflect.Value).Call" "runtime.printArgs$1"
"(reflect.Value).Call" "runtime.printArgs$2"
"(reflect.Value).Call" "runtime.printArgs$3"
"(reflect.Value).Call" "runtime.gcMarkRootCheck$1"
"(reflect.Value).Call" "runtime.freeSomeWbufs$1"
"(reflect.Value).Call" "runtime.pthread_kill_trampoline"
"(reflect.Value).Call" "runtime.mlock_trampoline"
"(reflect.Value).Call" "runtime.pthread_create_trampoline"
"(reflect.Value).Call" "(*runtime.pageAlloc).find$1"
"(reflect.Value).Call" "(*runtime.pageAlloc).scavenge$1"
"(reflect.Value).Call" "syscall.libc_pipe_trampoline"
"(reflect.Value).Call" "syscall.libc_kill_trampoline"
"(reflect.Value).Call" "syscall.libc_wait4_trampoline"
"(reflect.Value).Call" "encoding/json.typeFields$1"
"(reflect.Value).Call" "golang.org/x/tools/internal/gocommand.runCmdContext$1"
"(reflect.Value).Call" "golang.org/x/tools/internal/gocommand.runCmdContext$2"
"(reflect.Value).Call" "golang.org/x/tools/internal/gocommand.runCmdContext$3"
"(reflect.Value).Call" "golang.org/x/tools/internal/gocommand.runCmdContext$4"
"(reflect.Value).Call" "syscall.libc_mkdir_trampoline"
"(reflect.Value).Call" "os.removeAllFrom$1"
"(reflect.Value).Call" "os.removeAllFrom$2"
"(reflect.Value).Call" "os.removeAllFrom$3"
"(reflect.Value).Call" "golang.org/x/tools/internal/gcimporter.GetPackagesFromMap$1"
"(reflect.Value).Call" "golang.org/x/tools/internal/gcimporter.iimportCommon$1"
"(reflect.Value).Call" "(*go/types.Checker).qualifier"
"(reflect.Value).Call" "math/big.ratTok"
"(reflect.Value).Call" "go/types.coreTerm$1"
"(reflect.Value).Call" "(*go/types.Checker).applyTypeFunc$1"
"(reflect.Value).Call" "go/types.hasVarSize$1"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gcimporter.reader).typeParamNames$1"
"(reflect.Value).Call" "(*go/types.gcSizes).Alignof"
"(reflect.Value).Call" "(*go/types.operand).convertibleTo$1"
"(reflect.Value).Call" "(*go/types.operand).convertibleTo$2"
"(reflect.Value).Call" "(*go/types.operand).convertibleTo$3"
"(reflect.Value).Call" "(*go/types.operand).convertibleTo$4"
"(reflect.Value).Call" "(*go/types.tpWalker).isParameterized$1"
"(reflect.Value).Call" "(*go/types.tpWalker).isParameterized$2"
"(reflect.Value).Call" "(*go/types.Checker).incomparableCause$1"
"(reflect.Value).Call" "go/ast.NotNilFilter"
"(reflect.Value).Call" "(*go/types.monoGraph).assign$1"
"(reflect.Value).Call" "(*go/types.monoGraph).assign$2"
"(reflect.Value).Call" "encoding/json.stateInStringEscU12"
"(reflect.Value).Call" "runtime.kqueue_trampoline"
"(reflect.Value).Call" "runtime._LostExternalCode"
"(reflect.Value).Call" "runtime._LostSIGPROFDuringAtomic64"
"(reflect.Value).Call" "syscall.libc_fork_trampoline"
"(reflect.Value).Call" "syscall.libc_setsid_trampoline"
"(reflect.Value).Call" "syscall.libc_setpgid_trampoline"
"(reflect.Value).Call" "syscall.libc_getpid_trampoline"
"(reflect.Value).Call" "syscall.libc_ioctl_trampoline"
"(reflect.Value).Call" "syscall.libc_chroot_trampoline"
"(reflect.Value).Call" "syscall.libc_setgroups_trampoline"
"(reflect.Value).Call" "syscall.libc_setgid_trampoline"
"(reflect.Value).Call" "syscall.libc_setuid_trampoline"
"(reflect.Value).Call" "syscall.libc_chdir_trampoline"
"(reflect.Value).Call" "syscall.libc_exit_trampoline"
"(reflect.Value).Call" "syscall.libc_unlink_trampoline"
"(reflect.Value).Call" "syscall.libc_rmdir_trampoline"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gcimporter.fakeFileSet).setLines$1"
"(reflect.Value).Call" "golang.org/x/tools/internal/gcimporter.predeclared$1"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gcimporter.iimporter).doDecl$1"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$1"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$2"
"(reflect.Value).Call" "(*golang.org/x/tools/internal/gcimporter.pkgReader).objIdx$3"
"(reflect.Value).Call" "(*math/big.Float).sqrtInverse$1"
"(reflect.Value).Call" "(*go/types.unifier).nify$1"
"(reflect.Value).Call" "math/big.three$1"
"(reflect.Value).Call" "(*go/types.gcSizes).Offsetsof"
"(reflect.Value).Call" "(*go/types.operand).convertibleTo$2$1"
"(reflect.Value).Call" "(*go/types.monoGraph).assign$2$1"
"(reflect.Value).Call" "(encoding/json.mapEncoder).encode$1"
"(reflect.Value).Call" "encoding/json.stateInStringEscU123"
"(reflect.Value).Call" "runtime.fcntl_trampoline"
"(reflect.Value).Call" "runtime.pipe_trampoline"
"(reflect.Value).Call" "runtime.scanConservative$1"
"(reflect.Value).Call" "runtime.munmap_trampoline"
"(reflect.Value).Call" "(*runtime.pageAlloc).sysGrow$1"
"(reflect.Value).Call" "(*runtime.pageAlloc).sysGrow$2"
"(reflect.Value).Call" "(*runtime.pageAlloc).sysGrow$3"
"(reflect.Value).Call" "runtime.madvise_trampoline"
"(reflect.Value).Call" "(*go/parser.parser).safePos$1"
"(*regexp.Regexp).FindAllStringSubmatchIndex" "(*regexp.Regexp).allMatches"
"(*sync/atomic.Uint32).CompareAndSwap" "sync/atomic.CompareAndSwapUint32"
"(*runtime/internal/atomic.Uint32).LoadAcquire" "runtime/internal/atomic.LoadAcq"
"(*regexp.Regexp).FindAllStringIndex" "(*regexp.Regexp).allMatches"
"(go/constant.complexVal).ExactString" "(go/constant.intVal).ExactString"
"(go/constant.complexVal).ExactString" "(go/constant.int64Val).ExactString"
"(go/constant.unknownVal).ExactString" "(go/constant.unknownVal).String"
"(go/constant.complexVal).ExactString" "(go/constant.unknownVal).ExactString"
"(go/constant.complexVal).ExactString" "(go/constant.unknownVal).ExactString"
"(go/constant.complexVal).ExactString" "(go/constant.int64Val).ExactString"
"(go/constant.complexVal).ExactString" "(go/constant.boolVal).ExactString"
"(go/constant.complexVal).ExactString" "(go/constant.complexVal).ExactString"
"(*go/constant.stringVal).ExactString" "(*go/constant.stringVal).string"
"(*go/constant.stringVal).ExactString" "strconv.Quote"
"(go/constant.complexVal).ExactString" "(*go/constant.stringVal).ExactString"
"(go/constant.complexVal).ExactString" "(go/constant.intVal).ExactString"
"(go/constant.complexVal).ExactString" "fmt.Sprintf"
"(go/constant.complexVal).ExactString" "(go/constant.ratVal).ExactString"
"(go/constant.complexVal).ExactString" "(go/constant.ratVal).ExactString"
"(go/constant.complexVal).ExactString" "(go/constant.floatVal).ExactString"
"(go/constant.complexVal).ExactString" "(go/constant.boolVal).ExactString"
"(go/constant.complexVal).ExactString" "(*go/constant.stringVal).ExactString"
"(go/constant.complexVal).ExactString" "(go/constant.complexVal).ExactString"
"(go/constant.complexVal).ExactString" "(go/constant.floatVal).ExactString"
"(internal/abi.Name).IsBlank" "(internal/abi.Name).ReadVarint"
"(internal/abi.Name).IsBlank" "(internal/abi.Name).Data"
"(*go/token.FileSet).Iterate" "(*sync.RWMutex).RLock"
"(*go/token.FileSet).Iterate" "(*sync.RWMutex).RUnlock"
"(reflect.Value).SetCap" "(reflect.flag).mustBeAssignable"
"(reflect.Value).SetCap" "(reflect.flag).mustBe"
"(time.Time).Unix" "(*time.Time).unixSec"
"(*os.File).SetReadDeadline" "(*os.File).setReadDeadline"
"(*sync.RWMutex).TryRLock" "internal/race.Disable"
"(*sync.RWMutex).TryRLock" "(*sync/atomic.Int32).Load"
"(*sync.RWMutex).TryRLock" "(*sync/atomic.Int32).CompareAndSwap"
"(*sync.RWMutex).TryRLock" "internal/race.Enable"
"(*sync.RWMutex).TryRLock" "internal/race.Enable"
"(*sync.RWMutex).TryRLock" "internal/race.Acquire"
"(*go/ast.Ident).IsExported" "go/token.IsExported"
"(*math/big.Int).DivMod" "(*math/big.Int).Set"
"(*math/big.Int).DivMod" "(*math/big.Int).QuoRem"
"(*math/big.Int).DivMod" "math/big.alias"
"(*math/big.Int).DivMod" "(*math/big.Int).Add"
"(*math/big.Int).DivMod" "(*math/big.Int).Sub"
"(*math/big.Int).DivMod" "(*math/big.Int).Sub"
"(*math/big.Int).DivMod" "(*math/big.Int).Add"
"(*sync/atomic.Pointer[internal/godebug.value]).Swap[internal/godebug.value]" "sync/atomic.SwapPointer"
"(*internal/poll.FD).WriteTo" "(*internal/poll.FD).writeLock"
"(*internal/poll.FD).WriteTo" "(*internal/poll.FD).writeUnlock"
"(*internal/poll.FD).WriteTo" "(*internal/poll.pollDesc).prepareWrite"
"syscall.Sendto" "(*syscall.SockaddrInet6).sockaddr"
"syscall.Sendto" "(*syscall.SockaddrInet4).sockaddr"
"syscall.Sendto" "syscall.sendto"
"syscall.Sendto" "(*syscall.SockaddrDatalink).sockaddr"
"syscall.Sendto" "(*syscall.SockaddrUnix).sockaddr"
"(*internal/poll.FD).WriteTo" "syscall.Sendto"
"(*internal/poll.FD).WriteTo" "(*internal/poll.pollDesc).waitWrite"
"(*internal/poll.FD).WriteTo" "(*internal/poll.pollDesc).pollable"
"(*os.File).Chown" "(*os.File).checkValid"
"(*os.File).Chown" "(*internal/poll.FD).Fchown"
"(*os.File).Chown" "(*os.File).wrapErr"
"(*regexp.Regexp).Match" "(*regexp.Regexp).doMatch"
"(*math/rand.lockedSource).seedPos" "(*sync.Mutex).Lock"
"(*math/rand.lockedSource).seedPos" "(*math/rand.lockedSource).seed"
"(*math/rand.lockedSource).seedPos" "(*sync.Mutex).Unlock"
"(time.Time).ZoneBounds" "(*time.Time).unixSec"
"(time.Time).ZoneBounds" "(*time.Location).lookup"
"(time.Time).ZoneBounds" "time.unixTime"
"(time.Time).ZoneBounds" "(*time.Time).setLoc"
"(time.Time).ZoneBounds" "time.unixTime"
"(time.Time).ZoneBounds" "(*time.Time).setLoc"
"(*go/token.File).AddLineInfo" "(*go/token.File).AddLineColumnInfo"
"(*math/rand.Rand).Float64" "(*math/rand.Rand).Int63"
"(*runtime/internal/atomic.Uint32).CompareAndSwapRelease" "runtime/internal/atomic.CasRel"
"(*os.File).ReadDir" "(*os.File).readdir"
"(*os.ProcessState).SystemTime" "(*os.ProcessState).systemTime"
"(*golang.org/x/tools/internal/event/keys.String).Get" "(golang.org/x/tools/internal/event/label.Label).Valid"
"(*golang.org/x/tools/internal/event/keys.String).Get" "(*golang.org/x/tools/internal/event/keys.String).From"
"(*golang.org/x/tools/internal/event/keys.String).Get" "(golang.org/x/tools/internal/event/core.Event).Find"
"(reflect.Value).OverflowComplex" "(reflect.flag).kind"
"(reflect.Value).OverflowComplex" "reflect.overflowFloat32"
"(reflect.Value).OverflowComplex" "reflect.overflowFloat32"
"(reflect.Value).OverflowComplex" "(reflect.flag).kind"
"(internal/reflectlite.rtype).NumIn" "(*internal/abi.Type).FuncType"
"(*math/rand.Rand).ExpFloat64" "(*math/rand.Rand).Uint32"
"(*math/rand.Rand).ExpFloat64" "(*math/rand.Rand).Float64"
"(*math/rand.Rand).ExpFloat64" "math.Log"
"(*math/rand.Rand).ExpFloat64" "(*math/rand.Rand).Float64"
"(*math/rand.Rand).ExpFloat64" "math.Exp"
"(*crypto/md5.digest).Sum" "(*crypto/md5.digest).checkSum"
"(*os.fileStat).IsDir" "(*os.fileStat).Mode"
"(*os.fileStat).IsDir" "(io/fs.FileMode).IsDir"
"(*runtime/internal/atomic.Uintptr).LoadAcquire" "runtime/internal/atomic.LoadAcquintptr"
"(*log/slog/internal/buffer.Buffer).Reset" "(*log/slog/internal/buffer.Buffer).SetLen"
"(*os.ProcessState).Exited" "(*os.ProcessState).exited"
"(*os/exec.Cmd).Environ" "(*os/exec.Cmd).environ"
"(*bufio.Reader).ReadString" "(*bufio.Reader).collectFragments"
"(*bufio.Reader).ReadString" "(*strings.Builder).Grow"
"(*bufio.Reader).ReadString" "(*strings.Builder).Write"
"(*bufio.Reader).ReadString" "(*strings.Builder).Write"
"(*bufio.Reader).ReadString" "(*strings.Builder).String"
"(*runtime/internal/atomic.Pointer[runtime._defer]).Load[runtime._defer]" "(*runtime/internal/atomic.UnsafePointer).Load"
"(*regexp.Regexp).ReplaceAllLiteral" "(*regexp.Regexp).replaceAll"
"(*internal/poll.FD).RawRead" "(*internal/poll.FD).readLock"
"(*internal/poll.FD).RawRead" "(*internal/poll.FD).readUnlock"
"(*internal/poll.FD).RawRead" "(*internal/poll.pollDesc).prepareRead"
"(*internal/poll.FD).RawRead" "(*internal/poll.pollDesc).waitRead"
"(*internal/poll.FD).SetsockoptInt" "(*internal/poll.FD).incref"
"(*internal/poll.FD).SetsockoptInt" "(*internal/poll.FD).decref"
"syscall.SetsockoptInt" "syscall.setsockopt"
"(*internal/poll.FD).SetsockoptInt" "syscall.SetsockoptInt"
"(*regexp.Regexp).Split" "(*regexp.Regexp).FindAllStringIndex"
"(time.Time).GobEncode" "(time.Time).MarshalBinary"
"(*sync/atomic.Value).CompareAndSwap" "sync/atomic.LoadPointer"
"(*sync/atomic.Value).CompareAndSwap" "sync/atomic.runtime_procPin"
"(*sync/atomic.Value).CompareAndSwap" "sync/atomic.CompareAndSwapPointer"
"(*sync/atomic.Value).CompareAndSwap" "sync/atomic.runtime_procUnpin"
"(*sync/atomic.Value).CompareAndSwap" "sync/atomic.StorePointer"
"(*sync/atomic.Value).CompareAndSwap" "sync/atomic.StorePointer"
"(*sync/atomic.Value).CompareAndSwap" "sync/atomic.runtime_procUnpin"
"(*sync/atomic.Value).CompareAndSwap" "sync/atomic.LoadPointer"
"(*sync/atomic.Value).CompareAndSwap" "sync/atomic.CompareAndSwapPointer"
"(internal/reflectlite.rtype).AssignableTo" "(internal/reflectlite.rtype).common"
"(internal/reflectlite.rtype).AssignableTo" "internal/reflectlite.implements"
"(internal/reflectlite.rtype).AssignableTo" "(internal/reflectlite.rtype).common"
"(internal/reflectlite.rtype).AssignableTo" "internal/reflectlite.directlyAssignable"
"(reflect.Value).FieldByNameFunc" "(reflect.Value).typ"
"(reflect.Value).FieldByNameFunc" "reflect.toRType"
"(*reflect.rtype).FieldByNameFunc" "(*reflect.rtype).Kind"
"(*reflect.rtype).FieldByNameFunc" "(*reflect.rtype).String"
"(*reflect.rtype).FieldByNameFunc" "(*reflect.structType).FieldByNameFunc"
"(reflect.Value).FieldByNameFunc" "(*reflect.rtype).FieldByNameFunc"
"(reflect.Value).FieldByNameFunc" "(reflect.Value).FieldByIndex"
"(*sync/atomic.Int32).Swap" "sync/atomic.SwapInt32"
"(*sync/atomic.Value).Swap" "sync/atomic.LoadPointer"
"(*sync/atomic.Value).Swap" "sync/atomic.runtime_procPin"
"(*sync/atomic.Value).Swap" "sync/atomic.CompareAndSwapPointer"
"(*sync/atomic.Value).Swap" "sync/atomic.runtime_procUnpin"
"(*sync/atomic.Value).Swap" "sync/atomic.StorePointer"
"(*sync/atomic.Value).Swap" "sync/atomic.StorePointer"
"(*sync/atomic.Value).Swap" "sync/atomic.runtime_procUnpin"
"(*sync/atomic.Value).Swap" "sync/atomic.SwapPointer"
"internal/bisect.printFileLine" "internal/bisect.AppendMarker"
"internal/bisect.printFileLine" "internal/bisect.appendFileLine"
"internal/bisect.printFileLine" "(*internal/poll.FD).Write"
"internal/bisect.printFileLine" "(io.discard).Write"
"internal/bisect.printFileLine" "(*internal/godebug.runtimeStderr).Write"
"internal/bisect.printFileLine" "(*fmt.pp).Write"
"internal/bisect.printFileLine" "(*os.File).Write"
"internal/bisect.printFileLine" "(*crypto/md5.digest).Write"
"internal/bisect.printFileLine" "(*os/exec.prefixSuffixSaver).Write"
"internal/bisect.printFileLine" "(*strings.Builder).Write"
"internal/bisect.printFileLine" "(*log/slog/internal/buffer.Buffer).Write"
"internal/bisect.printFileLine" "(*go/ast.printer).Write"
"internal/bisect.printFileLine" "(*bytes.Buffer).Write"
"(*os.rawConn).Read" "(*os.File).checkValid"
"(*os.rawConn).Read" "(*internal/poll.FD).RawRead"
"(*os.rawConn).Read" "runtime.KeepAlive"
"(*internal/abi.Type).MapType" "(*internal/abi.Type).Kind"
"(*os.rawConn).Control" "(*os.File).checkValid"
"(*os.rawConn).Control" "(*internal/poll.FD).RawControl"
"(*os.rawConn).Control" "runtime.KeepAlive"
"(*go/token.File).SetLinesForContent" "(*sync.Mutex).Lock"
"(*go/token.File).SetLinesForContent" "(*sync.Mutex).Unlock"
"(*crypto/md5.digest).UnmarshalBinary" "errors.New"
"(*crypto/md5.digest).UnmarshalBinary" "errors.New"
"(*crypto/md5.digest).UnmarshalBinary" "crypto/md5.consumeUint32"
"(*crypto/md5.digest).UnmarshalBinary" "crypto/md5.consumeUint32"
"(*crypto/md5.digest).UnmarshalBinary" "crypto/md5.consumeUint32"
"(*crypto/md5.digest).UnmarshalBinary" "crypto/md5.consumeUint32"
"(*crypto/md5.digest).UnmarshalBinary" "crypto/md5.consumeUint64"
"(*math/big.Float).Sqrt" "(*math/big.Float).validate"
"(*math/big.Float).Sqrt" "(*math/big.Float).Sign"
"(*math/big.Float).Sqrt" "(*math/big.Float).MantExp"
"(*math/big.Float).sqrtInverse" "math/big.newFloat"
"(*math/big.Float).sqrtInverse" "math/big.newFloat"
"(*math/big.Float).sqrtInverse" "math/big.three"
"(*math/big.Float).sqrtInverse" "(*math/big.Float).Float64"
"(*math/big.Float).sqrtInverse" "math/big.newFloat"
"(*math/big.Float).sqrtInverse" "math.Sqrt"
"(*math/big.Float).sqrtInverse" "(*math/big.Float).SetFloat64"
"(*math/big.Float).sqrtInverse" "(*math/big.Float).sqrtInverse$1"
"(*math/big.Float).sqrtInverse" "(*math/big.Float).Mul"
"(*math/big.Float).Sqrt" "(*math/big.Float).sqrtInverse"
"(*math/big.Float).Sqrt" "(*math/big.Float).SetMantExp"
"(time.Time).Minute" "(time.Time).abs"
"(*reflect.rtype).Out" "(*reflect.rtype).Kind"
"(*reflect.rtype).Out" "(*reflect.rtype).String"
"(*reflect.rtype).Out" "(*internal/abi.FuncType).OutSlice"
"(*reflect.rtype).Out" "reflect.toType"
"(time.Time).Day" "(time.Time).date"
"(*regexp.Regexp).FindAllString" "(*regexp.Regexp).allMatches"
"(*bytes.Buffer).ReadBytes" "(*bytes.Buffer).readSlice"
"(time.Time).IsDST" "(time.Time).Unix"
"(time.Time).IsDST" "(*time.Location).lookup"
"(*math/big.Int).Rand" "(math/big.nat).bitLen"
"(*math/big.Int).Rand" "(math/big.nat).random"
"(*math/big.Int).GobDecode" "fmt.Errorf"
"(*math/big.Int).GobDecode" "(math/big.nat).setBytes"
"(internal/reflectlite.rtype).NumOut" "(*internal/abi.Type).FuncType"
"(internal/reflectlite.rtype).NumOut" "(*internal/abi.FuncType).NumOut"
"(*regexp.Regexp).Find" "(*regexp.Regexp).doExecute"
"(*internal/poll.FD).ReadMsgInet6" "(*internal/poll.FD).readLock"
"(*internal/poll.FD).ReadMsgInet6" "(*internal/poll.FD).readUnlock"
"(*internal/poll.FD).ReadMsgInet6" "(*internal/poll.pollDesc).prepareRead"
"(*internal/poll.FD).ReadMsgInet6" "internal/syscall/unix.RecvmsgInet6"
"(*internal/poll.FD).ReadMsgInet6" "(*internal/poll.FD).eofError"
"(*internal/poll.FD).ReadMsgInet6" "(*internal/poll.pollDesc).waitRead"
"(*internal/poll.FD).ReadMsgInet6" "(*internal/poll.pollDesc).pollable"
"(*internal/bisect.Matcher).fileLine" "internal/bisect.Hash"
"(*internal/bisect.Matcher).fileLine" "(*internal/bisect.Matcher).ShouldPrint"
"(*internal/bisect.Matcher).fileLine" "(*internal/bisect.Matcher).MarkerOnly"
"(*internal/bisect.Matcher).fileLine" "(*internal/bisect.Matcher).ShouldEnable"
"(*internal/bisect.Matcher).fileLine" "internal/bisect.PrintMarker"
"(*internal/bisect.Matcher).fileLine" "internal/bisect.printFileLine"
"(*internal/bisect.Matcher).FileLine" "(*internal/bisect.Matcher).fileLine"
"(*math/big.Float).Int64" "(*math/big.Float).validate"
"(*math/big.Float).Int64" "math/big.makeAcc"
"(*math/big.Float).Int64" "math/big.msb64"
"(*math/big.Float).Int64" "(*math/big.Float).MinPrec"
"(*math/big.Float).Int64" "(*math/big.Float).MinPrec"
"(*os.File).WriteAt" "(*os.File).checkValid"
"(*os.File).WriteAt" "errors.New"
"(*internal/poll.FD).Pwrite" "(*internal/poll.FD).incref"
"(*internal/poll.FD).Pwrite" "(*internal/poll.FD).decref"
"syscall.Pwrite" "internal/race.ReleaseMerge"
"syscall.Pwrite" "syscall.pwrite"
"syscall.Pwrite" "internal/race.ReadRange"
"syscall.Pwrite" "syscall.msanRead"
"syscall.Pwrite" "syscall.asanRead"
"(*internal/poll.FD).Pwrite" "syscall.Pwrite"
"(*os.File).pwrite" "(*internal/poll.FD).Pwrite"
"(*os.File).pwrite" "runtime.KeepAlive"
"(*os.File).WriteAt" "(*os.File).pwrite"
"(*os.File).WriteAt" "(*os.File).wrapErr"
"(*go/types.Info).TypeOf" "(*go/types.Info).ObjectOf"
"(*go/types.Info).TypeOf" "(*go/types.object).Type"
"(*bufio.Reader).Reset" "(*bufio.Reader).reset"
"(internal/reflectlite.rtype).Key" "(*internal/abi.Type).MapType"
"(internal/reflectlite.rtype).Key" "internal/reflectlite.toType"
"(*internal/poll.FD).Accept" "(*internal/poll.FD).readLock"
"(*internal/poll.FD).Accept" "(*internal/poll.FD).readUnlock"
"(*internal/poll.FD).Accept" "(*internal/poll.pollDesc).prepareRead"
"(*internal/poll.FD).Accept" "internal/poll.accept"
"(*internal/poll.FD).Accept" "(*internal/poll.pollDesc).pollable"
"(*internal/poll.FD).Accept" "(*internal/poll.pollDesc).waitRead"
"(*regexp.Regexp).Expand" "(*regexp.Regexp).expand"
"(*regexp.Regexp).FindAllSubmatch" "(*regexp.Regexp).allMatches"
"(*sync/atomic.Bool).Swap" "sync/atomic.b32"
"(*sync/atomic.Bool).Swap" "sync/atomic.SwapUint32"
"syscall.SetsockoptIPMreq" "syscall.setsockopt"
"(time.Time).After" "(*time.Time).sec"
"(time.Time).After" "(*time.Time).sec"
"(time.Time).After" "(*time.Time).nsec"
"(time.Time).After" "(*time.Time).nsec"
"(syscall.Errno).Temporary" "(syscall.Errno).Timeout"
"(*math/big.Rat).SetUint64" "(*math/big.Int).SetUint64"
"(*math/big.Rat).SetUint64" "(math/big.nat).setWord"
"(*os/exec.Cmd).CombinedOutput" "errors.New"
"(*os/exec.Cmd).CombinedOutput" "errors.New"
"(*os/exec.Cmd).CombinedOutput" "(*os/exec.Cmd).Run"
"(*os/exec.Cmd).CombinedOutput" "(*bytes.Buffer).Bytes"
"(*internal/poll.FD).Writev" "(*internal/poll.FD).writeLock"
"(*internal/poll.FD).Writev" "(*internal/poll.FD).writeUnlock"
"(*internal/poll.FD).Writev" "(*internal/poll.pollDesc).prepareWrite"
"(*internal/poll.FD).Writev" "internal/poll.newIovecWithBase"
"(*internal/poll.FD).Writev" "(*syscall.Iovec).SetLen"
"(*internal/poll.FD).Writev" "(*syscall.Iovec).SetLen"
"(*internal/poll.FD).Writev" "internal/poll.writev"
"(*internal/poll.FD).Writev" "internal/poll.consume"
"(*internal/poll.FD).Writev" "(*internal/poll.pollDesc).waitWrite"
"(*internal/poll.FD).Writev" "internal/poll.init$1"
"(*runtime/internal/atomic.Uint8).And" "runtime/internal/atomic.And8"
"(*math/rand.Rand).Seed" "(*math/rand.lockedSource).seedPos"
"(*math/rand.Rand).Seed" "(*math/rand.Rand).Seed"
"(*math/rand.Rand).Seed" "(*math/rand.rngSource).Seed"
"(*math/rand.Rand).Seed" "(*math/rand.runtimeSource).Seed"
"(*regexp.Regexp).ReplaceAllLiteralString" "(*regexp.Regexp).replaceAll"
"(reflect.Value).Slice3" "(reflect.flag).kind"
"(reflect.Value).Slice3" "(reflect.Value).typ"
"(reflect.Value).Slice3" "(reflect.Value).typ"
"(reflect.Value).Slice3" "(reflect.flag).kind"
"(reflect.Value).Slice3" "(*internal/abi.Type).Size"
"(reflect.Value).Slice3" "reflect.arrayAt"
"(reflect.Value).Slice3" "(reflect.flag).ro"
"(reflect.Value).Slice3" "(*internal/abi.Type).Common"
"(time.Time).UnixMilli" "(*time.Time).unixSec"
"(time.Time).UnixMilli" "(*time.Time).nsec"
"(*reflect.MapIter).Reset" "(reflect.Value).IsValid"
"(*reflect.MapIter).Reset" "(reflect.flag).mustBe"
"(reflect.Value).Comparable" "(reflect.Value).Kind"
"(reflect.Value).Comparable" "(reflect.Value).Type"
"(reflect.Value).Comparable" "(reflect.Value).Elem"
"(reflect.Value).Comparable" "(reflect.Value).Comparable"
"(reflect.Value).Comparable" "(reflect.Value).Type"
"(reflect.Value).Comparable" "(reflect.Value).Type"
"(reflect.Value).Comparable" "(reflect.Value).Index"
"(reflect.Value).Comparable" "(reflect.Value).Comparable"
"(reflect.Value).Comparable" "(reflect.Value).Type"
"(reflect.Value).Comparable" "(reflect.Value).NumField"
"(reflect.Value).Comparable" "(reflect.Value).Field"
"(reflect.Value).Comparable" "(reflect.Value).Comparable"
"(reflect.Value).Comparable" "(*reflect.rtype).Elem"
"(reflect.Value).Comparable" "(*reflect.rtype).Kind"
"(reflect.Value).Comparable" "(*reflect.rtype).Comparable"
"(reflect.Value).Comparable" "(*reflect.rtype).Len"
"(reflect.Value).Comparable" "(*reflect.rtype).Comparable"
"(*os/exec.Cmd).Output" "errors.New"
"(*os/exec.Cmd).Output" "(*os/exec.Cmd).Run"
"(*os/exec.Cmd).Output" "(*bytes.Buffer).Bytes"
"(*os/exec.Cmd).Output" "(*os/exec.prefixSuffixSaver).Bytes"
"(internal/reflectlite.rtype).Len" "(*internal/abi.Type).ArrayType"
"(*math/big.Rat).Inv" "(*math/big.Rat).Set"
"(*reflect.rtype).ChanDir" "(*reflect.rtype).Kind"
"(*reflect.rtype).ChanDir" "(*reflect.rtype).String"
"(*regexp/syntax.Inst).MatchEmptyWidth" "regexp/syntax.IsWordChar"
"(*regexp/syntax.Inst).MatchEmptyWidth" "regexp/syntax.IsWordChar"
"(*regexp/syntax.Inst).MatchEmptyWidth" "regexp/syntax.IsWordChar"
"(*regexp/syntax.Inst).MatchEmptyWidth" "regexp/syntax.IsWordChar"
"(*golang.org/x/tools/internal/event/keys.Error).Get" "(golang.org/x/tools/internal/event/core.Event).Find"
"(*golang.org/x/tools/internal/event/keys.Error).Get" "(*golang.org/x/tools/internal/event/keys.Error).From"
"(*golang.org/x/tools/internal/event/keys.Error).Get" "(golang.org/x/tools/internal/event/label.Label).Valid"
"(reflect.Value).FieldByIndexErr" "(reflect.Value).Field"
"(reflect.Value).FieldByIndexErr" "(reflect.flag).mustBe"
"(reflect.Value).FieldByIndexErr" "(reflect.Value).Kind"
"(reflect.Value).FieldByIndexErr" "(reflect.Value).Field"
"(reflect.Value).FieldByIndexErr" "(reflect.Value).IsNil"
"(reflect.Value).FieldByIndexErr" "(reflect.Value).typ"
"(reflect.Value).FieldByIndexErr" "(*internal/abi.Type).Elem"
"(reflect.Value).FieldByIndexErr" "(*internal/abi.Type).Kind"
"(reflect.Value).FieldByIndexErr" "(reflect.Value).typ"
"(reflect.Value).FieldByIndexErr" "(*internal/abi.Type).Elem"
"(reflect.Value).FieldByIndexErr" "reflect.nameFor"
"(reflect.Value).FieldByIndexErr" "errors.New"
"(reflect.Value).FieldByIndexErr" "(reflect.Value).Elem"
"(*os.File).Readdir" "(*os.File).readdir"
"(time.Time).Local" "(*time.Time).setLoc"
"(internal/reflectlite.rtype).Out" "(*internal/abi.Type).FuncType"
"(internal/reflectlite.rtype).Out" "(*internal/abi.FuncType).OutSlice"
"(internal/reflectlite.rtype).Out" "internal/reflectlite.toType"
"(time.Time).Second" "(time.Time).abs"
"(*math/big.Int).SetBits" "(math/big.nat).norm"
"(time.Time).AddDate" "(time.Time).Date"
"(time.Time).AddDate" "(time.Time).Clock"
"(time.Time).AddDate" "(*time.Time).nsec"
"(time.Time).AddDate" "(time.Time).Location"
"(time.Time).AddDate" "time.Date"
"(reflect.Value).Equal" "(reflect.Value).Kind"
"(reflect.Value).Equal" "(reflect.Value).Elem"
"(reflect.Value).Equal" "(reflect.Value).Kind"
"(reflect.Value).Equal" "(reflect.Value).Elem"
"(reflect.Value).Equal" "(reflect.Value).IsValid"
"(reflect.Value).Equal" "(reflect.Value).IsValid"
"(reflect.Value).Equal" "(reflect.Value).IsValid"
"(reflect.Value).Equal" "(reflect.Value).Kind"
"(reflect.Value).Equal" "(reflect.Value).Kind"
"(reflect.Value).Equal" "(reflect.Value).IsValid"
"(reflect.Value).Equal" "(reflect.Value).Kind"
"(reflect.Value).Equal" "(reflect.Value).Type"
"(reflect.Value).Equal" "(reflect.Value).Type"
"(reflect.Value).Equal" "(reflect.Value).Type"
"(reflect.Value).Equal" "(reflect.Value).Bool"
"(reflect.Value).Equal" "(reflect.Value).Bool"
"(reflect.Value).Equal" "(reflect.Value).Int"
"(reflect.Value).Equal" "(reflect.Value).Int"
"(reflect.Value).Equal" "(reflect.Value).Uint"
"(reflect.Value).Equal" "(reflect.Value).Uint"
"(reflect.Value).Equal" "(reflect.Value).Float"
"(reflect.Value).Equal" "(reflect.Value).Float"
"(reflect.Value).Equal" "(reflect.Value).Complex"
"(reflect.Value).Equal" "(reflect.Value).Complex"
"(reflect.Value).Equal" "(reflect.Value).String"
"(reflect.Value).Equal" "(reflect.Value).String"
"(reflect.Value).Equal" "(reflect.Value).Pointer"
"(reflect.Value).Equal" "(reflect.Value).Pointer"
"(reflect.Value).Equal" "(reflect.Value).Len"
"(reflect.Value).Equal" "(reflect.Value).NumField"
"(reflect.Value).Equal" "(reflect.Value).Type"
"(reflect.Value).Equal" "(reflect.Value).Index"
"(reflect.Value).Equal" "(reflect.Value).Index"
"(reflect.Value).Equal" "(reflect.Value).Equal"
"(reflect.Value).Equal" "(reflect.Value).Field"
"(reflect.Value).Equal" "(reflect.Value).Field"
"(reflect.Value).Equal" "(reflect.Value).Equal"
"(reflect.Value).Equal" "(*reflect.rtype).String"
"(reflect.Value).Equal" "(*reflect.rtype).Elem"
"(reflect.Value).Equal" "(*reflect.rtype).Comparable"
"(*sync.RWMutex).TryLock" "internal/race.Disable"
"(*sync.RWMutex).TryLock" "(*sync.Mutex).TryLock"
"(*sync.RWMutex).TryLock" "(*sync/atomic.Int32).CompareAndSwap"
"(*sync.RWMutex).TryLock" "internal/race.Enable"
"(*sync.RWMutex).TryLock" "(*sync.Mutex).Unlock"
"(*sync.RWMutex).TryLock" "internal/race.Enable"
"(*sync.RWMutex).TryLock" "internal/race.Enable"
"(*sync.RWMutex).TryLock" "internal/race.Acquire"
"(*sync.RWMutex).TryLock" "internal/race.Acquire"
"(*regexp.Regexp).FindSubmatch" "(*regexp.Regexp).doExecute"
"(*internal/poll.FD).SetsockoptIPMreq" "(*internal/poll.FD).incref"
"(*internal/poll.FD).SetsockoptIPMreq" "(*internal/poll.FD).decref"
"(*internal/poll.FD).SetsockoptIPMreq" "syscall.SetsockoptIPMreq"
"(*bytes.Buffer).WriteRune" "(*bytes.Buffer).WriteByte"
"(*bytes.Buffer).WriteRune" "(*bytes.Buffer).tryGrowByReslice"
"(*bytes.Buffer).WriteRune" "(*bytes.Buffer).grow"
"(*bytes.Buffer).WriteRune" "unicode/utf8.AppendRune"
"(*math/big.Float).Abs" "(*math/big.Float).Set"
"(*internal/poll.FD).SetsockoptIPv6Mreq" "(*internal/poll.FD).incref"
"(*internal/poll.FD).SetsockoptIPv6Mreq" "(*internal/poll.FD).decref"
"(*internal/poll.FD).SetsockoptIPv6Mreq" "syscall.SetsockoptIPv6Mreq"
"(*internal/poll.FD).SetsockoptLinger" "(*internal/poll.FD).incref"
"(*internal/poll.FD).SetsockoptLinger" "(*internal/poll.FD).decref"
"(*internal/poll.FD).SetsockoptLinger" "syscall.SetsockoptLinger"
"(*math/big.Int).TrailingZeroBits" "(math/big.nat).trailingZeroBits"
"(*bufio.Reader).ReadLine" "(*bufio.Reader).ReadSlice"
"(*regexp.Regexp).FindSubmatchIndex" "(*regexp.Regexp).doExecute"
"(*regexp.Regexp).FindSubmatchIndex" "(*regexp.Regexp).pad"
"(*os.ProcessState).SysUsage" "(*os.ProcessState).sysUsage"
"(*math/big.Int).ModSqrt" "math/big.Jacobi"
"(*math/big.Int).ModSqrt" "(*math/big.Int).SetInt64"
"(*math/big.Int).ModSqrt" "(*math/big.Int).Mod"
"(*math/big.Int).ModSqrt" "(*math/big.Int).Cmp"
"(*math/big.Int).ModSqrt" "(*math/big.Int).modSqrt3Mod4Prime"
"(*math/big.Int).ModSqrt" "(*math/big.Int).modSqrt5Mod8Prime"
"(*math/big.Int).ModSqrt" "(*math/big.Int).modSqrtTonelliShanks"
"(*regexp.Regexp).FindReaderIndex" "(*regexp.Regexp).doExecute"
"(*math/big.Int).Sqrt" "(math/big.nat).sqrt"
"(*regexp.Regexp).FindStringSubmatchIndex" "(*regexp.Regexp).doExecute"
"(*regexp.Regexp).FindStringSubmatchIndex" "(*regexp.Regexp).pad"
"(*math/rand.Rand).Float32" "(*math/rand.Rand).Float64"
"(*internal/poll.FD).WriteToInet4" "(*internal/poll.FD).writeLock"
"(*internal/poll.FD).WriteToInet4" "(*internal/poll.FD).writeUnlock"
"(*internal/poll.FD).WriteToInet4" "(*internal/poll.pollDesc).prepareWrite"
"(*internal/poll.FD).WriteToInet4" "internal/syscall/unix.SendtoInet4"
"(*internal/poll.FD).WriteToInet4" "(*internal/poll.pollDesc).waitWrite"
"(*internal/poll.FD).WriteToInet4" "(*internal/poll.pollDesc).pollable"
"(*math/rand.Rand).NormFloat64" "(*math/rand.Rand).Uint32"
"(*math/rand.Rand).NormFloat64" "math/rand.absInt32"
"(*math/rand.Rand).NormFloat64" "(*math/rand.Rand).Float64"
"(*math/rand.Rand).NormFloat64" "math.Exp"
"(*math/rand.Rand).NormFloat64" "(*math/rand.Rand).Float64"
"(*math/rand.Rand).NormFloat64" "math.Log"
"(*math/rand.Rand).NormFloat64" "(*math/rand.Rand).Float64"
"(*math/rand.Rand).NormFloat64" "math.Log"
"(*reflect.rtype).In" "(*reflect.rtype).Kind"
"(*reflect.rtype).In" "(*reflect.rtype).String"
"(*reflect.rtype).In" "(*internal/abi.FuncType).InSlice"
"(*reflect.rtype).In" "reflect.toType"
"(*runtime/internal/atomic.Uint32).StoreRelease" "runtime/internal/atomic.StoreRel"
"(*runtime/internal/atomic.Pointer[runtime._defer]).CompareAndSwapNoWB[runtime._defer]" "(*runtime/internal/atomic.UnsafePointer).CompareAndSwapNoWB"
"(time.Time).Weekday" "(time.Time).abs"
"(time.Time).Weekday" "time.absWeekday"
"(*internal/poll.FD).ReadMsgInet4" "(*internal/poll.FD).readLock"
"(*internal/poll.FD).ReadMsgInet4" "(*internal/poll.FD).readUnlock"
"(*internal/poll.FD).ReadMsgInet4" "(*internal/poll.pollDesc).prepareRead"
"(*internal/poll.FD).ReadMsgInet4" "internal/syscall/unix.RecvmsgInet4"
"(*internal/poll.FD).ReadMsgInet4" "(*internal/poll.FD).eofError"
"(*internal/poll.FD).ReadMsgInet4" "(*internal/poll.pollDesc).waitRead"
"(*internal/poll.FD).ReadMsgInet4" "(*internal/poll.pollDesc).pollable"
"(*sync.rlocker).Lock" "(*sync.RWMutex).RLock"
